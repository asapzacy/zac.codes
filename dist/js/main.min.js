!function t(e,r,n){function o(s,a){if(!r[s]){if(!e[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var f=r[s]={exports:{}};e[s][0].call(f.exports,function(t){var r=e[s][1][t];return o(r||t)},f,f.exports,t,e,r,n)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(t,e,r){"use strict";function n(){document.querySelector(".js-page__arrow--top").addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)},!1)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],2:[function(t,e,r){"use strict";function n(){var t=function(){var t=document.querySelector(".js-pixels"),e=function(){if(t&&null!==t.textContent){var e=window.innerWidth*window.innerHeight;t.textContent=e.toLocaleString()}};requestAnimationFrame(e)};t(),window.addEventListener("resize",t)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n},{}],3:[function(t,e,r){"use strict";var n=t("./spa");!function(){function t(){r.classList.toggle("menu-open")}function e(e){e.target&&"A"===e.target.nodeName&&(e.preventDefault(),t(),e.target.pathname!==window.location.pathname&&(history.pushState(null,null,e.target.pathname),(0,n.updatePage)()))}var r=document.querySelector("header"),o=document.querySelector(".js-trigger--menu"),i=document.querySelector(".js-menu");(0,n.runNewFunctions)(),o.addEventListener("click",t,!1),i.addEventListener("click",e,!1)}()},{"./spa":5}],4:[function(t,e,r){"use strict";function n(){function t(){var t=this.parentNode,e=t.previousElementSibling;t.style.maxHeight=0,t.classList.toggle("project__details--expanded"),e.classList.toggle("project__expandIcon--expanded")}function e(){this.classList.toggle("project__expandIcon--expanded");var t=this.nextElementSibling,e=t.classList.contains("project__details--expanded");t.classList.toggle("project__details--expanded"),t.style.maxHeight=e?0:t.scrollHeight+"px"}document.querySelector(".js-page__arrow--top").addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)},!1),Array.from(document.querySelectorAll(".js-project")).forEach(function(r){r.querySelector(".project__expandIcon").addEventListener("click",e,!1),r.querySelector(".project__closeIcon").addEventListener("click",t,!1)})}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],5:[function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function o(t){return l[t]?Promise.resolve(l[t]):fetch(t).then(function(e){if(e.ok)return l[t]=e.text(),l[t];console.log("network response was not ok.")}).catch(function(e){return console.log("there has been an error requesting ("+t+"): "+e.message)})}Object.defineProperty(r,"__esModule",{value:!0}),r.updatePage=r.runNewFunctions=void 0;var i=n(t("./landing")),s=n(t("./about")),a=n(t("./projects")),u=t("./utils");t("es6-promise").polyfill(),t("isomorphic-fetch");var c=r.runNewFunctions=function(){var t=window.location.pathname;if("/"===t||"/index.html"===t)(0,i.default)();else if(t.startsWith("/about"))(0,s.default)();else{if(!t.startsWith("/projects"))return;(0,a.default)()}},f=r.updatePage=function(){o(window.location.href).then(function(t){var e=document.createElement("html");e.innerHTML=t;var r=document.querySelector(".page"),n=e.querySelector(".page"),o=e.getElementsByTagName("title")[0].textContent,i=e.getElementsByTagName("meta").description.content;console.log(r),r.parentNode.replaceChild(n,r),document.title=o,document.getElementsByTagName("meta").description.content=i,(0,u.fadeIn)(n),c()})},l={};window.addEventListener("popstate",f)},{"./about":1,"./landing":2,"./projects":4,"./utils":6,"es6-promise":7,"isomorphic-fetch":8}],6:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(t){return t*t*t*t},o=function(t){return 1- --t*t*t*t};r.scrollToTop=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200,r=t.scrollHeight,n=Date.now();!function i(){var s=Date.now(),a=o((s-n)/e);t.scrollTop=a*(0-r)+r,0!==t.scrollTop&&requestAnimationFrame(i)}()},r.fadeIn=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200;t.style.opacity=0;var r=Date.now();!function o(){var i=Date.now(),s=n((i-r)/e);t.style.opacity=s,t.style.opacity>1?t.style.opacity=1:requestAnimationFrame(o)}()},r.fadeOut=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200;t.style.opacity=1;var r=Date.now();!function n(){var i=Date.now(),s=o((i-r)/e);t.style.opacity=1-s,t.style.opacity<0?t.style.opacity=0:requestAnimationFrame(n)}()}},{}],7:[function(t,e,r){(function(n,o){!function(t,n){"object"==typeof r&&void 0!==e?e.exports=n():"function"==typeof define&&define.amd?define(n):t.ES6Promise=n()}(this,function(){"use strict";function e(t){return"function"==typeof t||"object"==typeof t&&null!==t}function r(t){return"function"==typeof t}function i(t){Y=t}function s(t){z=t}function a(){return void 0!==W?function(){W(c)}:u()}function u(){var t=setTimeout;return function(){return t(c,1)}}function c(){for(var t=0;t<G;t+=2)(0,Q[t])(Q[t+1]),Q[t]=void 0,Q[t+1]=void 0;G=0}function f(t,e){var r=arguments,n=this,o=new this.constructor(h);void 0===o[tt]&&L(o);var i=n._state;return i?function(){var t=r[i-1];z(function(){return S(i,o,t,n._result)})}():E(n,o,t,e),o}function l(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var r=new e(h);return _(r,t),r}function h(){}function d(){return new TypeError("You cannot resolve a promise with itself")}function p(){return new TypeError("A promises callback cannot return that same promise.")}function y(t){try{return t.then}catch(t){return ot.error=t,ot}}function m(t,e,r,n){try{t.call(e,r,n)}catch(t){return t}}function v(t,e,r){z(function(t){var n=!1,o=m(r,e,function(r){n||(n=!0,e!==r?_(t,r):T(t,r))},function(e){n||(n=!0,A(t,e))},"Settle: "+(t._label||" unknown promise"));!n&&o&&(n=!0,A(t,o))},t)}function b(t,e){e._state===rt?T(t,e._result):e._state===nt?A(t,e._result):E(e,void 0,function(e){return _(t,e)},function(e){return A(t,e)})}function w(t,e,n){e.constructor===t.constructor&&n===f&&e.constructor.resolve===l?b(t,e):n===ot?(A(t,ot.error),ot.error=null):void 0===n?T(t,e):r(n)?v(t,e,n):T(t,e)}function _(t,r){t===r?A(t,d()):e(r)?w(t,r,y(r)):T(t,r)}function g(t){t._onerror&&t._onerror(t._result),x(t)}function T(t,e){t._state===et&&(t._result=e,t._state=rt,0!==t._subscribers.length&&z(x,t))}function A(t,e){t._state===et&&(t._state=nt,t._result=e,z(g,t))}function E(t,e,r,n){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+rt]=r,o[i+nt]=n,0===i&&t._state&&z(x,t)}function x(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var n=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)n=e[s],o=e[s+r],n?S(r,n,o,i):o(i);t._subscribers.length=0}}function j(){this.error=null}function P(t,e){try{return t(e)}catch(t){return it.error=t,it}}function S(t,e,n,o){var i=r(n),s=void 0,a=void 0,u=void 0,c=void 0;if(i){if(s=P(n,o),s===it?(c=!0,a=s.error,s.error=null):u=!0,e===s)return void A(e,p())}else s=o,u=!0;e._state!==et||(i&&u?_(e,s):c?A(e,a):t===rt?T(e,s):t===nt&&A(e,s))}function B(t,e){try{e(function(e){_(t,e)},function(e){A(t,e)})}catch(e){A(t,e)}}function O(){return st++}function L(t){t[tt]=st++,t._state=void 0,t._result=void 0,t._subscribers=[]}function q(t,e){this._instanceConstructor=t,this.promise=new t(h),this.promise[tt]||L(this.promise),H(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?T(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&T(this.promise,this._result))):A(this.promise,D())}function D(){return new Error("Array Methods must be provided an Array")}function U(t){return new q(this,t).promise}function F(t){var e=this;return new e(H(t)?function(r,n){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(r,n)}:function(t,e){return e(new TypeError("You must pass an array to race."))})}function I(t){var e=new this(h);return A(e,t),e}function C(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function N(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function k(t){this[tt]=O(),this._result=this._state=void 0,this._subscribers=[],h!==t&&("function"!=typeof t&&C(),this instanceof k?B(this,t):N())}function R(){var t=void 0;if(void 0!==o)t=o;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===r&&!e.cast)return}t.Promise=k}var M=void 0,H=M=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},G=0,W=void 0,Y=void 0,z=function(t,e){Q[G]=t,Q[G+1]=e,2===(G+=2)&&(Y?Y(c):Z())},K="undefined"!=typeof window?window:void 0,V=K||{},X=V.MutationObserver||V.WebKitMutationObserver,J="undefined"==typeof self&&void 0!==n&&"[object process]"==={}.toString.call(n),$="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,Q=new Array(1e3),Z=void 0;Z=J?function(){return function(){return n.nextTick(c)}}():X?function(){var t=0,e=new X(c),r=document.createTextNode("");return e.observe(r,{characterData:!0}),function(){r.data=t=++t%2}}():$?function(){var t=new MessageChannel;return t.port1.onmessage=c,function(){return t.port2.postMessage(0)}}():void 0===K&&"function"==typeof t?function(){try{var e=t("vertx");return W=e.runOnLoop||e.runOnContext,a()}catch(t){return u()}}():u();var tt=Math.random().toString(36).substring(16),et=void 0,rt=1,nt=2,ot=new j,it=new j,st=0;return q.prototype._enumerate=function(){for(var t=this.length,e=this._input,r=0;this._state===et&&r<t;r++)this._eachEntry(e[r],r)},q.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===l){var o=y(t);if(o===f&&t._state!==et)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(r===k){var i=new r(h);w(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new r(function(e){return e(t)}),e)}else this._willSettleAt(n(t),e)},q.prototype._settledAt=function(t,e,r){var n=this.promise;n._state===et&&(this._remaining--,t===nt?A(n,r):this._result[e]=r),0===this._remaining&&T(n,this._result)},q.prototype._willSettleAt=function(t,e){var r=this;E(t,void 0,function(t){return r._settledAt(rt,e,t)},function(t){return r._settledAt(nt,e,t)})},k.all=U,k.race=F,k.resolve=l,k.reject=I,k._setScheduler=i,k._setAsap=s,k._asap=z,k.prototype={constructor:k,then:f,catch:function(t){return this.then(null,t)}},k.polyfill=R,k.Promise=k,k})}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:9}],8:[function(t,e,r){t("whatwg-fetch"),e.exports=self.fetch.bind(self)},{"whatwg-fetch":10}],9:[function(t,e,r){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(t){if(l===setTimeout)return setTimeout(t,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(t,0);try{return l(t,0)}catch(e){try{return l.call(null,t,0)}catch(e){return l.call(this,t,0)}}}function s(t){if(h===clearTimeout)return clearTimeout(t);if((h===o||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(t);try{return h(t)}catch(e){try{return h.call(null,t)}catch(e){return h.call(this,t)}}}function a(){m&&p&&(m=!1,p.length?y=p.concat(y):v=-1,y.length&&u())}function u(){if(!m){var t=i(a);m=!0;for(var e=y.length;e;){for(p=y,y=[];++v<e;)p&&p[v].run();v=-1,e=y.length}p=null,m=!1,s(t)}}function c(t,e){this.fun=t,this.array=e}function f(){}var l,h,d=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(t){l=n}try{h="function"==typeof clearTimeout?clearTimeout:o}catch(t){h=o}}();var p,y=[],m=!1,v=-1;d.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];y.push(new c(t,e)),1!==y.length||m||i(u)},c.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=f,d.addListener=f,d.once=f,d.off=f,d.removeListener=f,d.removeAllListeners=f,d.emit=f,d.prependListener=f,d.prependOnceListener=f,d.listeners=function(t){return[]},d.binding=function(t){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(t){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},{}],10:[function(t,e,r){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function r(t){return"string"!=typeof t&&(t=String(t)),t}function n(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return v.iterable&&(e[Symbol.iterator]=function(){return e}),e}function o(t){this.map={},t instanceof o?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function i(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function s(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function a(t){var e=new FileReader,r=s(e);return e.readAsArrayBuffer(t),r}function u(t){var e=new FileReader,r=s(e);return e.readAsText(t),r}function c(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}function f(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function l(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(v.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(v.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(v.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(v.arrayBuffer&&v.blob&&w(t))this._bodyArrayBuffer=f(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!v.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!_(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=f(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):v.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},v.blob&&(this.blob=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?i(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(a)}),this.text=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return u(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(c(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},v.formData&&(this.formData=function(){return this.text().then(p)}),this.json=function(){return this.text().then(JSON.parse)},this}function h(t){var e=t.toUpperCase();return g.indexOf(e)>-1?e:t}function d(t,e){var r=(e=e||{}).body;if(t instanceof d){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new o(t.headers)),this.method=t.method,this.mode=t.mode,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new o(e.headers)),this.method=h(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function p(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}}),e}function y(t){var e=new o;return t.split(/\r?\n/).forEach(function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}}),e}function m(t,e){e||(e={}),this.type="default",this.status="status"in e?e.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new o(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var v={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(v.arrayBuffer)var b=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],w=function(t){return t&&DataView.prototype.isPrototypeOf(t)},_=ArrayBuffer.isView||function(t){return t&&b.indexOf(Object.prototype.toString.call(t))>-1};o.prototype.append=function(t,n){t=e(t),n=r(n);var o=this.map[t];this.map[t]=o?o+","+n:n},o.prototype.delete=function(t){delete this.map[e(t)]},o.prototype.get=function(t){return t=e(t),this.has(t)?this.map[t]:null},o.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},o.prototype.set=function(t,n){this.map[e(t)]=r(n)},o.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},o.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),n(t)},o.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),n(t)},o.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),n(t)},v.iterable&&(o.prototype[Symbol.iterator]=o.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];d.prototype.clone=function(){return new d(this,{body:this._bodyInit})},l.call(d.prototype),l.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new o(this.headers),url:this.url})},m.error=function(){var t=new m(null,{status:0,statusText:""});return t.type="error",t};var T=[301,302,303,307,308];m.redirect=function(t,e){if(-1===T.indexOf(e))throw new RangeError("Invalid status code");return new m(null,{status:e,headers:{location:t}})},t.Headers=o,t.Request=d,t.Response=m,t.fetch=function(t,e){return new Promise(function(r,n){var o=new d(t,e),i=new XMLHttpRequest;i.onload=function(){var t={status:i.status,statusText:i.statusText,headers:y(i.getAllResponseHeaders()||"")};t.url="responseURL"in i?i.responseURL:t.headers.get("X-Request-URL");var e="response"in i?i.response:i.responseText;r(new m(e,t))},i.onerror=function(){n(new TypeError("Network request failed"))},i.ontimeout=function(){n(new TypeError("Network request failed"))},i.open(o.method,o.url,!0),"include"===o.credentials&&(i.withCredentials=!0),"responseType"in i&&v.blob&&(i.responseType="blob"),o.headers.forEach(function(t,e){i.setRequestHeader(e,t)}),i.send(void 0===o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},{}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
