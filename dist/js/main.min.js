!function t(e,n,r){function o(s,a){if(!n[s]){if(!e[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[s]={exports:{}};e[s][0].call(l.exports,function(t){var n=e[s][1][t];return o(n?n:t)},l,l.exports,t,e,n,r)}return n[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(t,e,n){"use strict";function r(){var t=document.querySelector(".js-page__arrow--top");t.addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)},!1)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=r;var o=t("./utils")},{"./utils":6}],2:[function(t,e,n){"use strict";function r(){var t=function(){var t=document.querySelector(".js-pixels"),e=function(){if(t&&null!==t.textContent){var e=window.innerWidth*window.innerHeight;t.textContent=e.toLocaleString()}};requestAnimationFrame(e)};t(),window.addEventListener("resize",t)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=r},{}],3:[function(t,e,n){"use strict";var r=t("./spa");!function(){function t(){n.classList.toggle("menu-open")}function e(e){e.target&&"A"===e.target.nodeName&&(e.preventDefault(),t(),e.target.pathname!==window.location.pathname&&(history.pushState(null,null,e.target.pathname),(0,r.updatePage)()))}var n=document.querySelector("header"),o=document.querySelector(".js-trigger--menu"),i=document.querySelector(".js-menu");(0,r.runNewFunctions)(),o.addEventListener("click",t,!1),i.addEventListener("click",e,!1)}()},{"./spa":5}],4:[function(t,e,n){"use strict";function r(){function t(){var t=this.parentNode,e=t.previousElementSibling;t.style.maxHeight=0,t.classList.toggle("project__details--expanded"),e.classList.toggle("project__expandIcon--expanded")}function e(){this.classList.toggle("project__expandIcon--expanded");var t=this.nextElementSibling,e=t.classList.contains("project__details--expanded");t.classList.toggle("project__details--expanded"),t.style.maxHeight=e?0:t.scrollHeight+"px"}var n=document.querySelector(".js-page__arrow--top");n.addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)},!1);var r=Array.from(document.querySelectorAll(".js-project"));r.forEach(function(n){var r=n.querySelector(".project__expandIcon");r.addEventListener("click",e,!1);var o=n.querySelector(".project__closeIcon");o.addEventListener("click",t,!1)})}Object.defineProperty(n,"__esModule",{value:!0}),n.default=r;var o=t("./utils"),i=t("@nishanths/zoom.js"),s=new Image;s.src="../img/projects/uxscoreboard-preview.png",document.body.appendChild(s),console.log(i.zoom),i.zoom.setup(s)},{"./utils":6,"@nishanths/zoom.js":7}],5:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){return p[t]?Promise.resolve(p[t]):fetch(t).then(function(e){return e.ok?(p[t]=e.text(),p[t]):void console.log("network response was not ok.")}).catch(function(e){return console.log("there has been an error requesting ("+t+"): "+e.message)})}Object.defineProperty(n,"__esModule",{value:!0}),n.updatePage=n.runNewFunctions=void 0;var i=t("./landing"),s=r(i),a=t("./about"),u=r(a),c=t("./projects"),l=r(c),f=t("./utils");t("es6-promise").polyfill(),t("isomorphic-fetch");var d=n.runNewFunctions=function(){var t=window.location.pathname;"/"===t||"/index.html"===t?(0,s.default)():t.startsWith("/about")?(0,u.default)():t.startsWith("/projects")?(0,l.default)():console.log("fix me")},h=n.updatePage=function(){var t=window.location.href;o(t).then(function(t){var e=document.createElement("html");e.innerHTML=t;var n=document.querySelector(".page"),r=e.querySelector(".page"),o=e.getElementsByTagName("title")[0].textContent,i=e.getElementsByTagName("meta").description.content;n.parentNode.replaceChild(r,n),document.title=o,document.getElementsByTagName("meta").description.content=i,(0,f.fadeIn)(r),d()})},p={};window.addEventListener("popstate",h)},{"./about":1,"./landing":2,"./projects":4,"./utils":6,"es6-promise":8,"isomorphic-fetch":9}],6:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(t){return t*t*t*t},o=function(t){return 1- --t*t*t*t};n.scrollToTop=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200,n=t.scrollHeight,r=Date.now(),i=function i(){var s=Date.now(),a=(s-r)/e,u=o(a);t.scrollTop=u*(0-n)+n,0!==t.scrollTop&&requestAnimationFrame(i)};i()},n.fadeIn=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200;t.style.opacity=0;var n=Date.now(),o=function o(){var i=Date.now(),s=(i-n)/e,a=r(s);return t.style.opacity=a,t.style.opacity>1?void(t.style.opacity=1):void requestAnimationFrame(o)};o()},n.fadeOut=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200;t.style.opacity=1;var n=Date.now(),r=function r(){var i=Date.now(),s=(i-n)/e,a=o(s);return t.style.opacity=1-a,t.style.opacity<0?void(t.style.opacity=0):void requestAnimationFrame(r)};r()}},{}],7:[function(t,e,n){!function(){"use strict";function t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var e=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=3)}([function(t,e,n){n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o}),n.d(e,"c",function(){return i}),n.d(e,"d",function(){return s});var r=function(){return document.documentElement.clientWidth},o=function(){return document.documentElement.clientHeight},i=function(t){var e=t.getBoundingClientRect(),n=document.documentElement,r=window;return{top:e.top+r.pageYOffset-n.clientTop,left:e.left+r.pageXOffset-n.clientLeft}},s=function(t,e,n){var r=function t(r){r.target.removeEventListener(e,t),n()};t.addEventListener(e,r)}},function(t,e,n){var r=n(2),o=n(0);n.d(e,"a",function(){return b});var i=null,s=80,a=-1,u=-1,c=function(t){t.addEventListener("click",l)},l=function(t){if(!document.body.classList.contains("zoom-overlay-open"))return t.metaKey||t.ctrlKey?void window.open(t.target.getAttribute("data-original")||t.target.src,"_blank"):void(t.target.width>=n.i(o.a)()-s||(f(!0),i=new r.a(t.target,s),i.zoom(),d()))},f=function(t){null!=i&&(t?i.dispose():i.close(),h(),i=null)},d=function(){document.addEventListener("scroll",p),document.addEventListener("keyup",y),document.addEventListener("touchstart",m),document.addEventListener("click",w,!0)},h=function(){document.removeEventListener("scroll",p),document.removeEventListener("keyup",y),document.removeEventListener("touchstart",m),document.removeEventListener("click",w,!0)},p=function(){a==-1&&(a=window.pageYOffset);var t=Math.abs(a-window.pageYOffset);t>=40&&f()},y=function(t){27==t.keyCode&&f()},m=function(t){var e=t.touches[0];null!=e&&(u=e.pageY,t.target.addEventListener("touchmove",v))},v=function t(e){var n=e.touches[0];null!=n&&Math.abs(n.pageY-u)>10&&(f(),e.target.removeEventListener("touchmove",t))},w=function(){f()},b=Object.create(null);b.setup=c},function(n,r,o){var i=o(0),s=function e(n,r){t(this,e),this.w=n,this.h=r},a=function(){function n(e,r){t(this,n),this.img=e,this.preservedTransform=e.style.transform,this.wrap=null,this.overlay=null,this.offset=r}return e(n,[{key:"forceRepaint",value:function(){this.img.offsetWidth}},{key:"zoom",value:function(){var t=new s(this.img.naturalWidth,this.img.naturalHeight);this.wrap=document.createElement("div"),this.wrap.classList.add("zoom-img-wrap"),this.img.parentNode.insertBefore(this.wrap,this.img),this.wrap.appendChild(this.img),this.img.classList.add("zoom-img"),this.img.setAttribute("data-action","zoom-out"),this.overlay=document.createElement("div"),this.overlay.classList.add("zoom-overlay"),document.body.appendChild(this.overlay),this.forceRepaint();var e=this.calculateScale(t);this.forceRepaint(),this.animate(e),document.body.classList.add("zoom-overlay-open")}},{key:"calculateScale",value:function(t){var e=t.w/this.img.width,n=o.i(i.a)()-this.offset,r=o.i(i.b)()-this.offset,s=t.w/t.h,a=n/r;return t.w<n&&t.h<r?e:s<a?r/t.h*e:n/t.w*e}},{key:"animate",value:function(t){var e=o.i(i.c)(this.img),n=window.pageYOffset,r=o.i(i.a)()/2,s=n+o.i(i.b)()/2,a=e.left+this.img.width/2,u=e.top+this.img.height/2,c=r-a,l=s-u,f=0,d="scale("+t+")",h="translate3d("+c+"px, "+l+"px, "+f+"px)";this.img.style.transform=d,this.wrap.style.transform=h}},{key:"dispose",value:function(){null!=this.wrap&&null!=this.wrap.parentNode&&(this.img.classList.remove("zoom-img"),this.img.setAttribute("data-action","zoom"),this.wrap.parentNode.insertBefore(this.img,this.wrap),this.wrap.parentNode.removeChild(this.wrap),document.body.removeChild(this.overlay),document.body.classList.remove("zoom-overlay-transitioning"))}},{key:"close",value:function(){var t=this;document.body.classList.add("zoom-overlay-transitioning"),this.img.style.transform=this.preservedTransform,0===this.img.style.length&&this.img.removeAttribute("style"),this.wrap.style.transform="none",o.i(i.d)(this.img,"transitionend",function(){t.dispose(),document.body.classList.remove("zoom-overlay-open")})}}]),n}();r.a=a},function(t,e,n){Object.defineProperty(e,"__esModule",{value:!0});var r=n(1);document.addEventListener("DOMContentLoaded",function(){for(var t=document.querySelectorAll("img[data-action='zoom']"),e=0;e<t.length;e++)r.a.setup(t[e])})}])}()},{}],8:[function(t,e,n){(function(r,o){!function(t,r){"object"==typeof n&&"undefined"!=typeof e?e.exports=r():"function"==typeof define&&define.amd?define(r):t.ES6Promise=r()}(this,function(){"use strict";function e(t){return"function"==typeof t||"object"==typeof t&&null!==t}function n(t){return"function"==typeof t}function i(t){V=t}function s(t){J=t}function a(){return function(){return r.nextTick(d)}}function u(){return"undefined"!=typeof X?function(){X(d)}:f()}function c(){var t=0,e=new Z(d),n=document.createTextNode("");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function l(){var t=new MessageChannel;return t.port1.onmessage=d,function(){return t.port2.postMessage(0)}}function f(){var t=setTimeout;return function(){return t(d,1)}}function d(){for(var t=0;t<K;t+=2){var e=nt[t],n=nt[t+1];e(n),nt[t]=void 0,nt[t+1]=void 0}K=0}function h(){try{var e=t,n=e("vertx");return X=n.runOnLoop||n.runOnContext,u()}catch(t){return f()}}function p(t,e){var n=arguments,r=this,o=new this.constructor(m);void 0===o[ot]&&D(o);var i=r._state;return i?!function(){var t=n[i-1];J(function(){return k(i,o,t,r._result)})}():P(r,o,t,e),o}function y(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var n=new e(m);return A(n,t),n}function m(){}function v(){return new TypeError("You cannot resolve a promise with itself")}function w(){return new TypeError("A promises callback cannot return that same promise.")}function b(t){try{return t.then}catch(t){return ut.error=t,ut}}function g(t,e,n,r){try{t.call(e,n,r)}catch(t){return t}}function _(t,e,n){J(function(t){var r=!1,o=g(n,e,function(n){r||(r=!0,e!==n?A(t,n):j(t,n))},function(e){r||(r=!0,L(t,e))},"Settle: "+(t._label||" unknown promise"));!r&&o&&(r=!0,L(t,o))},t)}function E(t,e){e._state===st?j(t,e._result):e._state===at?L(t,e._result):P(e,void 0,function(e){return A(t,e)},function(e){return L(t,e)})}function T(t,e,r){e.constructor===t.constructor&&r===p&&e.constructor.resolve===y?E(t,e):r===ut?L(t,ut.error):void 0===r?j(t,e):n(r)?_(t,e,r):j(t,e)}function A(t,n){t===n?L(t,v()):e(n)?T(t,n,b(n)):j(t,n)}function x(t){t._onerror&&t._onerror(t._result),O(t)}function j(t,e){t._state===it&&(t._result=e,t._state=st,0!==t._subscribers.length&&J(O,t))}function L(t,e){t._state===it&&(t._state=at,t._result=e,J(x,t))}function P(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+st]=n,o[i+at]=r,0===i&&t._state&&J(O,t)}function O(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?k(n,r,o,i):o(i);t._subscribers.length=0}}function S(){this.error=null}function B(t,e){try{return t(e)}catch(t){return ct.error=t,ct}}function k(t,e,r,o){var i=n(r),s=void 0,a=void 0,u=void 0,c=void 0;if(i){if(s=B(r,o),s===ct?(c=!0,a=s.error,s=null):u=!0,e===s)return void L(e,w())}else s=o,u=!0;e._state!==it||(i&&u?A(e,s):c?L(e,a):t===st?j(e,s):t===at&&L(e,s))}function q(t,e){try{e(function(e){A(t,e)},function(e){L(t,e)})}catch(e){L(t,e)}}function C(){return lt++}function D(t){t[ot]=lt++,t._state=void 0,t._result=void 0,t._subscribers=[]}function U(t,e){this._instanceConstructor=t,this.promise=new t(m),this.promise[ot]||D(this.promise),G(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?j(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&j(this.promise,this._result))):L(this.promise,F())}function F(){return new Error("Array Methods must be provided an Array")}function I(t){return new U(this,t).promise}function N(t){var e=this;return new e(G(t)?function(n,r){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(n,r)}:function(t,e){return e(new TypeError("You must pass an array to race."))})}function R(t){var e=this,n=new e(m);return L(n,t),n}function M(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function z(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function H(t){this[ot]=C(),this._result=this._state=void 0,this._subscribers=[],m!==t&&("function"!=typeof t&&M(),this instanceof H?q(this,t):z())}function Y(){var t=void 0;if("undefined"!=typeof o)t=o;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var n=null;try{n=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===n&&!e.cast)return}t.Promise=H}var W=void 0;W=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var G=W,K=0,X=void 0,V=void 0,J=function(t,e){nt[K]=t,nt[K+1]=e,K+=2,2===K&&(V?V(d):rt())},$="undefined"!=typeof window?window:void 0,Q=$||{},Z=Q.MutationObserver||Q.WebKitMutationObserver,tt="undefined"==typeof self&&"undefined"!=typeof r&&"[object process]"==={}.toString.call(r),et="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,nt=new Array(1e3),rt=void 0;rt=tt?a():Z?c():et?l():void 0===$&&"function"==typeof t?h():f();var ot=Math.random().toString(36).substring(16),it=void 0,st=1,at=2,ut=new S,ct=new S,lt=0;return U.prototype._enumerate=function(){for(var t=this.length,e=this._input,n=0;this._state===it&&n<t;n++)this._eachEntry(e[n],n)},U.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,r=n.resolve;if(r===y){var o=b(t);if(o===p&&t._state!==it)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(n===H){var i=new n(m);T(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new n(function(e){return e(t)}),e)}else this._willSettleAt(r(t),e)},U.prototype._settledAt=function(t,e,n){var r=this.promise;r._state===it&&(this._remaining--,t===at?L(r,n):this._result[e]=n),0===this._remaining&&j(r,this._result)},U.prototype._willSettleAt=function(t,e){var n=this;P(t,void 0,function(t){return n._settledAt(st,e,t)},function(t){return n._settledAt(at,e,t)})},H.all=I,H.race=N,H.resolve=y,H.reject=R,H._setScheduler=i,H._setAsap=s,H._asap=J,H.prototype={constructor:H,then:p,catch:function(t){return this.then(null,t)}},H.polyfill=Y,H.Promise=H,H})}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:10}],9:[function(t,e,n){t("whatwg-fetch"),e.exports=self.fetch.bind(self)},{"whatwg-fetch":11}],10:[function(t,e,n){function r(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(t){if(f===setTimeout)return setTimeout(t,0);if((f===r||!f)&&setTimeout)return f=setTimeout,setTimeout(t,0);try{return f(t,0)}catch(e){try{return f.call(null,t,0)}catch(e){return f.call(this,t,0)}}}function s(t){if(d===clearTimeout)return clearTimeout(t);if((d===o||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(t);try{return d(t)}catch(e){try{return d.call(null,t)}catch(e){return d.call(this,t)}}}function a(){m&&p&&(m=!1,p.length?y=p.concat(y):v=-1,y.length&&u())}function u(){if(!m){var t=i(a);m=!0;for(var e=y.length;e;){for(p=y,y=[];++v<e;)p&&p[v].run();v=-1,e=y.length}p=null,m=!1,s(t)}}function c(t,e){this.fun=t,this.array=e}function l(){}var f,d,h=e.exports={};!function(){try{f="function"==typeof setTimeout?setTimeout:r}catch(t){f=r}try{d="function"==typeof clearTimeout?clearTimeout:o}catch(t){d=o}}();var p,y=[],m=!1,v=-1;h.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];y.push(new c(t,e)),1!==y.length||m||i(u)},c.prototype.run=function(){this.fun.apply(null,this.array)},h.title="browser",h.browser=!0,h.env={},h.argv=[],h.version="",h.versions={},h.on=l,h.addListener=l,h.once=l,h.off=l,h.removeListener=l,h.removeAllListeners=l,h.emit=l,h.binding=function(t){throw new Error("process.binding is not supported")},h.cwd=function(){return"/"},h.chdir=function(t){throw new Error("process.chdir is not supported")},h.umask=function(){return 0}},{}],11:[function(t,e,n){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function n(t){return"string"!=typeof t&&(t=String(t)),t}function r(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return v.iterable&&(e[Symbol.iterator]=function(){return e}),e}function o(t){this.map={},t instanceof o?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function i(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function s(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function a(t){var e=new FileReader,n=s(e);return e.readAsArrayBuffer(t),n}function u(t){var e=new FileReader,n=s(e);return e.readAsText(t),n}function c(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}function l(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function f(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(v.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(v.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(v.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(v.arrayBuffer&&v.blob&&b(t))this._bodyArrayBuffer=l(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!v.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!g(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=l(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):v.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},v.blob&&(this.blob=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?i(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(a)}),this.text=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return u(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(c(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},v.formData&&(this.formData=function(){return this.text().then(p)}),this.json=function(){return this.text().then(JSON.parse)},this}function d(t){var e=t.toUpperCase();return _.indexOf(e)>-1?e:t}function h(t,e){e=e||{};var n=e.body;if(t instanceof h){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new o(t.headers)),this.method=t.method,this.mode=t.mode,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new o(e.headers)),this.method=d(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function p(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(o))}}),e}function y(t){var e=new o;return t.split(/\r?\n/).forEach(function(t){var n=t.split(":"),r=n.shift().trim();if(r){var o=n.join(":").trim();e.append(r,o)}}),e}function m(t,e){e||(e={}),this.type="default",this.status="status"in e?e.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new o(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var v={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(v.arrayBuffer)var w=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],b=function(t){return t&&DataView.prototype.isPrototypeOf(t)},g=ArrayBuffer.isView||function(t){return t&&w.indexOf(Object.prototype.toString.call(t))>-1};o.prototype.append=function(t,r){t=e(t),r=n(r);var o=this.map[t];this.map[t]=o?o+","+r:r},o.prototype.delete=function(t){delete this.map[e(t)]},o.prototype.get=function(t){return t=e(t),this.has(t)?this.map[t]:null},o.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},o.prototype.set=function(t,r){this.map[e(t)]=n(r)},o.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},o.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),r(t)},o.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),r(t)},o.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),r(t)},v.iterable&&(o.prototype[Symbol.iterator]=o.prototype.entries);var _=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];h.prototype.clone=function(){return new h(this,{body:this._bodyInit})},f.call(h.prototype),f.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new o(this.headers),url:this.url})},m.error=function(){var t=new m(null,{status:0,statusText:""});return t.type="error",t};var E=[301,302,303,307,308];m.redirect=function(t,e){if(E.indexOf(e)===-1)throw new RangeError("Invalid status code");return new m(null,{status:e,headers:{location:t}})},t.Headers=o,t.Request=h,t.Response=m,t.fetch=function(t,e){return new Promise(function(n,r){var o=new h(t,e),i=new XMLHttpRequest;i.onload=function(){var t={status:i.status,statusText:i.statusText,headers:y(i.getAllResponseHeaders()||"")};t.url="responseURL"in i?i.responseURL:t.headers.get("X-Request-URL");var e="response"in i?i.response:i.responseText;n(new m(e,t))},i.onerror=function(){r(new TypeError("Network request failed"))},i.ontimeout=function(){r(new TypeError("Network request failed"))},i.open(o.method,o.url,!0),"include"===o.credentials&&(i.withCredentials=!0),"responseType"in i&&v.blob&&(i.responseType="blob"),o.headers.forEach(function(t,e){i.setRequestHeader(e,t)}),i.send("undefined"==typeof o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},{}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
