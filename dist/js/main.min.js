!function t(e,r,n){function o(s,a){if(!r[s]){if(!e[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var f=r[s]={exports:{}};e[s][0].call(f.exports,function(t){var r=e[s][1][t];return o(r?r:t)},f,f.exports,t,e,r,n)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(t,e,r){"use strict";function n(){var t=document.querySelector(".js-page__arrow--top");t.addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)},!1)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],2:[function(t,e,r){"use strict";function n(){!function(){var t=function(){var t=document.querySelector(".js-pixels"),e=function(){if(t&&null!==t.textContent){var e=window.innerWidth*window.innerHeight;t.textContent=e.toLocaleString()}};requestAnimationFrame(e)};t(),window.addEventListener("resize",t)}()}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n},{}],3:[function(t,e,r){"use strict";var n=t("./spa");!function(){function t(){r.classList.toggle("menu-open")}function e(e){console.log(e),e.target&&"A"===e.target.nodeName&&(e.preventDefault(),t(),e.target.pathname!==window.location.pathname&&(history.pushState(null,null,e.target.pathname),(0,n.updatePage)()))}var r=document.querySelector("header"),o=document.querySelector(".js-trigger--menu"),i=document.querySelector(".js-menu");(0,n.runNewFunctions)(),o.addEventListener("click",t,!1),i.addEventListener("click",e,!1)}()},{"./spa":5}],4:[function(t,e,r){"use strict";function n(){function t(){var t=this.parentNode,e=t.previousElementSibling;t.style.maxHeight=0,t.classList.toggle("project__details--expanded"),e.classList.toggle("project__expandIcon--expanded")}function e(){this.classList.toggle("project__expandIcon--expanded");var t=this.nextElementSibling,e=t.classList.contains("project__details--expanded");t.classList.toggle("project__details--expanded"),t.style.maxHeight=e?0:t.scrollHeight+"px"}var r=document.querySelector(".js-page__arrow--top");r.addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)},!1);var n=document.querySelectorAll(".js-project");n.forEach(function(t){var r=t.querySelector(".project__expandIcon");r.addEventListener("click",e,!1)}),n.forEach(function(e){var r=e.querySelector(".project__closeIcon");r.addEventListener("click",t,!1)})}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],5:[function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function o(t){return p[t]?Promise.resolve(p[t]):fetch(t).then(function(e){return e.ok?(p[t]=e.text(),p[t]):void console.log("network response was not ok.")}).catch(function(e){return console.log("there has been an error requesting ("+t+"): "+e.message)})}Object.defineProperty(r,"__esModule",{value:!0}),r.updatePage=r.runNewFunctions=void 0;var i=t("./landing"),s=n(i),a=t("./about"),u=n(a),c=t("./projects"),f=n(c),l=t("./utils");t("es6-promise").polyfill(),t("isomorphic-fetch");var h=r.runNewFunctions=function(){var t=window.location.pathname;"/"===t||"/index.html"===t?(0,s.default)():t.startsWith("/about")?(0,u.default)():t.startsWith("/projects")?(0,f.default)():console.log("fix me")},d=r.updatePage=function(){var t=window.location.href;o(t).then(function(t){var e=document.createElement("html");e.innerHTML=t;var r=document.querySelector(".page"),n=e.querySelector(".page"),o=e.getElementsByTagName("title")[0].textContent,i=e.getElementsByTagName("meta").description.content;r.parentNode.replaceChild(n,r),document.title=o,document.getElementsByTagName("meta").description.content=i,(0,l.fadeIn)(n),h()})},p={};window.addEventListener("popstate",d)},{"./about":1,"./landing":2,"./projects":4,"./utils":6,"es6-promise":7,"isomorphic-fetch":8}],6:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(t){return t*t*t*t},o=function(t){return 1- --t*t*t*t};r.scrollToTop=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200,r=t.scrollHeight,n=Date.now(),i=function i(){var s=Date.now(),a=(s-n)/e,u=o(a);t.scrollTop=u*(0-r)+r,0!==t.scrollTop&&requestAnimationFrame(i)};i()},r.fadeIn=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200;t.style.opacity=0;var r=Date.now(),o=function o(){var i=Date.now(),s=(i-r)/e,a=n(s);return t.style.opacity=a,t.style.opacity>1?void(t.style.opacity=1):void requestAnimationFrame(o)};o()},r.fadeOut=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200;t.style.opacity=1;var r=Date.now(),n=function n(){var i=Date.now(),s=(i-r)/e,a=o(s);return t.style.opacity=1-a,t.style.opacity<0?void(t.style.opacity=0):void requestAnimationFrame(n)};n()}},{}],7:[function(t,e,r){(function(n,o){!function(t,n){"object"==typeof r&&"undefined"!=typeof e?e.exports=n():"function"==typeof define&&define.amd?define(n):t.ES6Promise=n()}(this,function(){"use strict";function e(t){return"function"==typeof t||"object"==typeof t&&null!==t}function r(t){return"function"==typeof t}function i(t){X=t}function s(t){J=t}function a(){return function(){return n.nextTick(h)}}function u(){return"undefined"!=typeof V?function(){V(h)}:l()}function c(){var t=0,e=new Z(h),r=document.createTextNode("");return e.observe(r,{characterData:!0}),function(){r.data=t=++t%2}}function f(){var t=new MessageChannel;return t.port1.onmessage=h,function(){return t.port2.postMessage(0)}}function l(){var t=setTimeout;return function(){return t(h,1)}}function h(){for(var t=0;t<K;t+=2){var e=rt[t],r=rt[t+1];e(r),rt[t]=void 0,rt[t+1]=void 0}K=0}function d(){try{var e=t,r=e("vertx");return V=r.runOnLoop||r.runOnContext,u()}catch(t){return l()}}function p(t,e){var r=arguments,n=this,o=new this.constructor(v);void 0===o[ot]&&F(o);var i=n._state;return i?!function(){var t=r[i-1];J(function(){return q(i,o,t,n._result)})}():S(n,o,t,e),o}function y(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var r=new e(v);return E(r,t),r}function v(){}function m(){return new TypeError("You cannot resolve a promise with itself")}function b(){return new TypeError("A promises callback cannot return that same promise.")}function w(t){try{return t.then}catch(t){return ut.error=t,ut}}function _(t,e,r,n){try{t.call(e,r,n)}catch(t){return t}}function g(t,e,r){J(function(t){var n=!1,o=_(r,e,function(r){n||(n=!0,e!==r?E(t,r):j(t,r))},function(e){n||(n=!0,P(t,e))},"Settle: "+(t._label||" unknown promise"));!n&&o&&(n=!0,P(t,o))},t)}function T(t,e){e._state===st?j(t,e._result):e._state===at?P(t,e._result):S(e,void 0,function(e){return E(t,e)},function(e){return P(t,e)})}function A(t,e,n){e.constructor===t.constructor&&n===p&&e.constructor.resolve===y?T(t,e):n===ut?P(t,ut.error):void 0===n?j(t,e):r(n)?g(t,e,n):j(t,e)}function E(t,r){t===r?P(t,m()):e(r)?A(t,r,w(r)):j(t,r)}function x(t){t._onerror&&t._onerror(t._result),B(t)}function j(t,e){t._state===it&&(t._result=e,t._state=st,0!==t._subscribers.length&&J(B,t))}function P(t,e){t._state===it&&(t._state=at,t._result=e,J(x,t))}function S(t,e,r,n){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+st]=r,o[i+at]=n,0===i&&t._state&&J(B,t)}function B(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var n=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)n=e[s],o=e[s+r],n?q(r,n,o,i):o(i);t._subscribers.length=0}}function O(){this.error=null}function L(t,e){try{return t(e)}catch(t){return ct.error=t,ct}}function q(t,e,n,o){var i=r(n),s=void 0,a=void 0,u=void 0,c=void 0;if(i){if(s=L(n,o),s===ct?(c=!0,a=s.error,s=null):u=!0,e===s)return void P(e,b())}else s=o,u=!0;e._state!==it||(i&&u?E(e,s):c?P(e,a):t===st?j(e,s):t===at&&P(e,s))}function D(t,e){try{e(function(e){E(t,e)},function(e){P(t,e)})}catch(e){P(t,e)}}function U(){return ft++}function F(t){t[ot]=ft++,t._state=void 0,t._result=void 0,t._subscribers=[]}function I(t,e){this._instanceConstructor=t,this.promise=new t(v),this.promise[ot]||F(this.promise),z(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?j(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&j(this.promise,this._result))):P(this.promise,C())}function C(){return new Error("Array Methods must be provided an Array")}function N(t){return new I(this,t).promise}function k(t){var e=this;return new e(z(t)?function(r,n){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(r,n)}:function(t,e){return e(new TypeError("You must pass an array to race."))})}function R(t){var e=this,r=new e(v);return P(r,t),r}function M(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function H(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function G(t){this[ot]=U(),this._result=this._state=void 0,this._subscribers=[],v!==t&&("function"!=typeof t&&M(),this instanceof G?D(this,t):H())}function W(){var t=void 0;if("undefined"!=typeof o)t=o;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===r&&!e.cast)return}t.Promise=G}var Y=void 0;Y=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var z=Y,K=0,V=void 0,X=void 0,J=function(t,e){rt[K]=t,rt[K+1]=e,K+=2,2===K&&(X?X(h):nt())},$="undefined"!=typeof window?window:void 0,Q=$||{},Z=Q.MutationObserver||Q.WebKitMutationObserver,tt="undefined"==typeof self&&"undefined"!=typeof n&&"[object process]"==={}.toString.call(n),et="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,rt=new Array(1e3),nt=void 0;nt=tt?a():Z?c():et?f():void 0===$&&"function"==typeof t?d():l();var ot=Math.random().toString(36).substring(16),it=void 0,st=1,at=2,ut=new O,ct=new O,ft=0;return I.prototype._enumerate=function(){for(var t=this.length,e=this._input,r=0;this._state===it&&r<t;r++)this._eachEntry(e[r],r)},I.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===y){var o=w(t);if(o===p&&t._state!==it)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(r===G){var i=new r(v);A(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new r(function(e){return e(t)}),e)}else this._willSettleAt(n(t),e)},I.prototype._settledAt=function(t,e,r){var n=this.promise;n._state===it&&(this._remaining--,t===at?P(n,r):this._result[e]=r),0===this._remaining&&j(n,this._result)},I.prototype._willSettleAt=function(t,e){var r=this;S(t,void 0,function(t){return r._settledAt(st,e,t)},function(t){return r._settledAt(at,e,t)})},G.all=N,G.race=k,G.resolve=y,G.reject=R,G._setScheduler=i,G._setAsap=s,G._asap=J,G.prototype={constructor:G,then:p,catch:function(t){return this.then(null,t)}},G.polyfill=W,G.Promise=G,G})}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:9}],8:[function(t,e,r){t("whatwg-fetch"),e.exports=self.fetch.bind(self)},{"whatwg-fetch":10}],9:[function(t,e,r){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(t){if(l===setTimeout)return setTimeout(t,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(t,0);try{return l(t,0)}catch(e){try{return l.call(null,t,0)}catch(e){return l.call(this,t,0)}}}function s(t){if(h===clearTimeout)return clearTimeout(t);if((h===o||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(t);try{return h(t)}catch(e){try{return h.call(null,t)}catch(e){return h.call(this,t)}}}function a(){v&&p&&(v=!1,p.length?y=p.concat(y):m=-1,y.length&&u())}function u(){if(!v){var t=i(a);v=!0;for(var e=y.length;e;){for(p=y,y=[];++m<e;)p&&p[m].run();m=-1,e=y.length}p=null,v=!1,s(t)}}function c(t,e){this.fun=t,this.array=e}function f(){}var l,h,d=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(t){l=n}try{h="function"==typeof clearTimeout?clearTimeout:o}catch(t){h=o}}();var p,y=[],v=!1,m=-1;d.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];y.push(new c(t,e)),1!==y.length||v||i(u)},c.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=f,d.addListener=f,d.once=f,d.off=f,d.removeListener=f,d.removeAllListeners=f,d.emit=f,d.binding=function(t){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(t){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},{}],10:[function(t,e,r){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function r(t){return"string"!=typeof t&&(t=String(t)),t}function n(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return m.iterable&&(e[Symbol.iterator]=function(){return e}),e}function o(t){this.map={},t instanceof o?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function i(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function s(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function a(t){var e=new FileReader,r=s(e);return e.readAsArrayBuffer(t),r}function u(t){var e=new FileReader,r=s(e);return e.readAsText(t),r}function c(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}function f(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function l(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(m.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(m.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(m.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(m.arrayBuffer&&m.blob&&w(t))this._bodyArrayBuffer=f(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!m.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!_(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=f(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):m.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},m.blob&&(this.blob=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?i(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(a)}),this.text=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return u(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(c(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},m.formData&&(this.formData=function(){return this.text().then(p)}),this.json=function(){return this.text().then(JSON.parse)},this}function h(t){var e=t.toUpperCase();return g.indexOf(e)>-1?e:t}function d(t,e){e=e||{};var r=e.body;if("string"==typeof t)this.url=t;else{if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new o(t.headers)),this.method=t.method,this.mode=t.mode,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new o(e.headers)),this.method=h(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function p(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}}),e}function y(t){var e=new o;return t.split("\r\n").forEach(function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}}),e}function v(t,e){e||(e={}),this.type="default",this.status="status"in e?e.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new o(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var m={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(m.arrayBuffer)var b=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],w=function(t){return t&&DataView.prototype.isPrototypeOf(t)},_=ArrayBuffer.isView||function(t){return t&&b.indexOf(Object.prototype.toString.call(t))>-1};o.prototype.append=function(t,n){t=e(t),n=r(n);var o=this.map[t];this.map[t]=o?o+","+n:n},o.prototype.delete=function(t){delete this.map[e(t)]},o.prototype.get=function(t){return t=e(t),this.has(t)?this.map[t]:null},o.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},o.prototype.set=function(t,n){this.map[e(t)]=r(n)},o.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},o.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),n(t)},o.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),n(t)},o.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),n(t)},m.iterable&&(o.prototype[Symbol.iterator]=o.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];d.prototype.clone=function(){return new d(this,{body:this._bodyInit})},l.call(d.prototype),l.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new o(this.headers),url:this.url})},v.error=function(){var t=new v(null,{status:0,statusText:""});return t.type="error",t};var T=[301,302,303,307,308];v.redirect=function(t,e){if(T.indexOf(e)===-1)throw new RangeError("Invalid status code");return new v(null,{status:e,headers:{location:t}})},t.Headers=o,t.Request=d,t.Response=v,t.fetch=function(t,e){return new Promise(function(r,n){var o=new d(t,e),i=new XMLHttpRequest;i.onload=function(){var t={status:i.status,statusText:i.statusText,headers:y(i.getAllResponseHeaders()||"")};t.url="responseURL"in i?i.responseURL:t.headers.get("X-Request-URL");var e="response"in i?i.response:i.responseText;r(new v(e,t))},i.onerror=function(){n(new TypeError("Network request failed"))},i.ontimeout=function(){n(new TypeError("Network request failed"))},i.open(o.method,o.url,!0),"include"===o.credentials&&(i.withCredentials=!0),"responseType"in i&&m.blob&&(i.responseType="blob"),o.headers.forEach(function(t,e){i.setRequestHeader(e,t)}),i.send("undefined"==typeof o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},{}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwicnVuQWJvdXRQYWdlIiwidG9wQXJyb3ciLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiX3V0aWxzIiwic2Nyb2xsVG9Ub3AiLCJ0aGlzIiwicGFyZW50Tm9kZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJkZWZhdWx0IiwiLi91dGlscyIsIjIiLCJydW5MYW5kaW5nUGFnZSIsImZpbmRBcmVhIiwicGl4ZWxzIiwidGV4dENvbnRlbnQiLCJhcmVhIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwidG9Mb2NhbGVTdHJpbmciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCIzIiwiX3NwYSIsInRvZ2dsZU1lbnUiLCJoZWFkZXIiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJjaGFuZ2VQYWdlIiwiZXZlbnQiLCJjb25zb2xlIiwibG9nIiwidGFyZ2V0Iiwibm9kZU5hbWUiLCJwcmV2ZW50RGVmYXVsdCIsInBhdGhuYW1lIiwibG9jYXRpb24iLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwidXBkYXRlUGFnZSIsInRyaWdnZXJNZW51IiwibWVudSIsInJ1bk5ld0Z1bmN0aW9ucyIsIi4vc3BhIiwiNCIsInJ1blByb2plY3RzUGFnZSIsImNsb3NlRGV0YWlscyIsImRldGFpbHMiLCJpY29uIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInN0eWxlIiwibWF4SGVpZ2h0IiwiZXhwYW5kRGV0YWlscyIsIm5leHRFbGVtZW50U2libGluZyIsImlzRXhwYW5kZWQiLCJjb250YWlucyIsInNjcm9sbEhlaWdodCIsInByb2plY3RzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJpdGVtIiwiNSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwibG9hZFBhZ2UiLCJ1cmwiLCJjYWNoZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsInRleHQiLCJjYXRjaCIsImVyciIsIm1lc3NhZ2UiLCJ1bmRlZmluZWQiLCJfbGFuZGluZyIsIl9sYW5kaW5nMiIsIl9hYm91dCIsIl9hYm91dDIiLCJfcHJvamVjdHMiLCJfcHJvamVjdHMyIiwicG9seWZpbGwiLCJwYXRoIiwic3RhcnRzV2l0aCIsImhyZWYiLCJyZXNwb25zZVRleHQiLCJjb250YWluZXIiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwib2xkUGFnZSIsIm5ld1BhZ2UiLCJuZXdUaXRsZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibmV3RGVzYyIsImNvbnRlbnQiLCJyZXBsYWNlQ2hpbGQiLCJ0aXRsZSIsImZhZGVJbiIsIi4vYWJvdXQiLCIuL2xhbmRpbmciLCIuL3Byb2plY3RzIiwiZXM2LXByb21pc2UiLCJpc29tb3JwaGljLWZldGNoIiwiNiIsImVhc2VJblF1YXJ0IiwiZWFzZU91dFF1YXJ0IiwiZWwiLCJkdXJhdGlvbiIsImFyZ3VtZW50cyIsImJvdHRvbSIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsInNjcm9sbCIsInRpbWUiLCJlYXNpbmciLCJzY3JvbGxUb3AiLCJvcGFjaXR5IiwiZmFkZSIsImZhZGVPdXQiLCI3IiwicHJvY2VzcyIsImdsb2JhbCIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJFUzZQcm9taXNlIiwib2JqZWN0T3JGdW5jdGlvbiIsIngiLCJpc0Z1bmN0aW9uIiwic2V0U2NoZWR1bGVyIiwic2NoZWR1bGVGbiIsImN1c3RvbVNjaGVkdWxlckZuIiwic2V0QXNhcCIsImFzYXBGbiIsImFzYXAiLCJ1c2VOZXh0VGljayIsIm5leHRUaWNrIiwiZmx1c2giLCJ1c2VWZXJ0eFRpbWVyIiwidmVydHhOZXh0IiwidXNlU2V0VGltZW91dCIsInVzZU11dGF0aW9uT2JzZXJ2ZXIiLCJpdGVyYXRpb25zIiwib2JzZXJ2ZXIiLCJCcm93c2VyTXV0YXRpb25PYnNlcnZlciIsIm5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwiZGF0YSIsInVzZU1lc3NhZ2VDaGFubmVsIiwiY2hhbm5lbCIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3J0MiIsInBvc3RNZXNzYWdlIiwiZ2xvYmFsU2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJsZW4iLCJjYWxsYmFjayIsInF1ZXVlIiwiYXJnIiwiYXR0ZW1wdFZlcnR4IiwidmVydHgiLCJydW5Pbkxvb3AiLCJydW5PbkNvbnRleHQiLCJvbkZ1bGZpbGxtZW50Iiwib25SZWplY3Rpb24iLCJfYXJndW1lbnRzIiwicGFyZW50IiwiY2hpbGQiLCJjb25zdHJ1Y3RvciIsIm5vb3AiLCJQUk9NSVNFX0lEIiwibWFrZVByb21pc2UiLCJfc3RhdGUiLCJpbnZva2VDYWxsYmFjayIsIl9yZXN1bHQiLCJzdWJzY3JpYmUiLCJvYmplY3QiLCJDb25zdHJ1Y3RvciIsInByb21pc2UiLCJfcmVzb2x2ZSIsInNlbGZGdWxmaWxsbWVudCIsIlR5cGVFcnJvciIsImNhbm5vdFJldHVybk93biIsImdldFRoZW4iLCJlcnJvciIsIkdFVF9USEVOX0VSUk9SIiwidHJ5VGhlbiIsImZ1bGZpbGxtZW50SGFuZGxlciIsInJlamVjdGlvbkhhbmRsZXIiLCJoYW5kbGVGb3JlaWduVGhlbmFibGUiLCJ0aGVuYWJsZSIsInNlYWxlZCIsImZ1bGZpbGwiLCJyZWFzb24iLCJfcmVqZWN0IiwiX2xhYmVsIiwiaGFuZGxlT3duVGhlbmFibGUiLCJGVUxGSUxMRUQiLCJSRUpFQ1RFRCIsImhhbmRsZU1heWJlVGhlbmFibGUiLCJtYXliZVRoZW5hYmxlIiwidGhlbiQkIiwicHVibGlzaFJlamVjdGlvbiIsIl9vbmVycm9yIiwicHVibGlzaCIsIlBFTkRJTkciLCJfc3Vic2NyaWJlcnMiLCJzdWJzY3JpYmVycyIsInNldHRsZWQiLCJkZXRhaWwiLCJFcnJvck9iamVjdCIsInRyeUNhdGNoIiwiVFJZX0NBVENIX0VSUk9SIiwiaGFzQ2FsbGJhY2siLCJzdWNjZWVkZWQiLCJmYWlsZWQiLCJpbml0aWFsaXplUHJvbWlzZSIsInJlc29sdmVyIiwibmV4dElkIiwiaWQiLCJFbnVtZXJhdG9yIiwiaW5wdXQiLCJfaW5zdGFuY2VDb25zdHJ1Y3RvciIsImlzQXJyYXkiLCJfaW5wdXQiLCJfcmVtYWluaW5nIiwiQXJyYXkiLCJfZW51bWVyYXRlIiwidmFsaWRhdGlvbkVycm9yIiwiYWxsIiwiZW50cmllcyIsInJhY2UiLCJyZWplY3QiLCJfIiwibmVlZHNSZXNvbHZlciIsIm5lZWRzTmV3IiwibG9jYWwiLCJzZWxmIiwiRnVuY3Rpb24iLCJQIiwicHJvbWlzZVRvU3RyaW5nIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYXN0IiwiX2lzQXJyYXkiLCJzY2hlZHVsZUZsdXNoIiwiYnJvd3NlcldpbmRvdyIsImJyb3dzZXJHbG9iYWwiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImlzTm9kZSIsImlzV29ya2VyIiwiVWludDhDbGFtcGVkQXJyYXkiLCJpbXBvcnRTY3JpcHRzIiwiTWF0aCIsInJhbmRvbSIsInN1YnN0cmluZyIsIl9lYWNoRW50cnkiLCJlbnRyeSIsImMiLCJyZXNvbHZlJCQiLCJfdGhlbiIsIl9zZXR0bGVkQXQiLCJfd2lsbFNldHRsZUF0Iiwic3RhdGUiLCJlbnVtZXJhdG9yIiwiX3NldFNjaGVkdWxlciIsIl9zZXRBc2FwIiwiX2FzYXAiLCJfcHJvY2VzcyIsIjgiLCJiaW5kIiwid2hhdHdnLWZldGNoIiwiOSIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNhY2hlZFNldFRpbWVvdXQiLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsImNvbmNhdCIsInF1ZXVlSW5kZXgiLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIkl0ZW0iLCJhcnJheSIsImFyZ3MiLCJwdXNoIiwiYXBwbHkiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwiYmluZGluZyIsIm5hbWUiLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiMTAiLCJub3JtYWxpemVOYW1lIiwiU3RyaW5nIiwidGVzdCIsInRvTG93ZXJDYXNlIiwibm9ybWFsaXplVmFsdWUiLCJpdGVyYXRvckZvciIsIml0ZW1zIiwiaXRlcmF0b3IiLCJuZXh0Iiwic2hpZnQiLCJkb25lIiwic3VwcG9ydCIsIml0ZXJhYmxlIiwiU3ltYm9sIiwiSGVhZGVycyIsImhlYWRlcnMiLCJtYXAiLCJhcHBlbmQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5IiwiYm9keVVzZWQiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJvbmxvYWQiLCJyZXN1bHQiLCJvbmVycm9yIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsInJlYWRCbG9iQXNUZXh0IiwicmVhZEFzVGV4dCIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImJ1ZiIsInZpZXciLCJVaW50OEFycmF5IiwiY2hhcnMiLCJmcm9tQ2hhckNvZGUiLCJqb2luIiwiYnVmZmVyQ2xvbmUiLCJzbGljZSIsImJ5dGVMZW5ndGgiLCJzZXQiLCJidWZmZXIiLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiQmxvYiIsImlzUHJvdG90eXBlT2YiLCJfYm9keUJsb2IiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsInNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImFycmF5QnVmZmVyIiwiaXNEYXRhVmlldyIsIl9ib2R5QXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXJWaWV3IiwiZ2V0IiwidHlwZSIsInJlamVjdGVkIiwiZGVjb2RlIiwianNvbiIsIkpTT04iLCJwYXJzZSIsIm5vcm1hbGl6ZU1ldGhvZCIsIm1ldGhvZCIsInVwY2FzZWQiLCJ0b1VwcGVyQ2FzZSIsIm1ldGhvZHMiLCJpbmRleE9mIiwiUmVxdWVzdCIsIm9wdGlvbnMiLCJjcmVkZW50aWFscyIsIm1vZGUiLCJyZWZlcnJlciIsImZvcm0iLCJ0cmltIiwic3BsaXQiLCJieXRlcyIsInJlcGxhY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZUhlYWRlcnMiLCJyYXdIZWFkZXJzIiwibGluZSIsInBhcnRzIiwia2V5IiwiUmVzcG9uc2UiLCJib2R5SW5pdCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJ2aWV3Q2xhc3NlcyIsIkRhdGFWaWV3IiwiaXNWaWV3Iiwib2xkVmFsdWUiLCJoYXMiLCJoYXNPd25Qcm9wZXJ0eSIsInRoaXNBcmciLCJrZXlzIiwidmFsdWVzIiwiY2xvbmUiLCJyZWRpcmVjdFN0YXR1c2VzIiwicmVkaXJlY3QiLCJSYW5nZUVycm9yIiwiaW5pdCIsInJlcXVlc3QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVVJMIiwib250aW1lb3V0Iiwib3BlbiIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIl0sIm1hcHBpbmdzIjoiQ0FBQSxRQUFVQSxHQUFFQyxFQUFFQyxFQUFFQyxHQUFHLFFBQVNDLEdBQUVDLEVBQUVDLEdBQUcsSUFBSUosRUFBRUcsR0FBRyxDQUFD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N0IiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJ1bkFib3V0UGFnZTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuZnVuY3Rpb24gcnVuQWJvdXRQYWdlKCkge1xuXG4gIC8vIHNldCB1cCBzY3JvbGwgdG8gdG9wIGFycm93IGZ1bmN0aW9uXG4gIC8vIFRPRE86IG9ubHkgc2hvdyBhcnJvdyBpZiBuZWVkZWQgW2hlaWdodCA+IDEwMCUgdmlld3BvcnRdXG4gIHZhciB0b3BBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1wYWdlX19hcnJvdy0tdG9wJyk7XG4gIHRvcEFycm93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICgwLCBfdXRpbHMuc2Nyb2xsVG9Ub3ApKHRoaXMucGFyZW50Tm9kZSk7XG4gIH0sIGZhbHNlKTtcbn1cblxufSx7XCIuL3V0aWxzXCI6Nn1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcnVuTGFuZGluZ1BhZ2U7XG5cbi8vIGxhbmRpbmcgcGFnZSBmdW5jdGlvbnNcbmZ1bmN0aW9uIHJ1bkxhbmRpbmdQYWdlKCkge1xuICAoZnVuY3Rpb24gKCkge1xuXG4gICAgLy8gcGl4ZWxzXjIgKyBmaW5kQXJlYSBmdW5jdGlvblxuICAgIHZhciBmaW5kQXJlYSA9IGZ1bmN0aW9uIGZpbmRBcmVhKCkge1xuICAgICAgdmFyIGNvZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtcGl4ZWxzJyk7XG4gICAgICB2YXIgcGl4ZWxzID0gZnVuY3Rpb24gcGl4ZWxzKCkge1xuICAgICAgICBpZiAoY29kZSAmJiBjb2RlLnRleHRDb250ZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIGFyZWEgPSB3aW5kb3cuaW5uZXJXaWR0aCAqIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICBjb2RlLnRleHRDb250ZW50ID0gYXJlYS50b0xvY2FsZVN0cmluZygpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHBpeGVscyk7XG4gICAgfTtcblxuICAgIGZpbmRBcmVhKCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZpbmRBcmVhKTtcbiAgfSkoKTtcbn1cblxufSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfc3BhID0gcmVxdWlyZSgnLi9zcGEnKTtcblxuKGZ1bmN0aW9uICgpIHtcblxuICAvLyAgbmF2aWdhdGlvbiBzZWxlY3RvcnNcbiAgdmFyIGhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlcicpO1xuICB2YXIgdHJpZ2dlck1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdHJpZ2dlci0tbWVudScpO1xuICB2YXIgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1tZW51Jyk7XG5cbiAgLy8gIG5hdmlnYXRpb24gbWV0aG9kc1xuICBmdW5jdGlvbiB0b2dnbGVNZW51KCkge1xuICAgIGhlYWRlci5jbGFzc0xpc3QudG9nZ2xlKCdtZW51LW9wZW4nKTtcbiAgfVxuICBmdW5jdGlvbiBjaGFuZ2VQYWdlKGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coZXZlbnQpO1xuICAgIGlmIChldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0Lm5vZGVOYW1lID09PSAnQScpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0b2dnbGVNZW51KCk7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LnBhdGhuYW1lICE9PSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgZXZlbnQudGFyZ2V0LnBhdGhuYW1lKTtcbiAgICAgICAgKDAsIF9zcGEudXBkYXRlUGFnZSkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyAgbmF2aWdhdGlvbiBldmVudCBsaXN0ZW5lcnMgKyBydW4gb24gaW5pdGlhbCBsb2FkXG4gICgwLCBfc3BhLnJ1bk5ld0Z1bmN0aW9ucykoKTtcbiAgdHJpZ2dlck1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVNZW51LCBmYWxzZSk7XG4gIG1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjaGFuZ2VQYWdlLCBmYWxzZSk7XG59KSgpO1xuXG59LHtcIi4vc3BhXCI6NX1dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcnVuUHJvamVjdHNQYWdlO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4vLyBwcm9qZWN0cyBwYWdlIC0gc3BlY2lmaWMgZnVuY3Rpb25zXG5mdW5jdGlvbiBydW5Qcm9qZWN0c1BhZ2UoKSB7XG5cbiAgLy8gc2V0IHVwIGFycm93ICsgc2Nyb2xsIHRvIHRvcCBmdW5jdGlvblxuICAvLyBUT0RPOiBvbmx5IHNob3cgYXJyb3cgaWYgbmVlZGVkIFtoZWlnaHQgPiAxMDAlIHZpZXdwb3J0XVxuICB2YXIgdG9wQXJyb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtcGFnZV9fYXJyb3ctLXRvcCcpO1xuICB0b3BBcnJvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAoMCwgX3V0aWxzLnNjcm9sbFRvVG9wKSh0aGlzLnBhcmVudE5vZGUpO1xuICB9LCBmYWxzZSk7XG5cbiAgLy8gIGxvb3Agb3ZlciBldmVyeSBwcm9qZWN0LCBhZGQgZXZlbnQgbGlzdGVuZXIgdG8gZXhwYW5kIGljb24gYnV0dG9uXG4gIHZhciBwcm9qZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1wcm9qZWN0Jyk7XG4gIHByb2plY3RzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgaWNvbiA9IGl0ZW0ucXVlcnlTZWxlY3RvcignLnByb2plY3RfX2V4cGFuZEljb24nKTtcbiAgICBpY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXhwYW5kRGV0YWlscywgZmFsc2UpO1xuICB9KTtcbiAgcHJvamVjdHMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBpY29uID0gaXRlbS5xdWVyeVNlbGVjdG9yKCcucHJvamVjdF9fY2xvc2VJY29uJyk7XG4gICAgaWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlRGV0YWlscywgZmFsc2UpO1xuICB9KTtcblxuICBmdW5jdGlvbiBjbG9zZURldGFpbHMoKSB7XG4gICAgdmFyIGRldGFpbHMgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgdmFyIGljb24gPSBkZXRhaWxzLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgZGV0YWlscy5zdHlsZS5tYXhIZWlnaHQgPSAwO1xuICAgIGRldGFpbHMuY2xhc3NMaXN0LnRvZ2dsZSgncHJvamVjdF9fZGV0YWlscy0tZXhwYW5kZWQnKTtcbiAgICBpY29uLmNsYXNzTGlzdC50b2dnbGUoJ3Byb2plY3RfX2V4cGFuZEljb24tLWV4cGFuZGVkJyk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBhbmREZXRhaWxzKCkge1xuICAgIHRoaXMuY2xhc3NMaXN0LnRvZ2dsZSgncHJvamVjdF9fZXhwYW5kSWNvbi0tZXhwYW5kZWQnKTtcbiAgICB2YXIgZGV0YWlscyA9IHRoaXMubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgIHZhciBpc0V4cGFuZGVkID0gZGV0YWlscy5jbGFzc0xpc3QuY29udGFpbnMoJ3Byb2plY3RfX2RldGFpbHMtLWV4cGFuZGVkJyk7XG4gICAgZGV0YWlscy5jbGFzc0xpc3QudG9nZ2xlKCdwcm9qZWN0X19kZXRhaWxzLS1leHBhbmRlZCcpO1xuICAgIGRldGFpbHMuc3R5bGUubWF4SGVpZ2h0ID0gaXNFeHBhbmRlZCA/IDAgOiBkZXRhaWxzLnNjcm9sbEhlaWdodCArICdweCc7XG4gIH1cblxuICAvLyBjbGljayBvbiBpbWFnZSArIGZ1bGwgc2NyZWVuIG1vZGFsXG4gIC8vIGNvbnN0IHByZXZpZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtcHJldmlldycpXG4gIC8vIGNvbnN0IG1lbnVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbWVudV9fYnRuJylcbiAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gIC8vICAgcHJldmlld1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgLy8gICAgIGUucHJldmVudERlZmF1bHQoKVxuICAvLyAgICAgY29uc3QgZmlndXJlID0gcHJldmlld1tpXS5xdWVyeVNlbGVjdG9yKCdmaWd1cmUnKVxuICAvLyAgICAgY29uc3QgY2FwdGlvbiA9IHByZXZpZXdbaV0ucXVlcnlTZWxlY3RvcignZmlnY2FwdGlvbicpXG4gIC8vICAgICBjb25zdCBpbWcgPSBwcmV2aWV3W2ldLnF1ZXJ5U2VsZWN0b3IoJ2ltZycpXG4gIC8vICAgaWYgKCFwcmV2aWV3W2ldLmNsYXNzTGlzdC5jb250YWlucygnZnVsbHNjcmVlbicpICYmIGUudGFyZ2V0ID09PSBpbWcpIHtcbiAgLy8gICAgICAgcHJldmlld1tpXS5jbGFzc0xpc3QuYWRkKCdmdWxsc2NyZWVuJylcbiAgLy8gICAgICAgbWVudUJ0bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gIC8vICAgICAgIGZhZGUoZmlndXJlLCB0cnVlLCA0MClcbiAgLy8gICAgIH1cbiAgLy8gICAgIGlmIChwcmV2aWV3W2ldLmNsYXNzTGlzdC5jb250YWlucygnZnVsbHNjcmVlbicpICYmIChlLnRhcmdldCAhPT0gaW1nICYmIGUudGFyZ2V0ICE9PSBjYXB0aW9uICYmIGUudGFyZ2V0ICE9PSBmaWd1cmUpKSB7XG4gIC8vICAgICAgIHByZXZpZXdbaV0uY2xhc3NMaXN0LnJlbW92ZSgnZnVsbHNjcmVlbicpXG4gIC8vICAgICAgIG1lbnVCdG4uc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgLy8gICAgIH1cbiAgLy8gICB9KVxuICAvLyB9XG59XG5cbn0se1wiLi91dGlsc1wiOjZ9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudXBkYXRlUGFnZSA9IGV4cG9ydHMucnVuTmV3RnVuY3Rpb25zID0gdW5kZWZpbmVkO1xuXG52YXIgX2xhbmRpbmcgPSByZXF1aXJlKCcuL2xhbmRpbmcnKTtcblxudmFyIF9sYW5kaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xhbmRpbmcpO1xuXG52YXIgX2Fib3V0ID0gcmVxdWlyZSgnLi9hYm91dCcpO1xuXG52YXIgX2Fib3V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fib3V0KTtcblxudmFyIF9wcm9qZWN0cyA9IHJlcXVpcmUoJy4vcHJvamVjdHMnKTtcblxudmFyIF9wcm9qZWN0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9qZWN0cyk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGZldGNoIHBvbHlmaWxsIGZvciBtb2JpbGUgZGV2aWNlc1xucmVxdWlyZSgnZXM2LXByb21pc2UnKS5wb2x5ZmlsbCgpO1xucmVxdWlyZSgnaXNvbW9ycGhpYy1mZXRjaCcpO1xuXG4vLyBydW4gZnVuY3Rpb25zIHNwZWNpZmljIHRvIHBhZ2Vcbi8vIFRPRE86IHJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZpbmRBcmVhKSB3aGVuIG5vdCBvbiBsYW5kaW5nIHBhZ2VcbnZhciBydW5OZXdGdW5jdGlvbnMgPSBleHBvcnRzLnJ1bk5ld0Z1bmN0aW9ucyA9IGZ1bmN0aW9uIHJ1bk5ld0Z1bmN0aW9ucygpIHtcbiAgdmFyIHBhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gIGlmIChwYXRoID09PSAnLycgfHwgcGF0aCA9PT0gJy9pbmRleC5odG1sJykge1xuICAgICgwLCBfbGFuZGluZzIuZGVmYXVsdCkoKTtcbiAgfSBlbHNlIGlmIChwYXRoLnN0YXJ0c1dpdGgoJy9hYm91dCcpKSB7XG4gICAgKDAsIF9hYm91dDIuZGVmYXVsdCkoKTtcbiAgfSBlbHNlIGlmIChwYXRoLnN0YXJ0c1dpdGgoJy9wcm9qZWN0cycpKSB7XG4gICAgKDAsIF9wcm9qZWN0czIuZGVmYXVsdCkoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZygnZml4IG1lJyk7XG4gIH1cbn07XG5cbi8vIHVwZGF0ZSArIGZhZGUgaW4gbmV3IHBhZ2Ugb24gdXJsIGNoYW5nZVxudmFyIHVwZGF0ZVBhZ2UgPSBleHBvcnRzLnVwZGF0ZVBhZ2UgPSBmdW5jdGlvbiB1cGRhdGVQYWdlKCkge1xuICB2YXIgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIGxvYWRQYWdlKHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2VUZXh0KSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2h0bWwnKTtcbiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gcmVzcG9uc2VUZXh0O1xuICAgIHZhciBvbGRQYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2UnKTtcbiAgICB2YXIgbmV3UGFnZSA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcucGFnZScpO1xuICAgIHZhciBuZXdUaXRsZSA9IGNvbnRhaW5lci5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGl0bGUnKVswXS50ZXh0Q29udGVudDtcbiAgICB2YXIgbmV3RGVzYyA9IGNvbnRhaW5lci5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWV0YScpWydkZXNjcmlwdGlvbiddLmNvbnRlbnQ7XG4gICAgb2xkUGFnZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdQYWdlLCBvbGRQYWdlKTtcbiAgICBkb2N1bWVudC50aXRsZSA9IG5ld1RpdGxlO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdtZXRhJylbJ2Rlc2NyaXB0aW9uJ10uY29udGVudCA9IG5ld0Rlc2M7XG4gICAgKDAsIF91dGlscy5mYWRlSW4pKG5ld1BhZ2UpO1xuICAgIHJ1bk5ld0Z1bmN0aW9ucygpO1xuICB9KTtcbn07XG5cbi8vIGZldGNoICsgbG9hZCBuZXcgdXJsICsgY2FjaGUgbmV3IGNvbnRlbnRcbnZhciBjYWNoZSA9IHt9O1xuZnVuY3Rpb24gbG9hZFBhZ2UodXJsKSB7XG4gIGlmIChjYWNoZVt1cmxdKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjYWNoZVt1cmxdKTtcbiAgfVxuICByZXR1cm4gZmV0Y2godXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgY2FjaGVbdXJsXSA9IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIHJldHVybiBjYWNoZVt1cmxdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnbmV0d29yayByZXNwb25zZSB3YXMgbm90IG9rLicpO1xuICAgIH1cbiAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgIHJldHVybiBjb25zb2xlLmxvZygndGhlcmUgaGFzIGJlZW4gYW4gZXJyb3IgcmVxdWVzdGluZyAoJyArIHVybCArICcpOiAnICsgZXJyLm1lc3NhZ2UpO1xuICB9KTtcbn1cblxuLy8gdXBkYXRlIHBhZ2UgYW55dGltZSBoaXN0b3J5IGFwaSBpcyBjaGFuZ2VkXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB1cGRhdGVQYWdlKTtcblxufSx7XCIuL2Fib3V0XCI6MSxcIi4vbGFuZGluZ1wiOjIsXCIuL3Byb2plY3RzXCI6NCxcIi4vdXRpbHNcIjo2LFwiZXM2LXByb21pc2VcIjo3LFwiaXNvbW9ycGhpYy1mZXRjaFwiOjh9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLy8gdGltaW5nIGZ1bmN0aW9ucyBbIGZyb20gZ2l0aHViIC0tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2dyZS8xNjUwMjk0IF1cbnZhciBsaW5lYXIgPSBmdW5jdGlvbiBsaW5lYXIodCkge1xuICByZXR1cm4gdDtcbn07XG52YXIgZWFzZUluUXVhZCA9IGZ1bmN0aW9uIGVhc2VJblF1YWQodCkge1xuICByZXR1cm4gdCAqIHQ7XG59O1xudmFyIGVhc2VPdXRRdWFkID0gZnVuY3Rpb24gZWFzZU91dFF1YWQodCkge1xuICByZXR1cm4gdCAqICgyIC0gdCk7XG59O1xudmFyIGVhc2VJbk91dFF1YWQgPSBmdW5jdGlvbiBlYXNlSW5PdXRRdWFkKHQpIHtcbiAgcmV0dXJuIHQgPCAuNSA/IDIgKiB0ICogdCA6IC0xICsgKDQgLSAyICogdCkgKiB0O1xufTtcbnZhciBlYXNlSW5DdWJpYyA9IGZ1bmN0aW9uIGVhc2VJbkN1YmljKHQpIHtcbiAgcmV0dXJuIHQgKiB0ICogdDtcbn07XG52YXIgZWFzZU91dEN1YmljID0gZnVuY3Rpb24gZWFzZU91dEN1YmljKHQpIHtcbiAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbn07XG52YXIgZWFzZUluT3V0Q3ViaWMgPSBmdW5jdGlvbiBlYXNlSW5PdXRDdWJpYyh0KSB7XG4gIHJldHVybiB0IDwgLjUgPyA0ICogdCAqIHQgKiB0IDogKHQgLSAxKSAqICgyICogdCAtIDIpICogKDIgKiB0IC0gMikgKyAxO1xufTtcbnZhciBlYXNlSW5RdWFydCA9IGZ1bmN0aW9uIGVhc2VJblF1YXJ0KHQpIHtcbiAgcmV0dXJuIHQgKiB0ICogdCAqIHQ7XG59O1xudmFyIGVhc2VPdXRRdWFydCA9IGZ1bmN0aW9uIGVhc2VPdXRRdWFydCh0KSB7XG4gIHJldHVybiAxIC0gLS10ICogdCAqIHQgKiB0O1xufTtcbnZhciBlYXNlSW5PdXRRdWFydCA9IGZ1bmN0aW9uIGVhc2VJbk91dFF1YXJ0KHQpIHtcbiAgcmV0dXJuIHQgPCAuNSA/IDggKiB0ICogdCAqIHQgKiB0IDogMSAtIDggKiAtLXQgKiB0ICogdCAqIHQ7XG59O1xuXG4vLyBzY3JvbGwtdG8tdG9wIG9mIGVsZW1lbnQuXG52YXIgc2Nyb2xsVG9Ub3AgPSBleHBvcnRzLnNjcm9sbFRvVG9wID0gZnVuY3Rpb24gc2Nyb2xsVG9Ub3AoZWwpIHtcbiAgdmFyIGR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxMjAwO1xuXG4gIHZhciBib3R0b20gPSBlbC5zY3JvbGxIZWlnaHQ7XG4gIHZhciBzdGFydCA9IERhdGUubm93KCk7XG4gIHZhciBzY3JvbGwgPSBmdW5jdGlvbiBzY3JvbGwoKSB7XG4gICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgdmFyIHRpbWUgPSAobm93IC0gc3RhcnQpIC8gZHVyYXRpb247XG4gICAgdmFyIGVhc2luZyA9IGVhc2VPdXRRdWFydCh0aW1lKTtcbiAgICBlbC5zY3JvbGxUb3AgPSBlYXNpbmcgKiAoMCAtIGJvdHRvbSkgKyBib3R0b207XG4gICAgaWYgKGVsLnNjcm9sbFRvcCA9PT0gMCkgcmV0dXJuO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShzY3JvbGwpO1xuICB9O1xuICBzY3JvbGwoKTtcbn07XG5cbi8vIGZhZGUtaW4gZWxlbWVudFxudmFyIGZhZGVJbiA9IGV4cG9ydHMuZmFkZUluID0gZnVuY3Rpb24gZmFkZUluKGVsKSB7XG4gIHZhciBkdXJhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTIwMDtcblxuICBlbC5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgdmFyIGJvdHRvbSA9IDE7XG4gIHZhciBzdGFydCA9IERhdGUubm93KCk7XG4gIHZhciBmYWRlID0gZnVuY3Rpb24gZmFkZSgpIHtcbiAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgdGltZSA9IChub3cgLSBzdGFydCkgLyBkdXJhdGlvbjtcbiAgICB2YXIgZWFzaW5nID0gZWFzZUluUXVhcnQodGltZSk7XG4gICAgZWwuc3R5bGUub3BhY2l0eSA9IGVhc2luZztcbiAgICBpZiAoZWwuc3R5bGUub3BhY2l0eSA+IDEpIHtcbiAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZmFkZSk7XG4gIH07XG4gIGZhZGUoKTtcbn07XG5cbi8vIGZhZGUtb3V0IGVsZW1lbnRcbnZhciBmYWRlT3V0ID0gZXhwb3J0cy5mYWRlT3V0ID0gZnVuY3Rpb24gZmFkZU91dChlbCkge1xuICB2YXIgZHVyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDEyMDA7XG5cbiAgZWwuc3R5bGUub3BhY2l0eSA9IDE7XG4gIHZhciBzdGFydCA9IERhdGUubm93KCk7XG4gIHZhciBmYWRlID0gZnVuY3Rpb24gZmFkZSgpIHtcbiAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgdGltZSA9IChub3cgLSBzdGFydCkgLyBkdXJhdGlvbjtcbiAgICB2YXIgZWFzaW5nID0gZWFzZU91dFF1YXJ0KHRpbWUpO1xuICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAxIC0gZWFzaW5nO1xuICAgIGlmIChlbC5zdHlsZS5vcGFjaXR5IDwgMCkge1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmYWRlKTtcbiAgfTtcbiAgZmFkZSgpO1xufTtcblxufSx7fV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXtcbi8qIVxuICogQG92ZXJ2aWV3IGVzNi1wcm9taXNlIC0gYSB0aW55IGltcGxlbWVudGF0aW9uIG9mIFByb21pc2VzL0ErLlxuICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTQgWWVodWRhIEthdHosIFRvbSBEYWxlLCBTdGVmYW4gUGVubmVyIGFuZCBjb250cmlidXRvcnMgKENvbnZlcnNpb24gdG8gRVM2IEFQSSBieSBKYWtlIEFyY2hpYmFsZClcbiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zdGVmYW5wZW5uZXIvZXM2LXByb21pc2UvbWFzdGVyL0xJQ0VOU0VcbiAqIEB2ZXJzaW9uICAgNC4wLjVcbiAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuRVM2UHJvbWlzZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb2JqZWN0T3JGdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxudmFyIF9pc0FycmF5ID0gdW5kZWZpbmVkO1xuaWYgKCFBcnJheS5pc0FycmF5KSB7XG4gIF9pc0FycmF5ID0gZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xufSBlbHNlIHtcbiAgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xufVxuXG52YXIgaXNBcnJheSA9IF9pc0FycmF5O1xuXG52YXIgbGVuID0gMDtcbnZhciB2ZXJ0eE5leHQgPSB1bmRlZmluZWQ7XG52YXIgY3VzdG9tU2NoZWR1bGVyRm4gPSB1bmRlZmluZWQ7XG5cbnZhciBhc2FwID0gZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgYXJnKSB7XG4gIHF1ZXVlW2xlbl0gPSBjYWxsYmFjaztcbiAgcXVldWVbbGVuICsgMV0gPSBhcmc7XG4gIGxlbiArPSAyO1xuICBpZiAobGVuID09PSAyKSB7XG4gICAgLy8gSWYgbGVuIGlzIDIsIHRoYXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHNjaGVkdWxlIGFuIGFzeW5jIGZsdXNoLlxuICAgIC8vIElmIGFkZGl0aW9uYWwgY2FsbGJhY2tzIGFyZSBxdWV1ZWQgYmVmb3JlIHRoZSBxdWV1ZSBpcyBmbHVzaGVkLCB0aGV5XG4gICAgLy8gd2lsbCBiZSBwcm9jZXNzZWQgYnkgdGhpcyBmbHVzaCB0aGF0IHdlIGFyZSBzY2hlZHVsaW5nLlxuICAgIGlmIChjdXN0b21TY2hlZHVsZXJGbikge1xuICAgICAgY3VzdG9tU2NoZWR1bGVyRm4oZmx1c2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZUZsdXNoKCk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTY2hlZHVsZXIoc2NoZWR1bGVGbikge1xuICBjdXN0b21TY2hlZHVsZXJGbiA9IHNjaGVkdWxlRm47XG59XG5cbmZ1bmN0aW9uIHNldEFzYXAoYXNhcEZuKSB7XG4gIGFzYXAgPSBhc2FwRm47XG59XG5cbnZhciBicm93c2VyV2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB1bmRlZmluZWQ7XG52YXIgYnJvd3Nlckdsb2JhbCA9IGJyb3dzZXJXaW5kb3cgfHwge307XG52YXIgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSBicm93c2VyR2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgYnJvd3Nlckdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGlzTm9kZSA9IHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHt9KS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG5cbi8vIHRlc3QgZm9yIHdlYiB3b3JrZXIgYnV0IG5vdCBpbiBJRTEwXG52YXIgaXNXb3JrZXIgPSB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbXBvcnRTY3JpcHRzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnO1xuXG4vLyBub2RlXG5mdW5jdGlvbiB1c2VOZXh0VGljaygpIHtcbiAgLy8gbm9kZSB2ZXJzaW9uIDAuMTAueCBkaXNwbGF5cyBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgd2hlbiBuZXh0VGljayBpcyB1c2VkIHJlY3Vyc2l2ZWx5XG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY3Vqb2pzL3doZW4vaXNzdWVzLzQxMCBmb3IgZGV0YWlsc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgfTtcbn1cblxuLy8gdmVydHhcbmZ1bmN0aW9uIHVzZVZlcnR4VGltZXIoKSB7XG4gIGlmICh0eXBlb2YgdmVydHhOZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2ZXJ0eE5leHQoZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB1c2VNdXRhdGlvbk9ic2VydmVyKCkge1xuICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBCcm93c2VyTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7XG4gIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICBvYnNlcnZlci5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIG5vZGUuZGF0YSA9IGl0ZXJhdGlvbnMgPSArK2l0ZXJhdGlvbnMgJSAyO1xuICB9O1xufVxuXG4vLyB3ZWIgd29ya2VyXG5mdW5jdGlvbiB1c2VNZXNzYWdlQ2hhbm5lbCgpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlU2V0VGltZW91dCgpIHtcbiAgLy8gU3RvcmUgc2V0VGltZW91dCByZWZlcmVuY2Ugc28gZXM2LXByb21pc2Ugd2lsbCBiZSB1bmFmZmVjdGVkIGJ5XG4gIC8vIG90aGVyIGNvZGUgbW9kaWZ5aW5nIHNldFRpbWVvdXQgKGxpa2Ugc2lub24udXNlRmFrZVRpbWVycygpKVxuICB2YXIgZ2xvYmFsU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdsb2JhbFNldFRpbWVvdXQoZmx1c2gsIDEpO1xuICB9O1xufVxuXG52YXIgcXVldWUgPSBuZXcgQXJyYXkoMTAwMCk7XG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHZhciBjYWxsYmFjayA9IHF1ZXVlW2ldO1xuICAgIHZhciBhcmcgPSBxdWV1ZVtpICsgMV07XG5cbiAgICBjYWxsYmFjayhhcmcpO1xuXG4gICAgcXVldWVbaV0gPSB1bmRlZmluZWQ7XG4gICAgcXVldWVbaSArIDFdID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gYXR0ZW1wdFZlcnR4KCkge1xuICB0cnkge1xuICAgIHZhciByID0gcmVxdWlyZTtcbiAgICB2YXIgdmVydHggPSByKCd2ZXJ0eCcpO1xuICAgIHZlcnR4TmV4dCA9IHZlcnR4LnJ1bk9uTG9vcCB8fCB2ZXJ0eC5ydW5PbkNvbnRleHQ7XG4gICAgcmV0dXJuIHVzZVZlcnR4VGltZXIoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG4gIH1cbn1cblxudmFyIHNjaGVkdWxlRmx1c2ggPSB1bmRlZmluZWQ7XG4vLyBEZWNpZGUgd2hhdCBhc3luYyBtZXRob2QgdG8gdXNlIHRvIHRyaWdnZXJpbmcgcHJvY2Vzc2luZyBvZiBxdWV1ZWQgY2FsbGJhY2tzOlxuaWYgKGlzTm9kZSkge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTmV4dFRpY2soKTtcbn0gZWxzZSBpZiAoQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU11dGF0aW9uT2JzZXJ2ZXIoKTtcbn0gZWxzZSBpZiAoaXNXb3JrZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU1lc3NhZ2VDaGFubmVsKCk7XG59IGVsc2UgaWYgKGJyb3dzZXJXaW5kb3cgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICBzY2hlZHVsZUZsdXNoID0gYXR0ZW1wdFZlcnR4KCk7XG59IGVsc2Uge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB0aGVuKG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gIHZhciBfYXJndW1lbnRzID0gYXJndW1lbnRzO1xuXG4gIHZhciBwYXJlbnQgPSB0aGlzO1xuXG4gIHZhciBjaGlsZCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGlmIChjaGlsZFtQUk9NSVNFX0lEXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWFrZVByb21pc2UoY2hpbGQpO1xuICB9XG5cbiAgdmFyIF9zdGF0ZSA9IHBhcmVudC5fc3RhdGU7XG5cbiAgaWYgKF9zdGF0ZSkge1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBfYXJndW1lbnRzW19zdGF0ZSAtIDFdO1xuICAgICAgYXNhcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2VDYWxsYmFjayhfc3RhdGUsIGNoaWxkLCBjYWxsYmFjaywgcGFyZW50Ll9yZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfSkoKTtcbiAgfSBlbHNlIHtcbiAgICBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkO1xufVxuXG4vKipcbiAgYFByb21pc2UucmVzb2x2ZWAgcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSByZXNvbHZlZCB3aXRoIHRoZVxuICBwYXNzZWQgYHZhbHVlYC4gSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlc29sdmUoMSk7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gdmFsdWUgPT09IDFcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKDEpO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gdmFsdWUgPT09IDFcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgcmVzb2x2ZVxuICBAc3RhdGljXG4gIEBwYXJhbSB7QW55fSB2YWx1ZSB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aFxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIGZ1bGZpbGxlZCB3aXRoIHRoZSBnaXZlblxuICBgdmFsdWVgXG4qL1xuZnVuY3Rpb24gcmVzb2x2ZShvYmplY3QpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICBpZiAob2JqZWN0ICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdC5jb25zdHJ1Y3RvciA9PT0gQ29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG4gIF9yZXNvbHZlKHByb21pc2UsIG9iamVjdCk7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgUFJPTUlTRV9JRCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygxNik7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgUEVORElORyA9IHZvaWQgMDtcbnZhciBGVUxGSUxMRUQgPSAxO1xudmFyIFJFSkVDVEVEID0gMjtcblxudmFyIEdFVF9USEVOX0VSUk9SID0gbmV3IEVycm9yT2JqZWN0KCk7XG5cbmZ1bmN0aW9uIHNlbGZGdWxmaWxsbWVudCgpIHtcbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgY2Fubm90IHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXRzZWxmXCIpO1xufVxuXG5mdW5jdGlvbiBjYW5ub3RSZXR1cm5Pd24oKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKCdBIHByb21pc2VzIGNhbGxiYWNrIGNhbm5vdCByZXR1cm4gdGhhdCBzYW1lIHByb21pc2UuJyk7XG59XG5cbmZ1bmN0aW9uIGdldFRoZW4ocHJvbWlzZSkge1xuICB0cnkge1xuICAgIHJldHVybiBwcm9taXNlLnRoZW47XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgR0VUX1RIRU5fRVJST1IuZXJyb3IgPSBlcnJvcjtcbiAgICByZXR1cm4gR0VUX1RIRU5fRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ5VGhlbih0aGVuLCB2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKSB7XG4gIHRyeSB7XG4gICAgdGhlbi5jYWxsKHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlLCB0aGVuKSB7XG4gIGFzYXAoZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICB2YXIgc2VhbGVkID0gZmFsc2U7XG4gICAgdmFyIGVycm9yID0gdHJ5VGhlbih0aGVuLCB0aGVuYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoc2VhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICBpZiAodGhlbmFibGUgIT09IHZhbHVlKSB7XG4gICAgICAgIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcblxuICAgICAgX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0sICdTZXR0bGU6ICcgKyAocHJvbWlzZS5fbGFiZWwgfHwgJyB1bmtub3duIHByb21pc2UnKSk7XG5cbiAgICBpZiAoIXNlYWxlZCAmJiBlcnJvcikge1xuICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgIH1cbiAgfSwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlKSB7XG4gIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IEZVTEZJTExFRCkge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gIH0gZWxzZSBpZiAodGhlbmFibGUuX3N0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgIF9yZWplY3QocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHRoZW5hYmxlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZXR1cm4gX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkKSB7XG4gIGlmIChtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yID09PSBwcm9taXNlLmNvbnN0cnVjdG9yICYmIHRoZW4kJCA9PT0gdGhlbiAmJiBtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yLnJlc29sdmUgPT09IHJlc29sdmUpIHtcbiAgICBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodGhlbiQkID09PSBHRVRfVEhFTl9FUlJPUikge1xuICAgICAgX3JlamVjdChwcm9taXNlLCBHRVRfVEhFTl9FUlJPUi5lcnJvcik7XG4gICAgfSBlbHNlIGlmICh0aGVuJCQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odGhlbiQkKSkge1xuICAgICAgaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKSB7XG4gIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgIF9yZWplY3QocHJvbWlzZSwgc2VsZkZ1bGZpbGxtZW50KCkpO1xuICB9IGVsc2UgaWYgKG9iamVjdE9yRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCB2YWx1ZSwgZ2V0VGhlbih2YWx1ZSkpO1xuICB9IGVsc2Uge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2hSZWplY3Rpb24ocHJvbWlzZSkge1xuICBpZiAocHJvbWlzZS5fb25lcnJvcikge1xuICAgIHByb21pc2UuX29uZXJyb3IocHJvbWlzZS5fcmVzdWx0KTtcbiAgfVxuXG4gIHB1Ymxpc2gocHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJvbWlzZS5fcmVzdWx0ID0gdmFsdWU7XG4gIHByb21pc2UuX3N0YXRlID0gRlVMRklMTEVEO1xuXG4gIGlmIChwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggIT09IDApIHtcbiAgICBhc2FwKHB1Ymxpc2gsIHByb21pc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKSB7XG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIHJldHVybjtcbiAgfVxuICBwcm9taXNlLl9zdGF0ZSA9IFJFSkVDVEVEO1xuICBwcm9taXNlLl9yZXN1bHQgPSByZWFzb247XG5cbiAgYXNhcChwdWJsaXNoUmVqZWN0aW9uLCBwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gIHZhciBfc3Vic2NyaWJlcnMgPSBwYXJlbnQuX3N1YnNjcmliZXJzO1xuICB2YXIgbGVuZ3RoID0gX3N1YnNjcmliZXJzLmxlbmd0aDtcblxuICBwYXJlbnQuX29uZXJyb3IgPSBudWxsO1xuXG4gIF9zdWJzY3JpYmVyc1tsZW5ndGhdID0gY2hpbGQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBGVUxGSUxMRURdID0gb25GdWxmaWxsbWVudDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIFJFSkVDVEVEXSA9IG9uUmVqZWN0aW9uO1xuXG4gIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkge1xuICAgIGFzYXAocHVibGlzaCwgcGFyZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoKHByb21pc2UpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gIHZhciBzZXR0bGVkID0gcHJvbWlzZS5fc3RhdGU7XG5cbiAgaWYgKHN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGlsZCA9IHVuZGVmaW5lZCxcbiAgICAgIGNhbGxiYWNrID0gdW5kZWZpbmVkLFxuICAgICAgZGV0YWlsID0gcHJvbWlzZS5fcmVzdWx0O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBjaGlsZCA9IHN1YnNjcmliZXJzW2ldO1xuICAgIGNhbGxiYWNrID0gc3Vic2NyaWJlcnNbaSArIHNldHRsZWRdO1xuXG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBjaGlsZCwgY2FsbGJhY2ssIGRldGFpbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgfVxuICB9XG5cbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbn1cblxuZnVuY3Rpb24gRXJyb3JPYmplY3QoKSB7XG4gIHRoaXMuZXJyb3IgPSBudWxsO1xufVxuXG52YXIgVFJZX0NBVENIX0VSUk9SID0gbmV3IEVycm9yT2JqZWN0KCk7XG5cbmZ1bmN0aW9uIHRyeUNhdGNoKGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gY2FsbGJhY2soZGV0YWlsKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIFRSWV9DQVRDSF9FUlJPUi5lcnJvciA9IGU7XG4gICAgcmV0dXJuIFRSWV9DQVRDSF9FUlJPUjtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBwcm9taXNlLCBjYWxsYmFjaywgZGV0YWlsKSB7XG4gIHZhciBoYXNDYWxsYmFjayA9IGlzRnVuY3Rpb24oY2FsbGJhY2spLFxuICAgICAgdmFsdWUgPSB1bmRlZmluZWQsXG4gICAgICBlcnJvciA9IHVuZGVmaW5lZCxcbiAgICAgIHN1Y2NlZWRlZCA9IHVuZGVmaW5lZCxcbiAgICAgIGZhaWxlZCA9IHVuZGVmaW5lZDtcblxuICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICB2YWx1ZSA9IHRyeUNhdGNoKGNhbGxiYWNrLCBkZXRhaWwpO1xuXG4gICAgaWYgKHZhbHVlID09PSBUUllfQ0FUQ0hfRVJST1IpIHtcbiAgICAgIGZhaWxlZCA9IHRydWU7XG4gICAgICBlcnJvciA9IHZhbHVlLmVycm9yO1xuICAgICAgdmFsdWUgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCBjYW5ub3RSZXR1cm5Pd24oKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gZGV0YWlsO1xuICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gIH1cblxuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICAvLyBub29wXG4gIH0gZWxzZSBpZiAoaGFzQ2FsbGJhY2sgJiYgc3VjY2VlZGVkKSB7XG4gICAgICBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChmYWlsZWQpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gRlVMRklMTEVEKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IFJFSkVDVEVEKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVQcm9taXNlKHByb21pc2UsIHJlc29sdmVyKSB7XG4gIHRyeSB7XG4gICAgcmVzb2x2ZXIoZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UodmFsdWUpIHtcbiAgICAgIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiByZWplY3RQcm9taXNlKHJlYXNvbikge1xuICAgICAgX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgX3JlamVjdChwcm9taXNlLCBlKTtcbiAgfVxufVxuXG52YXIgaWQgPSAwO1xuZnVuY3Rpb24gbmV4dElkKCkge1xuICByZXR1cm4gaWQrKztcbn1cblxuZnVuY3Rpb24gbWFrZVByb21pc2UocHJvbWlzZSkge1xuICBwcm9taXNlW1BST01JU0VfSURdID0gaWQrKztcbiAgcHJvbWlzZS5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMgPSBbXTtcbn1cblxuZnVuY3Rpb24gRW51bWVyYXRvcihDb25zdHJ1Y3RvciwgaW5wdXQpIHtcbiAgdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICB0aGlzLnByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG5cbiAgaWYgKCF0aGlzLnByb21pc2VbUFJPTUlTRV9JRF0pIHtcbiAgICBtYWtlUHJvbWlzZSh0aGlzLnByb21pc2UpO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLmxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgICB0aGlzLl9yZW1haW5pbmcgPSBpbnB1dC5sZW5ndGg7XG5cbiAgICB0aGlzLl9yZXN1bHQgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLmxlbmd0aCB8fCAwO1xuICAgICAgdGhpcy5fZW51bWVyYXRlKCk7XG4gICAgICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBfcmVqZWN0KHRoaXMucHJvbWlzZSwgdmFsaWRhdGlvbkVycm9yKCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRpb25FcnJvcigpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcignQXJyYXkgTWV0aG9kcyBtdXN0IGJlIHByb3ZpZGVkIGFuIEFycmF5Jyk7XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fZW51bWVyYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gIHZhciBfaW5wdXQgPSB0aGlzLl9pbnB1dDtcblxuICBmb3IgKHZhciBpID0gMDsgdGhpcy5fc3RhdGUgPT09IFBFTkRJTkcgJiYgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5fZWFjaEVudHJ5KF9pbnB1dFtpXSwgaSk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9lYWNoRW50cnkgPSBmdW5jdGlvbiAoZW50cnksIGkpIHtcbiAgdmFyIGMgPSB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yO1xuICB2YXIgcmVzb2x2ZSQkID0gYy5yZXNvbHZlO1xuXG4gIGlmIChyZXNvbHZlJCQgPT09IHJlc29sdmUpIHtcbiAgICB2YXIgX3RoZW4gPSBnZXRUaGVuKGVudHJ5KTtcblxuICAgIGlmIChfdGhlbiA9PT0gdGhlbiAmJiBlbnRyeS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICAgIHRoaXMuX3NldHRsZWRBdChlbnRyeS5fc3RhdGUsIGksIGVudHJ5Ll9yZXN1bHQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9yZW1haW5pbmctLTtcbiAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IGVudHJ5O1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gUHJvbWlzZSkge1xuICAgICAgdmFyIHByb21pc2UgPSBuZXcgYyhub29wKTtcbiAgICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgZW50cnksIF90aGVuKTtcbiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChwcm9taXNlLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KG5ldyBjKGZ1bmN0aW9uIChyZXNvbHZlJCQpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUkJChlbnRyeSk7XG4gICAgICB9KSwgaSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX3dpbGxTZXR0bGVBdChyZXNvbHZlJCQoZW50cnkpLCBpKTtcbiAgfVxufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX3NldHRsZWRBdCA9IGZ1bmN0aW9uIChzdGF0ZSwgaSwgdmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG5cbiAgaWYgKHByb21pc2UuX3N0YXRlID09PSBQRU5ESU5HKSB7XG4gICAgdGhpcy5fcmVtYWluaW5nLS07XG5cbiAgICBpZiAoc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVzdWx0W2ldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgfVxufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX3dpbGxTZXR0bGVBdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBpKSB7XG4gIHZhciBlbnVtZXJhdG9yID0gdGhpcztcblxuICBzdWJzY3JpYmUocHJvbWlzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KEZVTEZJTExFRCwgaSwgdmFsdWUpO1xuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChSRUpFQ1RFRCwgaSwgcmVhc29uKTtcbiAgfSk7XG59O1xuXG4vKipcbiAgYFByb21pc2UuYWxsYCBhY2NlcHRzIGFuIGFycmF5IG9mIHByb21pc2VzLCBhbmQgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoXG4gIGlzIGZ1bGZpbGxlZCB3aXRoIGFuIGFycmF5IG9mIGZ1bGZpbGxtZW50IHZhbHVlcyBmb3IgdGhlIHBhc3NlZCBwcm9taXNlcywgb3JcbiAgcmVqZWN0ZWQgd2l0aCB0aGUgcmVhc29uIG9mIHRoZSBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBiZSByZWplY3RlZC4gSXQgY2FzdHMgYWxsXG4gIGVsZW1lbnRzIG9mIHRoZSBwYXNzZWQgaXRlcmFibGUgdG8gcHJvbWlzZXMgYXMgaXQgcnVucyB0aGlzIGFsZ29yaXRobS5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gcmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gcmVzb2x2ZSgyKTtcbiAgbGV0IHByb21pc2UzID0gcmVzb2x2ZSgzKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIFRoZSBhcnJheSBoZXJlIHdvdWxkIGJlIFsgMSwgMiwgMyBdO1xuICB9KTtcbiAgYGBgXG5cbiAgSWYgYW55IG9mIHRoZSBgcHJvbWlzZXNgIGdpdmVuIHRvIGBhbGxgIGFyZSByZWplY3RlZCwgdGhlIGZpcnN0IHByb21pc2VcbiAgdGhhdCBpcyByZWplY3RlZCB3aWxsIGJlIGdpdmVuIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSByZXR1cm5lZCBwcm9taXNlcydzXG4gIHJlamVjdGlvbiBoYW5kbGVyLiBGb3IgZXhhbXBsZTpcblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gcmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gcmVqZWN0KG5ldyBFcnJvcihcIjJcIikpO1xuICBsZXQgcHJvbWlzZTMgPSByZWplY3QobmV3IEVycm9yKFwiM1wiKSk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVucyBiZWNhdXNlIHRoZXJlIGFyZSByZWplY3RlZCBwcm9taXNlcyFcbiAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAvLyBlcnJvci5tZXNzYWdlID09PSBcIjJcIlxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCBhbGxcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FycmF5fSBlbnRyaWVzIGFycmF5IG9mIHByb21pc2VzXG4gIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGxhYmVsaW5nIHRoZSBwcm9taXNlLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2hlbiBhbGwgYHByb21pc2VzYCBoYXZlIGJlZW5cbiAgZnVsZmlsbGVkLCBvciByZWplY3RlZCBpZiBhbnkgb2YgdGhlbSBiZWNvbWUgcmVqZWN0ZWQuXG4gIEBzdGF0aWNcbiovXG5mdW5jdGlvbiBhbGwoZW50cmllcykge1xuICByZXR1cm4gbmV3IEVudW1lcmF0b3IodGhpcywgZW50cmllcykucHJvbWlzZTtcbn1cblxuLyoqXG4gIGBQcm9taXNlLnJhY2VgIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaCBpcyBzZXR0bGVkIGluIHRoZSBzYW1lIHdheSBhcyB0aGVcbiAgZmlyc3QgcGFzc2VkIHByb21pc2UgdG8gc2V0dGxlLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMScpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuXG4gIGxldCBwcm9taXNlMiA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAyJyk7XG4gICAgfSwgMTAwKTtcbiAgfSk7XG5cbiAgUHJvbWlzZS5yYWNlKFtwcm9taXNlMSwgcHJvbWlzZTJdKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgLy8gcmVzdWx0ID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIGl0IHdhcyByZXNvbHZlZCBiZWZvcmUgcHJvbWlzZTFcbiAgICAvLyB3YXMgcmVzb2x2ZWQuXG4gIH0pO1xuICBgYGBcblxuICBgUHJvbWlzZS5yYWNlYCBpcyBkZXRlcm1pbmlzdGljIGluIHRoYXQgb25seSB0aGUgc3RhdGUgb2YgdGhlIGZpcnN0XG4gIHNldHRsZWQgcHJvbWlzZSBtYXR0ZXJzLiBGb3IgZXhhbXBsZSwgZXZlbiBpZiBvdGhlciBwcm9taXNlcyBnaXZlbiB0byB0aGVcbiAgYHByb21pc2VzYCBhcnJheSBhcmd1bWVudCBhcmUgcmVzb2x2ZWQsIGJ1dCB0aGUgZmlyc3Qgc2V0dGxlZCBwcm9taXNlIGhhc1xuICBiZWNvbWUgcmVqZWN0ZWQgYmVmb3JlIHRoZSBvdGhlciBwcm9taXNlcyBiZWNhbWUgZnVsZmlsbGVkLCB0aGUgcmV0dXJuZWRcbiAgcHJvbWlzZSB3aWxsIGJlY29tZSByZWplY3RlZDpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdwcm9taXNlIDInKSk7XG4gICAgfSwgMTAwKTtcbiAgfSk7XG5cbiAgUHJvbWlzZS5yYWNlKFtwcm9taXNlMSwgcHJvbWlzZTJdKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnNcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ3Byb21pc2UgMicgYmVjYXVzZSBwcm9taXNlIDIgYmVjYW1lIHJlamVjdGVkIGJlZm9yZVxuICAgIC8vIHByb21pc2UgMSBiZWNhbWUgZnVsZmlsbGVkXG4gIH0pO1xuICBgYGBcblxuICBBbiBleGFtcGxlIHJlYWwtd29ybGQgdXNlIGNhc2UgaXMgaW1wbGVtZW50aW5nIHRpbWVvdXRzOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgUHJvbWlzZS5yYWNlKFthamF4KCdmb28uanNvbicpLCB0aW1lb3V0KDUwMDApXSlcbiAgYGBgXG5cbiAgQG1ldGhvZCByYWNlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBcnJheX0gcHJvbWlzZXMgYXJyYXkgb2YgcHJvbWlzZXMgdG8gb2JzZXJ2ZVxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB3aGljaCBzZXR0bGVzIGluIHRoZSBzYW1lIHdheSBhcyB0aGUgZmlyc3QgcGFzc2VkXG4gIHByb21pc2UgdG8gc2V0dGxlLlxuKi9cbmZ1bmN0aW9uIHJhY2UoZW50cmllcykge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gIGlmICghaXNBcnJheShlbnRyaWVzKSkge1xuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gKF8sIHJlamVjdCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGFuIGFycmF5IHRvIHJhY2UuJykpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGVudHJpZXMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBDb25zdHJ1Y3Rvci5yZXNvbHZlKGVudHJpZXNbaV0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAgYFByb21pc2UucmVqZWN0YCByZXR1cm5zIGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBwYXNzZWQgYHJlYXNvbmAuXG4gIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICByZWplY3QobmV3IEVycm9yKCdXSE9PUFMnKSk7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdXSE9PUFMnXG4gIH0pO1xuICBgYGBcblxuICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdXSE9PUFMnXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlamVjdFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QW55fSByZWFzb24gdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIHdpdGguXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIGdpdmVuIGByZWFzb25gLlxuKi9cbmZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG4gIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIG5lZWRzUmVzb2x2ZXIoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYSByZXNvbHZlciBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHByb21pc2UgY29uc3RydWN0b3InKTtcbn1cblxuZnVuY3Rpb24gbmVlZHNOZXcoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdQcm9taXNlJzogUGxlYXNlIHVzZSB0aGUgJ25ldycgb3BlcmF0b3IsIHRoaXMgb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG59XG5cbi8qKlxuICBQcm9taXNlIG9iamVjdHMgcmVwcmVzZW50IHRoZSBldmVudHVhbCByZXN1bHQgb2YgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbi4gVGhlXG4gIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsIHdoaWNoXG4gIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlIHJlYXNvblxuICB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cblxuICBUZXJtaW5vbG9neVxuICAtLS0tLS0tLS0tLVxuXG4gIC0gYHByb21pc2VgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB3aXRoIGEgYHRoZW5gIG1ldGhvZCB3aG9zZSBiZWhhdmlvciBjb25mb3JtcyB0byB0aGlzIHNwZWNpZmljYXRpb24uXG4gIC0gYHRoZW5hYmxlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gdGhhdCBkZWZpbmVzIGEgYHRoZW5gIG1ldGhvZC5cbiAgLSBgdmFsdWVgIGlzIGFueSBsZWdhbCBKYXZhU2NyaXB0IHZhbHVlIChpbmNsdWRpbmcgdW5kZWZpbmVkLCBhIHRoZW5hYmxlLCBvciBhIHByb21pc2UpLlxuICAtIGBleGNlcHRpb25gIGlzIGEgdmFsdWUgdGhhdCBpcyB0aHJvd24gdXNpbmcgdGhlIHRocm93IHN0YXRlbWVudC5cbiAgLSBgcmVhc29uYCBpcyBhIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoeSBhIHByb21pc2Ugd2FzIHJlamVjdGVkLlxuICAtIGBzZXR0bGVkYCB0aGUgZmluYWwgcmVzdGluZyBzdGF0ZSBvZiBhIHByb21pc2UsIGZ1bGZpbGxlZCBvciByZWplY3RlZC5cblxuICBBIHByb21pc2UgY2FuIGJlIGluIG9uZSBvZiB0aHJlZSBzdGF0ZXM6IHBlbmRpbmcsIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQuXG5cbiAgUHJvbWlzZXMgdGhhdCBhcmUgZnVsZmlsbGVkIGhhdmUgYSBmdWxmaWxsbWVudCB2YWx1ZSBhbmQgYXJlIGluIHRoZSBmdWxmaWxsZWRcbiAgc3RhdGUuICBQcm9taXNlcyB0aGF0IGFyZSByZWplY3RlZCBoYXZlIGEgcmVqZWN0aW9uIHJlYXNvbiBhbmQgYXJlIGluIHRoZVxuICByZWplY3RlZCBzdGF0ZS4gIEEgZnVsZmlsbG1lbnQgdmFsdWUgaXMgbmV2ZXIgYSB0aGVuYWJsZS5cblxuICBQcm9taXNlcyBjYW4gYWxzbyBiZSBzYWlkIHRvICpyZXNvbHZlKiBhIHZhbHVlLiAgSWYgdGhpcyB2YWx1ZSBpcyBhbHNvIGFcbiAgcHJvbWlzZSwgdGhlbiB0aGUgb3JpZ2luYWwgcHJvbWlzZSdzIHNldHRsZWQgc3RhdGUgd2lsbCBtYXRjaCB0aGUgdmFsdWUnc1xuICBzZXR0bGVkIHN0YXRlLiAgU28gYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCByZWplY3RzIHdpbGxcbiAgaXRzZWxmIHJlamVjdCwgYW5kIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgd2lsbFxuICBpdHNlbGYgZnVsZmlsbC5cblxuXG4gIEJhc2ljIFVzYWdlOlxuICAtLS0tLS0tLS0tLS1cblxuICBgYGBqc1xuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIC8vIG9uIHN1Y2Nlc3NcbiAgICByZXNvbHZlKHZhbHVlKTtcblxuICAgIC8vIG9uIGZhaWx1cmVcbiAgICByZWplY3QocmVhc29uKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBBZHZhbmNlZCBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tLS0tXG5cbiAgUHJvbWlzZXMgc2hpbmUgd2hlbiBhYnN0cmFjdGluZyBhd2F5IGFzeW5jaHJvbm91cyBpbnRlcmFjdGlvbnMgc3VjaCBhc1xuICBgWE1MSHR0cFJlcXVlc3Rgcy5cblxuICBgYGBqc1xuICBmdW5jdGlvbiBnZXRKU09OKHVybCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBoYW5kbGVyO1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgeGhyLnNlbmQoKTtcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gdGhpcy5ET05FKSB7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2dldEpTT046IGAnICsgdXJsICsgJ2AgZmFpbGVkIHdpdGggc3RhdHVzOiBbJyArIHRoaXMuc3RhdHVzICsgJ10nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0SlNPTignL3Bvc3RzLmpzb24nKS50aGVuKGZ1bmN0aW9uKGpzb24pIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIFVubGlrZSBjYWxsYmFja3MsIHByb21pc2VzIGFyZSBncmVhdCBjb21wb3NhYmxlIHByaW1pdGl2ZXMuXG5cbiAgYGBganNcbiAgUHJvbWlzZS5hbGwoW1xuICAgIGdldEpTT04oJy9wb3N0cycpLFxuICAgIGdldEpTT04oJy9jb21tZW50cycpXG4gIF0pLnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcbiAgICB2YWx1ZXNbMF0gLy8gPT4gcG9zdHNKU09OXG4gICAgdmFsdWVzWzFdIC8vID0+IGNvbW1lbnRzSlNPTlxuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSk7XG4gIGBgYFxuXG4gIEBjbGFzcyBQcm9taXNlXG4gIEBwYXJhbSB7ZnVuY3Rpb259IHJlc29sdmVyXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQGNvbnN0cnVjdG9yXG4qL1xuZnVuY3Rpb24gUHJvbWlzZShyZXNvbHZlcikge1xuICB0aGlzW1BST01JU0VfSURdID0gbmV4dElkKCk7XG4gIHRoaXMuX3Jlc3VsdCA9IHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkO1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuXG4gIGlmIChub29wICE9PSByZXNvbHZlcikge1xuICAgIHR5cGVvZiByZXNvbHZlciAhPT0gJ2Z1bmN0aW9uJyAmJiBuZWVkc1Jlc29sdmVyKCk7XG4gICAgdGhpcyBpbnN0YW5jZW9mIFByb21pc2UgPyBpbml0aWFsaXplUHJvbWlzZSh0aGlzLCByZXNvbHZlcikgOiBuZWVkc05ldygpO1xuICB9XG59XG5cblByb21pc2UuYWxsID0gYWxsO1xuUHJvbWlzZS5yYWNlID0gcmFjZTtcblByb21pc2UucmVzb2x2ZSA9IHJlc29sdmU7XG5Qcm9taXNlLnJlamVjdCA9IHJlamVjdDtcblByb21pc2UuX3NldFNjaGVkdWxlciA9IHNldFNjaGVkdWxlcjtcblByb21pc2UuX3NldEFzYXAgPSBzZXRBc2FwO1xuUHJvbWlzZS5fYXNhcCA9IGFzYXA7XG5cblByb21pc2UucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUHJvbWlzZSxcblxuICAvKipcbiAgICBUaGUgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCxcbiAgICB3aGljaCByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZVxuICAgIHJlYXNvbiB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24odXNlcil7XG4gICAgICAvLyB1c2VyIGlzIGF2YWlsYWJsZVxuICAgIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyB1c2VyIGlzIHVuYXZhaWxhYmxlLCBhbmQgeW91IGFyZSBnaXZlbiB0aGUgcmVhc29uIHdoeVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBDaGFpbmluZ1xuICAgIC0tLS0tLS0tXG4gIFxuICAgIFRoZSByZXR1cm4gdmFsdWUgb2YgYHRoZW5gIGlzIGl0c2VsZiBhIHByb21pc2UuICBUaGlzIHNlY29uZCwgJ2Rvd25zdHJlYW0nXG4gICAgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZpcnN0IHByb21pc2UncyBmdWxmaWxsbWVudFxuICAgIG9yIHJlamVjdGlvbiBoYW5kbGVyLCBvciByZWplY3RlZCBpZiB0aGUgaGFuZGxlciB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIHVzZXIubmFtZTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZXR1cm4gJ2RlZmF1bHQgbmFtZSc7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodXNlck5hbWUpIHtcbiAgICAgIC8vIElmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgdXNlck5hbWVgIHdpbGwgYmUgdGhlIHVzZXIncyBuYW1lLCBvdGhlcndpc2UgaXRcbiAgICAgIC8vIHdpbGwgYmUgYCdkZWZhdWx0IG5hbWUnYFxuICAgIH0pO1xuICBcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknKTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BmaW5kVXNlcmAgcmVqZWN0ZWQgYW5kIHdlJ3JlIHVuaGFwcHknKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIGlmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgcmVhc29uYCB3aWxsIGJlICdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScuXG4gICAgICAvLyBJZiBgZmluZFVzZXJgIHJlamVjdGVkLCBgcmVhc29uYCB3aWxsIGJlICdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jy5cbiAgICB9KTtcbiAgICBgYGBcbiAgICBJZiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIGRvZXMgbm90IHNwZWNpZnkgYSByZWplY3Rpb24gaGFuZGxlciwgcmVqZWN0aW9uIHJlYXNvbnMgd2lsbCBiZSBwcm9wYWdhdGVkIGZ1cnRoZXIgZG93bnN0cmVhbS5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBQZWRhZ29naWNhbEV4Y2VwdGlvbignVXBzdHJlYW0gZXJyb3InKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gVGhlIGBQZWRnYWdvY2lhbEV4Y2VwdGlvbmAgaXMgcHJvcGFnYXRlZCBhbGwgdGhlIHdheSBkb3duIHRvIGhlcmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQXNzaW1pbGF0aW9uXG4gICAgLS0tLS0tLS0tLS0tXG4gIFxuICAgIFNvbWV0aW1lcyB0aGUgdmFsdWUgeW91IHdhbnQgdG8gcHJvcGFnYXRlIHRvIGEgZG93bnN0cmVhbSBwcm9taXNlIGNhbiBvbmx5IGJlXG4gICAgcmV0cmlldmVkIGFzeW5jaHJvbm91c2x5LiBUaGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXR1cm5pbmcgYSBwcm9taXNlIGluIHRoZVxuICAgIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBoYW5kbGVyLiBUaGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgdGhlbiBiZSBwZW5kaW5nXG4gICAgdW50aWwgdGhlIHJldHVybmVkIHByb21pc2UgaXMgc2V0dGxlZC4gVGhpcyBpcyBjYWxsZWQgKmFzc2ltaWxhdGlvbiouXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAgIC8vIFRoZSB1c2VyJ3MgY29tbWVudHMgYXJlIG5vdyBhdmFpbGFibGVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgSWYgdGhlIGFzc2ltbGlhdGVkIHByb21pc2UgcmVqZWN0cywgdGhlbiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgYWxzbyByZWplY3QuXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgZnVsZmlsbHMsIHdlJ2xsIGhhdmUgdGhlIHZhbHVlIGhlcmVcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIHJlamVjdHMsIHdlJ2xsIGhhdmUgdGhlIHJlYXNvbiBoZXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFNpbXBsZSBFeGFtcGxlXG4gICAgLS0tLS0tLS0tLS0tLS1cbiAgXG4gICAgU3luY2hyb25vdXMgRXhhbXBsZVxuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgbGV0IHJlc3VsdDtcbiAgXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZpbmRSZXN1bHQoKTtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgRXJyYmFjayBFeGFtcGxlXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFJlc3VsdChmdW5jdGlvbihyZXN1bHQsIGVycil7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH1cbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgUHJvbWlzZSBFeGFtcGxlO1xuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgZmluZFJlc3VsdCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBBZHZhbmNlZCBFeGFtcGxlXG4gICAgLS0tLS0tLS0tLS0tLS1cbiAgXG4gICAgU3luY2hyb25vdXMgRXhhbXBsZVxuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgbGV0IGF1dGhvciwgYm9va3M7XG4gIFxuICAgIHRyeSB7XG4gICAgICBhdXRob3IgPSBmaW5kQXV0aG9yKCk7XG4gICAgICBib29rcyAgPSBmaW5kQm9va3NCeUF1dGhvcihhdXRob3IpO1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfVxuICAgIGBgYFxuICBcbiAgICBFcnJiYWNrIEV4YW1wbGVcbiAgXG4gICAgYGBganNcbiAgXG4gICAgZnVuY3Rpb24gZm91bmRCb29rcyhib29rcykge1xuICBcbiAgICB9XG4gIFxuICAgIGZ1bmN0aW9uIGZhaWx1cmUocmVhc29uKSB7XG4gIFxuICAgIH1cbiAgXG4gICAgZmluZEF1dGhvcihmdW5jdGlvbihhdXRob3IsIGVycil7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmaW5kQm9vb2tzQnlBdXRob3IoYXV0aG9yLCBmdW5jdGlvbihib29rcywgZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm91bmRCb29rcyhib29rcyk7XG4gICAgICAgICAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgZmFpbHVyZShyZWFzb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBQcm9taXNlIEV4YW1wbGU7XG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBmaW5kQXV0aG9yKCkuXG4gICAgICB0aGVuKGZpbmRCb29rc0J5QXV0aG9yKS5cbiAgICAgIHRoZW4oZnVuY3Rpb24oYm9va3Mpe1xuICAgICAgICAvLyBmb3VuZCBib29rc1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIHRoZW5cbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZ1bGZpbGxlZFxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0ZWRcbiAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgdGhlbjogdGhlbixcblxuICAvKipcbiAgICBgY2F0Y2hgIGlzIHNpbXBseSBzdWdhciBmb3IgYHRoZW4odW5kZWZpbmVkLCBvblJlamVjdGlvbilgIHdoaWNoIG1ha2VzIGl0IHRoZSBzYW1lXG4gICAgYXMgdGhlIGNhdGNoIGJsb2NrIG9mIGEgdHJ5L2NhdGNoIHN0YXRlbWVudC5cbiAgXG4gICAgYGBganNcbiAgICBmdW5jdGlvbiBmaW5kQXV0aG9yKCl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkbid0IGZpbmQgdGhhdCBhdXRob3InKTtcbiAgICB9XG4gIFxuICAgIC8vIHN5bmNocm9ub3VzXG4gICAgdHJ5IHtcbiAgICAgIGZpbmRBdXRob3IoKTtcbiAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9XG4gIFxuICAgIC8vIGFzeW5jIHdpdGggcHJvbWlzZXNcbiAgICBmaW5kQXV0aG9yKCkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEBtZXRob2QgY2F0Y2hcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGlvblxuICAgIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuICAnY2F0Y2gnOiBmdW5jdGlvbiBfY2F0Y2gob25SZWplY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0aW9uKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gICAgdmFyIGxvY2FsID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGxvY2FsID0gZ2xvYmFsO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGxvY2FsID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9jYWwgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvbHlmaWxsIGZhaWxlZCBiZWNhdXNlIGdsb2JhbCBvYmplY3QgaXMgdW5hdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFAgPSBsb2NhbC5Qcm9taXNlO1xuXG4gICAgaWYgKFApIHtcbiAgICAgICAgdmFyIHByb21pc2VUb1N0cmluZyA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcm9taXNlVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUC5yZXNvbHZlKCkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBzaWxlbnRseSBpZ25vcmVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvbWlzZVRvU3RyaW5nID09PSAnW29iamVjdCBQcm9taXNlXScgJiYgIVAuY2FzdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9jYWwuUHJvbWlzZSA9IFByb21pc2U7XG59XG5cbi8vIFN0cmFuZ2UgY29tcGF0Li5cblByb21pc2UucG9seWZpbGwgPSBwb2x5ZmlsbDtcblByb21pc2UuUHJvbWlzZSA9IFByb21pc2U7XG5cbnJldHVybiBQcm9taXNlO1xuXG59KSkpO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIl9wcm9jZXNzXCI6OX1dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gdGhlIHdoYXR3Zy1mZXRjaCBwb2x5ZmlsbCBpbnN0YWxscyB0aGUgZmV0Y2goKSBmdW5jdGlvblxuLy8gb24gdGhlIGdsb2JhbCBvYmplY3QgKHdpbmRvdyBvciBzZWxmKVxuLy9cbi8vIFJldHVybiB0aGF0IGFzIHRoZSBleHBvcnQgZm9yIHVzZSBpbiBXZWJwYWNrLCBCcm93c2VyaWZ5IGV0Yy5cbnJlcXVpcmUoJ3doYXR3Zy1mZXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBzZWxmLmZldGNoLmJpbmQoc2VsZik7XG5cbn0se1wid2hhdHdnLWZldGNoXCI6MTB9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cbn0se31dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbihzZWxmKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoc2VsZi5mZXRjaCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN1cHBvcnQgPSB7XG4gICAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICAgIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICAgIGJsb2I6ICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmICdCbG9iJyBpbiBzZWxmICYmIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgICBdXG5cbiAgICB2YXIgaXNEYXRhVmlldyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG4gICAgfVxuXG4gICAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID0gQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICAgIH1cbiAgICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5cXF5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbiAgZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXRlcmF0b3JcbiAgfVxuXG4gIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICAgIHRoaXMubWFwID0ge31cblxuICAgIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgICAgfSwgdGhpcylcblxuICAgIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgICB9LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gICAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlKycsJyt2YWx1ZSA6IHZhbHVlXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKG5hbWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHsgaXRlbXMucHVzaCh2YWx1ZSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgICAgfVxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICAgIH1cbiAgICByZXR1cm4gY2hhcnMuam9pbignJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICAgIGlmIChidWYuc2xpY2UpIHtcbiAgICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBCb2R5KCkge1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIEJvZHlJbml0IHR5cGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICAgIHJldHVybiAobWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEpID8gdXBjYXNlZCA6IG1ldGhvZFxuICB9XG5cbiAgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnVybCA9IGlucHV0XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdvbWl0J1xuICAgIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gICAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICAgIH1cbiAgICB0aGlzLl9pbml0Qm9keShib2R5KVxuICB9XG5cbiAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywgeyBib2R5OiB0aGlzLl9ib2R5SW5pdCB9KVxuICB9XG5cbiAgZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gICAgYm9keS50cmltKCkuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBmb3JtXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAgIHJhd0hlYWRlcnMuc3BsaXQoJ1xcclxcbicpLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGhlYWRlcnNcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuICBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gICAgdGhpcy5zdGF0dXMgPSAnc3RhdHVzJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXMgOiAyMDBcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snXG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cbiAgUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgICB1cmw6IHRoaXMudXJsXG4gICAgfSlcbiAgfVxuXG4gIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cbiAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICAgIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbiAgfVxuXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2VcblxuICBzZWxmLmZldGNoID0gZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG5cbiAgICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gICAgfSlcbiAgfVxuICBzZWxmLmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMpO1xuXG59LHt9XX0se30sWzNdKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSmhjSEF2YW5NdllXSnZkWFF1YW5NaUxDSmhjSEF2YW5NdmJHRnVaR2x1Wnk1cWN5SXNJbUZ3Y0M5cWN5OXRZV2x1TG1weklpd2lZWEJ3TDJwekwzQnliMnBsWTNSekxtcHpJaXdpWVhCd0wycHpMM053WVM1cWN5SXNJbUZ3Y0M5cWN5OTFkR2xzY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5bGN6WXRjSEp2YldselpTOWthWE4wTDJWek5pMXdjbTl0YVhObExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwybHpiMjF2Y25Cb2FXTXRabVYwWTJndlptVjBZMmd0Ym5CdExXSnliM2R6WlhKcFpua3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZjSEp2WTJWemN5OWljbTkzYzJWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwzZG9ZWFIzWnkxbVpYUmphQzltWlhSamFDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVRzN096czdPMnRDUTBWM1FpeFpPenRCUVVaNFFqczdRVUZGWlN4VFFVRlRMRmxCUVZRc1IwRkJkMEk3TzBGQlJYSkRPMEZCUTBFN1FVRkRRU3hOUVVGTkxGZEJRVmNzVTBGQlV5eGhRVUZVTEVOQlFYVkNMSE5DUVVGMlFpeERRVUZxUWp0QlFVTkJMRmRCUVZNc1owSkJRVlFzUTBGQk1FSXNUMEZCTVVJc1JVRkJiVU1zV1VGQlZ6dEJRVU0xUXl3MFFrRkJXU3hMUVVGTExGVkJRV3BDTzBGQlEwUXNSMEZHUkN4RlFVVkhMRXRCUmtnN1FVRkpSRHM3T3pzN096czdhMEpEVkhWQ0xHTTdPMEZCUkhoQ08wRkJRMlVzVTBGQlV5eGpRVUZVTEVkQlFUQkNPMEZCUTNaRExFZEJRVU1zV1VGQlZ6czdRVUZGVmp0QlFVTkJMRkZCUVUwc1YwRkJWeXhUUVVGWUxGRkJRVmNzUjBGQlRUdEJRVU55UWl4VlFVRk5MRTlCUVU4c1UwRkJVeXhoUVVGVUxFTkJRWFZDTEZsQlFYWkNMRU5CUVdJN1FVRkRRU3hWUVVGTkxGTkJRVk1zVTBGQlZDeE5RVUZUTEVkQlFVMDdRVUZEYmtJc1dVRkJTU3hSUVVGUkxFdEJRVXNzVjBGQlRDeExRVUZ4UWl4SlFVRnFReXhGUVVGMVF6dEJRVU55UXl4alFVRkpMRTlCUVU4c1QwRkJUeXhWUVVGUUxFZEJRVzlDTEU5QlFVOHNWMEZCZEVNN1FVRkRRU3hsUVVGTExGZEJRVXdzUjBGQmJVSXNTMEZCU3l4alFVRk1MRVZCUVc1Q08wRkJRMFE3UVVGRFJpeFBRVXhFTzBGQlRVRXNORUpCUVhOQ0xFMUJRWFJDTzBGQlEwUXNTMEZVUkRzN1FVRlhRVHRCUVVOQkxGZEJRVThzWjBKQlFWQXNRMEZCZDBJc1VVRkJlRUlzUlVGQmEwTXNVVUZCYkVNN1FVRkZSQ3hIUVdwQ1JEdEJRV3RDUkRzN096czdRVU53UWtRN08wRkJSVUVzUTBGQlF5eFpRVUZYT3p0QlFVVldPMEZCUTBFc1RVRkJUU3hUUVVGVExGTkJRVk1zWVVGQlZDeERRVUYxUWl4UlFVRjJRaXhEUVVGbU8wRkJRMEVzVFVGQlRTeGpRVUZqTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXh0UWtGQmRrSXNRMEZCY0VJN1FVRkRRU3hOUVVGTkxFOUJRVThzVTBGQlV5eGhRVUZVTEVOQlFYVkNMRlZCUVhaQ0xFTkJRV0k3TzBGQlJVRTdRVUZEUVN4WFFVRlRMRlZCUVZRc1IwRkJjMEk3UVVGRGNFSXNWMEZCVHl4VFFVRlFMRU5CUVdsQ0xFMUJRV3BDTEVOQlFYZENMRmRCUVhoQ08wRkJRMFE3UVVGRFJDeFhRVUZUTEZWQlFWUXNRMEZCYjBJc1MwRkJjRUlzUlVGQk1rSTdRVUZEZWtJc1dVRkJVU3hIUVVGU0xFTkJRVmtzUzBGQldqdEJRVU5CTEZGQlFVa3NUVUZCVFN4TlFVRk9MRWxCUVdkQ0xFMUJRVTBzVFVGQlRpeERRVUZoTEZGQlFXSXNTMEZCTUVJc1IwRkJPVU1zUlVGQmJVUTdRVUZEYWtRc1dVRkJUU3hqUVVGT08wRkJRMEU3UVVGRFFTeFZRVUZKTEUxQlFVMHNUVUZCVGl4RFFVRmhMRkZCUVdJc1MwRkJNRUlzVDBGQlR5eFJRVUZRTEVOQlFXZENMRkZCUVRsRExFVkJRWGRFTzBGQlEzUkVMR2RDUVVGUkxGTkJRVklzUTBGQmEwSXNTVUZCYkVJc1JVRkJkMElzU1VGQmVFSXNSVUZCT0VJc1RVRkJUU3hOUVVGT0xFTkJRV0VzVVVGQk0wTTdRVUZEUVR0QlFVTkVPMEZCUTBZN1FVRkRSanM3UVVGRlJEdEJRVU5CTzBGQlEwRXNZMEZCV1N4blFrRkJXaXhEUVVFMlFpeFBRVUUzUWl4RlFVRnpReXhWUVVGMFF5eEZRVUZyUkN4TFFVRnNSRHRCUVVOQkxFOUJRVXNzWjBKQlFVd3NRMEZCYzBJc1QwRkJkRUlzUlVGQkswSXNWVUZCTDBJc1JVRkJNa01zUzBGQk0wTTdRVUZGUkN4RFFUVkNSRHM3T3pzN096czdhMEpEUTNkQ0xHVTdPMEZCU0hoQ096dEJRVVZCTzBGQlEyVXNVMEZCVXl4bFFVRlVMRWRCUVRKQ096dEJRVVY0UXp0QlFVTkJPMEZCUTBFc1RVRkJUU3hYUVVGWExGTkJRVk1zWVVGQlZDeERRVUYxUWl4elFrRkJka0lzUTBGQmFrSTdRVUZEUVN4WFFVRlRMR2RDUVVGVUxFTkJRVEJDTEU5QlFURkNMRVZCUVcxRExGbEJRVmM3UVVGRE5VTXNORUpCUVZrc1MwRkJTeXhWUVVGcVFqdEJRVU5FTEVkQlJrUXNSVUZGUnl4TFFVWklPenRCUVVsQk8wRkJRMEVzVFVGQlRTeFhRVUZYTEZOQlFWTXNaMEpCUVZRc1EwRkJNRUlzWVVGQk1VSXNRMEZCYWtJN1FVRkRRU3hYUVVGVExFOUJRVlFzUTBGQmFVSXNaMEpCUVZFN1FVRkRka0lzVVVGQlRTeFBRVUZQTEV0QlFVc3NZVUZCVEN4RFFVRnRRaXh6UWtGQmJrSXNRMEZCWWp0QlFVTkJMRk5CUVVzc1owSkJRVXdzUTBGQmMwSXNUMEZCZEVJc1JVRkJLMElzWVVGQkwwSXNSVUZCT0VNc1MwRkJPVU03UVVGRFJDeEhRVWhFTzBGQlNVRXNWMEZCVXl4UFFVRlVMRU5CUVdsQ0xHZENRVUZSTzBGQlEzWkNMRkZCUVUwc1QwRkJUeXhMUVVGTExHRkJRVXdzUTBGQmJVSXNjVUpCUVc1Q0xFTkJRV0k3UVVGRFFTeFRRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xFOUJRWFJDTEVWQlFTdENMRmxCUVM5Q0xFVkJRVFpETEV0QlFUZERPMEZCUTBRc1IwRklSRHM3UVVGTFFTeFhRVUZUTEZsQlFWUXNSMEZCZDBJN1FVRkRkRUlzVVVGQlRTeFZRVUZWTEV0QlFVc3NWVUZCY2tJN1FVRkRRU3hSUVVGTkxFOUJRVThzVVVGQlVTeHpRa0ZCY2tJN1FVRkRRU3haUVVGUkxFdEJRVklzUTBGQll5eFRRVUZrTEVkQlFUQkNMRU5CUVRGQ08wRkJRMEVzV1VGQlVTeFRRVUZTTEVOQlFXdENMRTFCUVd4Q0xFTkJRWGxDTERSQ1FVRjZRanRCUVVOQkxGTkJRVXNzVTBGQlRDeERRVUZsTEUxQlFXWXNRMEZCYzBJc0swSkJRWFJDTzBGQlEwUTdPMEZCUlVRc1YwRkJVeXhoUVVGVUxFZEJRWGxDTzBGQlEzWkNMRk5CUVVzc1UwRkJUQ3hEUVVGbExFMUJRV1lzUTBGQmMwSXNLMEpCUVhSQ08wRkJRMEVzVVVGQlRTeFZRVUZWTEV0QlFVc3NhMEpCUVhKQ08wRkJRMEVzVVVGQlRTeGhRVUZoTEZGQlFWRXNVMEZCVWl4RFFVRnJRaXhSUVVGc1FpeERRVUV5UWl3MFFrRkJNMElzUTBGQmJrSTdRVUZEUVN4WlFVRlJMRk5CUVZJc1EwRkJhMElzVFVGQmJFSXNRMEZCZVVJc05FSkJRWHBDTzBGQlEwRXNXVUZCVVN4TFFVRlNMRU5CUVdNc1UwRkJaQ3hIUVVFd1FpeGhRVUZoTEVOQlFXSXNSMEZCYjBJc1VVRkJVU3haUVVFMVFpeFBRVUV4UWp0QlFVTkVPenRCUVVsRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlNEczdPenM3T3pzN096dEJReTlFUkRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVVkJPMEZCUTBFc1VVRkJVU3hoUVVGU0xFVkJRWFZDTEZGQlFYWkNPMEZCUTBFc1VVRkJVU3hyUWtGQlVqczdRVUZGUVR0QlFVTkJPMEZCUTA4c1NVRkJUU3cwUTBGQmEwSXNVMEZCYkVJc1pVRkJhMElzUjBGQlRUdEJRVU51UXl4TlFVRk5MRTlCUVU4c1QwRkJUeXhSUVVGUUxFTkJRV2RDTEZGQlFUZENPMEZCUTBFc1RVRkJTU3hUUVVGVExFZEJRVlFzU1VGQlowSXNVMEZCVXl4aFFVRTNRaXhGUVVFMFF6dEJRVU14UXp0QlFVTkVMRWRCUmtRc1RVRkZUeXhKUVVGSkxFdEJRVXNzVlVGQlRDeERRVUZuUWl4UlFVRm9RaXhEUVVGS0xFVkJRU3RDTzBGQlEzQkRPMEZCUTBRc1IwRkdUU3hOUVVWQkxFbEJRVWtzUzBGQlN5eFZRVUZNTEVOQlFXZENMRmRCUVdoQ0xFTkJRVW9zUlVGQmEwTTdRVUZEZGtNN1FVRkRSQ3hIUVVaTkxFMUJSVUU3UVVGRFRDeFpRVUZSTEVkQlFWSXNRMEZCV1N4UlFVRmFPMEZCUTBRN1FVRkRSaXhEUVZoTk96dEJRV0ZRTzBGQlEwOHNTVUZCVFN4clEwRkJZU3hUUVVGaUxGVkJRV0VzUjBGQlRUdEJRVU01UWl4TlFVRk5MRTFCUVUwc1QwRkJUeXhSUVVGUUxFTkJRV2RDTEVsQlFUVkNPMEZCUTBFc1YwRkJVeXhIUVVGVUxFVkJRV01zU1VGQlpDeERRVUZ0UWl4VlFVRkRMRmxCUVVRc1JVRkJhMEk3UVVGRGJrTXNVVUZCVFN4WlFVRlpMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeE5RVUYyUWl4RFFVRnNRanRCUVVOQkxHTkJRVlVzVTBGQlZpeEhRVUZ6UWl4WlFVRjBRanRCUVVOQkxGRkJRVTBzVlVGQlZTeFRRVUZUTEdGQlFWUXNRMEZCZFVJc1QwRkJka0lzUTBGQmFFSTdRVUZEUVN4UlFVRk5MRlZCUVZVc1ZVRkJWU3hoUVVGV0xFTkJRWGRDTEU5QlFYaENMRU5CUVdoQ08wRkJRMEVzVVVGQlRTeFhRVUZYTEZWQlFWVXNiMEpCUVZZc1EwRkJLMElzVDBGQkwwSXNSVUZCZDBNc1EwRkJlRU1zUlVGQk1rTXNWMEZCTlVRN1FVRkRRU3hSUVVGTkxGVkJRVlVzVlVGQlZTeHZRa0ZCVml4RFFVRXJRaXhOUVVFdlFpeEZRVUYxUXl4aFFVRjJReXhGUVVGelJDeFBRVUYwUlR0QlFVTkJMRmxCUVZFc1ZVRkJVaXhEUVVGdFFpeFpRVUZ1UWl4RFFVRm5ReXhQUVVGb1F5eEZRVUY1UXl4UFFVRjZRenRCUVVOQkxHRkJRVk1zUzBGQlZDeEhRVUZwUWl4UlFVRnFRanRCUVVOQkxHRkJRVk1zYjBKQlFWUXNRMEZCT0VJc1RVRkJPVUlzUlVGQmMwTXNZVUZCZEVNc1JVRkJjVVFzVDBGQmNrUXNSMEZCSzBRc1QwRkJMMFE3UVVGRFFTeDFRa0ZCVHl4UFFVRlFPMEZCUTBFN1FVRkRSQ3hIUVZwRU8wRkJZVVFzUTBGbVRUczdRVUZwUWxBN1FVRkRRU3hKUVVGTkxGRkJRVkVzUlVGQlpEdEJRVU5CTEZOQlFWTXNVVUZCVkN4RFFVRnJRaXhIUVVGc1FpeEZRVUYxUWp0QlFVTnlRaXhOUVVGSkxFMUJRVTBzUjBGQlRpeERRVUZLTEVWQlFXZENPMEZCUTJRc1YwRkJUeXhSUVVGUkxFOUJRVklzUTBGQlowSXNUVUZCVFN4SFFVRk9MRU5CUVdoQ0xFTkJRVkE3UVVGRFJEdEJRVU5FTEZOQlFVOHNUVUZCVFN4SFFVRk9MRVZCUTBvc1NVRkVTU3hEUVVORExGVkJRVU1zVVVGQlJDeEZRVUZqTzBGQlEyeENMRkZCUVVrc1UwRkJVeXhGUVVGaUxFVkJRV2xDTzBGQlEyWXNXVUZCVFN4SFFVRk9MRWxCUVdFc1UwRkJVeXhKUVVGVUxFVkJRV0k3UVVGRFFTeGhRVUZQTEUxQlFVMHNSMEZCVGl4RFFVRlFPMEZCUTBRc1MwRklSQ3hOUVVkUE8wRkJRMHdzWTBGQlVTeEhRVUZTTEVOQlFWa3NPRUpCUVZvN1FVRkRSRHRCUVVOR0xFZEJVa2tzUlVGVFNpeExRVlJKTEVOQlUwVXNWVUZCUXl4SFFVRkVPMEZCUVVFc1YwRkJVeXhSUVVGUkxFZEJRVklzTUVOQlFXMUVMRWRCUVc1RUxGZEJRVFJFTEVsQlFVa3NUMEZCYUVVc1EwRkJWRHRCUVVGQkxFZEJWRVlzUTBGQlVEdEJRVlZFT3p0QlFVVkVPMEZCUTBFc1QwRkJUeXhuUWtGQlVDeERRVUYzUWl4VlFVRjRRaXhGUVVGdlF5eFZRVUZ3UXpzN096czdPenM3UVVNM1JFRTdRVUZEUVN4SlFVRk5MRk5CUVZNc1UwRkJWQ3hOUVVGVExFTkJRVU1zUTBGQlJEdEJRVUZCTEZOQlFVOHNRMEZCVUR0QlFVRkJMRU5CUVdZN1FVRkRRU3hKUVVGTkxHRkJRV0VzVTBGQllpeFZRVUZoTEVOQlFVTXNRMEZCUkR0QlFVRkJMRk5CUVU4c1NVRkJSU3hEUVVGVU8wRkJRVUVzUTBGQmJrSTdRVUZEUVN4SlFVRk5MR05CUVdNc1UwRkJaQ3hYUVVGakxFTkJRVU1zUTBGQlJEdEJRVUZCTEZOQlFVOHNTMEZCUnl4SlFVRkZMRU5CUVV3c1EwRkJVRHRCUVVGQkxFTkJRWEJDTzBGQlEwRXNTVUZCVFN4blFrRkJaMElzVTBGQmFFSXNZVUZCWjBJc1EwRkJReXhEUVVGRU8wRkJRVUVzVTBGQlR5eEpRVUZGTEVWQlFVWXNSMEZCVVN4SlFVRkZMRU5CUVVZc1IwRkJTU3hEUVVGYUxFZEJRV3RDTEVOQlFVTXNRMEZCUkN4SFFVRkhMRU5CUVVNc1NVRkJSU3hKUVVGRkxFTkJRVXdzU1VGQlVTeERRVUZ3UXp0QlFVRkJMRU5CUVhSQ08wRkJRMEVzU1VGQlRTeGpRVUZqTEZOQlFXUXNWMEZCWXl4RFFVRkRMRU5CUVVRN1FVRkJRU3hUUVVGUExFbEJRVVVzUTBGQlJpeEhRVUZKTEVOQlFWZzdRVUZCUVN4RFFVRndRanRCUVVOQkxFbEJRVTBzWlVGQlpTeFRRVUZtTEZsQlFXVXNRMEZCUXl4RFFVRkVPMEZCUVVFc1UwRkJVU3hGUVVGRkxFTkJRVWdzUjBGQlRTeERRVUZPTEVkQlFWRXNRMEZCVWl4SFFVRlZMRU5CUVdwQ08wRkJRVUVzUTBGQmNrSTdRVUZEUVN4SlFVRk5MR2xDUVVGcFFpeFRRVUZxUWl4alFVRnBRaXhEUVVGRExFTkJRVVE3UVVGQlFTeFRRVUZQTEVsQlFVVXNSVUZCUml4SFFVRlJMRWxCUVVVc1EwRkJSaXhIUVVGSkxFTkJRVW9zUjBGQlRTeERRVUZrTEVkQlFXOUNMRU5CUVVNc1NVRkJSU3hEUVVGSUxFdEJRVThzU1VGQlJTeERRVUZHTEVkQlFVa3NRMEZCV0N4TFFVRmxMRWxCUVVVc1EwRkJSaXhIUVVGSkxFTkJRVzVDTEVsQlFYTkNMRU5CUVdwRU8wRkJRVUVzUTBGQmRrSTdRVUZEUVN4SlFVRk5MR05CUVdNc1UwRkJaQ3hYUVVGakxFTkJRVU1zUTBGQlJEdEJRVUZCTEZOQlFVOHNTVUZCUlN4RFFVRkdMRWRCUVVrc1EwRkJTaXhIUVVGTkxFTkJRV0k3UVVGQlFTeERRVUZ3UWp0QlFVTkJMRWxCUVUwc1pVRkJaU3hUUVVGbUxGbEJRV1VzUTBGQlF5eERRVUZFTzBGQlFVRXNVMEZCVHl4SlFVRkhMRVZCUVVVc1EwRkJTQ3hIUVVGTkxFTkJRVTRzUjBGQlVTeERRVUZTTEVkQlFWVXNRMEZCYmtJN1FVRkJRU3hEUVVGeVFqdEJRVU5CTEVsQlFVMHNhVUpCUVdsQ0xGTkJRV3BDTEdOQlFXbENMRU5CUVVNc1EwRkJSRHRCUVVGQkxGTkJRVThzU1VGQlJTeEZRVUZHTEVkQlFWRXNTVUZCUlN4RFFVRkdMRWRCUVVrc1EwRkJTaXhIUVVGTkxFTkJRVTRzUjBGQlVTeERRVUZvUWl4SFFVRnpRaXhKUVVGRkxFbEJRVWNzUlVGQlJTeERRVUZNTEVkQlFWRXNRMEZCVWl4SFFVRlZMRU5CUVZZc1IwRkJXU3hEUVVFelF6dEJRVUZCTEVOQlFYWkNPenRCUVUxQk8wRkJRMDhzU1VGQlRTeHZRMEZCWXl4VFFVRmtMRmRCUVdNc1EwRkJReXhGUVVGRUxFVkJRWGxDTzBGQlFVRXNUVUZCY0VJc1VVRkJiMElzZFVWQlFWUXNTVUZCVXpzN1FVRkRiRVFzVFVGQlRTeFRRVUZUTEVkQlFVY3NXVUZCYkVJN1FVRkRRU3hOUVVGTkxGRkJRVkVzUzBGQlN5eEhRVUZNTEVWQlFXUTdRVUZEUVN4TlFVRk5MRk5CUVZNc1UwRkJWQ3hOUVVGVExFZEJRVTA3UVVGRGJrSXNVVUZCVFN4TlFVRk5MRXRCUVVzc1IwRkJUQ3hGUVVGYU8wRkJRMEVzVVVGQlRTeFBRVUZQTEVOQlFVTXNUVUZCVFN4TFFVRlFMRWxCUVdkQ0xGRkJRVGRDTzBGQlEwRXNVVUZCVFN4VFFVRlRMR0ZCUVdFc1NVRkJZaXhEUVVGbU8wRkJRMEVzVDBGQlJ5eFRRVUZJTEVkQlFXZENMRlZCUVZVc1NVRkJTU3hOUVVGa0xFTkJRVVFzUjBGQk1FSXNUVUZCZWtNN1FVRkRRU3hSUVVGSkxFZEJRVWNzVTBGQlNDeExRVUZwUWl4RFFVRnlRaXhGUVVGM1FqdEJRVU40UWl3d1FrRkJjMElzVFVGQmRFSTdRVUZEUkN4SFFWQkVPMEZCVVVFN1FVRkRSQ3hEUVZwTk96dEJRV05RTzBGQlEwOHNTVUZCVFN3d1FrRkJVeXhUUVVGVUxFMUJRVk1zUTBGQlF5eEZRVUZFTEVWQlFYbENPMEZCUVVFc1RVRkJjRUlzVVVGQmIwSXNkVVZCUVZRc1NVRkJVenM3UVVGRE4wTXNTMEZCUnl4TFFVRklMRU5CUVZNc1QwRkJWQ3hIUVVGdFFpeERRVUZ1UWp0QlFVTkJMRTFCUVUwc1UwRkJVeXhEUVVGbU8wRkJRMEVzVFVGQlRTeFJRVUZSTEV0QlFVc3NSMEZCVEN4RlFVRmtPMEZCUTBFc1RVRkJUU3hQUVVGUExGTkJRVkFzU1VGQlR5eEhRVUZOTzBGQlEycENMRkZCUVUwc1RVRkJUU3hMUVVGTExFZEJRVXdzUlVGQldqdEJRVU5CTEZGQlFVMHNUMEZCVHl4RFFVRkRMRTFCUVUwc1MwRkJVQ3hKUVVGblFpeFJRVUUzUWp0QlFVTkJMRkZCUVUwc1UwRkJVeXhaUVVGWkxFbEJRVm9zUTBGQlpqdEJRVU5CTEU5QlFVY3NTMEZCU0N4RFFVRlRMRTlCUVZRc1IwRkJiVUlzVFVGQmJrSTdRVUZEUVN4UlFVRkpMRWRCUVVjc1MwRkJTQ3hEUVVGVExFOUJRVlFzUjBGQmJVSXNRMEZCZGtJc1JVRkJNRUk3UVVGRGVFSXNVMEZCUnl4TFFVRklMRU5CUVZNc1QwRkJWQ3hIUVVGdFFpeERRVUZ1UWp0QlFVTkJPMEZCUTBRN1FVRkRSQ3d3UWtGQmMwSXNTVUZCZEVJN1FVRkRSQ3hIUVZaRU8wRkJWMEU3UVVGRFJDeERRV2hDVFRzN1FVRnJRbEE3UVVGRFR5eEpRVUZOTERSQ1FVRlZMRk5CUVZZc1QwRkJWU3hEUVVGRExFVkJRVVFzUlVGQmVVSTdRVUZCUVN4TlFVRndRaXhSUVVGdlFpeDFSVUZCVkN4SlFVRlRPenRCUVVNNVF5eExRVUZITEV0QlFVZ3NRMEZCVXl4UFFVRlVMRWRCUVcxQ0xFTkJRVzVDTzBGQlEwRXNUVUZCVFN4UlFVRlJMRXRCUVVzc1IwRkJUQ3hGUVVGa08wRkJRMEVzVFVGQlRTeFBRVUZQTEZOQlFWQXNTVUZCVHl4SFFVRk5PMEZCUTJwQ0xGRkJRVTBzVFVGQlRTeExRVUZMTEVkQlFVd3NSVUZCV2p0QlFVTkJMRkZCUVUwc1QwRkJUeXhEUVVGRExFMUJRVTBzUzBGQlVDeEpRVUZuUWl4UlFVRTNRanRCUVVOQkxGRkJRVTBzVTBGQlV5eGhRVUZoTEVsQlFXSXNRMEZCWmp0QlFVTkJMRTlCUVVjc1MwRkJTQ3hEUVVGVExFOUJRVlFzUjBGQmJVSXNTVUZCU1N4TlFVRjJRanRCUVVOQkxGRkJRVWtzUjBGQlJ5eExRVUZJTEVOQlFWTXNUMEZCVkN4SFFVRnRRaXhEUVVGMlFpeEZRVUV3UWp0QlFVTjRRaXhUUVVGSExFdEJRVWdzUTBGQlV5eFBRVUZVTEVkQlFXMUNMRU5CUVc1Q08wRkJRMEU3UVVGRFJEdEJRVU5FTERCQ1FVRnpRaXhKUVVGMFFqdEJRVU5FTEVkQlZrUTdRVUZYUVR0QlFVTkVMRU5CWmswN096czdRVU51UkZBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUTNCdlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFRrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0V4Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUtHWjFibU4wYVc5dUlHVW9kQ3h1TEhJcGUyWjFibU4wYVc5dUlITW9ieXgxS1h0cFppZ2hibHR2WFNsN2FXWW9JWFJiYjEwcGUzWmhjaUJoUFhSNWNHVnZaaUJ5WlhGMWFYSmxQVDFjSW1aMWJtTjBhVzl1WENJbUpuSmxjWFZwY21VN2FXWW9JWFVtSm1FcGNtVjBkWEp1SUdFb2J5d2hNQ2s3YVdZb2FTbHlaWFIxY200Z2FTaHZMQ0V3S1R0MllYSWdaajF1WlhjZ1JYSnliM0lvWENKRFlXNXViM1FnWm1sdVpDQnRiMlIxYkdVZ0oxd2lLMjhyWENJblhDSXBPM1JvY205M0lHWXVZMjlrWlQxY0lrMVBSRlZNUlY5T1QxUmZSazlWVGtSY0lpeG1mWFpoY2lCc1BXNWJiMTA5ZTJWNGNHOXlkSE02ZTMxOU8zUmJiMTFiTUYwdVkyRnNiQ2hzTG1WNGNHOXlkSE1zWm5WdVkzUnBiMjRvWlNsN2RtRnlJRzQ5ZEZ0dlhWc3hYVnRsWFR0eVpYUjFjbTRnY3lodVAyNDZaU2w5TEd3c2JDNWxlSEJ2Y25SekxHVXNkQ3h1TEhJcGZYSmxkSFZ5YmlCdVcyOWRMbVY0Y0c5eWRITjlkbUZ5SUdrOWRIbHdaVzltSUhKbGNYVnBjbVU5UFZ3aVpuVnVZM1JwYjI1Y0lpWW1jbVZ4ZFdseVpUdG1iM0lvZG1GeUlHODlNRHR2UEhJdWJHVnVaM1JvTzI4ckt5bHpLSEpiYjEwcE8zSmxkSFZ5YmlCemZTa2lMQ0pwYlhCdmNuUWdleUJ6WTNKdmJHeFViMVJ2Y0NCOUlHWnliMjBnSnk0dmRYUnBiSE1uWEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUhKMWJrRmliM1YwVUdGblpTZ3BJSHRjYmx4dUlDQXZMeUJ6WlhRZ2RYQWdjMk55YjJ4c0lIUnZJSFJ2Y0NCaGNuSnZkeUJtZFc1amRHbHZibHh1SUNBdkx5QlVUMFJQT2lCdmJteDVJSE5vYjNjZ1lYSnliM2NnYVdZZ2JtVmxaR1ZrSUZ0b1pXbG5hSFFnUGlBeE1EQWxJSFpwWlhkd2IzSjBYVnh1SUNCamIyNXpkQ0IwYjNCQmNuSnZkeUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeTVxY3kxd1lXZGxYMTloY25KdmR5MHRkRzl3SnlsY2JpQWdkRzl3UVhKeWIzY3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQnpZM0p2Ykd4VWIxUnZjQ2gwYUdsekxuQmhjbVZ1ZEU1dlpHVXBYRzRnSUgwc0lHWmhiSE5sS1Z4dVhHNTlYRzRpTENKY2JpOHZJR3hoYm1ScGJtY2djR0ZuWlNCbWRXNWpkR2x2Ym5OY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUhKMWJreGhibVJwYm1kUVlXZGxLQ2tnZTF4dUlDQW9ablZ1WTNScGIyNG9LU0I3WEc1Y2JpQWdJQ0F2THlCd2FYaGxiSE5lTWlBcklHWnBibVJCY21WaElHWjFibU4wYVc5dVhHNGdJQ0FnWTI5dWMzUWdabWx1WkVGeVpXRWdQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCamIyUmxJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbXB6TFhCcGVHVnNjeWNwWEc0Z0lDQWdJQ0JqYjI1emRDQndhWGhsYkhNZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqYjJSbElDWW1JR052WkdVdWRHVjRkRU52Ym5SbGJuUWdJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdZWEpsWVNBOUlIZHBibVJ2ZHk1cGJtNWxjbGRwWkhSb0lDb2dkMmx1Wkc5M0xtbHVibVZ5U0dWcFoyaDBYRzRnSUNBZ0lDQWdJQ0FnWTI5a1pTNTBaWGgwUTI5dWRHVnVkQ0E5SUdGeVpXRXVkRzlNYjJOaGJHVlRkSEpwYm1jb0tWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VvY0dsNFpXeHpLVnh1SUNBZ0lIMWNibHh1SUNBZ0lHWnBibVJCY21WaEtDbGNiaUFnSUNCM2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduY21WemFYcGxKeXdnWm1sdVpFRnlaV0VwWEc1Y2JpQWdmU2tvS1Z4dWZWeHVJaXdpWEc1cGJYQnZjblFnZXlCMWNHUmhkR1ZRWVdkbExDQnlkVzVPWlhkR2RXNWpkR2x2Ym5NZ2ZTQm1jbTl0SUNjdUwzTndZU2RjYmx4dUtHWjFibU4wYVc5dUtDa2dlMXh1WEc0Z0lDOHZJQ0J1WVhacFoyRjBhVzl1SUhObGJHVmpkRzl5YzF4dUlDQmpiMjV6ZENCb1pXRmtaWElnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2RvWldGa1pYSW5LVnh1SUNCamIyNXpkQ0IwY21sbloyVnlUV1Z1ZFNBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1cWN5MTBjbWxuWjJWeUxTMXRaVzUxSnlsY2JpQWdZMjl1YzNRZ2JXVnVkU0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeTVxY3kxdFpXNTFKeWxjYmx4dUlDQXZMeUFnYm1GMmFXZGhkR2x2YmlCdFpYUm9iMlJ6WEc0Z0lHWjFibU4wYVc5dUlIUnZaMmRzWlUxbGJuVW9LU0I3WEc0Z0lDQWdhR1ZoWkdWeUxtTnNZWE56VEdsemRDNTBiMmRuYkdVb0oyMWxiblV0YjNCbGJpY3BYRzRnSUgxY2JpQWdablZ1WTNScGIyNGdZMmhoYm1kbFVHRm5aU2hsZG1WdWRDa2dlMXh1SUNBZ0lHTnZibk52YkdVdWJHOW5LR1YyWlc1MEtWeHVJQ0FnSUdsbUlDaGxkbVZ1ZEM1MFlYSm5aWFFnSmlZZ1pYWmxiblF1ZEdGeVoyVjBMbTV2WkdWT1lXMWxJRDA5UFNBblFTY3BJSHRjYmlBZ0lDQWdJR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NsY2JpQWdJQ0FnSUhSdloyZHNaVTFsYm5Vb0tWeHVJQ0FnSUNBZ2FXWWdLR1YyWlc1MExuUmhjbWRsZEM1d1lYUm9ibUZ0WlNBaFBUMGdkMmx1Wkc5M0xteHZZMkYwYVc5dUxuQmhkR2h1WVcxbEtTQjdYRzRnSUNBZ0lDQWdJR2hwYzNSdmNua3VjSFZ6YUZOMFlYUmxLRzUxYkd3c0lHNTFiR3dzSUdWMlpXNTBMblJoY21kbGRDNXdZWFJvYm1GdFpTbGNiaUFnSUNBZ0lDQWdkWEJrWVhSbFVHRm5aU2dwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHk4Z0lHNWhkbWxuWVhScGIyNGdaWFpsYm5RZ2JHbHpkR1Z1WlhKeklDc2djblZ1SUc5dUlHbHVhWFJwWVd3Z2JHOWhaRnh1SUNCeWRXNU9aWGRHZFc1amRHbHZibk1vS1Z4dUlDQjBjbWxuWjJWeVRXVnVkUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJSFJ2WjJkc1pVMWxiblVzSUdaaGJITmxLVnh1SUNCdFpXNTFMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk5zYVdOckp5d2dZMmhoYm1kbFVHRm5aU3dnWm1Gc2MyVXBYRzVjYm4wcEtDbGNiaUlzSWx4dWFXMXdiM0owSUhzZ2MyTnliMnhzVkc5VWIzQXNJR1poWkdWUGRYUXNJR1poWkdWSmJpQjlJR1p5YjIwZ0p5NHZkWFJwYkhNblhHNWNiaTh2SUhCeWIycGxZM1J6SUhCaFoyVWdMU0J6Y0dWamFXWnBZeUJtZFc1amRHbHZibk5jYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJSEoxYmxCeWIycGxZM1J6VUdGblpTZ3BJSHRjYmx4dUlDQXZMeUJ6WlhRZ2RYQWdZWEp5YjNjZ0t5QnpZM0p2Ykd3Z2RHOGdkRzl3SUdaMWJtTjBhVzl1WEc0Z0lDOHZJRlJQUkU4NklHOXViSGtnYzJodmR5Qmhjbkp2ZHlCcFppQnVaV1ZrWldRZ1cyaGxhV2RvZENBK0lERXdNQ1VnZG1sbGQzQnZjblJkWEc0Z0lHTnZibk4wSUhSdmNFRnljbTkzSUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTG1wekxYQmhaMlZmWDJGeWNtOTNMUzEwYjNBbktWeHVJQ0IwYjNCQmNuSnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSE5qY205c2JGUnZWRzl3S0hSb2FYTXVjR0Z5Wlc1MFRtOWtaU2xjYmlBZ2ZTd2dabUZzYzJVcFhHNWNiaUFnTHk4Z0lHeHZiM0FnYjNabGNpQmxkbVZ5ZVNCd2NtOXFaV04wTENCaFpHUWdaWFpsYm5RZ2JHbHpkR1Z1WlhJZ2RHOGdaWGh3WVc1a0lHbGpiMjRnWW5WMGRHOXVYRzRnSUdOdmJuTjBJSEJ5YjJwbFkzUnpJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTG1wekxYQnliMnBsWTNRbktWeHVJQ0J3Y205cVpXTjBjeTVtYjNKRllXTm9LR2wwWlcwZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUdsamIyNGdQU0JwZEdWdExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1d2NtOXFaV04wWDE5bGVIQmhibVJKWTI5dUp5bGNiaUFnSUNCcFkyOXVMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk5zYVdOckp5d2daWGh3WVc1a1JHVjBZV2xzY3l3Z1ptRnNjMlVwWEc0Z0lIMHBYRzRnSUhCeWIycGxZM1J6TG1admNrVmhZMmdvYVhSbGJTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2FXTnZiaUE5SUdsMFpXMHVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuQnliMnBsWTNSZlgyTnNiM05sU1dOdmJpY3BYRzRnSUNBZ2FXTnZiaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJR05zYjNObFJHVjBZV2xzY3l3Z1ptRnNjMlVwWEc0Z0lIMHBYRzVjYmlBZ1puVnVZM1JwYjI0Z1kyeHZjMlZFWlhSaGFXeHpLQ2tnZTF4dUlDQWdJR052Ym5OMElHUmxkR0ZwYkhNZ1BTQjBhR2x6TG5CaGNtVnVkRTV2WkdWY2JpQWdJQ0JqYjI1emRDQnBZMjl1SUQwZ1pHVjBZV2xzY3k1d2NtVjJhVzkxYzBWc1pXMWxiblJUYVdKc2FXNW5YRzRnSUNBZ1pHVjBZV2xzY3k1emRIbHNaUzV0WVhoSVpXbG5hSFFnUFNBd1hHNGdJQ0FnWkdWMFlXbHNjeTVqYkdGemMweHBjM1F1ZEc5bloyeGxLQ2R3Y205cVpXTjBYMTlrWlhSaGFXeHpMUzFsZUhCaGJtUmxaQ2NwWEc0Z0lDQWdhV052Ymk1amJHRnpjMHhwYzNRdWRHOW5aMnhsS0Nkd2NtOXFaV04wWDE5bGVIQmhibVJKWTI5dUxTMWxlSEJoYm1SbFpDY3BYRzRnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUJsZUhCaGJtUkVaWFJoYVd4ektDa2dlMXh1SUNBZ0lIUm9hWE11WTJ4aGMzTk1hWE4wTG5SdloyZHNaU2duY0hKdmFtVmpkRjlmWlhod1lXNWtTV052YmkwdFpYaHdZVzVrWldRbktWeHVJQ0FnSUdOdmJuTjBJR1JsZEdGcGJITWdQU0IwYUdsekxtNWxlSFJGYkdWdFpXNTBVMmxpYkdsdVoxeHVJQ0FnSUdOdmJuTjBJR2x6Ulhod1lXNWtaV1FnUFNCa1pYUmhhV3h6TG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3lnbmNISnZhbVZqZEY5ZlpHVjBZV2xzY3kwdFpYaHdZVzVrWldRbktWeHVJQ0FnSUdSbGRHRnBiSE11WTJ4aGMzTk1hWE4wTG5SdloyZHNaU2duY0hKdmFtVmpkRjlmWkdWMFlXbHNjeTB0Wlhod1lXNWtaV1FuS1Z4dUlDQWdJR1JsZEdGcGJITXVjM1I1YkdVdWJXRjRTR1ZwWjJoMElEMGdhWE5GZUhCaGJtUmxaQ0EvSURBZ09pQmdKSHRrWlhSaGFXeHpMbk5qY205c2JFaGxhV2RvZEgxd2VHQmNiaUFnZlZ4dVhHNWNibHh1SUNBZ0lDOHZJR05zYVdOcklHOXVJR2x0WVdkbElDc2dablZzYkNCelkzSmxaVzRnYlc5a1lXeGNiaUFnSUNBdkx5QmpiMjV6ZENCd2NtVjJhV1YzSUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnbkxtcHpMWEJ5WlhacFpYY25LVnh1SUNBZ0lDOHZJR052Ym5OMElHMWxiblZDZEc0Z1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWFuTXRiV1Z1ZFY5ZlluUnVKeWxjYmlBZ0lDQXZMeUJtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhCeVpYWnBaWGN1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBdkx5QWdJSEJ5WlhacFpYZGJhVjB1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0JtZFc1amRHbHZiaWhsS1NCN1hHNGdJQ0FnTHk4Z0lDQWdJR1V1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVnh1SUNBZ0lDOHZJQ0FnSUNCamIyNXpkQ0JtYVdkMWNtVWdQU0J3Y21WMmFXVjNXMmxkTG5GMVpYSjVVMlZzWldOMGIzSW9KMlpwWjNWeVpTY3BYRzRnSUNBZ0x5OGdJQ0FnSUdOdmJuTjBJR05oY0hScGIyNGdQU0J3Y21WMmFXVjNXMmxkTG5GMVpYSjVVMlZzWldOMGIzSW9KMlpwWjJOaGNIUnBiMjRuS1Z4dUlDQWdJQzh2SUNBZ0lDQmpiMjV6ZENCcGJXY2dQU0J3Y21WMmFXVjNXMmxkTG5GMVpYSjVVMlZzWldOMGIzSW9KMmx0WnljcFhHNGdJQ0FnTHk4Z0lDQnBaaUFvSVhCeVpYWnBaWGRiYVYwdVkyeGhjM05NYVhOMExtTnZiblJoYVc1ektDZG1kV3hzYzJOeVpXVnVKeWtnSmlZZ1pTNTBZWEpuWlhRZ1BUMDlJR2x0WnlrZ2UxeHVJQ0FnSUM4dklDQWdJQ0FnSUhCeVpYWnBaWGRiYVYwdVkyeGhjM05NYVhOMExtRmtaQ2duWm5Wc2JITmpjbVZsYmljcFhHNGdJQ0FnTHk4Z0lDQWdJQ0FnYldWdWRVSjBiaTV6ZEhsc1pTNWthWE53YkdGNUlEMGdKMjV2Ym1VblhHNGdJQ0FnTHk4Z0lDQWdJQ0FnWm1Ga1pTaG1hV2QxY21Vc0lIUnlkV1VzSURRd0tWeHVJQ0FnSUM4dklDQWdJQ0I5WEc0Z0lDQWdMeThnSUNBZ0lHbG1JQ2h3Y21WMmFXVjNXMmxkTG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3lnblpuVnNiSE5qY21WbGJpY3BJQ1ltSUNobExuUmhjbWRsZENBaFBUMGdhVzFuSUNZbUlHVXVkR0Z5WjJWMElDRTlQU0JqWVhCMGFXOXVJQ1ltSUdVdWRHRnlaMlYwSUNFOVBTQm1hV2QxY21VcEtTQjdYRzRnSUNBZ0x5OGdJQ0FnSUNBZ2NISmxkbWxsZDF0cFhTNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtDZG1kV3hzYzJOeVpXVnVKeWxjYmlBZ0lDQXZMeUFnSUNBZ0lDQnRaVzUxUW5SdUxuTjBlV3hsTG1ScGMzQnNZWGtnUFNBbllteHZZMnNuWEc0Z0lDQWdMeThnSUNBZ0lIMWNiaUFnSUNBdkx5QWdJSDBwWEc0Z0lDQWdMeThnZlZ4dVhHNTlYRzRpTENKcGJYQnZjblFnY25WdVRHRnVaR2x1WjFCaFoyVWdabkp2YlNBbkxpOXNZVzVrYVc1bkoxeHVhVzF3YjNKMElISjFia0ZpYjNWMFVHRm5aU0JtY205dElDY3VMMkZpYjNWMEoxeHVhVzF3YjNKMElISjFibEJ5YjJwbFkzUnpVR0ZuWlNCbWNtOXRJQ2N1TDNCeWIycGxZM1J6SjF4dWFXMXdiM0owSUhzZ1ptRmtaVWx1SUgwZ1puSnZiU0FuTGk5MWRHbHNjeWRjYmx4dUx5OGdabVYwWTJnZ2NHOXNlV1pwYkd3Z1ptOXlJRzF2WW1sc1pTQmtaWFpwWTJWelhHNXlaWEYxYVhKbEtDZGxjell0Y0hKdmJXbHpaU2NwTG5CdmJIbG1hV3hzS0NsY2JuSmxjWFZwY21Vb0oybHpiMjF2Y25Cb2FXTXRabVYwWTJnbktWeHVYRzR2THlCeWRXNGdablZ1WTNScGIyNXpJSE53WldOcFptbGpJSFJ2SUhCaFoyVmNiaTh2SUZSUFJFODZJSEpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNKbGMybDZaU2NzSUdacGJtUkJjbVZoS1NCM2FHVnVJRzV2ZENCdmJpQnNZVzVrYVc1bklIQmhaMlZjYm1WNGNHOXlkQ0JqYjI1emRDQnlkVzVPWlhkR2RXNWpkR2x2Ym5NZ1BTQW9LU0E5UGlCN1hHNGdJR052Ym5OMElIQmhkR2dnUFNCM2FXNWtiM2N1Ykc5allYUnBiMjR1Y0dGMGFHNWhiV1ZjYmlBZ2FXWWdLSEJoZEdnZ1BUMDlJQ2N2SnlCOGZDQndZWFJvSUQwOVBTQW5MMmx1WkdWNExtaDBiV3duS1NCN1hHNGdJQ0FnY25WdVRHRnVaR2x1WjFCaFoyVW9LVnh1SUNCOUlHVnNjMlVnYVdZZ0tIQmhkR2d1YzNSaGNuUnpWMmwwYUNnbkwyRmliM1YwSnlrcElIdGNiaUFnSUNCeWRXNUJZbTkxZEZCaFoyVW9LVnh1SUNCOUlHVnNjMlVnYVdZZ0tIQmhkR2d1YzNSaGNuUnpWMmwwYUNnbkwzQnliMnBsWTNSekp5a3BJSHRjYmlBZ0lDQnlkVzVRY205cVpXTjBjMUJoWjJVb0tWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RtYVhnZ2JXVW5LVnh1SUNCOVhHNTlYRzVjYmk4dklIVndaR0YwWlNBcklHWmhaR1VnYVc0Z2JtVjNJSEJoWjJVZ2IyNGdkWEpzSUdOb1lXNW5aVnh1Wlhod2IzSjBJR052Ym5OMElIVndaR0YwWlZCaFoyVWdQU0FvS1NBOVBpQjdYRzRnSUdOdmJuTjBJSFZ5YkNBOUlIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1b2NtVm1YRzRnSUd4dllXUlFZV2RsS0hWeWJDa3VkR2hsYmlnb2NtVnpjRzl1YzJWVVpYaDBLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdZMjl1ZEdGcGJtVnlJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25hSFJ0YkNjcFhHNGdJQ0FnWTI5dWRHRnBibVZ5TG1sdWJtVnlTRlJOVENBOUlISmxjM0J2Ym5ObFZHVjRkRnh1SUNBZ0lHTnZibk4wSUc5c1pGQmhaMlVnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1Y0dGblpTY3BYRzRnSUNBZ1kyOXVjM1FnYm1WM1VHRm5aU0E5SUdOdmJuUmhhVzVsY2k1eGRXVnllVk5sYkdWamRHOXlLQ2N1Y0dGblpTY3BYRzRnSUNBZ1kyOXVjM1FnYm1WM1ZHbDBiR1VnUFNCamIyNTBZV2x1WlhJdVoyVjBSV3hsYldWdWRITkNlVlJoWjA1aGJXVW9KM1JwZEd4bEp5bGJNRjB1ZEdWNGRFTnZiblJsYm5SY2JpQWdJQ0JqYjI1emRDQnVaWGRFWlhOaklEMGdZMjl1ZEdGcGJtVnlMbWRsZEVWc1pXMWxiblJ6UW5sVVlXZE9ZVzFsS0NkdFpYUmhKeWxiSjJSbGMyTnlhWEIwYVc5dUoxMHVZMjl1ZEdWdWRGeHVJQ0FnSUc5c1pGQmhaMlV1Y0dGeVpXNTBUbTlrWlM1eVpYQnNZV05sUTJocGJHUW9ibVYzVUdGblpTd2diMnhrVUdGblpTbGNiaUFnSUNCa2IyTjFiV1Z1ZEM1MGFYUnNaU0E5SUc1bGQxUnBkR3hsWEc0Z0lDQWdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VvSjIxbGRHRW5LVnNuWkdWelkzSnBjSFJwYjI0blhTNWpiMjUwWlc1MElEMGdibVYzUkdWelkxeHVJQ0FnSUdaaFpHVkpiaWh1WlhkUVlXZGxLVnh1SUNBZ0lISjFiazVsZDBaMWJtTjBhVzl1Y3lncFhHNGdJSDBwWEc1OVhHNWNiaTh2SUdabGRHTm9JQ3NnYkc5aFpDQnVaWGNnZFhKc0lDc2dZMkZqYUdVZ2JtVjNJR052Ym5SbGJuUmNibU52Ym5OMElHTmhZMmhsSUQwZ2UzMWNibVoxYm1OMGFXOXVJR3h2WVdSUVlXZGxLSFZ5YkNrZ2UxeHVJQ0JwWmlBb1kyRmphR1ZiZFhKc1hTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvWTJGamFHVmJkWEpzWFNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnWm1WMFkyZ29kWEpzS1Z4dUlDQWdJQzUwYUdWdUtDaHlaWE53YjI1elpTa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tISmxjM0J2Ym5ObExtOXJLU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxXM1Z5YkYwZ1BTQnlaWE53YjI1elpTNTBaWGgwS0NsY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxXM1Z5YkYxY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHVaWFIzYjNKcklISmxjM0J2Ym5ObElIZGhjeUJ1YjNRZ2Iyc3VKeWxjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVnh1SUNBZ0lDNWpZWFJqYUNnb1pYSnlLU0E5UGlCamIyNXpiMnhsTG14dlp5aGdkR2hsY21VZ2FHRnpJR0psWlc0Z1lXNGdaWEp5YjNJZ2NtVnhkV1Z6ZEdsdVp5QW9KSHQxY214OUtUb2dKSHRsY25JdWJXVnpjMkZuWlgxZ0tTbGNibjFjYmx4dUx5OGdkWEJrWVhSbElIQmhaMlVnWVc1NWRHbHRaU0JvYVhOMGIzSjVJR0Z3YVNCcGN5QmphR0Z1WjJWa1hHNTNhVzVrYjNjdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmNHOXdjM1JoZEdVbkxDQjFjR1JoZEdWUVlXZGxLVnh1SWl3aUx5OGdkR2x0YVc1bklHWjFibU4wYVc5dWN5QmJJR1p5YjIwZ1oybDBhSFZpSUMwdElHaDBkSEJ6T2k4dloybHpkQzVuYVhSb2RXSXVZMjl0TDJkeVpTOHhOalV3TWprMElGMWNibU52Ym5OMElHeHBibVZoY2lBOUlDaDBLU0E5UGlCMFhHNWpiMjV6ZENCbFlYTmxTVzVSZFdGa0lEMGdLSFFwSUQwK0lIUXFkRnh1WTI5dWMzUWdaV0Z6WlU5MWRGRjFZV1FnUFNBb2RDa2dQVDRnZENvb01pMTBLVnh1WTI5dWMzUWdaV0Z6WlVsdVQzVjBVWFZoWkNBOUlDaDBLU0E5UGlCMFBDNDFJRDhnS0RJcWRDcDBLU0E2SUNndE1Tc29OQzB5S25RcEtuUXBYRzVqYjI1emRDQmxZWE5sU1c1RGRXSnBZeUE5SUNoMEtTQTlQaUIwS25RcWRGeHVZMjl1YzNRZ1pXRnpaVTkxZEVOMVltbGpJRDBnS0hRcElEMCtJQ2d0TFhRcEtuUXFkQ3N4WEc1amIyNXpkQ0JsWVhObFNXNVBkWFJEZFdKcFl5QTlJQ2gwS1NBOVBpQjBQQzQxSUQ4Z0tEUXFkQ3AwS25RcElEb2dLQ2gwTFRFcEtpZ3lLblF0TWlrcUtESXFkQzB5S1NzeEtWeHVZMjl1YzNRZ1pXRnpaVWx1VVhWaGNuUWdQU0FvZENrZ1BUNGdkQ3AwS25RcWRGeHVZMjl1YzNRZ1pXRnpaVTkxZEZGMVlYSjBJRDBnS0hRcElEMCtJREV0S0MwdGRDa3FkQ3AwS25SY2JtTnZibk4wSUdWaGMyVkpiazkxZEZGMVlYSjBJRDBnS0hRcElEMCtJSFE4TGpVZ1B5QW9PQ3AwS25RcWRDcDBLU0E2SUNneExUZ3FLQzB0ZENrcWRDcDBLblFwWEc1Y2JseHVYRzVjYmx4dUx5OGdjMk55YjJ4c0xYUnZMWFJ2Y0NCdlppQmxiR1Z0Wlc1MExseHVaWGh3YjNKMElHTnZibk4wSUhOamNtOXNiRlJ2Vkc5d0lEMGdLR1ZzTENCa2RYSmhkR2x2YmlBOUlERXlNREFwSUQwK0lIdGNiaUFnWTI5dWMzUWdZbTkwZEc5dElEMGdaV3d1YzJOeWIyeHNTR1ZwWjJoMFhHNGdJR052Ym5OMElITjBZWEowSUQwZ1JHRjBaUzV1YjNjb0tWeHVJQ0JqYjI1emRDQnpZM0p2Ykd3Z1BTQW9LU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdibTkzSUQwZ1JHRjBaUzV1YjNjb0tWeHVJQ0FnSUdOdmJuTjBJSFJwYldVZ1BTQW9ibTkzSUMwZ2MzUmhjblFwSUM4Z1pIVnlZWFJwYjI1Y2JpQWdJQ0JqYjI1emRDQmxZWE5wYm1jZ1BTQmxZWE5sVDNWMFVYVmhjblFvZEdsdFpTbGNiaUFnSUNCbGJDNXpZM0p2Ykd4VWIzQWdQU0FvWldGemFXNW5JQ29nS0RBZ0xTQmliM1IwYjIwcEtTQXJJR0p2ZEhSdmJWeHVJQ0FnSUdsbUlDaGxiQzV6WTNKdmJHeFViM0FnUFQwOUlEQXBJSEpsZEhWeWJseHVJQ0FnSUhKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTaHpZM0p2Ykd3cFhHNGdJSDFjYmlBZ2MyTnliMnhzS0NsY2JuMWNibHh1THk4Z1ptRmtaUzFwYmlCbGJHVnRaVzUwWEc1bGVIQnZjblFnWTI5dWMzUWdabUZrWlVsdUlEMGdLR1ZzTENCa2RYSmhkR2x2YmlBOUlERXlNREFwSUQwK0lIdGNiaUFnWld3dWMzUjViR1V1YjNCaFkybDBlU0E5SURCY2JpQWdZMjl1YzNRZ1ltOTBkRzl0SUQwZ01WeHVJQ0JqYjI1emRDQnpkR0Z5ZENBOUlFUmhkR1V1Ym05M0tDbGNiaUFnWTI5dWMzUWdabUZrWlNBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnViM2NnUFNCRVlYUmxMbTV2ZHlncFhHNGdJQ0FnWTI5dWMzUWdkR2x0WlNBOUlDaHViM2NnTFNCemRHRnlkQ2tnTHlCa2RYSmhkR2x2Ymx4dUlDQWdJR052Ym5OMElHVmhjMmx1WnlBOUlHVmhjMlZKYmxGMVlYSjBLSFJwYldVcFhHNGdJQ0FnWld3dWMzUjViR1V1YjNCaFkybDBlU0E5SUdWaGMybHVaMXh1SUNBZ0lHbG1JQ2hsYkM1emRIbHNaUzV2Y0dGamFYUjVJRDRnTVNrZ2UxeHVJQ0FnSUNBZ1pXd3VjM1I1YkdVdWIzQmhZMmwwZVNBOUlERmNiaUFnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJSDFjYmlBZ0lDQnlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VvWm1Ga1pTbGNiaUFnZlZ4dUlDQm1ZV1JsS0NsY2JuMWNibHh1THk4Z1ptRmtaUzF2ZFhRZ1pXeGxiV1Z1ZEZ4dVpYaHdiM0owSUdOdmJuTjBJR1poWkdWUGRYUWdQU0FvWld3c0lHUjFjbUYwYVc5dUlEMGdNVEl3TUNrZ1BUNGdlMXh1SUNCbGJDNXpkSGxzWlM1dmNHRmphWFI1SUQwZ01WeHVJQ0JqYjI1emRDQnpkR0Z5ZENBOUlFUmhkR1V1Ym05M0tDbGNiaUFnWTI5dWMzUWdabUZrWlNBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnViM2NnUFNCRVlYUmxMbTV2ZHlncFhHNGdJQ0FnWTI5dWMzUWdkR2x0WlNBOUlDaHViM2NnTFNCemRHRnlkQ2tnTHlCa2RYSmhkR2x2Ymx4dUlDQWdJR052Ym5OMElHVmhjMmx1WnlBOUlHVmhjMlZQZFhSUmRXRnlkQ2gwYVcxbEtWeHVJQ0FnSUdWc0xuTjBlV3hsTG05d1lXTnBkSGtnUFNBeElDMGdaV0Z6YVc1blhHNGdJQ0FnYVdZZ0tHVnNMbk4wZVd4bExtOXdZV05wZEhrZ1BDQXdLU0I3WEc0Z0lDQWdJQ0JsYkM1emRIbHNaUzV2Y0dGamFYUjVJRDBnTUZ4dUlDQWdJQ0FnY21WMGRYSnVYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTaG1ZV1JsS1Z4dUlDQjlYRzRnSUdaaFpHVW9LVnh1ZlZ4dUlpd2lMeW9oWEc0Z0tpQkFiM1psY25acFpYY2daWE0yTFhCeWIyMXBjMlVnTFNCaElIUnBibmtnYVcxd2JHVnRaVzUwWVhScGIyNGdiMllnVUhKdmJXbHpaWE12UVNzdVhHNGdLaUJBWTI5d2VYSnBaMmgwSUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TkNCWlpXaDFaR0VnUzJGMGVpd2dWRzl0SUVSaGJHVXNJRk4wWldaaGJpQlFaVzV1WlhJZ1lXNWtJR052Ym5SeWFXSjFkRzl5Y3lBb1EyOXVkbVZ5YzJsdmJpQjBieUJGVXpZZ1FWQkpJR0o1SUVwaGEyVWdRWEpqYUdsaVlXeGtLVnh1SUNvZ1FHeHBZMlZ1YzJVZ0lDQk1hV05sYm5ObFpDQjFibVJsY2lCTlNWUWdiR2xqWlc1elpWeHVJQ29nSUNBZ0lDQWdJQ0FnSUNCVFpXVWdhSFIwY0hNNkx5OXlZWGN1WjJsMGFIVmlkWE5sY21OdmJuUmxiblF1WTI5dEwzTjBaV1poYm5CbGJtNWxjaTlsY3pZdGNISnZiV2x6WlM5dFlYTjBaWEl2VEVsRFJVNVRSVnh1SUNvZ1FIWmxjbk5wYjI0Z0lDQTBMakF1TlZ4dUlDb3ZYRzVjYmlobWRXNWpkR2x2YmlBb1oyeHZZbUZzTENCbVlXTjBiM0o1S1NCN1hHNGdJQ0FnZEhsd1pXOW1JR1Y0Y0c5eWRITWdQVDA5SUNkdlltcGxZM1FuSUNZbUlIUjVjR1Z2WmlCdGIyUjFiR1VnSVQwOUlDZDFibVJsWm1sdVpXUW5JRDhnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtWVdOMGIzSjVLQ2tnT2x4dUlDQWdJSFI1Y0dWdlppQmtaV1pwYm1VZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ1pHVm1hVzVsTG1GdFpDQS9JR1JsWm1sdVpTaG1ZV04wYjNKNUtTQTZYRzRnSUNBZ0tHZHNiMkpoYkM1RlV6WlFjbTl0YVhObElEMGdabUZqZEc5eWVTZ3BLVHRjYm4wb2RHaHBjeXdnS0daMWJtTjBhVzl1SUNncElIc2dKM1Z6WlNCemRISnBZM1FuTzF4dVhHNW1kVzVqZEdsdmJpQnZZbXBsWTNSUGNrWjFibU4wYVc5dUtIZ3BJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUI0SUQwOVBTQW5ablZ1WTNScGIyNG5JSHg4SUhSNWNHVnZaaUI0SUQwOVBTQW5iMkpxWldOMEp5QW1KaUI0SUNFOVBTQnVkV3hzTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJwYzBaMWJtTjBhVzl1S0hncElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQjRJRDA5UFNBblpuVnVZM1JwYjI0bk8xeHVmVnh1WEc1MllYSWdYMmx6UVhKeVlYa2dQU0IxYm1SbFptbHVaV1E3WEc1cFppQW9JVUZ5Y21GNUxtbHpRWEp5WVhrcElIdGNiaUFnWDJselFYSnlZWGtnUFNCbWRXNWpkR2x2YmlBb2VDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29lQ2tnUFQwOUlDZGJiMkpxWldOMElFRnljbUY1WFNjN1hHNGdJSDA3WEc1OUlHVnNjMlVnZTF4dUlDQmZhWE5CY25KaGVTQTlJRUZ5Y21GNUxtbHpRWEp5WVhrN1hHNTlYRzVjYm5aaGNpQnBjMEZ5Y21GNUlEMGdYMmx6UVhKeVlYazdYRzVjYm5aaGNpQnNaVzRnUFNBd08xeHVkbUZ5SUhabGNuUjRUbVY0ZENBOUlIVnVaR1ZtYVc1bFpEdGNiblpoY2lCamRYTjBiMjFUWTJobFpIVnNaWEpHYmlBOUlIVnVaR1ZtYVc1bFpEdGNibHh1ZG1GeUlHRnpZWEFnUFNCbWRXNWpkR2x2YmlCaGMyRndLR05oYkd4aVlXTnJMQ0JoY21jcElIdGNiaUFnY1hWbGRXVmJiR1Z1WFNBOUlHTmhiR3hpWVdOck8xeHVJQ0J4ZFdWMVpWdHNaVzRnS3lBeFhTQTlJR0Z5Wnp0Y2JpQWdiR1Z1SUNzOUlESTdYRzRnSUdsbUlDaHNaVzRnUFQwOUlESXBJSHRjYmlBZ0lDQXZMeUJKWmlCc1pXNGdhWE1nTWl3Z2RHaGhkQ0J0WldGdWN5QjBhR0YwSUhkbElHNWxaV1FnZEc4Z2MyTm9aV1IxYkdVZ1lXNGdZWE41Ym1NZ1pteDFjMmd1WEc0Z0lDQWdMeThnU1dZZ1lXUmthWFJwYjI1aGJDQmpZV3hzWW1GamEzTWdZWEpsSUhGMVpYVmxaQ0JpWldadmNtVWdkR2hsSUhGMVpYVmxJR2x6SUdac2RYTm9aV1FzSUhSb1pYbGNiaUFnSUNBdkx5QjNhV3hzSUdKbElIQnliMk5sYzNObFpDQmllU0IwYUdseklHWnNkWE5vSUhSb1lYUWdkMlVnWVhKbElITmphR1ZrZFd4cGJtY3VYRzRnSUNBZ2FXWWdLR04xYzNSdmJWTmphR1ZrZFd4bGNrWnVLU0I3WEc0Z0lDQWdJQ0JqZFhOMGIyMVRZMmhsWkhWc1pYSkdiaWhtYkhWemFDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhOamFHVmtkV3hsUm14MWMyZ29LVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMDdYRzVjYm1aMWJtTjBhVzl1SUhObGRGTmphR1ZrZFd4bGNpaHpZMmhsWkhWc1pVWnVLU0I3WEc0Z0lHTjFjM1J2YlZOamFHVmtkV3hsY2tadUlEMGdjMk5vWldSMWJHVkdianRjYm4xY2JseHVablZ1WTNScGIyNGdjMlYwUVhOaGNDaGhjMkZ3Um00cElIdGNiaUFnWVhOaGNDQTlJR0Z6WVhCR2JqdGNibjFjYmx4dWRtRnlJR0p5YjNkelpYSlhhVzVrYjNjZ1BTQjBlWEJsYjJZZ2QybHVaRzkzSUNFOVBTQW5kVzVrWldacGJtVmtKeUEvSUhkcGJtUnZkeUE2SUhWdVpHVm1hVzVsWkR0Y2JuWmhjaUJpY205M2MyVnlSMnh2WW1Gc0lEMGdZbkp2ZDNObGNsZHBibVJ2ZHlCOGZDQjdmVHRjYm5aaGNpQkNjbTkzYzJWeVRYVjBZWFJwYjI1UFluTmxjblpsY2lBOUlHSnliM2R6WlhKSGJHOWlZV3d1VFhWMFlYUnBiMjVQWW5ObGNuWmxjaUI4ZkNCaWNtOTNjMlZ5UjJ4dlltRnNMbGRsWWt0cGRFMTFkR0YwYVc5dVQySnpaWEoyWlhJN1hHNTJZWElnYVhOT2IyUmxJRDBnZEhsd1pXOW1JSE5sYkdZZ1BUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIUjVjR1Z2WmlCd2NtOWpaWE56SUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlBb2UzMHBMblJ2VTNSeWFXNW5MbU5oYkd3b2NISnZZMlZ6Y3lrZ1BUMDlJQ2RiYjJKcVpXTjBJSEJ5YjJObGMzTmRKenRjYmx4dUx5OGdkR1Z6ZENCbWIzSWdkMlZpSUhkdmNtdGxjaUJpZFhRZ2JtOTBJR2x1SUVsRk1UQmNiblpoY2lCcGMxZHZjbXRsY2lBOUlIUjVjR1Z2WmlCVmFXNTBPRU5zWVcxd1pXUkJjbkpoZVNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2RIbHdaVzltSUdsdGNHOXlkRk5qY21sd2RITWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JSFI1Y0dWdlppQk5aWE56WVdkbFEyaGhibTVsYkNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2M3WEc1Y2JpOHZJRzV2WkdWY2JtWjFibU4wYVc5dUlIVnpaVTVsZUhSVWFXTnJLQ2tnZTF4dUlDQXZMeUJ1YjJSbElIWmxjbk5wYjI0Z01DNHhNQzU0SUdScGMzQnNZWGx6SUdFZ1pHVndjbVZqWVhScGIyNGdkMkZ5Ym1sdVp5QjNhR1Z1SUc1bGVIUlVhV05ySUdseklIVnpaV1FnY21WamRYSnphWFpsYkhsY2JpQWdMeThnYzJWbElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOWpkV3B2YW5NdmQyaGxiaTlwYzNOMVpYTXZOREV3SUdadmNpQmtaWFJoYVd4elhHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQnliMk5sYzNNdWJtVjRkRlJwWTJzb1pteDFjMmdwTzF4dUlDQjlPMXh1ZlZ4dVhHNHZMeUIyWlhKMGVGeHVablZ1WTNScGIyNGdkWE5sVm1WeWRIaFVhVzFsY2lncElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCMlpYSjBlRTVsZUhRZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUhabGNuUjRUbVY0ZENobWJIVnphQ2s3WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUIxYzJWVFpYUlVhVzFsYjNWMEtDazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIVnpaVTExZEdGMGFXOXVUMkp6WlhKMlpYSW9LU0I3WEc0Z0lIWmhjaUJwZEdWeVlYUnBiMjV6SUQwZ01EdGNiaUFnZG1GeUlHOWljMlZ5ZG1WeUlEMGdibVYzSUVKeWIzZHpaWEpOZFhSaGRHbHZiazlpYzJWeWRtVnlLR1pzZFhOb0tUdGNiaUFnZG1GeUlHNXZaR1VnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZVWlhoMFRtOWtaU2duSnlrN1hHNGdJRzlpYzJWeWRtVnlMbTlpYzJWeWRtVW9ibTlrWlN3Z2V5QmphR0Z5WVdOMFpYSkVZWFJoT2lCMGNuVmxJSDBwTzF4dVhHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdibTlrWlM1a1lYUmhJRDBnYVhSbGNtRjBhVzl1Y3lBOUlDc3JhWFJsY21GMGFXOXVjeUFsSURJN1hHNGdJSDA3WEc1OVhHNWNiaTh2SUhkbFlpQjNiM0pyWlhKY2JtWjFibU4wYVc5dUlIVnpaVTFsYzNOaFoyVkRhR0Z1Ym1Wc0tDa2dlMXh1SUNCMllYSWdZMmhoYm01bGJDQTlJRzVsZHlCTlpYTnpZV2RsUTJoaGJtNWxiQ2dwTzF4dUlDQmphR0Z1Ym1Wc0xuQnZjblF4TG05dWJXVnpjMkZuWlNBOUlHWnNkWE5vTzF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCamFHRnVibVZzTG5CdmNuUXlMbkJ2YzNSTlpYTnpZV2RsS0RBcE8xeHVJQ0I5TzF4dWZWeHVYRzVtZFc1amRHbHZiaUIxYzJWVFpYUlVhVzFsYjNWMEtDa2dlMXh1SUNBdkx5QlRkRzl5WlNCelpYUlVhVzFsYjNWMElISmxabVZ5Wlc1alpTQnpieUJsY3pZdGNISnZiV2x6WlNCM2FXeHNJR0psSUhWdVlXWm1aV04wWldRZ1lubGNiaUFnTHk4Z2IzUm9aWElnWTI5a1pTQnRiMlJwWm5scGJtY2djMlYwVkdsdFpXOTFkQ0FvYkdsclpTQnphVzV2Ymk1MWMyVkdZV3RsVkdsdFpYSnpLQ2twWEc0Z0lIWmhjaUJuYkc5aVlXeFRaWFJVYVcxbGIzVjBJRDBnYzJWMFZHbHRaVzkxZER0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1oyeHZZbUZzVTJWMFZHbHRaVzkxZENobWJIVnphQ3dnTVNrN1hHNGdJSDA3WEc1OVhHNWNiblpoY2lCeGRXVjFaU0E5SUc1bGR5QkJjbkpoZVNneE1EQXdLVHRjYm1aMWJtTjBhVzl1SUdac2RYTm9LQ2tnZTF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hsYmpzZ2FTQXJQU0F5S1NCN1hHNGdJQ0FnZG1GeUlHTmhiR3hpWVdOcklEMGdjWFZsZFdWYmFWMDdYRzRnSUNBZ2RtRnlJR0Z5WnlBOUlIRjFaWFZsVzJrZ0t5QXhYVHRjYmx4dUlDQWdJR05oYkd4aVlXTnJLR0Z5WnlrN1hHNWNiaUFnSUNCeGRXVjFaVnRwWFNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCeGRXVjFaVnRwSUNzZ01WMGdQU0IxYm1SbFptbHVaV1E3WEc0Z0lIMWNibHh1SUNCc1pXNGdQU0F3TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJoZEhSbGJYQjBWbVZ5ZEhnb0tTQjdYRzRnSUhSeWVTQjdYRzRnSUNBZ2RtRnlJSElnUFNCeVpYRjFhWEpsTzF4dUlDQWdJSFpoY2lCMlpYSjBlQ0E5SUhJb0ozWmxjblI0SnlrN1hHNGdJQ0FnZG1WeWRIaE9aWGgwSUQwZ2RtVnlkSGd1Y25WdVQyNU1iMjl3SUh4OElIWmxjblI0TG5KMWJrOXVRMjl1ZEdWNGREdGNiaUFnSUNCeVpYUjFjbTRnZFhObFZtVnlkSGhVYVcxbGNpZ3BPMXh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhWelpWTmxkRlJwYldWdmRYUW9LVHRjYmlBZ2ZWeHVmVnh1WEc1MllYSWdjMk5vWldSMWJHVkdiSFZ6YUNBOUlIVnVaR1ZtYVc1bFpEdGNiaTh2SUVSbFkybGtaU0IzYUdGMElHRnplVzVqSUcxbGRHaHZaQ0IwYnlCMWMyVWdkRzhnZEhKcFoyZGxjbWx1WnlCd2NtOWpaWE56YVc1bklHOW1JSEYxWlhWbFpDQmpZV3hzWW1GamEzTTZYRzVwWmlBb2FYTk9iMlJsS1NCN1hHNGdJSE5qYUdWa2RXeGxSbXgxYzJnZ1BTQjFjMlZPWlhoMFZHbGpheWdwTzF4dWZTQmxiSE5sSUdsbUlDaENjbTkzYzJWeVRYVjBZWFJwYjI1UFluTmxjblpsY2lrZ2UxeHVJQ0J6WTJobFpIVnNaVVpzZFhOb0lEMGdkWE5sVFhWMFlYUnBiMjVQWW5ObGNuWmxjaWdwTzF4dWZTQmxiSE5sSUdsbUlDaHBjMWR2Y210bGNpa2dlMXh1SUNCelkyaGxaSFZzWlVac2RYTm9JRDBnZFhObFRXVnpjMkZuWlVOb1lXNXVaV3dvS1R0Y2JuMGdaV3h6WlNCcFppQW9Zbkp2ZDNObGNsZHBibVJ2ZHlBOVBUMGdkVzVrWldacGJtVmtJQ1ltSUhSNWNHVnZaaUJ5WlhGMWFYSmxJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUhOamFHVmtkV3hsUm14MWMyZ2dQU0JoZEhSbGJYQjBWbVZ5ZEhnb0tUdGNibjBnWld4elpTQjdYRzRnSUhOamFHVmtkV3hsUm14MWMyZ2dQU0IxYzJWVFpYUlVhVzFsYjNWMEtDazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIUm9aVzRvYjI1R2RXeG1hV3hzYldWdWRDd2diMjVTWldwbFkzUnBiMjRwSUh0Y2JpQWdkbUZ5SUY5aGNtZDFiV1Z1ZEhNZ1BTQmhjbWQxYldWdWRITTdYRzVjYmlBZ2RtRnlJSEJoY21WdWRDQTlJSFJvYVhNN1hHNWNiaUFnZG1GeUlHTm9hV3hrSUQwZ2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSW9ibTl2Y0NrN1hHNWNiaUFnYVdZZ0tHTm9hV3hrVzFCU1QwMUpVMFZmU1VSZElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0J0WVd0bFVISnZiV2x6WlNoamFHbHNaQ2s3WEc0Z0lIMWNibHh1SUNCMllYSWdYM04wWVhSbElEMGdjR0Z5Wlc1MExsOXpkR0YwWlR0Y2JseHVJQ0JwWmlBb1gzTjBZWFJsS1NCN1hHNGdJQ0FnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lIWmhjaUJqWVd4c1ltRmpheUE5SUY5aGNtZDFiV1Z1ZEhOYlgzTjBZWFJsSUMwZ01WMDdYRzRnSUNBZ0lDQmhjMkZ3S0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHbHVkbTlyWlVOaGJHeGlZV05yS0Y5emRHRjBaU3dnWTJocGJHUXNJR05oYkd4aVlXTnJMQ0J3WVhKbGJuUXVYM0psYzNWc2RDazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLU2dwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhOMVluTmpjbWxpWlNod1lYSmxiblFzSUdOb2FXeGtMQ0J2YmtaMWJHWnBiR3h0Wlc1MExDQnZibEpsYW1WamRHbHZiaWs3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWTJocGJHUTdYRzU5WEc1Y2JpOHFLbHh1SUNCZ1VISnZiV2x6WlM1eVpYTnZiSFpsWUNCeVpYUjFjbTV6SUdFZ2NISnZiV2x6WlNCMGFHRjBJSGRwYkd3Z1ltVmpiMjFsSUhKbGMyOXNkbVZrSUhkcGRHZ2dkR2hsWEc0Z0lIQmhjM05sWkNCZ2RtRnNkV1ZnTGlCSmRDQnBjeUJ6YUc5eWRHaGhibVFnWm05eUlIUm9aU0JtYjJ4c2IzZHBibWM2WEc1Y2JpQWdZR0JnYW1GMllYTmpjbWx3ZEZ4dUlDQnNaWFFnY0hKdmJXbHpaU0E5SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENsN1hHNGdJQ0FnY21WemIyeDJaU2d4S1R0Y2JpQWdmU2s3WEc1Y2JpQWdjSEp2YldselpTNTBhR1Z1S0daMWJtTjBhVzl1S0haaGJIVmxLWHRjYmlBZ0lDQXZMeUIyWVd4MVpTQTlQVDBnTVZ4dUlDQjlLVHRjYmlBZ1lHQmdYRzVjYmlBZ1NXNXpkR1ZoWkNCdlppQjNjbWwwYVc1bklIUm9aU0JoWW05MlpTd2dlVzkxY2lCamIyUmxJRzV2ZHlCemFXMXdiSGtnWW1WamIyMWxjeUIwYUdVZ1ptOXNiRzkzYVc1bk9seHVYRzRnSUdCZ1lHcGhkbUZ6WTNKcGNIUmNiaUFnYkdWMElIQnliMjFwYzJVZ1BTQlFjbTl0YVhObExuSmxjMjlzZG1Vb01TazdYRzVjYmlBZ2NISnZiV2x6WlM1MGFHVnVLR1oxYm1OMGFXOXVLSFpoYkhWbEtYdGNiaUFnSUNBdkx5QjJZV3gxWlNBOVBUMGdNVnh1SUNCOUtUdGNiaUFnWUdCZ1hHNWNiaUFnUUcxbGRHaHZaQ0J5WlhOdmJIWmxYRzRnSUVCemRHRjBhV05jYmlBZ1FIQmhjbUZ0SUh0QmJubDlJSFpoYkhWbElIWmhiSFZsSUhSb1lYUWdkR2hsSUhKbGRIVnlibVZrSUhCeWIyMXBjMlVnZDJsc2JDQmlaU0J5WlhOdmJIWmxaQ0IzYVhSb1hHNGdJRlZ6WldaMWJDQm1iM0lnZEc5dmJHbHVaeTVjYmlBZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ1lTQndjbTl0YVhObElIUm9ZWFFnZDJsc2JDQmlaV052YldVZ1puVnNabWxzYkdWa0lIZHBkR2dnZEdobElHZHBkbVZ1WEc0Z0lHQjJZV3gxWldCY2Jpb3ZYRzVtZFc1amRHbHZiaUJ5WlhOdmJIWmxLRzlpYW1WamRDa2dlMXh1SUNBdkttcHphR2x1ZENCMllXeHBaSFJvYVhNNmRISjFaU0FxTDF4dUlDQjJZWElnUTI5dWMzUnlkV04wYjNJZ1BTQjBhR2x6TzF4dVhHNGdJR2xtSUNodlltcGxZM1FnSmlZZ2RIbHdaVzltSUc5aWFtVmpkQ0E5UFQwZ0oyOWlhbVZqZENjZ0ppWWdiMkpxWldOMExtTnZibk4wY25WamRHOXlJRDA5UFNCRGIyNXpkSEoxWTNSdmNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdlltcGxZM1E3WEc0Z0lIMWNibHh1SUNCMllYSWdjSEp2YldselpTQTlJRzVsZHlCRGIyNXpkSEoxWTNSdmNpaHViMjl3S1R0Y2JpQWdYM0psYzI5c2RtVW9jSEp2YldselpTd2diMkpxWldOMEtUdGNiaUFnY21WMGRYSnVJSEJ5YjIxcGMyVTdYRzU5WEc1Y2JuWmhjaUJRVWs5TlNWTkZYMGxFSUQwZ1RXRjBhQzV5WVc1a2IyMG9LUzUwYjFOMGNtbHVaeWd6TmlrdWMzVmljM1J5YVc1bktERTJLVHRjYmx4dVpuVnVZM1JwYjI0Z2JtOXZjQ2dwSUh0OVhHNWNiblpoY2lCUVJVNUVTVTVISUQwZ2RtOXBaQ0F3TzF4dWRtRnlJRVpWVEVaSlRFeEZSQ0E5SURFN1hHNTJZWElnVWtWS1JVTlVSVVFnUFNBeU8xeHVYRzUyWVhJZ1IwVlVYMVJJUlU1ZlJWSlNUMUlnUFNCdVpYY2dSWEp5YjNKUFltcGxZM1FvS1R0Y2JseHVablZ1WTNScGIyNGdjMlZzWmtaMWJHWnBiR3h0Wlc1MEtDa2dlMXh1SUNCeVpYUjFjbTRnYm1WM0lGUjVjR1ZGY25KdmNpaGNJbGx2ZFNCallXNXViM1FnY21WemIyeDJaU0JoSUhCeWIyMXBjMlVnZDJsMGFDQnBkSE5sYkdaY0lpazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTmhibTV2ZEZKbGRIVnliazkzYmlncElIdGNiaUFnY21WMGRYSnVJRzVsZHlCVWVYQmxSWEp5YjNJb0owRWdjSEp2YldselpYTWdZMkZzYkdKaFkyc2dZMkZ1Ym05MElISmxkSFZ5YmlCMGFHRjBJSE5oYldVZ2NISnZiV2x6WlM0bktUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBWR2hsYmlod2NtOXRhWE5sS1NCN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnY21WMGRYSnVJSEJ5YjIxcGMyVXVkR2hsYmp0Y2JpQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNiaUFnSUNCSFJWUmZWRWhGVGw5RlVsSlBVaTVsY25KdmNpQTlJR1Z5Y205eU8xeHVJQ0FnSUhKbGRIVnliaUJIUlZSZlZFaEZUbDlGVWxKUFVqdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUIwY25sVWFHVnVLSFJvWlc0c0lIWmhiSFZsTENCbWRXeG1hV3hzYldWdWRFaGhibVJzWlhJc0lISmxhbVZqZEdsdmJraGhibVJzWlhJcElIdGNiaUFnZEhKNUlIdGNiaUFnSUNCMGFHVnVMbU5oYkd3b2RtRnNkV1VzSUdaMWJHWnBiR3h0Wlc1MFNHRnVaR3hsY2l3Z2NtVnFaV04wYVc5dVNHRnVaR3hsY2lrN1hHNGdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCb1lXNWtiR1ZHYjNKbGFXZHVWR2hsYm1GaWJHVW9jSEp2YldselpTd2dkR2hsYm1GaWJHVXNJSFJvWlc0cElIdGNiaUFnWVhOaGNDaG1kVzVqZEdsdmJpQW9jSEp2YldselpTa2dlMXh1SUNBZ0lIWmhjaUJ6WldGc1pXUWdQU0JtWVd4elpUdGNiaUFnSUNCMllYSWdaWEp5YjNJZ1BTQjBjbmxVYUdWdUtIUm9aVzRzSUhSb1pXNWhZbXhsTENCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUdsbUlDaHpaV0ZzWldRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2MyVmhiR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJR2xtSUNoMGFHVnVZV0pzWlNBaFBUMGdkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdYM0psYzI5c2RtVW9jSEp2YldselpTd2dkbUZzZFdVcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1puVnNabWxzYkNod2NtOXRhWE5sTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU3dnWm5WdVkzUnBiMjRnS0hKbFlYTnZiaWtnZTF4dUlDQWdJQ0FnYVdZZ0tITmxZV3hsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCelpXRnNaV1FnUFNCMGNuVmxPMXh1WEc0Z0lDQWdJQ0JmY21WcVpXTjBLSEJ5YjIxcGMyVXNJSEpsWVhOdmJpazdYRzRnSUNBZ2ZTd2dKMU5sZEhSc1pUb2dKeUFySUNod2NtOXRhWE5sTGw5c1lXSmxiQ0I4ZkNBbklIVnVhMjV2ZDI0Z2NISnZiV2x6WlNjcEtUdGNibHh1SUNBZ0lHbG1JQ2doYzJWaGJHVmtJQ1ltSUdWeWNtOXlLU0I3WEc0Z0lDQWdJQ0J6WldGc1pXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ1gzSmxhbVZqZENod2NtOXRhWE5sTENCbGNuSnZjaWs3WEc0Z0lDQWdmVnh1SUNCOUxDQndjbTl0YVhObEtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FHRnVaR3hsVDNkdVZHaGxibUZpYkdVb2NISnZiV2x6WlN3Z2RHaGxibUZpYkdVcElIdGNiaUFnYVdZZ0tIUm9aVzVoWW14bExsOXpkR0YwWlNBOVBUMGdSbFZNUmtsTVRFVkVLU0I3WEc0Z0lDQWdablZzWm1sc2JDaHdjbTl0YVhObExDQjBhR1Z1WVdKc1pTNWZjbVZ6ZFd4MEtUdGNiaUFnZlNCbGJITmxJR2xtSUNoMGFHVnVZV0pzWlM1ZmMzUmhkR1VnUFQwOUlGSkZTa1ZEVkVWRUtTQjdYRzRnSUNBZ1gzSmxhbVZqZENod2NtOXRhWE5sTENCMGFHVnVZV0pzWlM1ZmNtVnpkV3gwS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCemRXSnpZM0pwWW1Vb2RHaGxibUZpYkdVc0lIVnVaR1ZtYVc1bFpDd2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1gzSmxjMjlzZG1Vb2NISnZiV2x6WlN3Z2RtRnNkV1VwTzF4dUlDQWdJSDBzSUdaMWJtTjBhVzl1SUNoeVpXRnpiMjRwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJmY21WcVpXTjBLSEJ5YjIxcGMyVXNJSEpsWVhOdmJpazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYUdGdVpHeGxUV0Y1WW1WVWFHVnVZV0pzWlNod2NtOXRhWE5sTENCdFlYbGlaVlJvWlc1aFlteGxMQ0IwYUdWdUpDUXBJSHRjYmlBZ2FXWWdLRzFoZVdKbFZHaGxibUZpYkdVdVkyOXVjM1J5ZFdOMGIzSWdQVDA5SUhCeWIyMXBjMlV1WTI5dWMzUnlkV04wYjNJZ0ppWWdkR2hsYmlRa0lEMDlQU0IwYUdWdUlDWW1JRzFoZVdKbFZHaGxibUZpYkdVdVkyOXVjM1J5ZFdOMGIzSXVjbVZ6YjJ4MlpTQTlQVDBnY21WemIyeDJaU2tnZTF4dUlDQWdJR2hoYm1Sc1pVOTNibFJvWlc1aFlteGxLSEJ5YjIxcGMyVXNJRzFoZVdKbFZHaGxibUZpYkdVcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHbG1JQ2gwYUdWdUpDUWdQVDA5SUVkRlZGOVVTRVZPWDBWU1VrOVNLU0I3WEc0Z0lDQWdJQ0JmY21WcVpXTjBLSEJ5YjIxcGMyVXNJRWRGVkY5VVNFVk9YMFZTVWs5U0xtVnljbTl5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb1pXNGtKQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQm1kV3htYVd4c0tIQnliMjFwYzJVc0lHMWhlV0psVkdobGJtRmliR1VwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYVhOR2RXNWpkR2x2YmloMGFHVnVKQ1FwS1NCN1hHNGdJQ0FnSUNCb1lXNWtiR1ZHYjNKbGFXZHVWR2hsYm1GaWJHVW9jSEp2YldselpTd2diV0Y1WW1WVWFHVnVZV0pzWlN3Z2RHaGxiaVFrS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdablZzWm1sc2JDaHdjbTl0YVhObExDQnRZWGxpWlZSb1pXNWhZbXhsS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1gzSmxjMjlzZG1Vb2NISnZiV2x6WlN3Z2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0hCeWIyMXBjMlVnUFQwOUlIWmhiSFZsS1NCN1hHNGdJQ0FnWDNKbGFtVmpkQ2h3Y205dGFYTmxMQ0J6Wld4bVJuVnNabWxzYkcxbGJuUW9LU2s3WEc0Z0lIMGdaV3h6WlNCcFppQW9iMkpxWldOMFQzSkdkVzVqZEdsdmJpaDJZV3gxWlNrcElIdGNiaUFnSUNCb1lXNWtiR1ZOWVhsaVpWUm9aVzVoWW14bEtIQnliMjFwYzJVc0lIWmhiSFZsTENCblpYUlVhR1Z1S0haaGJIVmxLU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnWm5Wc1ptbHNiQ2h3Y205dGFYTmxMQ0IyWVd4MVpTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnY0hWaWJHbHphRkpsYW1WamRHbHZiaWh3Y205dGFYTmxLU0I3WEc0Z0lHbG1JQ2h3Y205dGFYTmxMbDl2Ym1WeWNtOXlLU0I3WEc0Z0lDQWdjSEp2YldselpTNWZiMjVsY25KdmNpaHdjbTl0YVhObExsOXlaWE4xYkhRcE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsemFDaHdjbTl0YVhObEtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1puVnNabWxzYkNod2NtOXRhWE5sTENCMllXeDFaU2tnZTF4dUlDQnBaaUFvY0hKdmJXbHpaUzVmYzNSaGRHVWdJVDA5SUZCRlRrUkpUa2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JseHVJQ0J3Y205dGFYTmxMbDl5WlhOMWJIUWdQU0IyWVd4MVpUdGNiaUFnY0hKdmJXbHpaUzVmYzNSaGRHVWdQU0JHVlV4R1NVeE1SVVE3WEc1Y2JpQWdhV1lnS0hCeWIyMXBjMlV1WDNOMVluTmpjbWxpWlhKekxteGxibWQwYUNBaFBUMGdNQ2tnZTF4dUlDQWdJR0Z6WVhBb2NIVmliR2x6YUN3Z2NISnZiV2x6WlNrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdYM0psYW1WamRDaHdjbTl0YVhObExDQnlaV0Z6YjI0cElIdGNiaUFnYVdZZ0tIQnliMjFwYzJVdVgzTjBZWFJsSUNFOVBTQlFSVTVFU1U1SEtTQjdYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzRnSUhCeWIyMXBjMlV1WDNOMFlYUmxJRDBnVWtWS1JVTlVSVVE3WEc0Z0lIQnliMjFwYzJVdVgzSmxjM1ZzZENBOUlISmxZWE52Ymp0Y2JseHVJQ0JoYzJGd0tIQjFZbXhwYzJoU1pXcGxZM1JwYjI0c0lIQnliMjFwYzJVcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCemRXSnpZM0pwWW1Vb2NHRnlaVzUwTENCamFHbHNaQ3dnYjI1R2RXeG1hV3hzYldWdWRDd2diMjVTWldwbFkzUnBiMjRwSUh0Y2JpQWdkbUZ5SUY5emRXSnpZM0pwWW1WeWN5QTlJSEJoY21WdWRDNWZjM1ZpYzJOeWFXSmxjbk03WEc0Z0lIWmhjaUJzWlc1bmRHZ2dQU0JmYzNWaWMyTnlhV0psY25NdWJHVnVaM1JvTzF4dVhHNGdJSEJoY21WdWRDNWZiMjVsY25KdmNpQTlJRzUxYkd3N1hHNWNiaUFnWDNOMVluTmpjbWxpWlhKelcyeGxibWQwYUYwZ1BTQmphR2xzWkR0Y2JpQWdYM04xWW5OamNtbGlaWEp6VzJ4bGJtZDBhQ0FySUVaVlRFWkpURXhGUkYwZ1BTQnZia1oxYkdacGJHeHRaVzUwTzF4dUlDQmZjM1ZpYzJOeWFXSmxjbk5iYkdWdVozUm9JQ3NnVWtWS1JVTlVSVVJkSUQwZ2IyNVNaV3BsWTNScGIyNDdYRzVjYmlBZ2FXWWdLR3hsYm1kMGFDQTlQVDBnTUNBbUppQndZWEpsYm5RdVgzTjBZWFJsS1NCN1hHNGdJQ0FnWVhOaGNDaHdkV0pzYVhOb0xDQndZWEpsYm5RcE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJSEIxWW14cGMyZ29jSEp2YldselpTa2dlMXh1SUNCMllYSWdjM1ZpYzJOeWFXSmxjbk1nUFNCd2NtOXRhWE5sTGw5emRXSnpZM0pwWW1WeWN6dGNiaUFnZG1GeUlITmxkSFJzWldRZ1BTQndjbTl0YVhObExsOXpkR0YwWlR0Y2JseHVJQ0JwWmlBb2MzVmljMk55YVdKbGNuTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOVhHNWNiaUFnZG1GeUlHTm9hV3hrSUQwZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUNBZ1kyRnNiR0poWTJzZ1BTQjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQmtaWFJoYVd3Z1BTQndjbTl0YVhObExsOXlaWE4xYkhRN1hHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCemRXSnpZM0pwWW1WeWN5NXNaVzVuZEdnN0lHa2dLejBnTXlrZ2UxeHVJQ0FnSUdOb2FXeGtJRDBnYzNWaWMyTnlhV0psY25OYmFWMDdYRzRnSUNBZ1kyRnNiR0poWTJzZ1BTQnpkV0p6WTNKcFltVnljMXRwSUNzZ2MyVjBkR3hsWkYwN1hHNWNiaUFnSUNCcFppQW9ZMmhwYkdRcElIdGNiaUFnSUNBZ0lHbHVkbTlyWlVOaGJHeGlZV05yS0hObGRIUnNaV1FzSUdOb2FXeGtMQ0JqWVd4c1ltRmpheXdnWkdWMFlXbHNLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1kyRnNiR0poWTJzb1pHVjBZV2xzS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCd2NtOXRhWE5sTGw5emRXSnpZM0pwWW1WeWN5NXNaVzVuZEdnZ1BTQXdPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQkZjbkp2Y2s5aWFtVmpkQ2dwSUh0Y2JpQWdkR2hwY3k1bGNuSnZjaUE5SUc1MWJHdzdYRzU5WEc1Y2JuWmhjaUJVVWxsZlEwRlVRMGhmUlZKU1QxSWdQU0J1WlhjZ1JYSnliM0pQWW1wbFkzUW9LVHRjYmx4dVpuVnVZM1JwYjI0Z2RISjVRMkYwWTJnb1kyRnNiR0poWTJzc0lHUmxkR0ZwYkNrZ2UxeHVJQ0IwY25rZ2UxeHVJQ0FnSUhKbGRIVnliaUJqWVd4c1ltRmpheWhrWlhSaGFXd3BPMXh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ1ZGSlpYME5CVkVOSVgwVlNVazlTTG1WeWNtOXlJRDBnWlR0Y2JpQWdJQ0J5WlhSMWNtNGdWRkpaWDBOQlZFTklYMFZTVWs5U08xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR2x1ZG05clpVTmhiR3hpWVdOcktITmxkSFJzWldRc0lIQnliMjFwYzJVc0lHTmhiR3hpWVdOckxDQmtaWFJoYVd3cElIdGNiaUFnZG1GeUlHaGhjME5oYkd4aVlXTnJJRDBnYVhOR2RXNWpkR2x2YmloallXeHNZbUZqYXlrc1hHNGdJQ0FnSUNCMllXeDFaU0E5SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUdWeWNtOXlJRDBnZFc1a1pXWnBibVZrTEZ4dUlDQWdJQ0FnYzNWalkyVmxaR1ZrSUQwZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUNBZ1ptRnBiR1ZrSUQwZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUdsbUlDaG9ZWE5EWVd4c1ltRmpheWtnZTF4dUlDQWdJSFpoYkhWbElEMGdkSEo1UTJGMFkyZ29ZMkZzYkdKaFkyc3NJR1JsZEdGcGJDazdYRzVjYmlBZ0lDQnBaaUFvZG1Gc2RXVWdQVDA5SUZSU1dWOURRVlJEU0Y5RlVsSlBVaWtnZTF4dUlDQWdJQ0FnWm1GcGJHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lHVnljbTl5SUQwZ2RtRnNkV1V1WlhKeWIzSTdYRzRnSUNBZ0lDQjJZV3gxWlNBOUlHNTFiR3c3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lITjFZMk5sWldSbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIQnliMjFwYzJVZ1BUMDlJSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQmZjbVZxWldOMEtIQnliMjFwYzJVc0lHTmhibTV2ZEZKbGRIVnliazkzYmlncEtUdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZG1Gc2RXVWdQU0JrWlhSaGFXdzdYRzRnSUNBZ2MzVmpZMlZsWkdWa0lEMGdkSEoxWlR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2h3Y205dGFYTmxMbDl6ZEdGMFpTQWhQVDBnVUVWT1JFbE9SeWtnZTF4dUlDQWdJQzh2SUc1dmIzQmNiaUFnZlNCbGJITmxJR2xtSUNob1lYTkRZV3hzWW1GamF5QW1KaUJ6ZFdOalpXVmtaV1FwSUh0Y2JpQWdJQ0FnSUY5eVpYTnZiSFpsS0hCeWIyMXBjMlVzSUhaaGJIVmxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1poYVd4bFpDa2dlMXh1SUNBZ0lDQWdYM0psYW1WamRDaHdjbTl0YVhObExDQmxjbkp2Y2lrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoelpYUjBiR1ZrSUQwOVBTQkdWVXhHU1V4TVJVUXBJSHRjYmlBZ0lDQWdJR1oxYkdacGJHd29jSEp2YldselpTd2dkbUZzZFdVcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2MyVjBkR3hsWkNBOVBUMGdVa1ZLUlVOVVJVUXBJSHRjYmlBZ0lDQWdJRjl5WldwbFkzUW9jSEp2YldselpTd2dkbUZzZFdVcE8xeHVJQ0FnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYVc1cGRHbGhiR2w2WlZCeWIyMXBjMlVvY0hKdmJXbHpaU3dnY21WemIyeDJaWElwSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0J5WlhOdmJIWmxjaWhtZFc1amRHbHZiaUJ5WlhOdmJIWmxVSEp2YldselpTaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ1gzSmxjMjlzZG1Vb2NISnZiV2x6WlN3Z2RtRnNkV1VwTzF4dUlDQWdJSDBzSUdaMWJtTjBhVzl1SUhKbGFtVmpkRkJ5YjIxcGMyVW9jbVZoYzI5dUtTQjdYRzRnSUNBZ0lDQmZjbVZxWldOMEtIQnliMjFwYzJVc0lISmxZWE52YmlrN1hHNGdJQ0FnZlNrN1hHNGdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0JmY21WcVpXTjBLSEJ5YjIxcGMyVXNJR1VwTzF4dUlDQjlYRzU5WEc1Y2JuWmhjaUJwWkNBOUlEQTdYRzVtZFc1amRHbHZiaUJ1WlhoMFNXUW9LU0I3WEc0Z0lISmxkSFZ5YmlCcFpDc3JPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnRZV3RsVUhKdmJXbHpaU2h3Y205dGFYTmxLU0I3WEc0Z0lIQnliMjFwYzJWYlVGSlBUVWxUUlY5SlJGMGdQU0JwWkNzck8xeHVJQ0J3Y205dGFYTmxMbDl6ZEdGMFpTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ2NISnZiV2x6WlM1ZmNtVnpkV3gwSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0J3Y205dGFYTmxMbDl6ZFdKelkzSnBZbVZ5Y3lBOUlGdGRPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQkZiblZ0WlhKaGRHOXlLRU52Ym5OMGNuVmpkRzl5TENCcGJuQjFkQ2tnZTF4dUlDQjBhR2x6TGw5cGJuTjBZVzVqWlVOdmJuTjBjblZqZEc5eUlEMGdRMjl1YzNSeWRXTjBiM0k3WEc0Z0lIUm9hWE11Y0hKdmJXbHpaU0E5SUc1bGR5QkRiMjV6ZEhKMVkzUnZjaWh1YjI5d0tUdGNibHh1SUNCcFppQW9JWFJvYVhNdWNISnZiV2x6WlZ0UVVrOU5TVk5GWDBsRVhTa2dlMXh1SUNBZ0lHMWhhMlZRY205dGFYTmxLSFJvYVhNdWNISnZiV2x6WlNrN1hHNGdJSDFjYmx4dUlDQnBaaUFvYVhOQmNuSmhlU2hwYm5CMWRDa3BJSHRjYmlBZ0lDQjBhR2x6TGw5cGJuQjFkQ0E5SUdsdWNIVjBPMXh1SUNBZ0lIUm9hWE11YkdWdVozUm9JRDBnYVc1d2RYUXViR1Z1WjNSb08xeHVJQ0FnSUhSb2FYTXVYM0psYldGcGJtbHVaeUE5SUdsdWNIVjBMbXhsYm1kMGFEdGNibHh1SUNBZ0lIUm9hWE11WDNKbGMzVnNkQ0E5SUc1bGR5QkJjbkpoZVNoMGFHbHpMbXhsYm1kMGFDazdYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUdaMWJHWnBiR3dvZEdocGN5NXdjbTl0YVhObExDQjBhR2x6TGw5eVpYTjFiSFFwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhR2x6TG14bGJtZDBhQ0E5SUhSb2FYTXViR1Z1WjNSb0lIeDhJREE3WEc0Z0lDQWdJQ0IwYUdsekxsOWxiblZ0WlhKaGRHVW9LVHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbDl5WlcxaGFXNXBibWNnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnWm5Wc1ptbHNiQ2gwYUdsekxuQnliMjFwYzJVc0lIUm9hWE11WDNKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRjl5WldwbFkzUW9kR2hwY3k1d2NtOXRhWE5sTENCMllXeHBaR0YwYVc5dVJYSnliM0lvS1NrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdkbUZzYVdSaGRHbHZia1Z5Y205eUtDa2dlMXh1SUNCeVpYUjFjbTRnYm1WM0lFVnljbTl5S0NkQmNuSmhlU0JOWlhSb2IyUnpJRzExYzNRZ1ltVWdjSEp2ZG1sa1pXUWdZVzRnUVhKeVlYa25LVHRjYm4wN1hHNWNia1Z1ZFcxbGNtRjBiM0l1Y0hKdmRHOTBlWEJsTGw5bGJuVnRaWEpoZEdVZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJzWlc1bmRHZ2dQU0IwYUdsekxteGxibWQwYUR0Y2JpQWdkbUZ5SUY5cGJuQjFkQ0E5SUhSb2FYTXVYMmx1Y0hWME8xeHVYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUIwYUdsekxsOXpkR0YwWlNBOVBUMGdVRVZPUkVsT1J5QW1KaUJwSUR3Z2JHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQjBhR2x6TGw5bFlXTm9SVzUwY25rb1gybHVjSFYwVzJsZExDQnBLVHRjYmlBZ2ZWeHVmVHRjYmx4dVJXNTFiV1Z5WVhSdmNpNXdjbTkwYjNSNWNHVXVYMlZoWTJoRmJuUnllU0E5SUdaMWJtTjBhVzl1SUNobGJuUnllU3dnYVNrZ2UxeHVJQ0IyWVhJZ1l5QTlJSFJvYVhNdVgybHVjM1JoYm1ObFEyOXVjM1J5ZFdOMGIzSTdYRzRnSUhaaGNpQnlaWE52YkhabEpDUWdQU0JqTG5KbGMyOXNkbVU3WEc1Y2JpQWdhV1lnS0hKbGMyOXNkbVVrSkNBOVBUMGdjbVZ6YjJ4MlpTa2dlMXh1SUNBZ0lIWmhjaUJmZEdobGJpQTlJR2RsZEZSb1pXNG9aVzUwY25rcE8xeHVYRzRnSUNBZ2FXWWdLRjkwYUdWdUlEMDlQU0IwYUdWdUlDWW1JR1Z1ZEhKNUxsOXpkR0YwWlNBaFBUMGdVRVZPUkVsT1J5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZmMyVjBkR3hsWkVGMEtHVnVkSEo1TGw5emRHRjBaU3dnYVN3Z1pXNTBjbmt1WDNKbGMzVnNkQ2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdYM1JvWlc0Z0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYM0psYldGcGJtbHVaeTB0TzF4dUlDQWdJQ0FnZEdocGN5NWZjbVZ6ZFd4MFcybGRJRDBnWlc1MGNuazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGpJRDA5UFNCUWNtOXRhWE5sS1NCN1hHNGdJQ0FnSUNCMllYSWdjSEp2YldselpTQTlJRzVsZHlCaktHNXZiM0FwTzF4dUlDQWdJQ0FnYUdGdVpHeGxUV0Y1WW1WVWFHVnVZV0pzWlNod2NtOXRhWE5sTENCbGJuUnllU3dnWDNSb1pXNHBPMXh1SUNBZ0lDQWdkR2hwY3k1ZmQybHNiRk5sZEhSc1pVRjBLSEJ5YjIxcGMyVXNJR2twTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5M2FXeHNVMlYwZEd4bFFYUW9ibVYzSUdNb1puVnVZM1JwYjI0Z0tISmxjMjlzZG1Va0pDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6YjJ4MlpTUWtLR1Z1ZEhKNUtUdGNiaUFnSUNBZ0lIMHBMQ0JwS1R0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdocGN5NWZkMmxzYkZObGRIUnNaVUYwS0hKbGMyOXNkbVVrSkNobGJuUnllU2tzSUdrcE8xeHVJQ0I5WEc1OU8xeHVYRzVGYm5WdFpYSmhkRzl5TG5CeWIzUnZkSGx3WlM1ZmMyVjBkR3hsWkVGMElEMGdablZ1WTNScGIyNGdLSE4wWVhSbExDQnBMQ0IyWVd4MVpTa2dlMXh1SUNCMllYSWdjSEp2YldselpTQTlJSFJvYVhNdWNISnZiV2x6WlR0Y2JseHVJQ0JwWmlBb2NISnZiV2x6WlM1ZmMzUmhkR1VnUFQwOUlGQkZUa1JKVGtjcElIdGNiaUFnSUNCMGFHbHpMbDl5WlcxaGFXNXBibWN0TFR0Y2JseHVJQ0FnSUdsbUlDaHpkR0YwWlNBOVBUMGdVa1ZLUlVOVVJVUXBJSHRjYmlBZ0lDQWdJRjl5WldwbFkzUW9jSEp2YldselpTd2dkbUZzZFdVcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOXlaWE4xYkhSYmFWMGdQU0IyWVd4MVpUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnBaaUFvZEdocGN5NWZjbVZ0WVdsdWFXNW5JRDA5UFNBd0tTQjdYRzRnSUNBZ1puVnNabWxzYkNod2NtOXRhWE5sTENCMGFHbHpMbDl5WlhOMWJIUXBPMXh1SUNCOVhHNTlPMXh1WEc1RmJuVnRaWEpoZEc5eUxuQnliM1J2ZEhsd1pTNWZkMmxzYkZObGRIUnNaVUYwSUQwZ1puVnVZM1JwYjI0Z0tIQnliMjFwYzJVc0lHa3BJSHRjYmlBZ2RtRnlJR1Z1ZFcxbGNtRjBiM0lnUFNCMGFHbHpPMXh1WEc0Z0lITjFZbk5qY21saVpTaHdjbTl0YVhObExDQjFibVJsWm1sdVpXUXNJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGJuVnRaWEpoZEc5eUxsOXpaWFIwYkdWa1FYUW9SbFZNUmtsTVRFVkVMQ0JwTENCMllXeDFaU2s3WEc0Z0lIMHNJR1oxYm1OMGFXOXVJQ2h5WldGemIyNHBJSHRjYmlBZ0lDQnlaWFIxY200Z1pXNTFiV1Z5WVhSdmNpNWZjMlYwZEd4bFpFRjBLRkpGU2tWRFZFVkVMQ0JwTENCeVpXRnpiMjRwTzF4dUlDQjlLVHRjYm4wN1hHNWNiaThxS2x4dUlDQmdVSEp2YldselpTNWhiR3hnSUdGalkyVndkSE1nWVc0Z1lYSnlZWGtnYjJZZ2NISnZiV2x6WlhNc0lHRnVaQ0J5WlhSMWNtNXpJR0VnYm1WM0lIQnliMjFwYzJVZ2QyaHBZMmhjYmlBZ2FYTWdablZzWm1sc2JHVmtJSGRwZEdnZ1lXNGdZWEp5WVhrZ2IyWWdablZzWm1sc2JHMWxiblFnZG1Gc2RXVnpJR1p2Y2lCMGFHVWdjR0Z6YzJWa0lIQnliMjFwYzJWekxDQnZjbHh1SUNCeVpXcGxZM1JsWkNCM2FYUm9JSFJvWlNCeVpXRnpiMjRnYjJZZ2RHaGxJR1pwY25OMElIQmhjM05sWkNCd2NtOXRhWE5sSUhSdklHSmxJSEpsYW1WamRHVmtMaUJKZENCallYTjBjeUJoYkd4Y2JpQWdaV3hsYldWdWRITWdiMllnZEdobElIQmhjM05sWkNCcGRHVnlZV0pzWlNCMGJ5QndjbTl0YVhObGN5QmhjeUJwZENCeWRXNXpJSFJvYVhNZ1lXeG5iM0pwZEdodExseHVYRzRnSUVWNFlXMXdiR1U2WEc1Y2JpQWdZR0JnYW1GMllYTmpjbWx3ZEZ4dUlDQnNaWFFnY0hKdmJXbHpaVEVnUFNCeVpYTnZiSFpsS0RFcE8xeHVJQ0JzWlhRZ2NISnZiV2x6WlRJZ1BTQnlaWE52YkhabEtESXBPMXh1SUNCc1pYUWdjSEp2YldselpUTWdQU0J5WlhOdmJIWmxLRE1wTzF4dUlDQnNaWFFnY0hKdmJXbHpaWE1nUFNCYklIQnliMjFwYzJVeExDQndjbTl0YVhObE1pd2djSEp2YldselpUTWdYVHRjYmx4dUlDQlFjbTl0YVhObExtRnNiQ2h3Y205dGFYTmxjeWt1ZEdobGJpaG1kVzVqZEdsdmJpaGhjbkpoZVNsN1hHNGdJQ0FnTHk4Z1ZHaGxJR0Z5Y21GNUlHaGxjbVVnZDI5MWJHUWdZbVVnV3lBeExDQXlMQ0F6SUYwN1hHNGdJSDBwTzF4dUlDQmdZR0JjYmx4dUlDQkpaaUJoYm5rZ2IyWWdkR2hsSUdCd2NtOXRhWE5sYzJBZ1oybDJaVzRnZEc4Z1lHRnNiR0FnWVhKbElISmxhbVZqZEdWa0xDQjBhR1VnWm1seWMzUWdjSEp2YldselpWeHVJQ0IwYUdGMElHbHpJSEpsYW1WamRHVmtJSGRwYkd3Z1ltVWdaMmwyWlc0Z1lYTWdZVzRnWVhKbmRXMWxiblFnZEc4Z2RHaGxJSEpsZEhWeWJtVmtJSEJ5YjIxcGMyVnpKM05jYmlBZ2NtVnFaV04wYVc5dUlHaGhibVJzWlhJdUlFWnZjaUJsZUdGdGNHeGxPbHh1WEc0Z0lFVjRZVzF3YkdVNlhHNWNiaUFnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0JzWlhRZ2NISnZiV2x6WlRFZ1BTQnlaWE52YkhabEtERXBPMXh1SUNCc1pYUWdjSEp2YldselpUSWdQU0J5WldwbFkzUW9ibVYzSUVWeWNtOXlLRndpTWx3aUtTazdYRzRnSUd4bGRDQndjbTl0YVhObE15QTlJSEpsYW1WamRDaHVaWGNnUlhKeWIzSW9YQ0l6WENJcEtUdGNiaUFnYkdWMElIQnliMjFwYzJWeklEMGdXeUJ3Y205dGFYTmxNU3dnY0hKdmJXbHpaVElzSUhCeWIyMXBjMlV6SUYwN1hHNWNiaUFnVUhKdmJXbHpaUzVoYkd3b2NISnZiV2x6WlhNcExuUm9aVzRvWm5WdVkzUnBiMjRvWVhKeVlYa3BlMXh1SUNBZ0lDOHZJRU52WkdVZ2FHVnlaU0J1WlhabGNpQnlkVzV6SUdKbFkyRjFjMlVnZEdobGNtVWdZWEpsSUhKbGFtVmpkR1ZrSUhCeWIyMXBjMlZ6SVZ4dUlDQjlMQ0JtZFc1amRHbHZiaWhsY25KdmNpa2dlMXh1SUNBZ0lDOHZJR1Z5Y205eUxtMWxjM05oWjJVZ1BUMDlJRndpTWx3aVhHNGdJSDBwTzF4dUlDQmdZR0JjYmx4dUlDQkFiV1YwYUc5a0lHRnNiRnh1SUNCQWMzUmhkR2xqWEc0Z0lFQndZWEpoYlNCN1FYSnlZWGw5SUdWdWRISnBaWE1nWVhKeVlYa2diMllnY0hKdmJXbHpaWE5jYmlBZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUd4aFltVnNJRzl3ZEdsdmJtRnNJSE4wY21sdVp5Qm1iM0lnYkdGaVpXeHBibWNnZEdobElIQnliMjFwYzJVdVhHNGdJRlZ6WldaMWJDQm1iM0lnZEc5dmJHbHVaeTVjYmlBZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ2NISnZiV2x6WlNCMGFHRjBJR2x6SUdaMWJHWnBiR3hsWkNCM2FHVnVJR0ZzYkNCZ2NISnZiV2x6WlhOZ0lHaGhkbVVnWW1WbGJseHVJQ0JtZFd4bWFXeHNaV1FzSUc5eUlISmxhbVZqZEdWa0lHbG1JR0Z1ZVNCdlppQjBhR1Z0SUdKbFkyOXRaU0J5WldwbFkzUmxaQzVjYmlBZ1FITjBZWFJwWTF4dUtpOWNibVoxYm1OMGFXOXVJR0ZzYkNobGJuUnlhV1Z6S1NCN1hHNGdJSEpsZEhWeWJpQnVaWGNnUlc1MWJXVnlZWFJ2Y2loMGFHbHpMQ0JsYm5SeWFXVnpLUzV3Y205dGFYTmxPMXh1ZlZ4dVhHNHZLaXBjYmlBZ1lGQnliMjFwYzJVdWNtRmpaV0FnY21WMGRYSnVjeUJoSUc1bGR5QndjbTl0YVhObElIZG9hV05vSUdseklITmxkSFJzWldRZ2FXNGdkR2hsSUhOaGJXVWdkMkY1SUdGeklIUm9aVnh1SUNCbWFYSnpkQ0J3WVhOelpXUWdjSEp2YldselpTQjBieUJ6WlhSMGJHVXVYRzVjYmlBZ1JYaGhiWEJzWlRwY2JseHVJQ0JnWUdCcVlYWmhjMk55YVhCMFhHNGdJR3hsZENCd2NtOXRhWE5sTVNBOUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDbDdYRzRnSUNBZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdjbVZ6YjJ4MlpTZ25jSEp2YldselpTQXhKeWs3WEc0Z0lDQWdmU3dnTWpBd0tUdGNiaUFnZlNrN1hHNWNiaUFnYkdWMElIQnliMjFwYzJVeUlEMGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLWHRjYmlBZ0lDQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0J5WlhOdmJIWmxLQ2R3Y205dGFYTmxJREluS1R0Y2JpQWdJQ0I5TENBeE1EQXBPMXh1SUNCOUtUdGNibHh1SUNCUWNtOXRhWE5sTG5KaFkyVW9XM0J5YjIxcGMyVXhMQ0J3Y205dGFYTmxNbDBwTG5Sb1pXNG9ablZ1WTNScGIyNG9jbVZ6ZFd4MEtYdGNiaUFnSUNBdkx5QnlaWE4xYkhRZ1BUMDlJQ2R3Y205dGFYTmxJREluSUdKbFkyRjFjMlVnYVhRZ2QyRnpJSEpsYzI5c2RtVmtJR0psWm05eVpTQndjbTl0YVhObE1WeHVJQ0FnSUM4dklIZGhjeUJ5WlhOdmJIWmxaQzVjYmlBZ2ZTazdYRzRnSUdCZ1lGeHVYRzRnSUdCUWNtOXRhWE5sTG5KaFkyVmdJR2x6SUdSbGRHVnliV2x1YVhOMGFXTWdhVzRnZEdoaGRDQnZibXg1SUhSb1pTQnpkR0YwWlNCdlppQjBhR1VnWm1seWMzUmNiaUFnYzJWMGRHeGxaQ0J3Y205dGFYTmxJRzFoZEhSbGNuTXVJRVp2Y2lCbGVHRnRjR3hsTENCbGRtVnVJR2xtSUc5MGFHVnlJSEJ5YjIxcGMyVnpJR2RwZG1WdUlIUnZJSFJvWlZ4dUlDQmdjSEp2YldselpYTmdJR0Z5Y21GNUlHRnlaM1Z0Wlc1MElHRnlaU0J5WlhOdmJIWmxaQ3dnWW5WMElIUm9aU0JtYVhKemRDQnpaWFIwYkdWa0lIQnliMjFwYzJVZ2FHRnpYRzRnSUdKbFkyOXRaU0J5WldwbFkzUmxaQ0JpWldadmNtVWdkR2hsSUc5MGFHVnlJSEJ5YjIxcGMyVnpJR0psWTJGdFpTQm1kV3htYVd4c1pXUXNJSFJvWlNCeVpYUjFjbTVsWkZ4dUlDQndjbTl0YVhObElIZHBiR3dnWW1WamIyMWxJSEpsYW1WamRHVmtPbHh1WEc0Z0lHQmdZR3BoZG1GelkzSnBjSFJjYmlBZ2JHVjBJSEJ5YjIxcGMyVXhJRDBnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1h0Y2JpQWdJQ0J6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNCeVpYTnZiSFpsS0Nkd2NtOXRhWE5sSURFbktUdGNiaUFnSUNCOUxDQXlNREFwTzF4dUlDQjlLVHRjYmx4dUlDQnNaWFFnY0hKdmJXbHpaVElnUFNCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcGUxeHVJQ0FnSUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lISmxhbVZqZENodVpYY2dSWEp5YjNJb0ozQnliMjFwYzJVZ01pY3BLVHRjYmlBZ0lDQjlMQ0F4TURBcE8xeHVJQ0I5S1R0Y2JseHVJQ0JRY205dGFYTmxMbkpoWTJVb1czQnliMjFwYzJVeExDQndjbTl0YVhObE1sMHBMblJvWlc0b1puVnVZM1JwYjI0b2NtVnpkV3gwS1h0Y2JpQWdJQ0F2THlCRGIyUmxJR2hsY21VZ2JtVjJaWElnY25WdWMxeHVJQ0I5TENCbWRXNWpkR2x2YmloeVpXRnpiMjRwZTF4dUlDQWdJQzh2SUhKbFlYTnZiaTV0WlhOellXZGxJRDA5UFNBbmNISnZiV2x6WlNBeUp5QmlaV05oZFhObElIQnliMjFwYzJVZ01pQmlaV05oYldVZ2NtVnFaV04wWldRZ1ltVm1iM0psWEc0Z0lDQWdMeThnY0hKdmJXbHpaU0F4SUdKbFkyRnRaU0JtZFd4bWFXeHNaV1JjYmlBZ2ZTazdYRzRnSUdCZ1lGeHVYRzRnSUVGdUlHVjRZVzF3YkdVZ2NtVmhiQzEzYjNKc1pDQjFjMlVnWTJGelpTQnBjeUJwYlhCc1pXMWxiblJwYm1jZ2RHbHRaVzkxZEhNNlhHNWNiaUFnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0JRY205dGFYTmxMbkpoWTJVb1cyRnFZWGdvSjJadmJ5NXFjMjl1Snlrc0lIUnBiV1Z2ZFhRb05UQXdNQ2xkS1Z4dUlDQmdZR0JjYmx4dUlDQkFiV1YwYUc5a0lISmhZMlZjYmlBZ1FITjBZWFJwWTF4dUlDQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCd2NtOXRhWE5sY3lCaGNuSmhlU0J2WmlCd2NtOXRhWE5sY3lCMGJ5QnZZbk5sY25abFhHNGdJRlZ6WldaMWJDQm1iM0lnZEc5dmJHbHVaeTVjYmlBZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ1lTQndjbTl0YVhObElIZG9hV05vSUhObGRIUnNaWE1nYVc0Z2RHaGxJSE5oYldVZ2QyRjVJR0Z6SUhSb1pTQm1hWEp6ZENCd1lYTnpaV1JjYmlBZ2NISnZiV2x6WlNCMGJ5QnpaWFIwYkdVdVhHNHFMMXh1Wm5WdVkzUnBiMjRnY21GalpTaGxiblJ5YVdWektTQjdYRzRnSUM4cWFuTm9hVzUwSUhaaGJHbGtkR2hwY3pwMGNuVmxJQ292WEc0Z0lIWmhjaUJEYjI1emRISjFZM1J2Y2lBOUlIUm9hWE03WEc1Y2JpQWdhV1lnS0NGcGMwRnljbUY1S0dWdWRISnBaWE1wS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCRGIyNXpkSEoxWTNSdmNpaG1kVzVqZEdsdmJpQW9YeXdnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZxWldOMEtHNWxkeUJVZVhCbFJYSnliM0lvSjFsdmRTQnRkWE4wSUhCaGMzTWdZVzRnWVhKeVlYa2dkRzhnY21GalpTNG5LU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCRGIyNXpkSEoxWTNSdmNpaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQjJZWElnYkdWdVozUm9JRDBnWlc1MGNtbGxjeTVzWlc1bmRHZzdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lFTnZibk4wY25WamRHOXlMbkpsYzI5c2RtVW9aVzUwY21sbGMxdHBYU2t1ZEdobGJpaHlaWE52YkhabExDQnlaV3BsWTNRcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDQmdVSEp2YldselpTNXlaV3BsWTNSZ0lISmxkSFZ5Ym5NZ1lTQndjbTl0YVhObElISmxhbVZqZEdWa0lIZHBkR2dnZEdobElIQmhjM05sWkNCZ2NtVmhjMjl1WUM1Y2JpQWdTWFFnYVhNZ2MyaHZjblJvWVc1a0lHWnZjaUIwYUdVZ1ptOXNiRzkzYVc1bk9seHVYRzRnSUdCZ1lHcGhkbUZ6WTNKcGNIUmNiaUFnYkdWMElIQnliMjFwYzJVZ1BTQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBlMXh1SUNBZ0lISmxhbVZqZENodVpYY2dSWEp5YjNJb0oxZElUMDlRVXljcEtUdGNiaUFnZlNrN1hHNWNiaUFnY0hKdmJXbHpaUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsS1h0Y2JpQWdJQ0F2THlCRGIyUmxJR2hsY21VZ1pHOWxjMjRuZENCeWRXNGdZbVZqWVhWelpTQjBhR1VnY0hKdmJXbHpaU0JwY3lCeVpXcGxZM1JsWkNGY2JpQWdmU3dnWm5WdVkzUnBiMjRvY21WaGMyOXVLWHRjYmlBZ0lDQXZMeUJ5WldGemIyNHViV1Z6YzJGblpTQTlQVDBnSjFkSVQwOVFVeWRjYmlBZ2ZTazdYRzRnSUdCZ1lGeHVYRzRnSUVsdWMzUmxZV1FnYjJZZ2QzSnBkR2x1WnlCMGFHVWdZV0p2ZG1Vc0lIbHZkWElnWTI5a1pTQnViM2NnYzJsdGNHeDVJR0psWTI5dFpYTWdkR2hsSUdadmJHeHZkMmx1WnpwY2JseHVJQ0JnWUdCcVlYWmhjMk55YVhCMFhHNGdJR3hsZENCd2NtOXRhWE5sSUQwZ1VISnZiV2x6WlM1eVpXcGxZM1FvYm1WM0lFVnljbTl5S0NkWFNFOVBVRk1uS1NrN1hHNWNiaUFnY0hKdmJXbHpaUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsS1h0Y2JpQWdJQ0F2THlCRGIyUmxJR2hsY21VZ1pHOWxjMjRuZENCeWRXNGdZbVZqWVhWelpTQjBhR1VnY0hKdmJXbHpaU0JwY3lCeVpXcGxZM1JsWkNGY2JpQWdmU3dnWm5WdVkzUnBiMjRvY21WaGMyOXVLWHRjYmlBZ0lDQXZMeUJ5WldGemIyNHViV1Z6YzJGblpTQTlQVDBnSjFkSVQwOVFVeWRjYmlBZ2ZTazdYRzRnSUdCZ1lGeHVYRzRnSUVCdFpYUm9iMlFnY21WcVpXTjBYRzRnSUVCemRHRjBhV05jYmlBZ1FIQmhjbUZ0SUh0QmJubDlJSEpsWVhOdmJpQjJZV3gxWlNCMGFHRjBJSFJvWlNCeVpYUjFjbTVsWkNCd2NtOXRhWE5sSUhkcGJHd2dZbVVnY21WcVpXTjBaV1FnZDJsMGFDNWNiaUFnVlhObFpuVnNJR1p2Y2lCMGIyOXNhVzVuTGx4dUlDQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQmhJSEJ5YjIxcGMyVWdjbVZxWldOMFpXUWdkMmwwYUNCMGFHVWdaMmwyWlc0Z1lISmxZWE52Ym1BdVhHNHFMMXh1Wm5WdVkzUnBiMjRnY21WcVpXTjBLSEpsWVhOdmJpa2dlMXh1SUNBdkttcHphR2x1ZENCMllXeHBaSFJvYVhNNmRISjFaU0FxTDF4dUlDQjJZWElnUTI5dWMzUnlkV04wYjNJZ1BTQjBhR2x6TzF4dUlDQjJZWElnY0hKdmJXbHpaU0E5SUc1bGR5QkRiMjV6ZEhKMVkzUnZjaWh1YjI5d0tUdGNiaUFnWDNKbGFtVmpkQ2h3Y205dGFYTmxMQ0J5WldGemIyNHBPMXh1SUNCeVpYUjFjbTRnY0hKdmJXbHpaVHRjYm4xY2JseHVablZ1WTNScGIyNGdibVZsWkhOU1pYTnZiSFpsY2lncElIdGNiaUFnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnbldXOTFJRzExYzNRZ2NHRnpjeUJoSUhKbGMyOXNkbVZ5SUdaMWJtTjBhVzl1SUdGeklIUm9aU0JtYVhKemRDQmhjbWQxYldWdWRDQjBieUIwYUdVZ2NISnZiV2x6WlNCamIyNXpkSEoxWTNSdmNpY3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnVaV1ZrYzA1bGR5Z3BJSHRjYmlBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa1poYVd4bFpDQjBieUJqYjI1emRISjFZM1FnSjFCeWIyMXBjMlVuT2lCUWJHVmhjMlVnZFhObElIUm9aU0FuYm1WM0p5QnZjR1Z5WVhSdmNpd2dkR2hwY3lCdlltcGxZM1FnWTI5dWMzUnlkV04wYjNJZ1kyRnVibTkwSUdKbElHTmhiR3hsWkNCaGN5QmhJR1oxYm1OMGFXOXVMbHdpS1R0Y2JuMWNibHh1THlvcVhHNGdJRkJ5YjIxcGMyVWdiMkpxWldOMGN5QnlaWEJ5WlhObGJuUWdkR2hsSUdWMlpXNTBkV0ZzSUhKbGMzVnNkQ0J2WmlCaGJpQmhjM2x1WTJoeWIyNXZkWE1nYjNCbGNtRjBhVzl1TGlCVWFHVmNiaUFnY0hKcGJXRnllU0IzWVhrZ2IyWWdhVzUwWlhKaFkzUnBibWNnZDJsMGFDQmhJSEJ5YjIxcGMyVWdhWE1nZEdoeWIzVm5hQ0JwZEhNZ1lIUm9aVzVnSUcxbGRHaHZaQ3dnZDJocFkyaGNiaUFnY21WbmFYTjBaWEp6SUdOaGJHeGlZV05yY3lCMGJ5QnlaV05sYVhabElHVnBkR2hsY2lCaElIQnliMjFwYzJVbmN5QmxkbVZ1ZEhWaGJDQjJZV3gxWlNCdmNpQjBhR1VnY21WaGMyOXVYRzRnSUhkb2VTQjBhR1VnY0hKdmJXbHpaU0JqWVc1dWIzUWdZbVVnWm5Wc1ptbHNiR1ZrTGx4dVhHNGdJRlJsY20xcGJtOXNiMmQ1WEc0Z0lDMHRMUzB0TFMwdExTMHRYRzVjYmlBZ0xTQmdjSEp2YldselpXQWdhWE1nWVc0Z2IySnFaV04wSUc5eUlHWjFibU4wYVc5dUlIZHBkR2dnWVNCZ2RHaGxibUFnYldWMGFHOWtJSGRvYjNObElHSmxhR0YyYVc5eUlHTnZibVp2Y20xeklIUnZJSFJvYVhNZ2MzQmxZMmxtYVdOaGRHbHZiaTVjYmlBZ0xTQmdkR2hsYm1GaWJHVmdJR2x6SUdGdUlHOWlhbVZqZENCdmNpQm1kVzVqZEdsdmJpQjBhR0YwSUdSbFptbHVaWE1nWVNCZ2RHaGxibUFnYldWMGFHOWtMbHh1SUNBdElHQjJZV3gxWldBZ2FYTWdZVzU1SUd4bFoyRnNJRXBoZG1GVFkzSnBjSFFnZG1Gc2RXVWdLR2x1WTJ4MVpHbHVaeUIxYm1SbFptbHVaV1FzSUdFZ2RHaGxibUZpYkdVc0lHOXlJR0VnY0hKdmJXbHpaU2t1WEc0Z0lDMGdZR1Y0WTJWd2RHbHZibUFnYVhNZ1lTQjJZV3gxWlNCMGFHRjBJR2x6SUhSb2NtOTNiaUIxYzJsdVp5QjBhR1VnZEdoeWIzY2djM1JoZEdWdFpXNTBMbHh1SUNBdElHQnlaV0Z6YjI1Z0lHbHpJR0VnZG1Gc2RXVWdkR2hoZENCcGJtUnBZMkYwWlhNZ2QyaDVJR0VnY0hKdmJXbHpaU0IzWVhNZ2NtVnFaV04wWldRdVhHNGdJQzBnWUhObGRIUnNaV1JnSUhSb1pTQm1hVzVoYkNCeVpYTjBhVzVuSUhOMFlYUmxJRzltSUdFZ2NISnZiV2x6WlN3Z1puVnNabWxzYkdWa0lHOXlJSEpsYW1WamRHVmtMbHh1WEc0Z0lFRWdjSEp2YldselpTQmpZVzRnWW1VZ2FXNGdiMjVsSUc5bUlIUm9jbVZsSUhOMFlYUmxjem9nY0dWdVpHbHVaeXdnWm5Wc1ptbHNiR1ZrTENCdmNpQnlaV3BsWTNSbFpDNWNibHh1SUNCUWNtOXRhWE5sY3lCMGFHRjBJR0Z5WlNCbWRXeG1hV3hzWldRZ2FHRjJaU0JoSUdaMWJHWnBiR3h0Wlc1MElIWmhiSFZsSUdGdVpDQmhjbVVnYVc0Z2RHaGxJR1oxYkdacGJHeGxaRnh1SUNCemRHRjBaUzRnSUZCeWIyMXBjMlZ6SUhSb1lYUWdZWEpsSUhKbGFtVmpkR1ZrSUdoaGRtVWdZU0J5WldwbFkzUnBiMjRnY21WaGMyOXVJR0Z1WkNCaGNtVWdhVzRnZEdobFhHNGdJSEpsYW1WamRHVmtJSE4wWVhSbExpQWdRU0JtZFd4bWFXeHNiV1Z1ZENCMllXeDFaU0JwY3lCdVpYWmxjaUJoSUhSb1pXNWhZbXhsTGx4dVhHNGdJRkJ5YjIxcGMyVnpJR05oYmlCaGJITnZJR0psSUhOaGFXUWdkRzhnS25KbGMyOXNkbVVxSUdFZ2RtRnNkV1V1SUNCSlppQjBhR2x6SUhaaGJIVmxJR2x6SUdGc2MyOGdZVnh1SUNCd2NtOXRhWE5sTENCMGFHVnVJSFJvWlNCdmNtbG5hVzVoYkNCd2NtOXRhWE5sSjNNZ2MyVjBkR3hsWkNCemRHRjBaU0IzYVd4c0lHMWhkR05vSUhSb1pTQjJZV3gxWlNkelhHNGdJSE5sZEhSc1pXUWdjM1JoZEdVdUlDQlRieUJoSUhCeWIyMXBjMlVnZEdoaGRDQXFjbVZ6YjJ4MlpYTXFJR0VnY0hKdmJXbHpaU0IwYUdGMElISmxhbVZqZEhNZ2QybHNiRnh1SUNCcGRITmxiR1lnY21WcVpXTjBMQ0JoYm1RZ1lTQndjbTl0YVhObElIUm9ZWFFnS25KbGMyOXNkbVZ6S2lCaElIQnliMjFwYzJVZ2RHaGhkQ0JtZFd4bWFXeHNjeUIzYVd4c1hHNGdJR2wwYzJWc1ppQm1kV3htYVd4c0xseHVYRzVjYmlBZ1FtRnphV01nVlhOaFoyVTZYRzRnSUMwdExTMHRMUzB0TFMwdExWeHVYRzRnSUdCZ1lHcHpYRzRnSUd4bGRDQndjbTl0YVhObElEMGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdMeThnYjI0Z2MzVmpZMlZ6YzF4dUlDQWdJSEpsYzI5c2RtVW9kbUZzZFdVcE8xeHVYRzRnSUNBZ0x5OGdiMjRnWm1GcGJIVnlaVnh1SUNBZ0lISmxhbVZqZENoeVpXRnpiMjRwTzF4dUlDQjlLVHRjYmx4dUlDQndjbTl0YVhObExuUm9aVzRvWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmlBZ0lDQXZMeUJ2YmlCbWRXeG1hV3hzYldWdWRGeHVJQ0I5TENCbWRXNWpkR2x2YmloeVpXRnpiMjRwSUh0Y2JpQWdJQ0F2THlCdmJpQnlaV3BsWTNScGIyNWNiaUFnZlNrN1hHNGdJR0JnWUZ4dVhHNGdJRUZrZG1GdVkyVmtJRlZ6WVdkbE9seHVJQ0F0TFMwdExTMHRMUzB0TFMwdExTMWNibHh1SUNCUWNtOXRhWE5sY3lCemFHbHVaU0IzYUdWdUlHRmljM1J5WVdOMGFXNW5JR0YzWVhrZ1lYTjVibU5vY205dWIzVnpJR2x1ZEdWeVlXTjBhVzl1Y3lCemRXTm9JR0Z6WEc0Z0lHQllUVXhJZEhSd1VtVnhkV1Z6ZEdCekxseHVYRzRnSUdCZ1lHcHpYRzRnSUdaMWJtTjBhVzl1SUdkbGRFcFRUMDRvZFhKc0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENsN1hHNGdJQ0FnSUNCc1pYUWdlR2h5SUQwZ2JtVjNJRmhOVEVoMGRIQlNaWEYxWlhOMEtDazdYRzVjYmlBZ0lDQWdJSGhvY2k1dmNHVnVLQ2RIUlZRbkxDQjFjbXdwTzF4dUlDQWdJQ0FnZUdoeUxtOXVjbVZoWkhsemRHRjBaV05vWVc1blpTQTlJR2hoYm1Sc1pYSTdYRzRnSUNBZ0lDQjRhSEl1Y21WemNHOXVjMlZVZVhCbElEMGdKMnB6YjI0bk8xeHVJQ0FnSUNBZ2VHaHlMbk5sZEZKbGNYVmxjM1JJWldGa1pYSW9KMEZqWTJWd2RDY3NJQ2RoY0hCc2FXTmhkR2x2Ymk5cWMyOXVKeWs3WEc0Z0lDQWdJQ0I0YUhJdWMyVnVaQ2dwTzF4dVhHNGdJQ0FnSUNCbWRXNWpkR2x2YmlCb1lXNWtiR1Z5S0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXlaV0ZrZVZOMFlYUmxJRDA5UFNCMGFHbHpMa1JQVGtVcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6ZEdGMGRYTWdQVDA5SURJd01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoMGFHbHpMbkpsYzNCdmJuTmxLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHNWxkeUJGY25KdmNpZ25aMlYwU2xOUFRqb2dZQ2NnS3lCMWNtd2dLeUFuWUNCbVlXbHNaV1FnZDJsMGFDQnpkR0YwZFhNNklGc25JQ3NnZEdocGN5NXpkR0YwZFhNZ0t5QW5YU2NwS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCblpYUktVMDlPS0NjdmNHOXpkSE11YW5OdmJpY3BMblJvWlc0b1puVnVZM1JwYjI0b2FuTnZiaWtnZTF4dUlDQWdJQzh2SUc5dUlHWjFiR1pwYkd4dFpXNTBYRzRnSUgwc0lHWjFibU4wYVc5dUtISmxZWE52YmlrZ2UxeHVJQ0FnSUM4dklHOXVJSEpsYW1WamRHbHZibHh1SUNCOUtUdGNiaUFnWUdCZ1hHNWNiaUFnVlc1c2FXdGxJR05oYkd4aVlXTnJjeXdnY0hKdmJXbHpaWE1nWVhKbElHZHlaV0YwSUdOdmJYQnZjMkZpYkdVZ2NISnBiV2wwYVhabGN5NWNibHh1SUNCZ1lHQnFjMXh1SUNCUWNtOXRhWE5sTG1Gc2JDaGJYRzRnSUNBZ1oyVjBTbE5QVGlnbkwzQnZjM1J6Snlrc1hHNGdJQ0FnWjJWMFNsTlBUaWduTDJOdmJXMWxiblJ6SnlsY2JpQWdYU2t1ZEdobGJpaG1kVzVqZEdsdmJpaDJZV3gxWlhNcGUxeHVJQ0FnSUhaaGJIVmxjMXN3WFNBdkx5QTlQaUJ3YjNOMGMwcFRUMDVjYmlBZ0lDQjJZV3gxWlhOYk1WMGdMeThnUFQ0Z1kyOXRiV1Z1ZEhOS1UwOU9YRzVjYmlBZ0lDQnlaWFIxY200Z2RtRnNkV1Z6TzF4dUlDQjlLVHRjYmlBZ1lHQmdYRzVjYmlBZ1FHTnNZWE56SUZCeWIyMXBjMlZjYmlBZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2Ym4wZ2NtVnpiMngyWlhKY2JpQWdWWE5sWm5Wc0lHWnZjaUIwYjI5c2FXNW5MbHh1SUNCQVkyOXVjM1J5ZFdOMGIzSmNiaW92WEc1bWRXNWpkR2x2YmlCUWNtOXRhWE5sS0hKbGMyOXNkbVZ5S1NCN1hHNGdJSFJvYVhOYlVGSlBUVWxUUlY5SlJGMGdQU0J1WlhoMFNXUW9LVHRjYmlBZ2RHaHBjeTVmY21WemRXeDBJRDBnZEdocGN5NWZjM1JoZEdVZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUhSb2FYTXVYM04xWW5OamNtbGlaWEp6SUQwZ1cxMDdYRzVjYmlBZ2FXWWdLRzV2YjNBZ0lUMDlJSEpsYzI5c2RtVnlLU0I3WEc0Z0lDQWdkSGx3Wlc5bUlISmxjMjlzZG1WeUlDRTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHNWxaV1J6VW1WemIyeDJaWElvS1R0Y2JpQWdJQ0IwYUdseklHbHVjM1JoYm1ObGIyWWdVSEp2YldselpTQS9JR2x1YVhScFlXeHBlbVZRY205dGFYTmxLSFJvYVhNc0lISmxjMjlzZG1WeUtTQTZJRzVsWldSelRtVjNLQ2s3WEc0Z0lIMWNibjFjYmx4dVVISnZiV2x6WlM1aGJHd2dQU0JoYkd3N1hHNVFjbTl0YVhObExuSmhZMlVnUFNCeVlXTmxPMXh1VUhKdmJXbHpaUzV5WlhOdmJIWmxJRDBnY21WemIyeDJaVHRjYmxCeWIyMXBjMlV1Y21WcVpXTjBJRDBnY21WcVpXTjBPMXh1VUhKdmJXbHpaUzVmYzJWMFUyTm9aV1IxYkdWeUlEMGdjMlYwVTJOb1pXUjFiR1Z5TzF4dVVISnZiV2x6WlM1ZmMyVjBRWE5oY0NBOUlITmxkRUZ6WVhBN1hHNVFjbTl0YVhObExsOWhjMkZ3SUQwZ1lYTmhjRHRjYmx4dVVISnZiV2x6WlM1d2NtOTBiM1I1Y0dVZ1BTQjdYRzRnSUdOdmJuTjBjblZqZEc5eU9pQlFjbTl0YVhObExGeHVYRzRnSUM4cUtseHVJQ0FnSUZSb1pTQndjbWx0WVhKNUlIZGhlU0J2WmlCcGJuUmxjbUZqZEdsdVp5QjNhWFJvSUdFZ2NISnZiV2x6WlNCcGN5QjBhSEp2ZFdkb0lHbDBjeUJnZEdobGJtQWdiV1YwYUc5a0xGeHVJQ0FnSUhkb2FXTm9JSEpsWjJsemRHVnljeUJqWVd4c1ltRmphM01nZEc4Z2NtVmpaV2wyWlNCbGFYUm9aWElnWVNCd2NtOXRhWE5sSjNNZ1pYWmxiblIxWVd3Z2RtRnNkV1VnYjNJZ2RHaGxYRzRnSUNBZ2NtVmhjMjl1SUhkb2VTQjBhR1VnY0hKdmJXbHpaU0JqWVc1dWIzUWdZbVVnWm5Wc1ptbHNiR1ZrTGx4dUlDQmNiaUFnSUNCZ1lHQnFjMXh1SUNBZ0lHWnBibVJWYzJWeUtDa3VkR2hsYmlobWRXNWpkR2x2YmloMWMyVnlLWHRjYmlBZ0lDQWdJQzh2SUhWelpYSWdhWE1nWVhaaGFXeGhZbXhsWEc0Z0lDQWdmU3dnWm5WdVkzUnBiMjRvY21WaGMyOXVLWHRjYmlBZ0lDQWdJQzh2SUhWelpYSWdhWE1nZFc1aGRtRnBiR0ZpYkdVc0lHRnVaQ0I1YjNVZ1lYSmxJR2RwZG1WdUlIUm9aU0J5WldGemIyNGdkMmg1WEc0Z0lDQWdmU2s3WEc0Z0lDQWdZR0JnWEc0Z0lGeHVJQ0FnSUVOb1lXbHVhVzVuWEc0Z0lDQWdMUzB0TFMwdExTMWNiaUFnWEc0Z0lDQWdWR2hsSUhKbGRIVnliaUIyWVd4MVpTQnZaaUJnZEdobGJtQWdhWE1nYVhSelpXeG1JR0VnY0hKdmJXbHpaUzRnSUZSb2FYTWdjMlZqYjI1a0xDQW5aRzkzYm5OMGNtVmhiU2RjYmlBZ0lDQndjbTl0YVhObElHbHpJSEpsYzI5c2RtVmtJSGRwZEdnZ2RHaGxJSEpsZEhWeWJpQjJZV3gxWlNCdlppQjBhR1VnWm1seWMzUWdjSEp2YldselpTZHpJR1oxYkdacGJHeHRaVzUwWEc0Z0lDQWdiM0lnY21WcVpXTjBhVzl1SUdoaGJtUnNaWElzSUc5eUlISmxhbVZqZEdWa0lHbG1JSFJvWlNCb1lXNWtiR1Z5SUhSb2NtOTNjeUJoYmlCbGVHTmxjSFJwYjI0dVhHNGdJRnh1SUNBZ0lHQmdZR3B6WEc0Z0lDQWdabWx1WkZWelpYSW9LUzUwYUdWdUtHWjFibU4wYVc5dUlDaDFjMlZ5S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFhObGNpNXVZVzFsTzF4dUlDQWdJSDBzSUdaMWJtTjBhVzl1SUNoeVpXRnpiMjRwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFuWkdWbVlYVnNkQ0J1WVcxbEp6dGNiaUFnSUNCOUtTNTBhR1Z1S0daMWJtTjBhVzl1SUNoMWMyVnlUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0x5OGdTV1lnWUdacGJtUlZjMlZ5WUNCbWRXeG1hV3hzWldRc0lHQjFjMlZ5VG1GdFpXQWdkMmxzYkNCaVpTQjBhR1VnZFhObGNpZHpJRzVoYldVc0lHOTBhR1Z5ZDJselpTQnBkRnh1SUNBZ0lDQWdMeThnZDJsc2JDQmlaU0JnSjJSbFptRjFiSFFnYm1GdFpTZGdYRzRnSUNBZ2ZTazdYRzRnSUZ4dUlDQWdJR1pwYm1SVmMyVnlLQ2t1ZEdobGJpaG1kVzVqZEdsdmJpQW9kWE5sY2lrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkR2IzVnVaQ0IxYzJWeUxDQmlkWFFnYzNScGJHd2dkVzVvWVhCd2VTY3BPMXh1SUNBZ0lIMHNJR1oxYm1OMGFXOXVJQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25ZR1pwYm1SVmMyVnlZQ0J5WldwbFkzUmxaQ0JoYm1RZ2QyVW5jbVVnZFc1b1lYQndlU2NwTzF4dUlDQWdJSDBwTG5Sb1pXNG9ablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQXZMeUJ1WlhabGNpQnlaV0ZqYUdWa1hHNGdJQ0FnZlN3Z1puVnVZM1JwYjI0Z0tISmxZWE52YmlrZ2UxeHVJQ0FnSUNBZ0x5OGdhV1lnWUdacGJtUlZjMlZ5WUNCbWRXeG1hV3hzWldRc0lHQnlaV0Z6YjI1Z0lIZHBiR3dnWW1VZ0owWnZkVzVrSUhWelpYSXNJR0oxZENCemRHbHNiQ0IxYm1oaGNIQjVKeTVjYmlBZ0lDQWdJQzh2SUVsbUlHQm1hVzVrVlhObGNtQWdjbVZxWldOMFpXUXNJR0J5WldGemIyNWdJSGRwYkd3Z1ltVWdKMkJtYVc1a1ZYTmxjbUFnY21WcVpXTjBaV1FnWVc1a0lIZGxKM0psSUhWdWFHRndjSGtuTGx4dUlDQWdJSDBwTzF4dUlDQWdJR0JnWUZ4dUlDQWdJRWxtSUhSb1pTQmtiM2R1YzNSeVpXRnRJSEJ5YjIxcGMyVWdaRzlsY3lCdWIzUWdjM0JsWTJsbWVTQmhJSEpsYW1WamRHbHZiaUJvWVc1a2JHVnlMQ0J5WldwbFkzUnBiMjRnY21WaGMyOXVjeUIzYVd4c0lHSmxJSEJ5YjNCaFoyRjBaV1FnWm5WeWRHaGxjaUJrYjNkdWMzUnlaV0Z0TGx4dUlDQmNiaUFnSUNCZ1lHQnFjMXh1SUNBZ0lHWnBibVJWYzJWeUtDa3VkR2hsYmlobWRXNWpkR2x2YmlBb2RYTmxjaWtnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZCbFpHRm5iMmRwWTJGc1JYaGpaWEIwYVc5dUtDZFZjSE4wY21WaGJTQmxjbkp2Y2ljcE8xeHVJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0F2THlCdVpYWmxjaUJ5WldGamFHVmtYRzRnSUNBZ2ZTa3VkR2hsYmlobWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUM4dklHNWxkbVZ5SUhKbFlXTm9aV1JjYmlBZ0lDQjlMQ0JtZFc1amRHbHZiaUFvY21WaGMyOXVLU0I3WEc0Z0lDQWdJQ0F2THlCVWFHVWdZRkJsWkdkaFoyOWphV0ZzUlhoalpYQjBhVzl1WUNCcGN5QndjbTl3WVdkaGRHVmtJR0ZzYkNCMGFHVWdkMkY1SUdSdmQyNGdkRzhnYUdWeVpWeHVJQ0FnSUgwcE8xeHVJQ0FnSUdCZ1lGeHVJQ0JjYmlBZ0lDQkJjM05wYldsc1lYUnBiMjVjYmlBZ0lDQXRMUzB0TFMwdExTMHRMUzFjYmlBZ1hHNGdJQ0FnVTI5dFpYUnBiV1Z6SUhSb1pTQjJZV3gxWlNCNWIzVWdkMkZ1ZENCMGJ5QndjbTl3WVdkaGRHVWdkRzhnWVNCa2IzZHVjM1J5WldGdElIQnliMjFwYzJVZ1kyRnVJRzl1YkhrZ1ltVmNiaUFnSUNCeVpYUnlhV1YyWldRZ1lYTjVibU5vY205dWIzVnpiSGt1SUZSb2FYTWdZMkZ1SUdKbElHRmphR2xsZG1Wa0lHSjVJSEpsZEhWeWJtbHVaeUJoSUhCeWIyMXBjMlVnYVc0Z2RHaGxYRzRnSUNBZ1puVnNabWxzYkcxbGJuUWdiM0lnY21WcVpXTjBhVzl1SUdoaGJtUnNaWEl1SUZSb1pTQmtiM2R1YzNSeVpXRnRJSEJ5YjIxcGMyVWdkMmxzYkNCMGFHVnVJR0psSUhCbGJtUnBibWRjYmlBZ0lDQjFiblJwYkNCMGFHVWdjbVYwZFhKdVpXUWdjSEp2YldselpTQnBjeUJ6WlhSMGJHVmtMaUJVYUdseklHbHpJR05oYkd4bFpDQXFZWE56YVcxcGJHRjBhVzl1S2k1Y2JpQWdYRzRnSUNBZ1lHQmdhbk5jYmlBZ0lDQm1hVzVrVlhObGNpZ3BMblJvWlc0b1puVnVZM1JwYjI0Z0tIVnpaWElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYVc1a1EyOXRiV1Z1ZEhOQ2VVRjFkR2h2Y2loMWMyVnlLVHRjYmlBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUlDaGpiMjF0Wlc1MGN5a2dlMXh1SUNBZ0lDQWdMeThnVkdobElIVnpaWEluY3lCamIyMXRaVzUwY3lCaGNtVWdibTkzSUdGMllXbHNZV0pzWlZ4dUlDQWdJSDBwTzF4dUlDQWdJR0JnWUZ4dUlDQmNiaUFnSUNCSlppQjBhR1VnWVhOemFXMXNhV0YwWldRZ2NISnZiV2x6WlNCeVpXcGxZM1J6TENCMGFHVnVJSFJvWlNCa2IzZHVjM1J5WldGdElIQnliMjFwYzJVZ2QybHNiQ0JoYkhOdklISmxhbVZqZEM1Y2JpQWdYRzRnSUNBZ1lHQmdhbk5jYmlBZ0lDQm1hVzVrVlhObGNpZ3BMblJvWlc0b1puVnVZM1JwYjI0Z0tIVnpaWElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYVc1a1EyOXRiV1Z1ZEhOQ2VVRjFkR2h2Y2loMWMyVnlLVHRjYmlBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUlDaGpiMjF0Wlc1MGN5a2dlMXh1SUNBZ0lDQWdMeThnU1dZZ1lHWnBibVJEYjIxdFpXNTBjMEo1UVhWMGFHOXlZQ0JtZFd4bWFXeHNjeXdnZDJVbmJHd2dhR0YyWlNCMGFHVWdkbUZzZFdVZ2FHVnlaVnh1SUNBZ0lIMHNJR1oxYm1OMGFXOXVJQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJQzh2SUVsbUlHQm1hVzVrUTI5dGJXVnVkSE5DZVVGMWRHaHZjbUFnY21WcVpXTjBjeXdnZDJVbmJHd2dhR0YyWlNCMGFHVWdjbVZoYzI5dUlHaGxjbVZjYmlBZ0lDQjlLVHRjYmlBZ0lDQmdZR0JjYmlBZ1hHNGdJQ0FnVTJsdGNHeGxJRVY0WVcxd2JHVmNiaUFnSUNBdExTMHRMUzB0TFMwdExTMHRMVnh1SUNCY2JpQWdJQ0JUZVc1amFISnZibTkxY3lCRmVHRnRjR3hsWEc0Z0lGeHVJQ0FnSUdCZ1lHcGhkbUZ6WTNKcGNIUmNiaUFnSUNCc1pYUWdjbVZ6ZFd4ME8xeHVJQ0JjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnY21WemRXeDBJRDBnWm1sdVpGSmxjM1ZzZENncE8xeHVJQ0FnSUNBZ0x5OGdjM1ZqWTJWemMxeHVJQ0FnSUgwZ1kyRjBZMmdvY21WaGMyOXVLU0I3WEc0Z0lDQWdJQ0F2THlCbVlXbHNkWEpsWEc0Z0lDQWdmVnh1SUNBZ0lHQmdZRnh1SUNCY2JpQWdJQ0JGY25KaVlXTnJJRVY0WVcxd2JHVmNiaUFnWEc0Z0lDQWdZR0JnYW5OY2JpQWdJQ0JtYVc1a1VtVnpkV3gwS0daMWJtTjBhVzl1S0hKbGMzVnNkQ3dnWlhKeUtYdGNiaUFnSUNBZ0lHbG1JQ2hsY25JcElIdGNiaUFnSUNBZ0lDQWdMeThnWm1GcGJIVnlaVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdMeThnYzNWalkyVnpjMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNBZ0lHQmdZRnh1SUNCY2JpQWdJQ0JRY205dGFYTmxJRVY0WVcxd2JHVTdYRzRnSUZ4dUlDQWdJR0JnWUdwaGRtRnpZM0pwY0hSY2JpQWdJQ0JtYVc1a1VtVnpkV3gwS0NrdWRHaGxiaWhtZFc1amRHbHZiaWh5WlhOMWJIUXBlMXh1SUNBZ0lDQWdMeThnYzNWalkyVnpjMXh1SUNBZ0lIMHNJR1oxYm1OMGFXOXVLSEpsWVhOdmJpbDdYRzRnSUNBZ0lDQXZMeUJtWVdsc2RYSmxYRzRnSUNBZ2ZTazdYRzRnSUNBZ1lHQmdYRzRnSUZ4dUlDQWdJRUZrZG1GdVkyVmtJRVY0WVcxd2JHVmNiaUFnSUNBdExTMHRMUzB0TFMwdExTMHRMVnh1SUNCY2JpQWdJQ0JUZVc1amFISnZibTkxY3lCRmVHRnRjR3hsWEc0Z0lGeHVJQ0FnSUdCZ1lHcGhkbUZ6WTNKcGNIUmNiaUFnSUNCc1pYUWdZWFYwYUc5eUxDQmliMjlyY3p0Y2JpQWdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR0YxZEdodmNpQTlJR1pwYm1SQmRYUm9iM0lvS1R0Y2JpQWdJQ0FnSUdKdmIydHpJQ0E5SUdacGJtUkNiMjlyYzBKNVFYVjBhRzl5S0dGMWRHaHZjaWs3WEc0Z0lDQWdJQ0F2THlCemRXTmpaWE56WEc0Z0lDQWdmU0JqWVhSamFDaHlaV0Z6YjI0cElIdGNiaUFnSUNBZ0lDOHZJR1poYVd4MWNtVmNiaUFnSUNCOVhHNGdJQ0FnWUdCZ1hHNGdJRnh1SUNBZ0lFVnljbUpoWTJzZ1JYaGhiWEJzWlZ4dUlDQmNiaUFnSUNCZ1lHQnFjMXh1SUNCY2JpQWdJQ0JtZFc1amRHbHZiaUJtYjNWdVpFSnZiMnR6S0dKdmIydHpLU0I3WEc0Z0lGeHVJQ0FnSUgxY2JpQWdYRzRnSUNBZ1puVnVZM1JwYjI0Z1ptRnBiSFZ5WlNoeVpXRnpiMjRwSUh0Y2JpQWdYRzRnSUNBZ2ZWeHVJQ0JjYmlBZ0lDQm1hVzVrUVhWMGFHOXlLR1oxYm1OMGFXOXVLR0YxZEdodmNpd2daWEp5S1h0Y2JpQWdJQ0FnSUdsbUlDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ1ptRnBiSFZ5WlNobGNuSXBPMXh1SUNBZ0lDQWdJQ0F2THlCbVlXbHNkWEpsWEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJR1pwYm1SQ2IyOXZhM05DZVVGMWRHaHZjaWhoZFhSb2IzSXNJR1oxYm1OMGFXOXVLR0p2YjJ0ekxDQmxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdabUZwYkhWeVpTaGxjbklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNWdVpFSnZiMnR6S0dKdmIydHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDaHlaV0Z6YjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1ZV2xzZFhKbEtISmxZWE52YmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1poYVd4MWNtVW9aWEp5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJ6ZFdOalpYTnpYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUNBZ1lHQmdYRzRnSUZ4dUlDQWdJRkJ5YjIxcGMyVWdSWGhoYlhCc1pUdGNiaUFnWEc0Z0lDQWdZR0JnYW1GMllYTmpjbWx3ZEZ4dUlDQWdJR1pwYm1SQmRYUm9iM0lvS1M1Y2JpQWdJQ0FnSUhSb1pXNG9abWx1WkVKdmIydHpRbmxCZFhSb2IzSXBMbHh1SUNBZ0lDQWdkR2hsYmlobWRXNWpkR2x2YmloaWIyOXJjeWw3WEc0Z0lDQWdJQ0FnSUM4dklHWnZkVzVrSUdKdmIydHpYRzRnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b2NtVmhjMjl1S1h0Y2JpQWdJQ0FnSUM4dklITnZiV1YwYUdsdVp5QjNaVzUwSUhkeWIyNW5YRzRnSUNBZ2ZTazdYRzRnSUNBZ1lHQmdYRzRnSUZ4dUlDQWdJRUJ0WlhSb2IyUWdkR2hsYmx4dUlDQWdJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJRzl1Um5Wc1ptbHNiR1ZrWEc0Z0lDQWdRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdiMjVTWldwbFkzUmxaRnh1SUNBZ0lGVnpaV1oxYkNCbWIzSWdkRzl2YkdsdVp5NWNiaUFnSUNCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlZ4dUlDQXFMMXh1SUNCMGFHVnVPaUIwYUdWdUxGeHVYRzRnSUM4cUtseHVJQ0FnSUdCallYUmphR0FnYVhNZ2MybHRjR3g1SUhOMVoyRnlJR1p2Y2lCZ2RHaGxiaWgxYm1SbFptbHVaV1FzSUc5dVVtVnFaV04wYVc5dUtXQWdkMmhwWTJnZ2JXRnJaWE1nYVhRZ2RHaGxJSE5oYldWY2JpQWdJQ0JoY3lCMGFHVWdZMkYwWTJnZ1lteHZZMnNnYjJZZ1lTQjBjbmt2WTJGMFkyZ2djM1JoZEdWdFpXNTBMbHh1SUNCY2JpQWdJQ0JnWUdCcWMxeHVJQ0FnSUdaMWJtTjBhVzl1SUdacGJtUkJkWFJvYjNJb0tYdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblkyOTFiR1J1SjNRZ1ptbHVaQ0IwYUdGMElHRjFkR2h2Y2ljcE8xeHVJQ0FnSUgxY2JpQWdYRzRnSUNBZ0x5OGdjM2x1WTJoeWIyNXZkWE5jYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnWm1sdVpFRjFkR2h2Y2lncE8xeHVJQ0FnSUgwZ1kyRjBZMmdvY21WaGMyOXVLU0I3WEc0Z0lDQWdJQ0F2THlCemIyMWxkR2hwYm1jZ2QyVnVkQ0IzY205dVoxeHVJQ0FnSUgxY2JpQWdYRzRnSUNBZ0x5OGdZWE41Ym1NZ2QybDBhQ0J3Y205dGFYTmxjMXh1SUNBZ0lHWnBibVJCZFhSb2IzSW9LUzVqWVhSamFDaG1kVzVqZEdsdmJpaHlaV0Z6YjI0cGUxeHVJQ0FnSUNBZ0x5OGdjMjl0WlhSb2FXNW5JSGRsYm5RZ2QzSnZibWRjYmlBZ0lDQjlLVHRjYmlBZ0lDQmdZR0JjYmlBZ1hHNGdJQ0FnUUcxbGRHaHZaQ0JqWVhSamFGeHVJQ0FnSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUc5dVVtVnFaV04wYVc5dVhHNGdJQ0FnVlhObFpuVnNJR1p2Y2lCMGIyOXNhVzVuTGx4dUlDQWdJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlYRzRnSUNvdlhHNGdJQ2RqWVhSamFDYzZJR1oxYm1OMGFXOXVJRjlqWVhSamFDaHZibEpsYW1WamRHbHZiaWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5Sb1pXNG9iblZzYkN3Z2IyNVNaV3BsWTNScGIyNHBPMXh1SUNCOVhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCd2IyeDVabWxzYkNncElIdGNiaUFnSUNCMllYSWdiRzlqWVd3Z1BTQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR2RzYjJKaGJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdiRzlqWVd3Z1BTQm5iRzlpWVd3N1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnYzJWc1ppQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdiRzlqWVd3Z1BTQnpaV3htTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjJOaGJDQTlJRVoxYm1OMGFXOXVLQ2R5WlhSMWNtNGdkR2hwY3ljcEtDazdYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jRzlzZVdacGJHd2dabUZwYkdWa0lHSmxZMkYxYzJVZ1oyeHZZbUZzSUc5aWFtVmpkQ0JwY3lCMWJtRjJZV2xzWVdKc1pTQnBiaUIwYUdseklHVnVkbWx5YjI1dFpXNTBKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ1VDQTlJR3h2WTJGc0xsQnliMjFwYzJVN1hHNWNiaUFnSUNCcFppQW9VQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdjSEp2YldselpWUnZVM1J5YVc1bklEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnliMjFwYzJWVWIxTjBjbWx1WnlBOUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2hRTG5KbGMyOXNkbVVvS1NrN1hHNGdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5wYkdWdWRHeDVJR2xuYm05eVpXUmNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHdjbTl0YVhObFZHOVRkSEpwYm1jZ1BUMDlJQ2RiYjJKcVpXTjBJRkJ5YjIxcGMyVmRKeUFtSmlBaFVDNWpZWE4wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNiMk5oYkM1UWNtOXRhWE5sSUQwZ1VISnZiV2x6WlR0Y2JuMWNibHh1THk4Z1UzUnlZVzVuWlNCamIyMXdZWFF1TGx4dVVISnZiV2x6WlM1d2IyeDVabWxzYkNBOUlIQnZiSGxtYVd4c08xeHVVSEp2YldselpTNVFjbTl0YVhObElEMGdVSEp2YldselpUdGNibHh1Y21WMGRYSnVJRkJ5YjIxcGMyVTdYRzVjYm4wcEtTazdYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxbGN6WXRjSEp2YldselpTNXRZWEFpTENJdkx5QjBhR1VnZDJoaGRIZG5MV1psZEdOb0lIQnZiSGxtYVd4c0lHbHVjM1JoYkd4eklIUm9aU0JtWlhSamFDZ3BJR1oxYm1OMGFXOXVYRzR2THlCdmJpQjBhR1VnWjJ4dlltRnNJRzlpYW1WamRDQW9kMmx1Wkc5M0lHOXlJSE5sYkdZcFhHNHZMMXh1THk4Z1VtVjBkWEp1SUhSb1lYUWdZWE1nZEdobElHVjRjRzl5ZENCbWIzSWdkWE5sSUdsdUlGZGxZbkJoWTJzc0lFSnliM2R6WlhKcFpua2daWFJqTGx4dWNtVnhkV2x5WlNnbmQyaGhkSGRuTFdabGRHTm9KeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhObGJHWXVabVYwWTJndVltbHVaQ2h6Wld4bUtUdGNiaUlzSWk4dklITm9hVzBnWm05eUlIVnphVzVuSUhCeWIyTmxjM01nYVc0Z1luSnZkM05sY2x4dWRtRnlJSEJ5YjJObGMzTWdQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHQ5TzF4dVhHNHZMeUJqWVdOb1pXUWdabkp2YlNCM2FHRjBaWFpsY2lCbmJHOWlZV3dnYVhNZ2NISmxjMlZ1ZENCemJ5QjBhR0YwSUhSbGMzUWdjblZ1Ym1WeWN5QjBhR0YwSUhOMGRXSWdhWFJjYmk4dklHUnZiaWQwSUdKeVpXRnJJSFJvYVc1bmN5NGdJRUoxZENCM1pTQnVaV1ZrSUhSdklIZHlZWEFnYVhRZ2FXNGdZU0IwY25rZ1kyRjBZMmdnYVc0Z1kyRnpaU0JwZENCcGMxeHVMeThnZDNKaGNIQmxaQ0JwYmlCemRISnBZM1FnYlc5a1pTQmpiMlJsSUhkb2FXTm9JR1J2WlhOdUozUWdaR1ZtYVc1bElHRnVlU0JuYkc5aVlXeHpMaUFnU1hRbmN5QnBibk5wWkdVZ1lWeHVMeThnWm5WdVkzUnBiMjRnWW1WallYVnpaU0IwY25rdlkyRjBZMmhsY3lCa1pXOXdkR2x0YVhwbElHbHVJR05sY25SaGFXNGdaVzVuYVc1bGN5NWNibHh1ZG1GeUlHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRN1hHNTJZWElnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwTzF4dVhHNW1kVzVqZEdsdmJpQmtaV1poZFd4MFUyVjBWR2x0YjNWMEtDa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmMyVjBWR2x0Wlc5MWRDQm9ZWE1nYm05MElHSmxaVzRnWkdWbWFXNWxaQ2NwTzF4dWZWeHVablZ1WTNScGIyNGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkQ0FvS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RqYkdWaGNsUnBiV1Z2ZFhRZ2FHRnpJRzV2ZENCaVpXVnVJR1JsWm1sdVpXUW5LVHRjYm4xY2JpaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpaWFJVYVcxbGIzVjBJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwZ2MyVjBWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFNCa1pXWmhkV3gwVTJWMFZHbHRiM1YwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpZV05vWldSVFpYUlVhVzFsYjNWMElEMGdaR1ZtWVhWc2RGTmxkRlJwYlc5MWREdGNiaUFnSUNCOVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJqYkdWaGNsUnBiV1Z2ZFhRZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ0E5SUdOc1pXRnlWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOUlHUmxabUYxYkhSRGJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOUlHUmxabUYxYkhSRGJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ2ZWeHVmU0FvS1NsY2JtWjFibU4wYVc5dUlISjFibFJwYldWdmRYUW9ablZ1S1NCN1hHNGdJQ0FnYVdZZ0tHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BUMDlJSE5sZEZScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OXViM0p0WVd3Z1pXNTJhWEp2YldWdWRITWdhVzRnYzJGdVpTQnphWFIxWVhScGIyNXpYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaWFJVYVcxbGIzVjBLR1oxYml3Z01DazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklHbG1JSE5sZEZScGJXVnZkWFFnZDJGemJpZDBJR0YyWVdsc1lXSnNaU0JpZFhRZ2QyRnpJR3hoZEhSbGNpQmtaV1pwYm1Wa1hHNGdJQ0FnYVdZZ0tDaGpZV05vWldSVFpYUlVhVzFsYjNWMElEMDlQU0JrWldaaGRXeDBVMlYwVkdsdGIzVjBJSHg4SUNGallXTm9aV1JUWlhSVWFXMWxiM1YwS1NBbUppQnpaWFJVYVcxbGIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFNCelpYUlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVjBWR2x0Wlc5MWRDaG1kVzRzSURBcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQXZMeUIzYUdWdUlIZG9aVzRnYzI5dFpXSnZaSGtnYUdGeklITmpjbVYzWldRZ2QybDBhQ0J6WlhSVWFXMWxiM1YwSUdKMWRDQnVieUJKTGtVdUlHMWhaR1J1WlhOelhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JUWlhSVWFXMWxiM1YwS0daMWJpd2dNQ2s3WEc0Z0lDQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGZG9aVzRnZDJVZ1lYSmxJR2x1SUVrdVJTNGdZblYwSUhSb1pTQnpZM0pwY0hRZ2FHRnpJR0psWlc0Z1pYWmhiR1ZrSUhOdklFa3VSUzRnWkc5bGMyNG5kQ0IwY25WemRDQjBhR1VnWjJ4dlltRnNJRzlpYW1WamRDQjNhR1Z1SUdOaGJHeGxaQ0J1YjNKdFlXeHNlVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRk5sZEZScGJXVnZkWFF1WTJGc2JDaHVkV3hzTENCbWRXNHNJREFwTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyRnRaU0JoY3lCaFltOTJaU0JpZFhRZ2QyaGxiaUJwZENkeklHRWdkbVZ5YzJsdmJpQnZaaUJKTGtVdUlIUm9ZWFFnYlhWemRDQm9ZWFpsSUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wSUdadmNpQW5kR2hwY3ljc0lHaHZjR1oxYkd4NUlHOTFjaUJqYjI1MFpYaDBJR052Y25KbFkzUWdiM1JvWlhKM2FYTmxJR2wwSUhkcGJHd2dkR2h5YjNjZ1lTQm5iRzlpWVd3Z1pYSnliM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JUWlhSVWFXMWxiM1YwTG1OaGJHd29kR2hwY3l3Z1puVnVMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVYRzU5WEc1bWRXNWpkR2x2YmlCeWRXNURiR1ZoY2xScGJXVnZkWFFvYldGeWEyVnlLU0I3WEc0Z0lDQWdhV1lnS0dOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOVBUMGdZMnhsWVhKVWFXMWxiM1YwS1NCN1hHNGdJQ0FnSUNBZ0lDOHZibTl5YldGc0lHVnVkbWx5YjIxbGJuUnpJR2x1SUhOaGJtVWdjMmwwZFdGMGFXOXVjMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMnhsWVhKVWFXMWxiM1YwS0cxaGNtdGxjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJR2xtSUdOc1pXRnlWR2x0Wlc5MWRDQjNZWE51SjNRZ1lYWmhhV3hoWW14bElHSjFkQ0IzWVhNZ2JHRjBkR1Z5SUdSbFptbHVaV1JjYmlBZ0lDQnBaaUFvS0dOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOVBUMGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkQ0I4ZkNBaFkyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMEtTQW1KaUJqYkdWaGNsUnBiV1Z2ZFhRcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDBnWTJ4bFlYSlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeGxZWEpVYVcxbGIzVjBLRzFoY210bGNpazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQzh2SUhkb1pXNGdkMmhsYmlCemIyMWxZbTlrZVNCb1lYTWdjMk55WlhkbFpDQjNhWFJvSUhObGRGUnBiV1Z2ZFhRZ1luVjBJRzV2SUVrdVJTNGdiV0ZrWkc1bGMzTmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDaHRZWEpyWlhJcE8xeHVJQ0FnSUgwZ1kyRjBZMmdnS0dVcGUxeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVjJobGJpQjNaU0JoY21VZ2FXNGdTUzVGTGlCaWRYUWdkR2hsSUhOamNtbHdkQ0JvWVhNZ1ltVmxiaUJsZG1Gc1pXUWdjMjhnU1M1RkxpQmtiMlZ6YmlkMElDQjBjblZ6ZENCMGFHVWdaMnh2WW1Gc0lHOWlhbVZqZENCM2FHVnVJR05oYkd4bFpDQnViM0p0WVd4c2VWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQzVqWVd4c0tHNTFiR3dzSUcxaGNtdGxjaWs3WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyRnRaU0JoY3lCaFltOTJaU0JpZFhRZ2QyaGxiaUJwZENkeklHRWdkbVZ5YzJsdmJpQnZaaUJKTGtVdUlIUm9ZWFFnYlhWemRDQm9ZWFpsSUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wSUdadmNpQW5kR2hwY3ljc0lHaHZjR1oxYkd4NUlHOTFjaUJqYjI1MFpYaDBJR052Y25KbFkzUWdiM1JvWlhKM2FYTmxJR2wwSUhkcGJHd2dkR2h5YjNjZ1lTQm5iRzlpWVd3Z1pYSnliM0l1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJUYjIxbElIWmxjbk5wYjI1eklHOW1JRWt1UlM0Z2FHRjJaU0JrYVdabVpYSmxiblFnY25Wc1pYTWdabTl5SUdOc1pXRnlWR2x0Wlc5MWRDQjJjeUJ6WlhSVWFXMWxiM1YwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMExtTmhiR3dvZEdocGN5d2diV0Z5YTJWeUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1WEc1Y2JuMWNiblpoY2lCeGRXVjFaU0E5SUZ0ZE8xeHVkbUZ5SUdSeVlXbHVhVzVuSUQwZ1ptRnNjMlU3WEc1MllYSWdZM1Z5Y21WdWRGRjFaWFZsTzF4dWRtRnlJSEYxWlhWbFNXNWtaWGdnUFNBdE1UdGNibHh1Wm5WdVkzUnBiMjRnWTJ4bFlXNVZjRTVsZUhSVWFXTnJLQ2tnZTF4dUlDQWdJR2xtSUNnaFpISmhhVzVwYm1jZ2ZId2dJV04xY25KbGJuUlJkV1YxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJR1J5WVdsdWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ2FXWWdLR04xY25KbGJuUlJkV1YxWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2NYVmxkV1VnUFNCamRYSnlaVzUwVVhWbGRXVXVZMjl1WTJGMEtIRjFaWFZsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J4ZFdWMVpVbHVaR1Y0SUQwZ0xURTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHhkV1YxWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ1pISmhhVzVSZFdWMVpTZ3BPMXh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pISmhhVzVSZFdWMVpTZ3BJSHRjYmlBZ0lDQnBaaUFvWkhKaGFXNXBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnZEdsdFpXOTFkQ0E5SUhKMWJsUnBiV1Z2ZFhRb1kyeGxZVzVWY0U1bGVIUlVhV05yS1R0Y2JpQWdJQ0JrY21GcGJtbHVaeUE5SUhSeWRXVTdYRzVjYmlBZ0lDQjJZWElnYkdWdUlEMGdjWFZsZFdVdWJHVnVaM1JvTzF4dUlDQWdJSGRvYVd4bEtHeGxiaWtnZTF4dUlDQWdJQ0FnSUNCamRYSnlaVzUwVVhWbGRXVWdQU0J4ZFdWMVpUdGNiaUFnSUNBZ0lDQWdjWFZsZFdVZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLQ3NyY1hWbGRXVkpibVJsZUNBOElHeGxiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOMWNuSmxiblJSZFdWMVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUlJkV1YxWlZ0eGRXVjFaVWx1WkdWNFhTNXlkVzRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeGRXVjFaVWx1WkdWNElEMGdMVEU3WEc0Z0lDQWdJQ0FnSUd4bGJpQTlJSEYxWlhWbExteGxibWQwYUR0Y2JpQWdJQ0I5WEc0Z0lDQWdZM1Z5Y21WdWRGRjFaWFZsSUQwZ2JuVnNiRHRjYmlBZ0lDQmtjbUZwYm1sdVp5QTlJR1poYkhObE8xeHVJQ0FnSUhKMWJrTnNaV0Z5VkdsdFpXOTFkQ2gwYVcxbGIzVjBLVHRjYm4xY2JseHVjSEp2WTJWemN5NXVaWGgwVkdsamF5QTlJR1oxYm1OMGFXOXVJQ2htZFc0cElIdGNiaUFnSUNCMllYSWdZWEpuY3lBOUlHNWxkeUJCY25KaGVTaGhjbWQxYldWdWRITXViR1Z1WjNSb0lDMGdNU2s3WEc0Z0lDQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeEtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBeE95QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNtZHpXMmtnTFNBeFhTQTlJR0Z5WjNWdFpXNTBjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J4ZFdWMVpTNXdkWE5vS0c1bGR5QkpkR1Z0S0daMWJpd2dZWEpuY3lrcE8xeHVJQ0FnSUdsbUlDaHhkV1YxWlM1c1pXNW5kR2dnUFQwOUlERWdKaVlnSVdSeVlXbHVhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lISjFibFJwYldWdmRYUW9aSEpoYVc1UmRXVjFaU2s3WEc0Z0lDQWdmVnh1ZlR0Y2JseHVMeThnZGpnZ2JHbHJaWE1nY0hKbFpHbGpkR2xpYkdVZ2IySnFaV04wYzF4dVpuVnVZM1JwYjI0Z1NYUmxiU2htZFc0c0lHRnljbUY1S1NCN1hHNGdJQ0FnZEdocGN5NW1kVzRnUFNCbWRXNDdYRzRnSUNBZ2RHaHBjeTVoY25KaGVTQTlJR0Z5Y21GNU8xeHVmVnh1U1hSbGJTNXdjbTkwYjNSNWNHVXVjblZ1SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIUm9hWE11Wm5WdUxtRndjR3g1S0c1MWJHd3NJSFJvYVhNdVlYSnlZWGtwTzF4dWZUdGNibkJ5YjJObGMzTXVkR2wwYkdVZ1BTQW5Zbkp2ZDNObGNpYzdYRzV3Y205alpYTnpMbUp5YjNkelpYSWdQU0IwY25WbE8xeHVjSEp2WTJWemN5NWxibllnUFNCN2ZUdGNibkJ5YjJObGMzTXVZWEpuZGlBOUlGdGRPMXh1Y0hKdlkyVnpjeTUyWlhKemFXOXVJRDBnSnljN0lDOHZJR1Z0Y0hSNUlITjBjbWx1WnlCMGJ5QmhkbTlwWkNCeVpXZGxlSEFnYVhOemRXVnpYRzV3Y205alpYTnpMblpsY25OcGIyNXpJRDBnZTMwN1hHNWNibVoxYm1OMGFXOXVJRzV2YjNBb0tTQjdmVnh1WEc1d2NtOWpaWE56TG05dUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdVlXUmtUR2x6ZEdWdVpYSWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXZibU5sSUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011YjJabUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWNtVnRiM1psVEdsemRHVnVaWElnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV5WlcxdmRtVkJiR3hNYVhOMFpXNWxjbk1nUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTVsYldsMElEMGdibTl2Y0R0Y2JseHVjSEp2WTJWemN5NWlhVzVrYVc1bklEMGdablZ1WTNScGIyNGdLRzVoYldVcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNCeWIyTmxjM011WW1sdVpHbHVaeUJwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtKeWs3WEc1OU8xeHVYRzV3Y205alpYTnpMbU4zWkNBOUlHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJQ2N2SnlCOU8xeHVjSEp2WTJWemN5NWphR1JwY2lBOUlHWjFibU4wYVc5dUlDaGthWElwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM0J5YjJObGMzTXVZMmhrYVhJZ2FYTWdibTkwSUhOMWNIQnZjblJsWkNjcE8xeHVmVHRjYm5CeWIyTmxjM011ZFcxaGMyc2dQU0JtZFc1amRHbHZiaWdwSUhzZ2NtVjBkWEp1SURBN0lIMDdYRzRpTENJb1puVnVZM1JwYjI0b2MyVnNaaWtnZTF4dUlDQW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpQWdhV1lnS0hObGJHWXVabVYwWTJncElIdGNiaUFnSUNCeVpYUjFjbTVjYmlBZ2ZWeHVYRzRnSUhaaGNpQnpkWEJ3YjNKMElEMGdlMXh1SUNBZ0lITmxZWEpqYUZCaGNtRnRjem9nSjFWU1RGTmxZWEpqYUZCaGNtRnRjeWNnYVc0Z2MyVnNaaXhjYmlBZ0lDQnBkR1Z5WVdKc1pUb2dKMU41YldKdmJDY2dhVzRnYzJWc1ppQW1KaUFuYVhSbGNtRjBiM0luSUdsdUlGTjViV0p2YkN4Y2JpQWdJQ0JpYkc5aU9pQW5SbWxzWlZKbFlXUmxjaWNnYVc0Z2MyVnNaaUFtSmlBblFteHZZaWNnYVc0Z2MyVnNaaUFtSmlBb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCdVpYY2dRbXh2WWlncFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxYRzRnSUNBZ0lDQjlJR05oZEdOb0tHVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrb0tTeGNiaUFnSUNCbWIzSnRSR0YwWVRvZ0owWnZjbTFFWVhSaEp5QnBiaUJ6Wld4bUxGeHVJQ0FnSUdGeWNtRjVRblZtWm1WeU9pQW5RWEp5WVhsQ2RXWm1aWEluSUdsdUlITmxiR1pjYmlBZ2ZWeHVYRzRnSUdsbUlDaHpkWEJ3YjNKMExtRnljbUY1UW5WbVptVnlLU0I3WEc0Z0lDQWdkbUZ5SUhacFpYZERiR0Z6YzJWeklEMGdXMXh1SUNBZ0lDQWdKMXR2WW1wbFkzUWdTVzUwT0VGeWNtRjVYU2NzWEc0Z0lDQWdJQ0FuVzI5aWFtVmpkQ0JWYVc1ME9FRnljbUY1WFNjc1hHNGdJQ0FnSUNBblcyOWlhbVZqZENCVmFXNTBPRU5zWVcxd1pXUkJjbkpoZVYwbkxGeHVJQ0FnSUNBZ0oxdHZZbXBsWTNRZ1NXNTBNVFpCY25KaGVWMG5MRnh1SUNBZ0lDQWdKMXR2WW1wbFkzUWdWV2x1ZERFMlFYSnlZWGxkSnl4Y2JpQWdJQ0FnSUNkYmIySnFaV04wSUVsdWRETXlRWEp5WVhsZEp5eGNiaUFnSUNBZ0lDZGJiMkpxWldOMElGVnBiblF6TWtGeWNtRjVYU2NzWEc0Z0lDQWdJQ0FuVzI5aWFtVmpkQ0JHYkc5aGRETXlRWEp5WVhsZEp5eGNiaUFnSUNBZ0lDZGJiMkpxWldOMElFWnNiMkYwTmpSQmNuSmhlVjBuWEc0Z0lDQWdYVnh1WEc0Z0lDQWdkbUZ5SUdselJHRjBZVlpwWlhjZ1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ2WW1vZ0ppWWdSR0YwWVZacFpYY3VjSEp2ZEc5MGVYQmxMbWx6VUhKdmRHOTBlWEJsVDJZb2IySnFLVnh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJwYzBGeWNtRjVRblZtWm1WeVZtbGxkeUE5SUVGeWNtRjVRblZtWm1WeUxtbHpWbWxsZHlCOGZDQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ2WW1vZ0ppWWdkbWxsZDBOc1lYTnpaWE11YVc1a1pYaFBaaWhQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b2IySnFLU2tnUGlBdE1WeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHNXZjbTFoYkdsNlpVNWhiV1VvYm1GdFpTa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdibUZ0WlNBaFBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJRzVoYldVZ1BTQlRkSEpwYm1jb2JtRnRaU2xjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLQzliWG1FdGVqQXRPVnhjTFNNa0pTWW5LaXN1WEZ4ZVgyQjhmbDB2YVM1MFpYTjBLRzVoYldVcEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RKYm5aaGJHbGtJR05vWVhKaFkzUmxjaUJwYmlCb1pXRmtaWElnWm1sbGJHUWdibUZ0WlNjcFhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVZVzFsTG5SdlRHOTNaWEpEWVhObEtDbGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJRzV2Y20xaGJHbDZaVlpoYkhWbEtIWmhiSFZsS1NCN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0FoUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lIWmhiSFZsSUQwZ1UzUnlhVzVuS0haaGJIVmxLVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZG1Gc2RXVmNiaUFnZlZ4dVhHNGdJQzh2SUVKMWFXeGtJR0VnWkdWemRISjFZM1JwZG1VZ2FYUmxjbUYwYjNJZ1ptOXlJSFJvWlNCMllXeDFaU0JzYVhOMFhHNGdJR1oxYm1OMGFXOXVJR2wwWlhKaGRHOXlSbTl5S0dsMFpXMXpLU0I3WEc0Z0lDQWdkbUZ5SUdsMFpYSmhkRzl5SUQwZ2UxeHVJQ0FnSUNBZ2JtVjRkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUIyWVd4MVpTQTlJR2wwWlcxekxuTm9hV1owS0NsY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0a2IyNWxPaUIyWVd4MVpTQTlQVDBnZFc1a1pXWnBibVZrTENCMllXeDFaVG9nZG1Gc2RXVjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSE4xY0hCdmNuUXVhWFJsY21GaWJHVXBJSHRjYmlBZ0lDQWdJR2wwWlhKaGRHOXlXMU41YldKdmJDNXBkR1Z5WVhSdmNsMGdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsMFpYSmhkRzl5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHbDBaWEpoZEc5eVhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQklaV0ZrWlhKektHaGxZV1JsY25NcElIdGNiaUFnSUNCMGFHbHpMbTFoY0NBOUlIdDlYRzVjYmlBZ0lDQnBaaUFvYUdWaFpHVnljeUJwYm5OMFlXNWpaVzltSUVobFlXUmxjbk1wSUh0Y2JpQWdJQ0FnSUdobFlXUmxjbk11Wm05eVJXRmphQ2htZFc1amRHbHZiaWgyWVd4MVpTd2dibUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Gd2NHVnVaQ2h1WVcxbExDQjJZV3gxWlNsY2JpQWdJQ0FnSUgwc0lIUm9hWE1wWEc1Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dobFlXUmxjbk1wSUh0Y2JpQWdJQ0FnSUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0dobFlXUmxjbk1wTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvYm1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtRndjR1Z1WkNodVlXMWxMQ0JvWldGa1pYSnpXMjVoYldWZEtWeHVJQ0FnSUNBZ2ZTd2dkR2hwY3lsY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCSVpXRmtaWEp6TG5CeWIzUnZkSGx3WlM1aGNIQmxibVFnUFNCbWRXNWpkR2x2YmlodVlXMWxMQ0IyWVd4MVpTa2dlMXh1SUNBZ0lHNWhiV1VnUFNCdWIzSnRZV3hwZW1WT1lXMWxLRzVoYldVcFhHNGdJQ0FnZG1Gc2RXVWdQU0J1YjNKdFlXeHBlbVZXWVd4MVpTaDJZV3gxWlNsY2JpQWdJQ0IyWVhJZ2IyeGtWbUZzZFdVZ1BTQjBhR2x6TG0xaGNGdHVZVzFsWFZ4dUlDQWdJSFJvYVhNdWJXRndXMjVoYldWZElEMGdiMnhrVm1Gc2RXVWdQeUJ2YkdSV1lXeDFaU3NuTENjcmRtRnNkV1VnT2lCMllXeDFaVnh1SUNCOVhHNWNiaUFnU0dWaFpHVnljeTV3Y205MGIzUjVjR1ZiSjJSbGJHVjBaU2RkSUQwZ1puVnVZM1JwYjI0b2JtRnRaU2tnZTF4dUlDQWdJR1JsYkdWMFpTQjBhR2x6TG0xaGNGdHViM0p0WVd4cGVtVk9ZVzFsS0c1aGJXVXBYVnh1SUNCOVhHNWNiaUFnU0dWaFpHVnljeTV3Y205MGIzUjVjR1V1WjJWMElEMGdablZ1WTNScGIyNG9ibUZ0WlNrZ2UxeHVJQ0FnSUc1aGJXVWdQU0J1YjNKdFlXeHBlbVZPWVcxbEtHNWhiV1VwWEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YUdGektHNWhiV1VwSUQ4Z2RHaHBjeTV0WVhCYmJtRnRaVjBnT2lCdWRXeHNYRzRnSUgxY2JseHVJQ0JJWldGa1pYSnpMbkJ5YjNSdmRIbHdaUzVvWVhNZ1BTQm1kVzVqZEdsdmJpaHVZVzFsS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXRndMbWhoYzA5M2JsQnliM0JsY25SNUtHNXZjbTFoYkdsNlpVNWhiV1VvYm1GdFpTa3BYRzRnSUgxY2JseHVJQ0JJWldGa1pYSnpMbkJ5YjNSdmRIbHdaUzV6WlhRZ1BTQm1kVzVqZEdsdmJpaHVZVzFsTENCMllXeDFaU2tnZTF4dUlDQWdJSFJvYVhNdWJXRndXMjV2Y20xaGJHbDZaVTVoYldVb2JtRnRaU2xkSUQwZ2JtOXliV0ZzYVhwbFZtRnNkV1VvZG1Gc2RXVXBYRzRnSUgxY2JseHVJQ0JJWldGa1pYSnpMbkJ5YjNSdmRIbHdaUzVtYjNKRllXTm9JRDBnWm5WdVkzUnBiMjRvWTJGc2JHSmhZMnNzSUhSb2FYTkJjbWNwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJ1WVcxbElHbHVJSFJvYVhNdWJXRndLU0I3WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV0WVhBdWFHRnpUM2R1VUhKdmNHVnlkSGtvYm1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnWTJGc2JHSmhZMnN1WTJGc2JDaDBhR2x6UVhKbkxDQjBhR2x6TG0xaGNGdHVZVzFsWFN3Z2JtRnRaU3dnZEdocGN5bGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQklaV0ZrWlhKekxuQnliM1J2ZEhsd1pTNXJaWGx6SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2RtRnlJR2wwWlcxeklEMGdXMTFjYmlBZ0lDQjBhR2x6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvZG1Gc2RXVXNJRzVoYldVcElIc2dhWFJsYlhNdWNIVnphQ2h1WVcxbEtTQjlLVnh1SUNBZ0lISmxkSFZ5YmlCcGRHVnlZWFJ2Y2tadmNpaHBkR1Z0Y3lsY2JpQWdmVnh1WEc0Z0lFaGxZV1JsY25NdWNISnZkRzkwZVhCbExuWmhiSFZsY3lBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lIWmhjaUJwZEdWdGN5QTlJRnRkWEc0Z0lDQWdkR2hwY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1S0haaGJIVmxLU0I3SUdsMFpXMXpMbkIxYzJnb2RtRnNkV1VwSUgwcFhHNGdJQ0FnY21WMGRYSnVJR2wwWlhKaGRHOXlSbTl5S0dsMFpXMXpLVnh1SUNCOVhHNWNiaUFnU0dWaFpHVnljeTV3Y205MGIzUjVjR1V1Wlc1MGNtbGxjeUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhaaGNpQnBkR1Z0Y3lBOUlGdGRYRzRnSUNBZ2RHaHBjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLSFpoYkhWbExDQnVZVzFsS1NCN0lHbDBaVzF6TG5CMWMyZ29XMjVoYldVc0lIWmhiSFZsWFNrZ2ZTbGNiaUFnSUNCeVpYUjFjbTRnYVhSbGNtRjBiM0pHYjNJb2FYUmxiWE1wWEc0Z0lIMWNibHh1SUNCcFppQW9jM1Z3Y0c5eWRDNXBkR1Z5WVdKc1pTa2dlMXh1SUNBZ0lFaGxZV1JsY25NdWNISnZkRzkwZVhCbFcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwZ1BTQklaV0ZrWlhKekxuQnliM1J2ZEhsd1pTNWxiblJ5YVdWelhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQmpiMjV6ZFcxbFpDaGliMlI1S1NCN1hHNGdJQ0FnYVdZZ0tHSnZaSGt1WW05a2VWVnpaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYW1WamRDaHVaWGNnVkhsd1pVVnljbTl5S0NkQmJISmxZV1I1SUhKbFlXUW5LU2xjYmlBZ0lDQjlYRzRnSUNBZ1ltOWtlUzVpYjJSNVZYTmxaQ0E5SUhSeWRXVmNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJR1pwYkdWU1pXRmtaWEpTWldGa2VTaHlaV0ZrWlhJcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNGdJQ0FnSUNCeVpXRmtaWEl1YjI1c2IyRmtJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2NtVmhaR1Z5TG5KbGMzVnNkQ2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsWVdSbGNpNXZibVZ5Y205eUlEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2h5WldGa1pYSXVaWEp5YjNJcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNsY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlISmxZV1JDYkc5aVFYTkJjbkpoZVVKMVptWmxjaWhpYkc5aUtTQjdYRzRnSUNBZ2RtRnlJSEpsWVdSbGNpQTlJRzVsZHlCR2FXeGxVbVZoWkdWeUtDbGNiaUFnSUNCMllYSWdjSEp2YldselpTQTlJR1pwYkdWU1pXRmtaWEpTWldGa2VTaHlaV0ZrWlhJcFhHNGdJQ0FnY21WaFpHVnlMbkpsWVdSQmMwRnljbUY1UW5WbVptVnlLR0pzYjJJcFhHNGdJQ0FnY21WMGRYSnVJSEJ5YjIxcGMyVmNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJSEpsWVdSQ2JHOWlRWE5VWlhoMEtHSnNiMklwSUh0Y2JpQWdJQ0IyWVhJZ2NtVmhaR1Z5SUQwZ2JtVjNJRVpwYkdWU1pXRmtaWElvS1Z4dUlDQWdJSFpoY2lCd2NtOXRhWE5sSUQwZ1ptbHNaVkpsWVdSbGNsSmxZV1I1S0hKbFlXUmxjaWxjYmlBZ0lDQnlaV0ZrWlhJdWNtVmhaRUZ6VkdWNGRDaGliRzlpS1Z4dUlDQWdJSEpsZEhWeWJpQndjbTl0YVhObFhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQnlaV0ZrUVhKeVlYbENkV1ptWlhKQmMxUmxlSFFvWW5WbUtTQjdYRzRnSUNBZ2RtRnlJSFpwWlhjZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNoaWRXWXBYRzRnSUNBZ2RtRnlJR05vWVhKeklEMGdibVYzSUVGeWNtRjVLSFpwWlhjdWJHVnVaM1JvS1Z4dVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCMmFXVjNMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCamFHRnljMXRwWFNBOUlGTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9kbWxsZDF0cFhTbGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR05vWVhKekxtcHZhVzRvSnljcFhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQmlkV1ptWlhKRGJHOXVaU2hpZFdZcElIdGNiaUFnSUNCcFppQW9ZblZtTG5Oc2FXTmxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZblZtTG5Oc2FXTmxLREFwWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIWmhjaUIyYVdWM0lEMGdibVYzSUZWcGJuUTRRWEp5WVhrb1luVm1MbUo1ZEdWTVpXNW5kR2dwWEc0Z0lDQWdJQ0IyYVdWM0xuTmxkQ2h1WlhjZ1ZXbHVkRGhCY25KaGVTaGlkV1lwS1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFpwWlhjdVluVm1abVZ5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnUW05a2VTZ3BJSHRjYmlBZ0lDQjBhR2x6TG1KdlpIbFZjMlZrSUQwZ1ptRnNjMlZjYmx4dUlDQWdJSFJvYVhNdVgybHVhWFJDYjJSNUlEMGdablZ1WTNScGIyNG9ZbTlrZVNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmWW05a2VVbHVhWFFnUFNCaWIyUjVYRzRnSUNBZ0lDQnBaaUFvSVdKdlpIa3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZbTlrZVZSbGVIUWdQU0FuSjF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnWW05a2VTQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWW05a2VWUmxlSFFnUFNCaWIyUjVYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE4xY0hCdmNuUXVZbXh2WWlBbUppQkNiRzlpTG5CeWIzUnZkSGx3WlM1cGMxQnliM1J2ZEhsd1pVOW1LR0p2WkhrcEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgySnZaSGxDYkc5aUlEMGdZbTlrZVZ4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoemRYQndiM0owTG1admNtMUVZWFJoSUNZbUlFWnZjbTFFWVhSaExuQnliM1J2ZEhsd1pTNXBjMUJ5YjNSdmRIbHdaVTltS0dKdlpIa3BLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkp2WkhsR2IzSnRSR0YwWVNBOUlHSnZaSGxjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvYzNWd2NHOXlkQzV6WldGeVkyaFFZWEpoYlhNZ0ppWWdWVkpNVTJWaGNtTm9VR0Z5WVcxekxuQnliM1J2ZEhsd1pTNXBjMUJ5YjNSdmRIbHdaVTltS0dKdlpIa3BLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkp2WkhsVVpYaDBJRDBnWW05a2VTNTBiMU4wY21sdVp5Z3BYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE4xY0hCdmNuUXVZWEp5WVhsQ2RXWm1aWElnSmlZZ2MzVndjRzl5ZEM1aWJHOWlJQ1ltSUdselJHRjBZVlpwWlhjb1ltOWtlU2twSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWW05a2VVRnljbUY1UW5WbVptVnlJRDBnWW5WbVptVnlRMnh2Ym1Vb1ltOWtlUzVpZFdabVpYSXBYRzRnSUNBZ0lDQWdJQzh2SUVsRklERXdMVEV4SUdOaGJpZDBJR2hoYm1Sc1pTQmhJRVJoZEdGV2FXVjNJR0p2WkhrdVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJKdlpIbEpibWwwSUQwZ2JtVjNJRUpzYjJJb1czUm9hWE11WDJKdlpIbEJjbkpoZVVKMVptWmxjbDBwWEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hOMWNIQnZjblF1WVhKeVlYbENkV1ptWlhJZ0ppWWdLRUZ5Y21GNVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1cGMxQnliM1J2ZEhsd1pVOW1LR0p2WkhrcElIeDhJR2x6UVhKeVlYbENkV1ptWlhKV2FXVjNLR0p2WkhrcEtTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWliMlI1UVhKeVlYbENkV1ptWlhJZ1BTQmlkV1ptWlhKRGJHOXVaU2hpYjJSNUtWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkMWJuTjFjSEJ2Y25SbFpDQkNiMlI1U1c1cGRDQjBlWEJsSnlsY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtaGxZV1JsY25NdVoyVjBLQ2RqYjI1MFpXNTBMWFI1Y0dVbktTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdKdlpIa2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1b1pXRmtaWEp6TG5ObGRDZ25ZMjl1ZEdWdWRDMTBlWEJsSnl3Z0ozUmxlSFF2Y0d4aGFXNDdZMmhoY25ObGREMVZWRVl0T0NjcFhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1ZlltOWtlVUpzYjJJZ0ppWWdkR2hwY3k1ZlltOWtlVUpzYjJJdWRIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YUdWaFpHVnljeTV6WlhRb0oyTnZiblJsYm5RdGRIbHdaU2NzSUhSb2FYTXVYMkp2WkhsQ2JHOWlMblI1Y0dVcFhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jM1Z3Y0c5eWRDNXpaV0Z5WTJoUVlYSmhiWE1nSmlZZ1ZWSk1VMlZoY21Ob1VHRnlZVzF6TG5CeWIzUnZkSGx3WlM1cGMxQnliM1J2ZEhsd1pVOW1LR0p2WkhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NW9aV0ZrWlhKekxuTmxkQ2duWTI5dWRHVnVkQzEwZVhCbEp5d2dKMkZ3Y0d4cFkyRjBhVzl1TDNndGQzZDNMV1p2Y20wdGRYSnNaVzVqYjJSbFpEdGphR0Z5YzJWMFBWVlVSaTA0SnlsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHpkWEJ3YjNKMExtSnNiMklwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZbXh2WWlBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVnFaV04wWldRZ1BTQmpiMjV6ZFcxbFpDaDBhR2x6S1Z4dUlDQWdJQ0FnSUNCcFppQW9jbVZxWldOMFpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WcVpXTjBaV1JjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOWliMlI1UW14dllpa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9kR2hwY3k1ZlltOWtlVUpzYjJJcFhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1ZlltOWtlVUZ5Y21GNVFuVm1abVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnpiMngyWlNodVpYY2dRbXh2WWloYmRHaHBjeTVmWW05a2VVRnljbUY1UW5WbVptVnlYU2twWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTVmWW05a2VVWnZjbTFFWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RqYjNWc1pDQnViM1FnY21WaFpDQkdiM0p0UkdGMFlTQmliMlI1SUdGeklHSnNiMkluS1Z4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvYm1WM0lFSnNiMklvVzNSb2FYTXVYMkp2WkhsVVpYaDBYU2twWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RHaHBjeTVoY25KaGVVSjFabVpsY2lBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWW05a2VVRnljbUY1UW5WbVptVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuTjFiV1ZrS0hSb2FYTXBJSHg4SUZCeWIyMXBjMlV1Y21WemIyeDJaU2gwYUdsekxsOWliMlI1UVhKeVlYbENkV1ptWlhJcFhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WW14dllpZ3BMblJvWlc0b2NtVmhaRUpzYjJKQmMwRnljbUY1UW5WbVptVnlLVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1MFpYaDBJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdjbVZxWldOMFpXUWdQU0JqYjI1emRXMWxaQ2gwYUdsektWeHVJQ0FnSUNBZ2FXWWdLSEpsYW1WamRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WldwbFkzUmxaRnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVmWW05a2VVSnNiMklwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbFlXUkNiRzlpUVhOVVpYaDBLSFJvYVhNdVgySnZaSGxDYkc5aUtWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TGw5aWIyUjVRWEp5WVhsQ2RXWm1aWElwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2h5WldGa1FYSnlZWGxDZFdabVpYSkJjMVJsZUhRb2RHaHBjeTVmWW05a2VVRnljbUY1UW5WbVptVnlLU2xjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEdocGN5NWZZbTlrZVVadmNtMUVZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblkyOTFiR1FnYm05MElISmxZV1FnUm05eWJVUmhkR0VnWW05a2VTQmhjeUIwWlhoMEp5bGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvZEdocGN5NWZZbTlrZVZSbGVIUXBYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSE4xY0hCdmNuUXVabTl5YlVSaGRHRXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVptOXliVVJoZEdFZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRHVjRkQ2dwTG5Sb1pXNG9aR1ZqYjJSbEtWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVhbk52YmlBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZEdWNGRDZ3BMblJvWlc0b1NsTlBUaTV3WVhKelpTbGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGMxeHVJQ0I5WEc1Y2JpQWdMeThnU0ZSVVVDQnRaWFJvYjJSeklIZG9iM05sSUdOaGNHbDBZV3hwZW1GMGFXOXVJSE5vYjNWc1pDQmlaU0J1YjNKdFlXeHBlbVZrWEc0Z0lIWmhjaUJ0WlhSb2IyUnpJRDBnV3lkRVJVeEZWRVVuTENBblIwVlVKeXdnSjBoRlFVUW5MQ0FuVDFCVVNVOU9VeWNzSUNkUVQxTlVKeXdnSjFCVlZDZGRYRzVjYmlBZ1puVnVZM1JwYjI0Z2JtOXliV0ZzYVhwbFRXVjBhRzlrS0cxbGRHaHZaQ2tnZTF4dUlDQWdJSFpoY2lCMWNHTmhjMlZrSUQwZ2JXVjBhRzlrTG5SdlZYQndaWEpEWVhObEtDbGNiaUFnSUNCeVpYUjFjbTRnS0cxbGRHaHZaSE11YVc1a1pYaFBaaWgxY0dOaGMyVmtLU0ErSUMweEtTQS9JSFZ3WTJGelpXUWdPaUJ0WlhSb2IyUmNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJRkpsY1hWbGMzUW9hVzV3ZFhRc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCdmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3lCOGZDQjdmVnh1SUNBZ0lIWmhjaUJpYjJSNUlEMGdiM0IwYVc5dWN5NWliMlI1WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdsdWNIVjBJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUxY213Z1BTQnBibkIxZEZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaUFvYVc1d2RYUXVZbTlrZVZWelpXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblFXeHlaV0ZrZVNCeVpXRmtKeWxjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFJvYVhNdWRYSnNJRDBnYVc1d2RYUXVkWEpzWEc0Z0lDQWdJQ0IwYUdsekxtTnlaV1JsYm5ScFlXeHpJRDBnYVc1d2RYUXVZM0psWkdWdWRHbGhiSE5jYmlBZ0lDQWdJR2xtSUNnaGIzQjBhVzl1Y3k1b1pXRmtaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YUdWaFpHVnljeUE5SUc1bGR5QklaV0ZrWlhKektHbHVjSFYwTG1obFlXUmxjbk1wWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IwYUdsekxtMWxkR2h2WkNBOUlHbHVjSFYwTG0xbGRHaHZaRnh1SUNBZ0lDQWdkR2hwY3k1dGIyUmxJRDBnYVc1d2RYUXViVzlrWlZ4dUlDQWdJQ0FnYVdZZ0tDRmliMlI1SUNZbUlHbHVjSFYwTGw5aWIyUjVTVzVwZENBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lHSnZaSGtnUFNCcGJuQjFkQzVmWW05a2VVbHVhWFJjYmlBZ0lDQWdJQ0FnYVc1d2RYUXVZbTlrZVZWelpXUWdQU0IwY25WbFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWpjbVZrWlc1MGFXRnNjeUE5SUc5d2RHbHZibk11WTNKbFpHVnVkR2xoYkhNZ2ZId2dkR2hwY3k1amNtVmtaVzUwYVdGc2N5QjhmQ0FuYjIxcGRDZGNiaUFnSUNCcFppQW9iM0IwYVc5dWN5NW9aV0ZrWlhKeklIeDhJQ0YwYUdsekxtaGxZV1JsY25NcElIdGNiaUFnSUNBZ0lIUm9hWE11YUdWaFpHVnljeUE5SUc1bGR5QklaV0ZrWlhKektHOXdkR2x2Ym5NdWFHVmhaR1Z5Y3lsY2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1dFpYUm9iMlFnUFNCdWIzSnRZV3hwZW1WTlpYUm9iMlFvYjNCMGFXOXVjeTV0WlhSb2IyUWdmSHdnZEdocGN5NXRaWFJvYjJRZ2ZId2dKMGRGVkNjcFhHNGdJQ0FnZEdocGN5NXRiMlJsSUQwZ2IzQjBhVzl1Y3k1dGIyUmxJSHg4SUhSb2FYTXViVzlrWlNCOGZDQnVkV3hzWEc0Z0lDQWdkR2hwY3k1eVpXWmxjbkpsY2lBOUlHNTFiR3hjYmx4dUlDQWdJR2xtSUNnb2RHaHBjeTV0WlhSb2IyUWdQVDA5SUNkSFJWUW5JSHg4SUhSb2FYTXViV1YwYUc5a0lEMDlQU0FuU0VWQlJDY3BJQ1ltSUdKdlpIa3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjBKdlpIa2dibTkwSUdGc2JHOTNaV1FnWm05eUlFZEZWQ0J2Y2lCSVJVRkVJSEpsY1hWbGMzUnpKeWxjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTVmYVc1cGRFSnZaSGtvWW05a2VTbGNiaUFnZlZ4dVhHNGdJRkpsY1hWbGMzUXVjSEp2ZEc5MGVYQmxMbU5zYjI1bElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJTWlhGMVpYTjBLSFJvYVhNc0lIc2dZbTlrZVRvZ2RHaHBjeTVmWW05a2VVbHVhWFFnZlNsY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHUmxZMjlrWlNoaWIyUjVLU0I3WEc0Z0lDQWdkbUZ5SUdadmNtMGdQU0J1WlhjZ1JtOXliVVJoZEdFb0tWeHVJQ0FnSUdKdlpIa3VkSEpwYlNncExuTndiR2wwS0NjbUp5a3VabTl5UldGamFDaG1kVzVqZEdsdmJpaGllWFJsY3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLR0o1ZEdWektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCemNHeHBkQ0E5SUdKNWRHVnpMbk53YkdsMEtDYzlKeWxjYmlBZ0lDQWdJQ0FnZG1GeUlHNWhiV1VnUFNCemNHeHBkQzV6YUdsbWRDZ3BMbkpsY0d4aFkyVW9MMXhjS3k5bkxDQW5JQ2NwWEc0Z0lDQWdJQ0FnSUhaaGNpQjJZV3gxWlNBOUlITndiR2wwTG1wdmFXNG9KejBuS1M1eVpYQnNZV05sS0M5Y1hDc3ZaeXdnSnlBbktWeHVJQ0FnSUNBZ0lDQm1iM0p0TG1Gd2NHVnVaQ2hrWldOdlpHVlZVa2xEYjIxd2IyNWxiblFvYm1GdFpTa3NJR1JsWTI5a1pWVlNTVU52YlhCdmJtVnVkQ2gyWVd4MVpTa3BYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTbGNiaUFnSUNCeVpYUjFjbTRnWm05eWJWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdjR0Z5YzJWSVpXRmtaWEp6S0hKaGQwaGxZV1JsY25NcElIdGNiaUFnSUNCMllYSWdhR1ZoWkdWeWN5QTlJRzVsZHlCSVpXRmtaWEp6S0NsY2JpQWdJQ0J5WVhkSVpXRmtaWEp6TG5Od2JHbDBLQ2RjWEhKY1hHNG5LUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR3hwYm1VcElIdGNiaUFnSUNBZ0lIWmhjaUJ3WVhKMGN5QTlJR3hwYm1VdWMzQnNhWFFvSnpvbktWeHVJQ0FnSUNBZ2RtRnlJR3RsZVNBOUlIQmhjblJ6TG5Ob2FXWjBLQ2t1ZEhKcGJTZ3BYRzRnSUNBZ0lDQnBaaUFvYTJWNUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCMllXeDFaU0E5SUhCaGNuUnpMbXB2YVc0b0p6b25LUzUwY21sdEtDbGNiaUFnSUNBZ0lDQWdhR1ZoWkdWeWN5NWhjSEJsYm1Rb2EyVjVMQ0IyWVd4MVpTbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtWeHVJQ0FnSUhKbGRIVnliaUJvWldGa1pYSnpYRzRnSUgxY2JseHVJQ0JDYjJSNUxtTmhiR3dvVW1WeGRXVnpkQzV3Y205MGIzUjVjR1VwWEc1Y2JpQWdablZ1WTNScGIyNGdVbVZ6Y0c5dWMyVW9ZbTlrZVVsdWFYUXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnBaaUFvSVc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCN2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVkSGx3WlNBOUlDZGtaV1poZFd4MEoxeHVJQ0FnSUhSb2FYTXVjM1JoZEhWeklEMGdKM04wWVhSMWN5Y2dhVzRnYjNCMGFXOXVjeUEvSUc5d2RHbHZibk11YzNSaGRIVnpJRG9nTWpBd1hHNGdJQ0FnZEdocGN5NXZheUE5SUhSb2FYTXVjM1JoZEhWeklENDlJREl3TUNBbUppQjBhR2x6TG5OMFlYUjFjeUE4SURNd01GeHVJQ0FnSUhSb2FYTXVjM1JoZEhWelZHVjRkQ0E5SUNkemRHRjBkWE5VWlhoMEp5QnBiaUJ2Y0hScGIyNXpJRDhnYjNCMGFXOXVjeTV6ZEdGMGRYTlVaWGgwSURvZ0owOUxKMXh1SUNBZ0lIUm9hWE11YUdWaFpHVnljeUE5SUc1bGR5QklaV0ZrWlhKektHOXdkR2x2Ym5NdWFHVmhaR1Z5Y3lsY2JpQWdJQ0IwYUdsekxuVnliQ0E5SUc5d2RHbHZibk11ZFhKc0lIeDhJQ2NuWEc0Z0lDQWdkR2hwY3k1ZmFXNXBkRUp2Wkhrb1ltOWtlVWx1YVhRcFhHNGdJSDFjYmx4dUlDQkNiMlI1TG1OaGJHd29VbVZ6Y0c5dWMyVXVjSEp2ZEc5MGVYQmxLVnh1WEc0Z0lGSmxjM0J2Ym5ObExuQnliM1J2ZEhsd1pTNWpiRzl1WlNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVbVZ6Y0c5dWMyVW9kR2hwY3k1ZlltOWtlVWx1YVhRc0lIdGNiaUFnSUNBZ0lITjBZWFIxY3pvZ2RHaHBjeTV6ZEdGMGRYTXNYRzRnSUNBZ0lDQnpkR0YwZFhOVVpYaDBPaUIwYUdsekxuTjBZWFIxYzFSbGVIUXNYRzRnSUNBZ0lDQm9aV0ZrWlhKek9pQnVaWGNnU0dWaFpHVnljeWgwYUdsekxtaGxZV1JsY25NcExGeHVJQ0FnSUNBZ2RYSnNPaUIwYUdsekxuVnliRnh1SUNBZ0lIMHBYRzRnSUgxY2JseHVJQ0JTWlhOd2IyNXpaUzVsY25KdmNpQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSFpoY2lCeVpYTndiMjV6WlNBOUlHNWxkeUJTWlhOd2IyNXpaU2h1ZFd4c0xDQjdjM1JoZEhWek9pQXdMQ0J6ZEdGMGRYTlVaWGgwT2lBbkozMHBYRzRnSUNBZ2NtVnpjRzl1YzJVdWRIbHdaU0E5SUNkbGNuSnZjaWRjYmlBZ0lDQnlaWFIxY200Z2NtVnpjRzl1YzJWY2JpQWdmVnh1WEc0Z0lIWmhjaUJ5WldScGNtVmpkRk4wWVhSMWMyVnpJRDBnV3pNd01Td2dNekF5TENBek1ETXNJRE13Tnl3Z016QTRYVnh1WEc0Z0lGSmxjM0J2Ym5ObExuSmxaR2x5WldOMElEMGdablZ1WTNScGIyNG9kWEpzTENCemRHRjBkWE1wSUh0Y2JpQWdJQ0JwWmlBb2NtVmthWEpsWTNSVGRHRjBkWE5sY3k1cGJtUmxlRTltS0hOMFlYUjFjeWtnUFQwOUlDMHhLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnVW1GdVoyVkZjbkp2Y2lnblNXNTJZV3hwWkNCemRHRjBkWE1nWTI5a1pTY3BYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlNaWE53YjI1elpTaHVkV3hzTENCN2MzUmhkSFZ6T2lCemRHRjBkWE1zSUdobFlXUmxjbk02SUh0c2IyTmhkR2x2YmpvZ2RYSnNmWDBwWEc0Z0lIMWNibHh1SUNCelpXeG1Ma2hsWVdSbGNuTWdQU0JJWldGa1pYSnpYRzRnSUhObGJHWXVVbVZ4ZFdWemRDQTlJRkpsY1hWbGMzUmNiaUFnYzJWc1ppNVNaWE53YjI1elpTQTlJRkpsYzNCdmJuTmxYRzVjYmlBZ2MyVnNaaTVtWlhSamFDQTlJR1oxYm1OMGFXOXVLR2x1Y0hWMExDQnBibWwwS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnZG1GeUlISmxjWFZsYzNRZ1BTQnVaWGNnVW1WeGRXVnpkQ2hwYm5CMWRDd2dhVzVwZENsY2JpQWdJQ0FnSUhaaGNpQjRhSElnUFNCdVpYY2dXRTFNU0hSMGNGSmxjWFZsYzNRb0tWeHVYRzRnSUNBZ0lDQjRhSEl1YjI1c2IyRmtJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ2Y0hScGIyNXpJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lITjBZWFIxY3pvZ2VHaHlMbk4wWVhSMWN5eGNiaUFnSUNBZ0lDQWdJQ0J6ZEdGMGRYTlVaWGgwT2lCNGFISXVjM1JoZEhWelZHVjRkQ3hjYmlBZ0lDQWdJQ0FnSUNCb1pXRmtaWEp6T2lCd1lYSnpaVWhsWVdSbGNuTW9lR2h5TG1kbGRFRnNiRkpsYzNCdmJuTmxTR1ZoWkdWeWN5Z3BJSHg4SUNjbktWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVkWEpzSUQwZ0ozSmxjM0J2Ym5ObFZWSk1KeUJwYmlCNGFISWdQeUI0YUhJdWNtVnpjRzl1YzJWVlVrd2dPaUJ2Y0hScGIyNXpMbWhsWVdSbGNuTXVaMlYwS0NkWUxWSmxjWFZsYzNRdFZWSk1KeWxjYmlBZ0lDQWdJQ0FnZG1GeUlHSnZaSGtnUFNBbmNtVnpjRzl1YzJVbklHbHVJSGhvY2lBL0lIaG9jaTV5WlhOd2IyNXpaU0E2SUhob2NpNXlaWE53YjI1elpWUmxlSFJjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2h1WlhjZ1VtVnpjRzl1YzJVb1ltOWtlU3dnYjNCMGFXOXVjeWtwWEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhob2NpNXZibVZ5Y205eUlEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2h1WlhjZ1ZIbHdaVVZ5Y205eUtDZE9aWFIzYjNKcklISmxjWFZsYzNRZ1ptRnBiR1ZrSnlrcFhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIaG9jaTV2Ym5ScGJXVnZkWFFnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtHNWxkeUJVZVhCbFJYSnliM0lvSjA1bGRIZHZjbXNnY21WeGRXVnpkQ0JtWVdsc1pXUW5LU2xjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZUdoeUxtOXdaVzRvY21WeGRXVnpkQzV0WlhSb2IyUXNJSEpsY1hWbGMzUXVkWEpzTENCMGNuVmxLVnh1WEc0Z0lDQWdJQ0JwWmlBb2NtVnhkV1Z6ZEM1amNtVmtaVzUwYVdGc2N5QTlQVDBnSjJsdVkyeDFaR1VuS1NCN1hHNGdJQ0FnSUNBZ0lIaG9jaTUzYVhSb1EzSmxaR1Z1ZEdsaGJITWdQU0IwY25WbFhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2duY21WemNHOXVjMlZVZVhCbEp5QnBiaUI0YUhJZ0ppWWdjM1Z3Y0c5eWRDNWliRzlpS1NCN1hHNGdJQ0FnSUNBZ0lIaG9jaTV5WlhOd2IyNXpaVlI1Y0dVZ1BTQW5ZbXh2WWlkY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVnhkV1Z6ZEM1b1pXRmtaWEp6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvZG1Gc2RXVXNJRzVoYldVcElIdGNiaUFnSUNBZ0lDQWdlR2h5TG5ObGRGSmxjWFZsYzNSSVpXRmtaWElvYm1GdFpTd2dkbUZzZFdVcFhHNGdJQ0FnSUNCOUtWeHVYRzRnSUNBZ0lDQjRhSEl1YzJWdVpDaDBlWEJsYjJZZ2NtVnhkV1Z6ZEM1ZlltOWtlVWx1YVhRZ1BUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2JuVnNiQ0E2SUhKbGNYVmxjM1F1WDJKdlpIbEpibWwwS1Z4dUlDQWdJSDBwWEc0Z0lIMWNiaUFnYzJWc1ppNW1aWFJqYUM1d2IyeDVabWxzYkNBOUlIUnlkV1ZjYm4wcEtIUjVjR1Z2WmlCelpXeG1JQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JSE5sYkdZZ09pQjBhR2x6S1R0Y2JpSmRmUT09XG4iXX0=
