!function t(e,r,n){function o(s,a){if(!r[s]){if(!e[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var f=r[s]={exports:{}};e[s][0].call(f.exports,function(t){var r=e[s][1][t];return o(r?r:t)},f,f.exports,t,e,r,n)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(t,e,r){"use strict";function n(){var t=document.querySelector(".js-page__arrow--top");t.addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)},!1)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],2:[function(t,e,r){"use strict";function n(){var t=function(){var t=document.querySelector(".js-pixels"),e=function(){if(t&&null!==t.textContent){var e=window.innerWidth*window.innerHeight;t.textContent=e.toLocaleString()}};requestAnimationFrame(e)};t(),window.addEventListener("resize",t)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n},{}],3:[function(t,e,r){"use strict";var n=t("./spa");!function(){function t(){r.classList.toggle("menu-open")}function e(e){e.target&&"A"===e.target.nodeName&&(e.preventDefault(),t(),e.target.pathname!==window.location.pathname&&(history.pushState(null,null,e.target.pathname),(0,n.updatePage)()))}var r=document.querySelector("header"),o=document.querySelector(".js-trigger--menu"),i=document.querySelector(".js-menu");(0,n.runNewFunctions)(),o.addEventListener("click",t,!1),i.addEventListener("click",e,!1)}()},{"./spa":5}],4:[function(t,e,r){"use strict";function n(){function t(){var t=this.parentNode,e=t.previousElementSibling;t.style.maxHeight=0,t.classList.toggle("project__details--expanded"),e.classList.toggle("project__expandIcon--expanded")}function e(){this.classList.toggle("project__expandIcon--expanded");var t=this.nextElementSibling,e=t.classList.contains("project__details--expanded");t.classList.toggle("project__details--expanded"),t.style.maxHeight=e?0:t.scrollHeight+"px"}var r=document.querySelector(".js-page__arrow--top");r.addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)},!1);var n=Array.from(document.querySelectorAll(".js-project"));n.forEach(function(r){var n=r.querySelector(".project__expandIcon");n.addEventListener("click",e,!1);var o=r.querySelector(".project__closeIcon");o.addEventListener("click",t,!1)})}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],5:[function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function o(t){return p[t]?Promise.resolve(p[t]):fetch(t).then(function(e){return e.ok?(p[t]=e.text(),p[t]):void console.log("network response was not ok.")}).catch(function(e){return console.log("there has been an error requesting ("+t+"): "+e.message)})}Object.defineProperty(r,"__esModule",{value:!0}),r.updatePage=r.runNewFunctions=void 0;var i=t("./landing"),s=n(i),a=t("./about"),u=n(a),c=t("./projects"),f=n(c),l=t("./utils");t("es6-promise").polyfill(),t("isomorphic-fetch");var h=r.runNewFunctions=function(){var t=window.location.pathname;if("/"===t||"/index.html"===t)(0,s.default)();else if(t.startsWith("/about"))(0,u.default)();else{if(!t.startsWith("/projects"))return;(0,f.default)()}},d=r.updatePage=function(){var t=window.location.href;o(t).then(function(t){var e=document.createElement("html");e.innerHTML=t;var r=document.querySelector(".page"),n=e.querySelector(".page"),o=e.getElementsByTagName("title")[0].textContent,i=e.getElementsByTagName("meta").description.content;console.log(r),r.parentNode.replaceChild(n,r),document.title=o,document.getElementsByTagName("meta").description.content=i,(0,l.fadeIn)(n),h()})},p={};window.addEventListener("popstate",d)},{"./about":1,"./landing":2,"./projects":4,"./utils":6,"es6-promise":7,"isomorphic-fetch":8}],6:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(t){return t*t*t*t},o=function(t){return 1- --t*t*t*t};r.scrollToTop=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200,r=t.scrollHeight,n=Date.now(),i=function i(){var s=Date.now(),a=(s-n)/e,u=o(a);t.scrollTop=u*(0-r)+r,0!==t.scrollTop&&requestAnimationFrame(i)};i()},r.fadeIn=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200;t.style.opacity=0;var r=Date.now(),o=function o(){var i=Date.now(),s=(i-r)/e,a=n(s);return t.style.opacity=a,t.style.opacity>1?void(t.style.opacity=1):void requestAnimationFrame(o)};o()},r.fadeOut=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200;t.style.opacity=1;var r=Date.now(),n=function n(){var i=Date.now(),s=(i-r)/e,a=o(s);return t.style.opacity=1-a,t.style.opacity<0?void(t.style.opacity=0):void requestAnimationFrame(n)};n()}},{}],7:[function(t,e,r){(function(n,o){!function(t,n){"object"==typeof r&&"undefined"!=typeof e?e.exports=n():"function"==typeof define&&define.amd?define(n):t.ES6Promise=n()}(this,function(){"use strict";function e(t){return"function"==typeof t||"object"==typeof t&&null!==t}function r(t){return"function"==typeof t}function i(t){X=t}function s(t){J=t}function a(){return function(){return n.nextTick(h)}}function u(){return"undefined"!=typeof V?function(){V(h)}:l()}function c(){var t=0,e=new Z(h),r=document.createTextNode("");return e.observe(r,{characterData:!0}),function(){r.data=t=++t%2}}function f(){var t=new MessageChannel;return t.port1.onmessage=h,function(){return t.port2.postMessage(0)}}function l(){var t=setTimeout;return function(){return t(h,1)}}function h(){for(var t=0;t<K;t+=2){var e=rt[t],r=rt[t+1];e(r),rt[t]=void 0,rt[t+1]=void 0}K=0}function d(){try{var e=t,r=e("vertx");return V=r.runOnLoop||r.runOnContext,u()}catch(t){return l()}}function p(t,e){var r=arguments,n=this,o=new this.constructor(v);void 0===o[ot]&&F(o);var i=n._state;return i?!function(){var t=r[i-1];J(function(){return q(i,o,t,n._result)})}():S(n,o,t,e),o}function y(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var r=new e(v);return E(r,t),r}function v(){}function m(){return new TypeError("You cannot resolve a promise with itself")}function b(){return new TypeError("A promises callback cannot return that same promise.")}function w(t){try{return t.then}catch(t){return ut.error=t,ut}}function _(t,e,r,n){try{t.call(e,r,n)}catch(t){return t}}function g(t,e,r){J(function(t){var n=!1,o=_(r,e,function(r){n||(n=!0,e!==r?E(t,r):j(t,r))},function(e){n||(n=!0,P(t,e))},"Settle: "+(t._label||" unknown promise"));!n&&o&&(n=!0,P(t,o))},t)}function T(t,e){e._state===st?j(t,e._result):e._state===at?P(t,e._result):S(e,void 0,function(e){return E(t,e)},function(e){return P(t,e)})}function A(t,e,n){e.constructor===t.constructor&&n===p&&e.constructor.resolve===y?T(t,e):n===ut?P(t,ut.error):void 0===n?j(t,e):r(n)?g(t,e,n):j(t,e)}function E(t,r){t===r?P(t,m()):e(r)?A(t,r,w(r)):j(t,r)}function x(t){t._onerror&&t._onerror(t._result),B(t)}function j(t,e){t._state===it&&(t._result=e,t._state=st,0!==t._subscribers.length&&J(B,t))}function P(t,e){t._state===it&&(t._state=at,t._result=e,J(x,t))}function S(t,e,r,n){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+st]=r,o[i+at]=n,0===i&&t._state&&J(B,t)}function B(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var n=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)n=e[s],o=e[s+r],n?q(r,n,o,i):o(i);t._subscribers.length=0}}function O(){this.error=null}function L(t,e){try{return t(e)}catch(t){return ct.error=t,ct}}function q(t,e,n,o){var i=r(n),s=void 0,a=void 0,u=void 0,c=void 0;if(i){if(s=L(n,o),s===ct?(c=!0,a=s.error,s=null):u=!0,e===s)return void P(e,b())}else s=o,u=!0;e._state!==it||(i&&u?E(e,s):c?P(e,a):t===st?j(e,s):t===at&&P(e,s))}function D(t,e){try{e(function(e){E(t,e)},function(e){P(t,e)})}catch(e){P(t,e)}}function U(){return ft++}function F(t){t[ot]=ft++,t._state=void 0,t._result=void 0,t._subscribers=[]}function I(t,e){this._instanceConstructor=t,this.promise=new t(v),this.promise[ot]||F(this.promise),z(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?j(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&j(this.promise,this._result))):P(this.promise,C())}function C(){return new Error("Array Methods must be provided an Array")}function N(t){return new I(this,t).promise}function k(t){var e=this;return new e(z(t)?function(r,n){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(r,n)}:function(t,e){return e(new TypeError("You must pass an array to race."))})}function R(t){var e=this,r=new e(v);return P(r,t),r}function M(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function H(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function G(t){this[ot]=U(),this._result=this._state=void 0,this._subscribers=[],v!==t&&("function"!=typeof t&&M(),this instanceof G?D(this,t):H())}function W(){var t=void 0;if("undefined"!=typeof o)t=o;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===r&&!e.cast)return}t.Promise=G}var Y=void 0;Y=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var z=Y,K=0,V=void 0,X=void 0,J=function(t,e){rt[K]=t,rt[K+1]=e,K+=2,2===K&&(X?X(h):nt())},$="undefined"!=typeof window?window:void 0,Q=$||{},Z=Q.MutationObserver||Q.WebKitMutationObserver,tt="undefined"==typeof self&&"undefined"!=typeof n&&"[object process]"==={}.toString.call(n),et="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,rt=new Array(1e3),nt=void 0;nt=tt?a():Z?c():et?f():void 0===$&&"function"==typeof t?d():l();var ot=Math.random().toString(36).substring(16),it=void 0,st=1,at=2,ut=new O,ct=new O,ft=0;return I.prototype._enumerate=function(){for(var t=this.length,e=this._input,r=0;this._state===it&&r<t;r++)this._eachEntry(e[r],r)},I.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===y){var o=w(t);if(o===p&&t._state!==it)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(r===G){var i=new r(v);A(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new r(function(e){return e(t)}),e)}else this._willSettleAt(n(t),e)},I.prototype._settledAt=function(t,e,r){var n=this.promise;n._state===it&&(this._remaining--,t===at?P(n,r):this._result[e]=r),0===this._remaining&&j(n,this._result)},I.prototype._willSettleAt=function(t,e){var r=this;S(t,void 0,function(t){return r._settledAt(st,e,t)},function(t){return r._settledAt(at,e,t)})},G.all=N,G.race=k,G.resolve=y,G.reject=R,G._setScheduler=i,G._setAsap=s,G._asap=J,G.prototype={constructor:G,then:p,catch:function(t){return this.then(null,t)}},G.polyfill=W,G.Promise=G,G})}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:9}],8:[function(t,e,r){t("whatwg-fetch"),e.exports=self.fetch.bind(self)},{"whatwg-fetch":10}],9:[function(t,e,r){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(t){if(l===setTimeout)return setTimeout(t,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(t,0);try{return l(t,0)}catch(e){try{return l.call(null,t,0)}catch(e){return l.call(this,t,0)}}}function s(t){if(h===clearTimeout)return clearTimeout(t);if((h===o||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(t);try{return h(t)}catch(e){try{return h.call(null,t)}catch(e){return h.call(this,t)}}}function a(){v&&p&&(v=!1,p.length?y=p.concat(y):m=-1,y.length&&u())}function u(){if(!v){var t=i(a);v=!0;for(var e=y.length;e;){for(p=y,y=[];++m<e;)p&&p[m].run();m=-1,e=y.length}p=null,v=!1,s(t)}}function c(t,e){this.fun=t,this.array=e}function f(){}var l,h,d=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(t){l=n}try{h="function"==typeof clearTimeout?clearTimeout:o}catch(t){h=o}}();var p,y=[],v=!1,m=-1;d.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];y.push(new c(t,e)),1!==y.length||v||i(u)},c.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=f,d.addListener=f,d.once=f,d.off=f,d.removeListener=f,d.removeAllListeners=f,d.emit=f,d.binding=function(t){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(t){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},{}],10:[function(t,e,r){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function r(t){return"string"!=typeof t&&(t=String(t)),t}function n(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return m.iterable&&(e[Symbol.iterator]=function(){return e}),e}function o(t){this.map={},t instanceof o?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function i(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function s(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function a(t){var e=new FileReader,r=s(e);return e.readAsArrayBuffer(t),r}function u(t){var e=new FileReader,r=s(e);return e.readAsText(t),r}function c(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}function f(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function l(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(m.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(m.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(m.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(m.arrayBuffer&&m.blob&&w(t))this._bodyArrayBuffer=f(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!m.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!_(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=f(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):m.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},m.blob&&(this.blob=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?i(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(a)}),this.text=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return u(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(c(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},m.formData&&(this.formData=function(){return this.text().then(p)}),this.json=function(){return this.text().then(JSON.parse)},this}function h(t){var e=t.toUpperCase();return g.indexOf(e)>-1?e:t}function d(t,e){e=e||{};var r=e.body;if(t instanceof d){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new o(t.headers)),this.method=t.method,this.mode=t.mode,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new o(e.headers)),this.method=h(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function p(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}}),e}function y(t){var e=new o;return t.split(/\r?\n/).forEach(function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}}),e}function v(t,e){e||(e={}),this.type="default",this.status="status"in e?e.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new o(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var m={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(m.arrayBuffer)var b=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],w=function(t){return t&&DataView.prototype.isPrototypeOf(t)},_=ArrayBuffer.isView||function(t){return t&&b.indexOf(Object.prototype.toString.call(t))>-1};o.prototype.append=function(t,n){t=e(t),n=r(n);var o=this.map[t];this.map[t]=o?o+","+n:n},o.prototype.delete=function(t){delete this.map[e(t)]},o.prototype.get=function(t){return t=e(t),this.has(t)?this.map[t]:null},o.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},o.prototype.set=function(t,n){this.map[e(t)]=r(n)},o.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},o.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),n(t)},o.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),n(t)},o.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),n(t)},m.iterable&&(o.prototype[Symbol.iterator]=o.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];d.prototype.clone=function(){return new d(this,{body:this._bodyInit})},l.call(d.prototype),l.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new o(this.headers),url:this.url})},v.error=function(){var t=new v(null,{status:0,statusText:""});return t.type="error",t};var T=[301,302,303,307,308];v.redirect=function(t,e){if(T.indexOf(e)===-1)throw new RangeError("Invalid status code");return new v(null,{status:e,headers:{location:t}})},t.Headers=o,t.Request=d,t.Response=v,t.fetch=function(t,e){return new Promise(function(r,n){var o=new d(t,e),i=new XMLHttpRequest;i.onload=function(){var t={status:i.status,statusText:i.statusText,headers:y(i.getAllResponseHeaders()||"")};t.url="responseURL"in i?i.responseURL:t.headers.get("X-Request-URL");var e="response"in i?i.response:i.responseText;r(new v(e,t))},i.onerror=function(){n(new TypeError("Network request failed"))},i.ontimeout=function(){n(new TypeError("Network request failed"))},i.open(o.method,o.url,!0),"include"===o.credentials&&(i.withCredentials=!0),"responseType"in i&&m.blob&&(i.responseType="blob"),o.headers.forEach(function(t,e){i.setRequestHeader(e,t)}),i.send("undefined"==typeof o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},{}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwicnVuQWJvdXRQYWdlIiwidG9wQXJyb3ciLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiX3V0aWxzIiwic2Nyb2xsVG9Ub3AiLCJ0aGlzIiwicGFyZW50Tm9kZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJkZWZhdWx0IiwiLi91dGlscyIsIjIiLCJydW5MYW5kaW5nUGFnZSIsImZpbmRBcmVhIiwicGl4ZWxzIiwidGV4dENvbnRlbnQiLCJhcmVhIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwidG9Mb2NhbGVTdHJpbmciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCIzIiwiX3NwYSIsInRvZ2dsZU1lbnUiLCJoZWFkZXIiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJjaGFuZ2VQYWdlIiwiZXZlbnQiLCJ0YXJnZXQiLCJub2RlTmFtZSIsInByZXZlbnREZWZhdWx0IiwicGF0aG5hbWUiLCJsb2NhdGlvbiIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJ1cGRhdGVQYWdlIiwidHJpZ2dlck1lbnUiLCJtZW51IiwicnVuTmV3RnVuY3Rpb25zIiwiLi9zcGEiLCI0IiwicnVuUHJvamVjdHNQYWdlIiwiY2xvc2VEZXRhaWxzIiwiZGV0YWlscyIsImljb24iLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwic3R5bGUiLCJtYXhIZWlnaHQiLCJleHBhbmREZXRhaWxzIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiaXNFeHBhbmRlZCIsImNvbnRhaW5zIiwic2Nyb2xsSGVpZ2h0IiwicHJvamVjdHMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInByb2plY3QiLCJleHBhbmRJY29uIiwiY2xvc2VJY29uIiwiNSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwibG9hZFBhZ2UiLCJ1cmwiLCJjYWNoZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsInRleHQiLCJjb25zb2xlIiwibG9nIiwiY2F0Y2giLCJlcnIiLCJtZXNzYWdlIiwidW5kZWZpbmVkIiwiX2xhbmRpbmciLCJfbGFuZGluZzIiLCJfYWJvdXQiLCJfYWJvdXQyIiwiX3Byb2plY3RzIiwiX3Byb2plY3RzMiIsInBvbHlmaWxsIiwicGF0aCIsInN0YXJ0c1dpdGgiLCJocmVmIiwicmVzcG9uc2VUZXh0IiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsIm9sZFBhZ2UiLCJuZXdQYWdlIiwibmV3VGl0bGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm5ld0Rlc2MiLCJjb250ZW50IiwicmVwbGFjZUNoaWxkIiwidGl0bGUiLCJmYWRlSW4iLCIuL2Fib3V0IiwiLi9sYW5kaW5nIiwiLi9wcm9qZWN0cyIsImVzNi1wcm9taXNlIiwiaXNvbW9ycGhpYy1mZXRjaCIsIjYiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVsIiwiZHVyYXRpb24iLCJhcmd1bWVudHMiLCJib3R0b20iLCJzdGFydCIsIkRhdGUiLCJub3ciLCJzY3JvbGwiLCJ0aW1lIiwiZWFzaW5nIiwic2Nyb2xsVG9wIiwib3BhY2l0eSIsImZhZGUiLCJmYWRlT3V0IiwiNyIsInByb2Nlc3MiLCJnbG9iYWwiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwiRVM2UHJvbWlzZSIsIm9iamVjdE9yRnVuY3Rpb24iLCJ4IiwiaXNGdW5jdGlvbiIsInNldFNjaGVkdWxlciIsInNjaGVkdWxlRm4iLCJjdXN0b21TY2hlZHVsZXJGbiIsInNldEFzYXAiLCJhc2FwRm4iLCJhc2FwIiwidXNlTmV4dFRpY2siLCJuZXh0VGljayIsImZsdXNoIiwidXNlVmVydHhUaW1lciIsInZlcnR4TmV4dCIsInVzZVNldFRpbWVvdXQiLCJ1c2VNdXRhdGlvbk9ic2VydmVyIiwiaXRlcmF0aW9ucyIsIm9ic2VydmVyIiwiQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImRhdGEiLCJ1c2VNZXNzYWdlQ2hhbm5lbCIsImNoYW5uZWwiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwib25tZXNzYWdlIiwicG9ydDIiLCJwb3N0TWVzc2FnZSIsImdsb2JhbFNldFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibGVuIiwiY2FsbGJhY2siLCJxdWV1ZSIsImFyZyIsImF0dGVtcHRWZXJ0eCIsInZlcnR4IiwicnVuT25Mb29wIiwicnVuT25Db250ZXh0Iiwib25GdWxmaWxsbWVudCIsIm9uUmVqZWN0aW9uIiwiX2FyZ3VtZW50cyIsInBhcmVudCIsImNoaWxkIiwiY29uc3RydWN0b3IiLCJub29wIiwiUFJPTUlTRV9JRCIsIm1ha2VQcm9taXNlIiwiX3N0YXRlIiwiaW52b2tlQ2FsbGJhY2siLCJfcmVzdWx0Iiwic3Vic2NyaWJlIiwib2JqZWN0IiwiQ29uc3RydWN0b3IiLCJwcm9taXNlIiwiX3Jlc29sdmUiLCJzZWxmRnVsZmlsbG1lbnQiLCJUeXBlRXJyb3IiLCJjYW5ub3RSZXR1cm5Pd24iLCJnZXRUaGVuIiwiZXJyb3IiLCJHRVRfVEhFTl9FUlJPUiIsInRyeVRoZW4iLCJmdWxmaWxsbWVudEhhbmRsZXIiLCJyZWplY3Rpb25IYW5kbGVyIiwiaGFuZGxlRm9yZWlnblRoZW5hYmxlIiwidGhlbmFibGUiLCJzZWFsZWQiLCJmdWxmaWxsIiwicmVhc29uIiwiX3JlamVjdCIsIl9sYWJlbCIsImhhbmRsZU93blRoZW5hYmxlIiwiRlVMRklMTEVEIiwiUkVKRUNURUQiLCJoYW5kbGVNYXliZVRoZW5hYmxlIiwibWF5YmVUaGVuYWJsZSIsInRoZW4kJCIsInB1Ymxpc2hSZWplY3Rpb24iLCJfb25lcnJvciIsInB1Ymxpc2giLCJQRU5ESU5HIiwiX3N1YnNjcmliZXJzIiwic3Vic2NyaWJlcnMiLCJzZXR0bGVkIiwiZGV0YWlsIiwiRXJyb3JPYmplY3QiLCJ0cnlDYXRjaCIsIlRSWV9DQVRDSF9FUlJPUiIsImhhc0NhbGxiYWNrIiwic3VjY2VlZGVkIiwiZmFpbGVkIiwiaW5pdGlhbGl6ZVByb21pc2UiLCJyZXNvbHZlciIsIm5leHRJZCIsImlkIiwiRW51bWVyYXRvciIsImlucHV0IiwiX2luc3RhbmNlQ29uc3RydWN0b3IiLCJpc0FycmF5IiwiX2lucHV0IiwiX3JlbWFpbmluZyIsIl9lbnVtZXJhdGUiLCJ2YWxpZGF0aW9uRXJyb3IiLCJhbGwiLCJlbnRyaWVzIiwicmFjZSIsInJlamVjdCIsIl8iLCJuZWVkc1Jlc29sdmVyIiwibmVlZHNOZXciLCJsb2NhbCIsInNlbGYiLCJGdW5jdGlvbiIsIlAiLCJwcm9taXNlVG9TdHJpbmciLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhc3QiLCJfaXNBcnJheSIsInNjaGVkdWxlRmx1c2giLCJicm93c2VyV2luZG93IiwiYnJvd3Nlckdsb2JhbCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiaXNOb2RlIiwiaXNXb3JrZXIiLCJVaW50OENsYW1wZWRBcnJheSIsImltcG9ydFNjcmlwdHMiLCJNYXRoIiwicmFuZG9tIiwic3Vic3RyaW5nIiwiX2VhY2hFbnRyeSIsImVudHJ5IiwiYyIsInJlc29sdmUkJCIsIl90aGVuIiwiX3NldHRsZWRBdCIsIl93aWxsU2V0dGxlQXQiLCJzdGF0ZSIsImVudW1lcmF0b3IiLCJfc2V0U2NoZWR1bGVyIiwiX3NldEFzYXAiLCJfYXNhcCIsIl9wcm9jZXNzIiwiOCIsImJpbmQiLCJ3aGF0d2ctZmV0Y2giLCI5IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2FjaGVkU2V0VGltZW91dCIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsImNhY2hlZENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwiY29uY2F0IiwicXVldWVJbmRleCIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwiSXRlbSIsImFycmF5IiwiYXJncyIsInB1c2giLCJhcHBseSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJiaW5kaW5nIiwibmFtZSIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCIxMCIsIm5vcm1hbGl6ZU5hbWUiLCJTdHJpbmciLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVWYWx1ZSIsIml0ZXJhdG9yRm9yIiwiaXRlbXMiLCJpdGVyYXRvciIsIm5leHQiLCJzaGlmdCIsImRvbmUiLCJzdXBwb3J0IiwiaXRlcmFibGUiLCJTeW1ib2wiLCJIZWFkZXJzIiwiaGVhZGVycyIsIm1hcCIsImFwcGVuZCIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25zdW1lZCIsImJvZHkiLCJib2R5VXNlZCIsImZpbGVSZWFkZXJSZWFkeSIsInJlYWRlciIsIm9ubG9hZCIsInJlc3VsdCIsIm9uZXJyb3IiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJibG9iIiwiRmlsZVJlYWRlciIsInJlYWRBc0FycmF5QnVmZmVyIiwicmVhZEJsb2JBc1RleHQiLCJyZWFkQXNUZXh0IiwicmVhZEFycmF5QnVmZmVyQXNUZXh0IiwiYnVmIiwidmlldyIsIlVpbnQ4QXJyYXkiLCJjaGFycyIsImZyb21DaGFyQ29kZSIsImpvaW4iLCJidWZmZXJDbG9uZSIsInNsaWNlIiwiYnl0ZUxlbmd0aCIsInNldCIsImJ1ZmZlciIsIkJvZHkiLCJfaW5pdEJvZHkiLCJfYm9keUluaXQiLCJfYm9keVRleHQiLCJCbG9iIiwiaXNQcm90b3R5cGVPZiIsIl9ib2R5QmxvYiIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwic2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiYXJyYXlCdWZmZXIiLCJpc0RhdGFWaWV3IiwiX2JvZHlBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJnZXQiLCJ0eXBlIiwicmVqZWN0ZWQiLCJkZWNvZGUiLCJqc29uIiwiSlNPTiIsInBhcnNlIiwibm9ybWFsaXplTWV0aG9kIiwibWV0aG9kIiwidXBjYXNlZCIsInRvVXBwZXJDYXNlIiwibWV0aG9kcyIsImluZGV4T2YiLCJSZXF1ZXN0Iiwib3B0aW9ucyIsImNyZWRlbnRpYWxzIiwibW9kZSIsInJlZmVycmVyIiwiZm9ybSIsInRyaW0iLCJzcGxpdCIsImJ5dGVzIiwicmVwbGFjZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInBhcnNlSGVhZGVycyIsInJhd0hlYWRlcnMiLCJsaW5lIiwicGFydHMiLCJrZXkiLCJSZXNwb25zZSIsImJvZHlJbml0Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInZpZXdDbGFzc2VzIiwiRGF0YVZpZXciLCJpc1ZpZXciLCJvbGRWYWx1ZSIsImhhcyIsImhhc093blByb3BlcnR5IiwidGhpc0FyZyIsImtleXMiLCJ2YWx1ZXMiLCJjbG9uZSIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsIlJhbmdlRXJyb3IiLCJpbml0IiwicmVxdWVzdCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VVUkwiLCJvbnRpbWVvdXQiLCJvcGVuIiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2VUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiXSwibWFwcGluZ3MiOiJDQUFBLFFBQVVBLEdBQUVDLEVBQUVDLEVBQUVDLEdBQUcsUUFBU0MsR0FBRUMsRUFBRUMsR0FBRyxJQUFJSixFQUFFRyxHQUFHLENBQUMsSUFBSUosRUFBRUksR0FBRyxDQUFDLEdBQUlFLEdBQWtCLGtCQUFUQyxVQUFxQkEsT0FBUSxLQUFJRixHQUFHQyxFQUFFLE1BQU9BLEdBQUVGLEdBQUUsRUFBSSxJQUFHSSxFQUFFLE1BQU9BLEdBQUVKLEdBQUUsRUFBSSxJQUFJSyxHQUFFLEdBQUlDLE9BQU0sdUJBQXVCTixFQUFFLElBQUssTUFBTUssR0FBRUUsS0FBSyxtQkFBbUJGLEVBQUUsR0FBSUcsR0FBRVgsRUFBRUcsSUFBSVMsV0FBWWIsR0FBRUksR0FBRyxHQUFHVSxLQUFLRixFQUFFQyxRQUFRLFNBQVNkLEdBQUcsR0FBSUUsR0FBRUQsRUFBRUksR0FBRyxHQUFHTCxFQUFHLE9BQU9JLEdBQUVGLEVBQUVBLEVBQUVGLElBQUlhLEVBQUVBLEVBQUVDLFFBQVFkLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsTUFBT0QsR0FBRUcsR0FBR1MsUUFBa0QsSUFBSSxHQUExQ0wsR0FBa0Isa0JBQVRELFVBQXFCQSxRQUFnQkgsRUFBRSxFQUFFQSxFQUFFRixFQUFFYSxPQUFPWCxJQUFJRCxFQUFFRCxFQUFFRSxHQUFJLE9BQU9ELEtBQUthLEdBQUcsU0FBU1QsRUFBUVUsRUFBT0osR0FDdmQsWUFTQSxTQUFTSyxLQUlQLEdBQUlDLEdBQVdDLFNBQVNDLGNBQWMsdUJBQ3RDRixHQUFTRyxpQkFBaUIsUUFBUyxZQUNqQyxFQUFJQyxFQUFPQyxhQUFhQyxLQUFLQyxjQUM1QixHQWRMQyxPQUFPQyxlQUFlZixFQUFTLGNBQzdCZ0IsT0FBTyxJQUVUaEIsRUFBUWlCLFFBQVVaLENBRWxCLElBQUlLLEdBQVNoQixFQUFRLGFBWWxCd0IsVUFBVSxJQUFJQyxHQUFHLFNBQVN6QixFQUFRVSxFQUFPSixHQUM1QyxZQVFBLFNBQVNvQixLQUdQLEdBQUlDLEdBQVcsV0FDYixHQUFJdkIsR0FBT1MsU0FBU0MsY0FBYyxjQUM5QmMsRUFBUyxXQUNYLEdBQUl4QixHQUE2QixPQUFyQkEsRUFBS3lCLFlBQXNCLENBQ3JDLEdBQUlDLEdBQU9DLE9BQU9DLFdBQWFELE9BQU9FLFdBQ3RDN0IsR0FBS3lCLFlBQWNDLEVBQUtJLGtCQUc1QkMsdUJBQXNCUCxHQUd4QkQsS0FDQUksT0FBT2hCLGlCQUFpQixTQUFVWSxHQXJCcENQLE9BQU9DLGVBQWVmLEVBQVMsY0FDN0JnQixPQUFPLElBRVRoQixFQUFRaUIsUUFBVUcsT0FxQlpVLEdBQUcsU0FBU3BDLEVBQVFVLEVBQU9KLEdBQ2pDLFlBRUEsSUFBSStCLEdBQU9yQyxFQUFRLFVBRW5CLFdBUUUsUUFBU3NDLEtBQ1BDLEVBQU9DLFVBQVVDLE9BQU8sYUFFMUIsUUFBU0MsR0FBV0MsR0FDZEEsRUFBTUMsUUFBb0MsTUFBMUJELEVBQU1DLE9BQU9DLFdBQy9CRixFQUFNRyxpQkFDTlIsSUFDSUssRUFBTUMsT0FBT0csV0FBYWhCLE9BQU9pQixTQUFTRCxXQUM1Q0UsUUFBUUMsVUFBVSxLQUFNLEtBQU1QLEVBQU1DLE9BQU9HLFdBQzNDLEVBQUlWLEVBQUtjLGdCQWRmLEdBQUlaLEdBQVMxQixTQUFTQyxjQUFjLFVBQ2hDc0MsRUFBY3ZDLFNBQVNDLGNBQWMscUJBQ3JDdUMsRUFBT3hDLFNBQVNDLGNBQWMsYUFrQmxDLEVBQUl1QixFQUFLaUIsbUJBQ1RGLEVBQVlyQyxpQkFBaUIsUUFBU3VCLEdBQVksR0FDbERlLEVBQUt0QyxpQkFBaUIsUUFBUzJCLEdBQVksUUFHMUNhLFFBQVEsSUFBSUMsR0FBRyxTQUFTeEQsRUFBUVUsRUFBT0osR0FDMUMsWUFVQSxTQUFTbUQsS0FtQlAsUUFBU0MsS0FDUCxHQUFJQyxHQUFVekMsS0FBS0MsV0FDZnlDLEVBQU9ELEVBQVFFLHNCQUNuQkYsR0FBUUcsTUFBTUMsVUFBWSxFQUMxQkosRUFBUW5CLFVBQVVDLE9BQU8sOEJBQ3pCbUIsRUFBS3BCLFVBQVVDLE9BQU8saUNBR3hCLFFBQVN1QixLQUNQOUMsS0FBS3NCLFVBQVVDLE9BQU8sZ0NBQ3RCLElBQUlrQixHQUFVekMsS0FBSytDLG1CQUNmQyxFQUFhUCxFQUFRbkIsVUFBVTJCLFNBQVMsNkJBQzVDUixHQUFRbkIsVUFBVUMsT0FBTyw4QkFDekJrQixFQUFRRyxNQUFNQyxVQUFZRyxFQUFhLEVBQUlQLEVBQVFTLGFBQWUsS0E1QnBFLEdBQUl4RCxHQUFXQyxTQUFTQyxjQUFjLHVCQUN0Q0YsR0FBU0csaUJBQWlCLFFBQVMsWUFDakMsRUFBSUMsRUFBT0MsYUFBYUMsS0FBS0MsY0FDNUIsRUFHSCxJQUFJa0QsR0FBV0MsTUFBTUMsS0FBSzFELFNBQVMyRCxpQkFBaUIsZUFDcERILEdBQVNJLFFBQVEsU0FBVUMsR0FDekIsR0FBSUMsR0FBYUQsRUFBUTVELGNBQWMsdUJBQ3ZDNkQsR0FBVzVELGlCQUFpQixRQUFTaUQsR0FBZSxFQUVwRCxJQUFJWSxHQUFZRixFQUFRNUQsY0FBYyxzQkFDdEM4RCxHQUFVN0QsaUJBQWlCLFFBQVMyQyxHQUFjLEtBeEJ0RHRDLE9BQU9DLGVBQWVmLEVBQVMsY0FDN0JnQixPQUFPLElBRVRoQixFQUFRaUIsUUFBVWtDLENBRWxCLElBQUl6QyxHQUFTaEIsRUFBUSxhQXVDbEJ3QixVQUFVLElBQUlxRCxHQUFHLFNBQVM3RSxFQUFRVSxFQUFPSixHQUM1QyxZQXFCQSxTQUFTd0UsR0FBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUXhELFFBQVN3RCxHQTBDdkYsUUFBU0UsR0FBU0MsR0FDaEIsTUFBSUMsR0FBTUQsR0FDREUsUUFBUUMsUUFBUUYsRUFBTUQsSUFFeEJJLE1BQU1KLEdBQUtLLEtBQUssU0FBVUMsR0FDL0IsTUFBSUEsR0FBU0MsSUFDWE4sRUFBTUQsR0FBT00sRUFBU0UsT0FDZlAsRUFBTUQsUUFFYlMsU0FBUUMsSUFBSSxrQ0FFYkMsTUFBTSxTQUFVQyxHQUNqQixNQUFPSCxTQUFRQyxJQUFJLHVDQUF5Q1YsRUFBTSxNQUFRWSxFQUFJQyxXQXpFbEYzRSxPQUFPQyxlQUFlZixFQUFTLGNBQzdCZ0IsT0FBTyxJQUVUaEIsRUFBUTZDLFdBQWE3QyxFQUFRZ0QsZ0JBQWtCMEMsTUFFL0MsSUFBSUMsR0FBV2pHLEVBQVEsYUFFbkJrRyxFQUFZcEIsRUFBdUJtQixHQUVuQ0UsRUFBU25HLEVBQVEsV0FFakJvRyxFQUFVdEIsRUFBdUJxQixHQUVqQ0UsRUFBWXJHLEVBQVEsY0FFcEJzRyxFQUFheEIsRUFBdUJ1QixHQUVwQ3JGLEVBQVNoQixFQUFRLFVBS3JCQSxHQUFRLGVBQWV1RyxXQUN2QnZHLEVBQVEsbUJBSVIsSUFBSXNELEdBQWtCaEQsRUFBUWdELGdCQUFrQixXQUM5QyxHQUFJa0QsR0FBT3pFLE9BQU9pQixTQUFTRCxRQUMzQixJQUFhLE1BQVR5RCxHQUF5QixnQkFBVEEsR0FDbEIsRUFBSU4sRUFBVTNFLGVBQ1QsSUFBSWlGLEVBQUtDLFdBQVcsV0FDekIsRUFBSUwsRUFBUTdFLGVBQ1AsQ0FBQSxJQUFJaUYsRUFBS0MsV0FBVyxhQUd6QixRQUZBLEVBQUlILEVBQVcvRSxhQU9mNEIsRUFBYTdDLEVBQVE2QyxXQUFhLFdBQ3BDLEdBQUkrQixHQUFNbkQsT0FBT2lCLFNBQVMwRCxJQUMxQnpCLEdBQVNDLEdBQUtLLEtBQUssU0FBVW9CLEdBQzNCLEdBQUlDLEdBQVkvRixTQUFTZ0csY0FBYyxPQUN2Q0QsR0FBVUUsVUFBWUgsQ0FDdEIsSUFBSUksR0FBVWxHLFNBQVNDLGNBQWMsU0FDakNrRyxFQUFVSixFQUFVOUYsY0FBYyxTQUNsQ21HLEVBQVdMLEVBQVVNLHFCQUFxQixTQUFTLEdBQUdyRixZQUN0RHNGLEVBQVVQLEVBQVVNLHFCQUFxQixRQUFxQixZQUFFRSxPQUNwRXpCLFNBQVFDLElBQUltQixHQUNaQSxFQUFRNUYsV0FBV2tHLGFBQWFMLEVBQVNELEdBQ3pDbEcsU0FBU3lHLE1BQVFMLEVBQ2pCcEcsU0FBU3FHLHFCQUFxQixRQUFxQixZQUFFRSxRQUFVRCxHQUMvRCxFQUFJbkcsRUFBT3VHLFFBQVFQLEdBQ25CMUQsT0FLQTZCLElBa0JKcEQsUUFBT2hCLGlCQUFpQixXQUFZb0MsS0FFakNxRSxVQUFVLEVBQUVDLFlBQVksRUFBRUMsYUFBYSxFQUFFbEcsVUFBVSxFQUFFbUcsY0FBYyxFQUFFQyxtQkFBbUIsSUFBSUMsR0FBRyxTQUFTN0gsRUFBUVUsRUFBT0osR0FDMUgsWUFFQWMsUUFBT0MsZUFBZWYsRUFBUyxjQUM3QmdCLE9BQU8sR0FHVCxJQXFCSXdHLEdBQWMsU0FBcUJySSxHQUNyQyxNQUFPQSxHQUFJQSxFQUFJQSxFQUFJQSxHQUVqQnNJLEVBQWUsU0FBc0J0SSxHQUN2QyxNQUFPLE1BQU1BLEVBQUlBLEVBQUlBLEVBQUlBLEVBT1RhLEdBQVFXLFlBQWMsU0FBcUIrRyxHQUMzRCxHQUFJQyxHQUFXQyxVQUFVMUgsT0FBUyxHQUFzQndGLFNBQWpCa0MsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEtBRS9FQyxFQUFTSCxFQUFHNUQsYUFDWmdFLEVBQVFDLEtBQUtDLE1BQ2JDLEVBQVMsUUFBU0EsS0FDcEIsR0FBSUQsR0FBTUQsS0FBS0MsTUFDWEUsR0FBUUYsRUFBTUYsR0FBU0gsRUFDdkJRLEVBQVNWLEVBQWFTLEVBQzFCUixHQUFHVSxVQUFZRCxHQUFVLEVBQUlOLEdBQVVBLEVBQ2xCLElBQWpCSCxFQUFHVSxXQUNQdkcsc0JBQXNCb0csR0FFeEJBLE1BSVdqSSxFQUFRaUgsT0FBUyxTQUFnQlMsR0FDNUMsR0FBSUMsR0FBV0MsVUFBVTFILE9BQVMsR0FBc0J3RixTQUFqQmtDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxJQUVuRkYsR0FBR2xFLE1BQU02RSxRQUFVLENBQ25CLElBQ0lQLEdBQVFDLEtBQUtDLE1BQ2JNLEVBQU8sUUFBU0EsS0FDbEIsR0FBSU4sR0FBTUQsS0FBS0MsTUFDWEUsR0FBUUYsRUFBTUYsR0FBU0gsRUFDdkJRLEVBQVNYLEVBQVlVLEVBRXpCLE9BREFSLEdBQUdsRSxNQUFNNkUsUUFBVUYsRUFDZlQsRUFBR2xFLE1BQU02RSxRQUFVLE9BQ3JCWCxFQUFHbEUsTUFBTTZFLFFBQVUsT0FHckJ4Ryx1QkFBc0J5RyxHQUV4QkEsTUFJWXRJLEVBQVF1SSxRQUFVLFNBQWlCYixHQUMvQyxHQUFJQyxHQUFXQyxVQUFVMUgsT0FBUyxHQUFzQndGLFNBQWpCa0MsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLElBRW5GRixHQUFHbEUsTUFBTTZFLFFBQVUsQ0FDbkIsSUFBSVAsR0FBUUMsS0FBS0MsTUFDYk0sRUFBTyxRQUFTQSxLQUNsQixHQUFJTixHQUFNRCxLQUFLQyxNQUNYRSxHQUFRRixFQUFNRixHQUFTSCxFQUN2QlEsRUFBU1YsRUFBYVMsRUFFMUIsT0FEQVIsR0FBR2xFLE1BQU02RSxRQUFVLEVBQUlGLEVBQ25CVCxFQUFHbEUsTUFBTTZFLFFBQVUsT0FDckJYLEVBQUdsRSxNQUFNNkUsUUFBVSxPQUdyQnhHLHVCQUFzQnlHLEdBRXhCQSxXQUdJRSxHQUFHLFNBQVM5SSxFQUFRVSxFQUFPSixJQUNqQyxTQUFXeUksRUFBUUMsSUFTbEIsU0FBVUEsRUFBUUMsR0FDSSxnQkFBWjNJLElBQTBDLG1CQUFYSSxHQUF5QkEsRUFBT0osUUFBVTJJLElBQzlELGtCQUFYQyxTQUF5QkEsT0FBT0MsSUFBTUQsT0FBT0QsR0FDbkRELEVBQU9JLFdBQWFILEtBQ3ZCL0gsS0FBTSxXQUFlLFlBRXZCLFNBQVNtSSxHQUFpQkMsR0FDeEIsTUFBb0Isa0JBQU5BLElBQWlDLGdCQUFOQSxJQUF3QixPQUFOQSxFQUc3RCxRQUFTQyxHQUFXRCxHQUNsQixNQUFvQixrQkFBTkEsR0FrQ2hCLFFBQVNFLEdBQWFDLEdBQ3BCQyxFQUFvQkQsRUFHdEIsUUFBU0UsR0FBUUMsR0FDZkMsRUFBT0QsRUFZVCxRQUFTRSxLQUdQLE1BQU8sWUFDTCxNQUFPZixHQUFRZ0IsU0FBU0MsSUFLNUIsUUFBU0MsS0FDUCxNQUF5QixtQkFBZEMsR0FDRixXQUNMQSxFQUFVRixJQUlQRyxJQUdULFFBQVNDLEtBQ1AsR0FBSUMsR0FBYSxFQUNiQyxFQUFXLEdBQUlDLEdBQXdCUCxHQUN2Q1EsRUFBTzNKLFNBQVM0SixlQUFlLEdBR25DLE9BRkFILEdBQVNJLFFBQVFGLEdBQVFHLGVBQWUsSUFFakMsV0FDTEgsRUFBS0ksS0FBT1AsSUFBZUEsRUFBYSxHQUs1QyxRQUFTUSxLQUNQLEdBQUlDLEdBQVUsR0FBSUMsZUFFbEIsT0FEQUQsR0FBUUUsTUFBTUMsVUFBWWpCLEVBQ25CLFdBQ0wsTUFBT2MsR0FBUUksTUFBTUMsWUFBWSxJQUlyQyxRQUFTaEIsS0FHUCxHQUFJaUIsR0FBbUJDLFVBQ3ZCLE9BQU8sWUFDTCxNQUFPRCxHQUFpQnBCLEVBQU8sSUFLbkMsUUFBU0EsS0FDUCxJQUFLLEdBQUkvSixHQUFJLEVBQUdBLEVBQUlxTCxFQUFLckwsR0FBSyxFQUFHLENBQy9CLEdBQUlzTCxHQUFXQyxHQUFNdkwsR0FDakJ3TCxFQUFNRCxHQUFNdkwsRUFBSSxFQUVwQnNMLEdBQVNFLEdBRVRELEdBQU12TCxHQUFLK0YsT0FDWHdGLEdBQU12TCxFQUFJLEdBQUsrRixPQUdqQnNGLEVBQU0sRUFHUixRQUFTSSxLQUNQLElBQ0UsR0FBSS9MLEdBQUlLLEVBQ0oyTCxFQUFRaE0sRUFBRSxRQUVkLE9BREF1SyxHQUFZeUIsRUFBTUMsV0FBYUQsRUFBTUUsYUFDOUI1QixJQUNQLE1BQU96SyxHQUNQLE1BQU8ySyxNQWtCWCxRQUFTNUUsR0FBS3VHLEVBQWVDLEdBQzNCLEdBQUlDLEdBQWE5RCxVQUViK0QsRUFBUy9LLEtBRVRnTCxFQUFRLEdBQUloTCxNQUFLaUwsWUFBWUMsRUFFUHBHLFVBQXRCa0csRUFBTUcsS0FDUkMsRUFBWUosRUFHZCxJQUFJSyxHQUFTTixFQUFPTSxNQWFwQixPQVhJQSxJQUNGLFdBQ0UsR0FBSWhCLEdBQVdTLEVBQVdPLEVBQVMsRUFDbkMxQyxHQUFLLFdBQ0gsTUFBTzJDLEdBQWVELEVBQVFMLEVBQU9YLEVBQVVVLEVBQU9RLGNBSTFEQyxFQUFVVCxFQUFRQyxFQUFPSixFQUFlQyxHQUduQ0csRUFrQ1QsUUFBUzdHLEdBQVFzSCxHQUVmLEdBQUlDLEdBQWMxTCxJQUVsQixJQUFJeUwsR0FBNEIsZ0JBQVhBLElBQXVCQSxFQUFPUixjQUFnQlMsRUFDakUsTUFBT0QsRUFHVCxJQUFJRSxHQUFVLEdBQUlELEdBQVlSLEVBRTlCLE9BREFVLEdBQVNELEVBQVNGLEdBQ1hFLEVBS1QsUUFBU1QsTUFRVCxRQUFTVyxLQUNQLE1BQU8sSUFBSUMsV0FBVSw0Q0FHdkIsUUFBU0MsS0FDUCxNQUFPLElBQUlELFdBQVUsd0RBR3ZCLFFBQVNFLEdBQVFMLEdBQ2YsSUFDRSxNQUFPQSxHQUFRdEgsS0FDZixNQUFPNEgsR0FFUCxNQURBQyxJQUFlRCxNQUFRQSxFQUNoQkMsSUFJWCxRQUFTQyxHQUFROUgsRUFBTWpFLEVBQU9nTSxFQUFvQkMsR0FDaEQsSUFDRWhJLEVBQUtoRixLQUFLZSxFQUFPZ00sRUFBb0JDLEdBQ3JDLE1BQU8vTixHQUNQLE1BQU9BLElBSVgsUUFBU2dPLEdBQXNCWCxFQUFTWSxFQUFVbEksR0FDaERzRSxFQUFLLFNBQVVnRCxHQUNiLEdBQUlhLElBQVMsRUFDVFAsRUFBUUUsRUFBUTlILEVBQU1rSSxFQUFVLFNBQVVuTSxHQUN4Q29NLElBR0pBLEdBQVMsRUFDTEQsSUFBYW5NLEVBQ2Z3TCxFQUFTRCxFQUFTdkwsR0FFbEJxTSxFQUFRZCxFQUFTdkwsS0FFbEIsU0FBVXNNLEdBQ1BGLElBR0pBLEdBQVMsRUFFVEcsRUFBUWhCLEVBQVNlLEtBQ2hCLFlBQWNmLEVBQVFpQixRQUFVLHNCQUU5QkosR0FBVVAsSUFDYk8sR0FBUyxFQUNURyxFQUFRaEIsRUFBU00sS0FFbEJOLEdBR0wsUUFBU2tCLEdBQWtCbEIsRUFBU1ksR0FDOUJBLEVBQVNsQixTQUFXeUIsR0FDdEJMLEVBQVFkLEVBQVNZLEVBQVNoQixTQUNqQmdCLEVBQVNsQixTQUFXMEIsR0FDN0JKLEVBQVFoQixFQUFTWSxFQUFTaEIsU0FFMUJDLEVBQVVlLEVBQVV6SCxPQUFXLFNBQVUxRSxHQUN2QyxNQUFPd0wsR0FBU0QsRUFBU3ZMLElBQ3hCLFNBQVVzTSxHQUNYLE1BQU9DLEdBQVFoQixFQUFTZSxLQUs5QixRQUFTTSxHQUFvQnJCLEVBQVNzQixFQUFlQyxHQUMvQ0QsRUFBY2hDLGNBQWdCVSxFQUFRVixhQUFlaUMsSUFBVzdJLEdBQVE0SSxFQUFjaEMsWUFBWTlHLFVBQVlBLEVBQ2hIMEksRUFBa0JsQixFQUFTc0IsR0FFdkJDLElBQVdoQixHQUNiUyxFQUFRaEIsRUFBU08sR0FBZUQsT0FDWm5ILFNBQVhvSSxFQUNUVCxFQUFRZCxFQUFTc0IsR0FDUjVFLEVBQVc2RSxHQUNwQlosRUFBc0JYLEVBQVNzQixFQUFlQyxHQUU5Q1QsRUFBUWQsRUFBU3NCLEdBS3ZCLFFBQVNyQixHQUFTRCxFQUFTdkwsR0FDckJ1TCxJQUFZdkwsRUFDZHVNLEVBQVFoQixFQUFTRSxLQUNSMUQsRUFBaUIvSCxHQUMxQjRNLEVBQW9CckIsRUFBU3ZMLEVBQU80TCxFQUFRNUwsSUFFNUNxTSxFQUFRZCxFQUFTdkwsR0FJckIsUUFBUytNLEdBQWlCeEIsR0FDcEJBLEVBQVF5QixVQUNWekIsRUFBUXlCLFNBQVN6QixFQUFRSixTQUczQjhCLEVBQVExQixHQUdWLFFBQVNjLEdBQVFkLEVBQVN2TCxHQUNwQnVMLEVBQVFOLFNBQVdpQyxLQUl2QjNCLEVBQVFKLFFBQVVuTCxFQUNsQnVMLEVBQVFOLE9BQVN5QixHQUVtQixJQUFoQ25CLEVBQVE0QixhQUFhak8sUUFDdkJxSixFQUFLMEUsRUFBUzFCLElBSWxCLFFBQVNnQixHQUFRaEIsRUFBU2UsR0FDcEJmLEVBQVFOLFNBQVdpQyxLQUd2QjNCLEVBQVFOLE9BQVMwQixHQUNqQnBCLEVBQVFKLFFBQVVtQixFQUVsQi9ELEVBQUt3RSxFQUFrQnhCLElBR3pCLFFBQVNILEdBQVVULEVBQVFDLEVBQU9KLEVBQWVDLEdBQy9DLEdBQUkwQyxHQUFleEMsRUFBT3dDLGFBQ3RCak8sRUFBU2lPLEVBQWFqTyxNQUUxQnlMLEdBQU9xQyxTQUFXLEtBRWxCRyxFQUFhak8sR0FBVTBMLEVBQ3ZCdUMsRUFBYWpPLEVBQVN3TixJQUFhbEMsRUFDbkMyQyxFQUFhak8sRUFBU3lOLElBQVlsQyxFQUVuQixJQUFYdkwsR0FBZ0J5TCxFQUFPTSxRQUN6QjFDLEVBQUswRSxFQUFTdEMsR0FJbEIsUUFBU3NDLEdBQVExQixHQUNmLEdBQUk2QixHQUFjN0IsRUFBUTRCLGFBQ3RCRSxFQUFVOUIsRUFBUU4sTUFFdEIsSUFBMkIsSUFBdkJtQyxFQUFZbE8sT0FBaEIsQ0FRQSxJQUFLLEdBSkQwTCxHQUFRbEcsT0FDUnVGLEVBQVd2RixPQUNYNEksRUFBUy9CLEVBQVFKLFFBRVp4TSxFQUFJLEVBQUdBLEVBQUl5TyxFQUFZbE8sT0FBUVAsR0FBSyxFQUMzQ2lNLEVBQVF3QyxFQUFZek8sR0FDcEJzTCxFQUFXbUQsRUFBWXpPLEVBQUkwTyxHQUV2QnpDLEVBQ0ZNLEVBQWVtQyxFQUFTekMsRUFBT1gsRUFBVXFELEdBRXpDckQsRUFBU3FELEVBSWIvQixHQUFRNEIsYUFBYWpPLE9BQVMsR0FHaEMsUUFBU3FPLEtBQ1AzTixLQUFLaU0sTUFBUSxLQUtmLFFBQVMyQixHQUFTdkQsRUFBVXFELEdBQzFCLElBQ0UsTUFBT3JELEdBQVNxRCxHQUNoQixNQUFPcFAsR0FFUCxNQURBdVAsSUFBZ0I1QixNQUFRM04sRUFDakJ1UCxJQUlYLFFBQVN2QyxHQUFlbUMsRUFBUzlCLEVBQVN0QixFQUFVcUQsR0FDbEQsR0FBSUksR0FBY3pGLEVBQVdnQyxHQUN6QmpLLEVBQVEwRSxPQUNSbUgsRUFBUW5ILE9BQ1JpSixFQUFZakosT0FDWmtKLEVBQVNsSixNQUViLElBQUlnSixHQVdGLEdBVkExTixFQUFRd04sRUFBU3ZELEVBQVVxRCxHQUV2QnROLElBQVV5TixJQUNaRyxHQUFTLEVBQ1QvQixFQUFRN0wsRUFBTTZMLE1BQ2Q3TCxFQUFRLE1BRVIyTixHQUFZLEVBR1ZwQyxJQUFZdkwsRUFFZCxXQURBdU0sR0FBUWhCLEVBQVNJLFNBSW5CM0wsR0FBUXNOLEVBQ1JLLEdBQVksQ0FHVnBDLEdBQVFOLFNBQVdpQyxLQUVaUSxHQUFlQyxFQUN0Qm5DLEVBQVNELEVBQVN2TCxHQUNUNE4sRUFDVHJCLEVBQVFoQixFQUFTTSxHQUNSd0IsSUFBWVgsR0FDckJMLEVBQVFkLEVBQVN2TCxHQUNScU4sSUFBWVYsSUFDckJKLEVBQVFoQixFQUFTdkwsSUFJdkIsUUFBUzZOLEdBQWtCdEMsRUFBU3VDLEdBQ2xDLElBQ0VBLEVBQVMsU0FBd0I5TixHQUMvQndMLEVBQVNELEVBQVN2TCxJQUNqQixTQUF1QnNNLEdBQ3hCQyxFQUFRaEIsRUFBU2UsS0FFbkIsTUFBT3BPLEdBQ1BxTyxFQUFRaEIsRUFBU3JOLElBS3JCLFFBQVM2UCxLQUNQLE1BQU9DLE1BR1QsUUFBU2hELEdBQVlPLEdBQ25CQSxFQUFRUixJQUFjaUQsS0FDdEJ6QyxFQUFRTixPQUFTdkcsT0FDakI2RyxFQUFRSixRQUFVekcsT0FDbEI2RyxFQUFRNEIsZ0JBR1YsUUFBU2MsR0FBVzNDLEVBQWE0QyxHQUMvQnRPLEtBQUt1TyxxQkFBdUI3QyxFQUM1QjFMLEtBQUsyTCxRQUFVLEdBQUlELEdBQVlSLEdBRTFCbEwsS0FBSzJMLFFBQVFSLEtBQ2hCQyxFQUFZcEwsS0FBSzJMLFNBR2Y2QyxFQUFRRixJQUNWdE8sS0FBS3lPLE9BQVNILEVBQ2R0TyxLQUFLVixPQUFTZ1AsRUFBTWhQLE9BQ3BCVSxLQUFLME8sV0FBYUosRUFBTWhQLE9BRXhCVSxLQUFLdUwsUUFBVSxHQUFJbkksT0FBTXBELEtBQUtWLFFBRVYsSUFBaEJVLEtBQUtWLE9BQ1BtTixFQUFRek0sS0FBSzJMLFFBQVMzTCxLQUFLdUwsVUFFM0J2TCxLQUFLVixPQUFTVSxLQUFLVixRQUFVLEVBQzdCVSxLQUFLMk8sYUFDbUIsSUFBcEIzTyxLQUFLME8sWUFDUGpDLEVBQVF6TSxLQUFLMkwsUUFBUzNMLEtBQUt1TCxXQUkvQm9CLEVBQVEzTSxLQUFLMkwsUUFBU2lELEtBSTFCLFFBQVNBLEtBQ1AsTUFBTyxJQUFJM1AsT0FBTSwyQ0FpSG5CLFFBQVM0UCxHQUFJQyxHQUNYLE1BQU8sSUFBSVQsR0FBV3JPLEtBQU04TyxHQUFTbkQsUUFvRXZDLFFBQVNvRCxHQUFLRCxHQUVaLEdBQUlwRCxHQUFjMUwsSUFFbEIsT0FLUyxJQUFJMEwsR0FMUjhDLEVBQVFNLEdBS1ksU0FBVTNLLEVBQVM2SyxHQUV4QyxJQUFLLEdBREQxUCxHQUFTd1AsRUFBUXhQLE9BQ1pQLEVBQUksRUFBR0EsRUFBSU8sRUFBUVAsSUFDMUIyTSxFQUFZdkgsUUFBUTJLLEVBQVEvUCxJQUFJc0YsS0FBS0YsRUFBUzZLLElBUDNCLFNBQVVDLEVBQUdELEdBQ2xDLE1BQU9BLEdBQU8sR0FBSWxELFdBQVUsc0NBOENsQyxRQUFTa0QsR0FBT3RDLEdBRWQsR0FBSWhCLEdBQWMxTCxLQUNkMkwsRUFBVSxHQUFJRCxHQUFZUixFQUU5QixPQURBeUIsR0FBUWhCLEVBQVNlLEdBQ1ZmLEVBR1QsUUFBU3VELEtBQ1AsS0FBTSxJQUFJcEQsV0FBVSxzRkFHdEIsUUFBU3FELEtBQ1AsS0FBTSxJQUFJckQsV0FBVSx5SEEwR3RCLFFBQVM1SCxHQUFRZ0ssR0FDZmxPLEtBQUttTCxJQUFjZ0QsSUFDbkJuTyxLQUFLdUwsUUFBVXZMLEtBQUtxTCxPQUFTdkcsT0FDN0I5RSxLQUFLdU4sZ0JBRURyQyxJQUFTZ0QsSUFDUyxrQkFBYkEsSUFBMkJnQixJQUNsQ2xQLGVBQWdCa0UsR0FBVStKLEVBQWtCak8sS0FBTWtPLEdBQVlpQixLQWtQbEUsUUFBUzlKLEtBQ0wsR0FBSStKLEdBQVF0SyxNQUVaLElBQXNCLG1CQUFYZ0QsR0FDUHNILEVBQVF0SCxNQUNMLElBQW9CLG1CQUFUdUgsTUFDZEQsRUFBUUMsU0FFUixLQUNJRCxFQUFRRSxTQUFTLGlCQUNuQixNQUFPaFIsR0FDTCxLQUFNLElBQUlXLE9BQU0sNEVBSXhCLEdBQUlzUSxHQUFJSCxFQUFNbEwsT0FFZCxJQUFJcUwsRUFBRyxDQUNILEdBQUlDLEdBQWtCLElBQ3RCLEtBQ0lBLEVBQWtCdFAsT0FBT3VQLFVBQVVDLFNBQVNyUSxLQUFLa1EsRUFBRXBMLFdBQ3JELE1BQU83RixJQUlULEdBQXdCLHFCQUFwQmtSLElBQTJDRCxFQUFFSSxLQUM3QyxPQUlSUCxFQUFNbEwsUUFBVUEsRUFwbUNwQixHQUFJMEwsR0FBVzlLLE1BTWI4SyxHQUxHeE0sTUFBTW9MLFFBS0VwTCxNQUFNb0wsUUFKTixTQUFVcEcsR0FDbkIsTUFBNkMsbUJBQXRDbEksT0FBT3VQLFVBQVVDLFNBQVNyUSxLQUFLK0ksR0FNMUMsSUFBSW9HLEdBQVVvQixFQUVWeEYsRUFBTSxFQUNOcEIsRUFBWWxFLE9BQ1owRCxFQUFvQjFELE9BRXBCNkQsRUFBTyxTQUFjMEIsRUFBVUUsR0FDakNELEdBQU1GLEdBQU9DLEVBQ2JDLEdBQU1GLEVBQU0sR0FBS0csRUFDakJILEdBQU8sRUFDSyxJQUFSQSxJQUlFNUIsRUFDRkEsRUFBa0JNLEdBRWxCK0csT0FhRkMsRUFBa0MsbUJBQVhqUCxRQUF5QkEsT0FBU2lFLE9BQ3pEaUwsRUFBZ0JELE1BQ2hCekcsRUFBMEIwRyxFQUFjQyxrQkFBb0JELEVBQWNFLHVCQUMxRUMsR0FBeUIsbUJBQVRiLE9BQTJDLG1CQUFaeEgsSUFBMkQsd0JBQTNCNkgsU0FBU3JRLEtBQUt3SSxHQUc3RnNJLEdBQXdDLG1CQUF0QkMsb0JBQThELG1CQUFsQkMsZ0JBQTJELG1CQUFuQnhHLGdCQW1EdEdTLEdBQVEsR0FBSWxILE9BQU0sS0EwQmxCeU0sR0FBZ0IvSyxNQUdsQitLLElBREVLLEdBQ2N0SCxJQUNQUyxFQUNPSCxJQUNQaUgsR0FDT3hHLElBQ1c3RSxTQUFsQmdMLEdBQWtELGtCQUFaaFIsR0FDL0IwTCxJQUVBdkIsR0EwRWxCLElBQUlrQyxJQUFhbUYsS0FBS0MsU0FBU2IsU0FBUyxJQUFJYyxVQUFVLElBSWxEbEQsR0FBVSxPQUNWUixHQUFZLEVBQ1pDLEdBQVcsRUFFWGIsR0FBaUIsR0FBSXlCLEdBNEtyQkUsR0FBa0IsR0FBSUYsR0ErRHRCUyxHQUFLLENBeXFCVCxPQTVuQkFDLEdBQVdvQixVQUFVZCxXQUFhLFdBSWhDLElBQUssR0FIRHJQLEdBQVNVLEtBQUtWLE9BQ2RtUCxFQUFTek8sS0FBS3lPLE9BRVQxUCxFQUFJLEVBQUdpQixLQUFLcUwsU0FBV2lDLElBQVd2TyxFQUFJTyxFQUFRUCxJQUNyRGlCLEtBQUt5USxXQUFXaEMsRUFBTzFQLEdBQUlBLElBSS9Cc1AsRUFBV29CLFVBQVVnQixXQUFhLFNBQVVDLEVBQU8zUixHQUNqRCxHQUFJNFIsR0FBSTNRLEtBQUt1TyxxQkFDVHFDLEVBQVlELEVBQUV4TSxPQUVsQixJQUFJeU0sSUFBY3pNLEVBQVMsQ0FDekIsR0FBSTBNLEdBQVE3RSxFQUFRMEUsRUFFcEIsSUFBSUcsSUFBVXhNLEdBQVFxTSxFQUFNckYsU0FBV2lDLEdBQ3JDdE4sS0FBSzhRLFdBQVdKLEVBQU1yRixPQUFRdE0sRUFBRzJSLEVBQU1uRixhQUNsQyxJQUFxQixrQkFBVnNGLEdBQ2hCN1EsS0FBSzBPLGFBQ0wxTyxLQUFLdUwsUUFBUXhNLEdBQUsyUixNQUNiLElBQUlDLElBQU16TSxFQUFTLENBQ3hCLEdBQUl5SCxHQUFVLEdBQUlnRixHQUFFekYsRUFDcEI4QixHQUFvQnJCLEVBQVMrRSxFQUFPRyxHQUNwQzdRLEtBQUsrUSxjQUFjcEYsRUFBUzVNLE9BRTVCaUIsTUFBSytRLGNBQWMsR0FBSUosR0FBRSxTQUFVQyxHQUNqQyxNQUFPQSxHQUFVRixLQUNmM1IsT0FHTmlCLE1BQUsrUSxjQUFjSCxFQUFVRixHQUFRM1IsSUFJekNzUCxFQUFXb0IsVUFBVXFCLFdBQWEsU0FBVUUsRUFBT2pTLEVBQUdxQixHQUNwRCxHQUFJdUwsR0FBVTNMLEtBQUsyTCxPQUVmQSxHQUFRTixTQUFXaUMsS0FDckJ0TixLQUFLME8sYUFFRHNDLElBQVVqRSxHQUNaSixFQUFRaEIsRUFBU3ZMLEdBRWpCSixLQUFLdUwsUUFBUXhNLEdBQUtxQixHQUlFLElBQXBCSixLQUFLME8sWUFDUGpDLEVBQVFkLEVBQVMzTCxLQUFLdUwsVUFJMUI4QyxFQUFXb0IsVUFBVXNCLGNBQWdCLFNBQVVwRixFQUFTNU0sR0FDdEQsR0FBSWtTLEdBQWFqUixJQUVqQndMLEdBQVVHLEVBQVM3RyxPQUFXLFNBQVUxRSxHQUN0QyxNQUFPNlEsR0FBV0gsV0FBV2hFLEdBQVcvTixFQUFHcUIsSUFDMUMsU0FBVXNNLEdBQ1gsTUFBT3VFLEdBQVdILFdBQVcvRCxHQUFVaE8sRUFBRzJOLE1BOFM5Q3hJLEVBQVEySyxJQUFNQSxFQUNkM0ssRUFBUTZLLEtBQU9BLEVBQ2Y3SyxFQUFRQyxRQUFVQSxFQUNsQkQsRUFBUThLLE9BQVNBLEVBQ2pCOUssRUFBUWdOLGNBQWdCNUksRUFDeEJwRSxFQUFRaU4sU0FBVzFJLEVBQ25CdkUsRUFBUWtOLE1BQVF6SSxFQUVoQnpFLEVBQVF1TCxXQUNOeEUsWUFBYS9HLEVBbU1iRyxLQUFNQSxFQTZCTk0sTUFBUyxTQUFnQmtHLEdBQ3ZCLE1BQU83SyxNQUFLcUUsS0FBSyxLQUFNd0csS0FzQzNCM0csRUFBUW1CLFNBQVdBLEVBQ25CbkIsRUFBUUEsUUFBVUEsRUFFWEEsTUFJSjdFLEtBQUtXLEtBQUtsQixFQUFRLFlBQThCLG1CQUFYZ0osUUFBeUJBLE9BQXlCLG1CQUFUdUgsTUFBdUJBLEtBQXlCLG1CQUFYeE8sUUFBeUJBLGFBRTVJd1EsU0FBVyxJQUFJQyxHQUFHLFNBQVN4UyxFQUFRVSxFQUFPSixHQUs3Q04sRUFBUSxnQkFDUlUsRUFBT0osUUFBVWlRLEtBQUtqTCxNQUFNbU4sS0FBS2xDLFFBRTlCbUMsZUFBZSxLQUFLQyxHQUFHLFNBQVMzUyxFQUFRVSxFQUFPSixHQVlsRCxRQUFTc1MsS0FDTCxLQUFNLElBQUl6UyxPQUFNLG1DQUVwQixRQUFTMFMsS0FDTCxLQUFNLElBQUkxUyxPQUFNLHFDQXNCcEIsUUFBUzJTLEdBQVdDLEdBQ2hCLEdBQUlDLElBQXFCM0gsV0FFckIsTUFBT0EsWUFBVzBILEVBQUssRUFHM0IsS0FBS0MsSUFBcUJKLElBQXFCSSxJQUFxQjNILFdBRWhFLE1BREEySCxHQUFtQjNILFdBQ1pBLFdBQVcwSCxFQUFLLEVBRTNCLEtBRUksTUFBT0MsR0FBaUJELEVBQUssR0FDL0IsTUFBTXZULEdBQ0osSUFFSSxNQUFPd1QsR0FBaUJ6UyxLQUFLLEtBQU13UyxFQUFLLEdBQzFDLE1BQU12VCxHQUVKLE1BQU93VCxHQUFpQnpTLEtBQUtXLEtBQU02UixFQUFLLEtBTXBELFFBQVNFLEdBQWdCQyxHQUNyQixHQUFJQyxJQUF1QkMsYUFFdkIsTUFBT0EsY0FBYUYsRUFHeEIsS0FBS0MsSUFBdUJOLElBQXdCTSxJQUF1QkMsYUFFdkUsTUFEQUQsR0FBcUJDLGFBQ2RBLGFBQWFGLEVBRXhCLEtBRUksTUFBT0MsR0FBbUJELEdBQzVCLE1BQU8xVCxHQUNMLElBRUksTUFBTzJULEdBQW1CNVMsS0FBSyxLQUFNMlMsR0FDdkMsTUFBTzFULEdBR0wsTUFBTzJULEdBQW1CNVMsS0FBS1csS0FBTWdTLEtBWWpELFFBQVNHLEtBQ0FDLEdBQWFDLElBR2xCRCxHQUFXLEVBQ1BDLEVBQWEvUyxPQUNiZ0wsRUFBUStILEVBQWFDLE9BQU9oSSxHQUU1QmlJLEdBQWEsRUFFYmpJLEVBQU1oTCxRQUNOa1QsS0FJUixRQUFTQSxLQUNMLElBQUlKLEVBQUosQ0FHQSxHQUFJSyxHQUFVYixFQUFXTyxFQUN6QkMsSUFBVyxDQUdYLEtBREEsR0FBSWhJLEdBQU1FLEVBQU1oTCxPQUNWOEssR0FBSyxDQUdQLElBRkFpSSxFQUFlL0gsRUFDZkEsT0FDU2lJLEVBQWFuSSxHQUNkaUksR0FDQUEsRUFBYUUsR0FBWUcsS0FHakNILElBQWEsRUFDYm5JLEVBQU1FLEVBQU1oTCxPQUVoQitTLEVBQWUsS0FDZkQsR0FBVyxFQUNYTCxFQUFnQlUsSUFpQnBCLFFBQVNFLEdBQUtkLEVBQUtlLEdBQ2Y1UyxLQUFLNlIsSUFBTUEsRUFDWDdSLEtBQUs0UyxNQUFRQSxFQVlqQixRQUFTMUgsTUFoS1QsR0FPSTRHLEdBQ0FHLEVBUkFwSyxFQUFVckksRUFBT0osWUFnQnBCLFdBQ0csSUFFUTBTLEVBRHNCLGtCQUFmM0gsWUFDWUEsV0FFQXVILEVBRXpCLE1BQU9wVCxHQUNMd1QsRUFBbUJKLEVBRXZCLElBRVFPLEVBRHdCLGtCQUFqQkMsY0FDY0EsYUFFQVAsRUFFM0IsTUFBT3JULEdBQ0wyVCxFQUFxQk4sS0F1RDdCLElBRUlVLEdBRkEvSCxLQUNBOEgsR0FBVyxFQUVYRyxHQUFhLENBeUNqQjFLLEdBQVFnQixTQUFXLFNBQVVnSixHQUN6QixHQUFJZ0IsR0FBTyxHQUFJelAsT0FBTTRELFVBQVUxSCxPQUFTLEVBQ3hDLElBQUkwSCxVQUFVMUgsT0FBUyxFQUNuQixJQUFLLEdBQUlQLEdBQUksRUFBR0EsRUFBSWlJLFVBQVUxSCxPQUFRUCxJQUNsQzhULEVBQUs5VCxFQUFJLEdBQUtpSSxVQUFVakksRUFHaEN1TCxHQUFNd0ksS0FBSyxHQUFJSCxHQUFLZCxFQUFLZ0IsSUFDSixJQUFqQnZJLEVBQU1oTCxRQUFpQjhTLEdBQ3ZCUixFQUFXWSxJQVNuQkcsRUFBS2xELFVBQVVpRCxJQUFNLFdBQ2pCMVMsS0FBSzZSLElBQUlrQixNQUFNLEtBQU0vUyxLQUFLNFMsUUFFOUIvSyxFQUFRekIsTUFBUSxVQUNoQnlCLEVBQVFtTCxTQUFVLEVBQ2xCbkwsRUFBUW9MLE9BQ1JwTCxFQUFRcUwsUUFDUnJMLEVBQVFzTCxRQUFVLEdBQ2xCdEwsRUFBUXVMLFlBSVJ2TCxFQUFRd0wsR0FBS25JLEVBQ2JyRCxFQUFReUwsWUFBY3BJLEVBQ3RCckQsRUFBUTBMLEtBQU9ySSxFQUNmckQsRUFBUTJMLElBQU10SSxFQUNkckQsRUFBUTRMLGVBQWlCdkksRUFDekJyRCxFQUFRNkwsbUJBQXFCeEksRUFDN0JyRCxFQUFROEwsS0FBT3pJLEVBRWZyRCxFQUFRK0wsUUFBVSxTQUFVQyxHQUN4QixLQUFNLElBQUk1VSxPQUFNLHFDQUdwQjRJLEVBQVFpTSxJQUFNLFdBQWMsTUFBTyxLQUNuQ2pNLEVBQVFrTSxNQUFRLFNBQVVDLEdBQ3RCLEtBQU0sSUFBSS9VLE9BQU0sbUNBRXBCNEksRUFBUW9NLE1BQVEsV0FBYSxNQUFPLFNBRTlCQyxJQUFJLFNBQVNwVixFQUFRVSxFQUFPSixJQUNsQyxTQUFVaVEsR0FDUixZQTJDQSxTQUFTOEUsR0FBY04sR0FJckIsR0FIb0IsZ0JBQVRBLEtBQ1RBLEVBQU9PLE9BQU9QLElBRVosNkJBQTZCUSxLQUFLUixHQUNwQyxLQUFNLElBQUkvSCxXQUFVLHlDQUV0QixPQUFPK0gsR0FBS1MsY0FHZCxRQUFTQyxHQUFlblUsR0FJdEIsTUFIcUIsZ0JBQVZBLEtBQ1RBLEVBQVFnVSxPQUFPaFUsSUFFVkEsRUFJVCxRQUFTb1UsR0FBWUMsR0FDbkIsR0FBSUMsSUFDRkMsS0FBTSxXQUNKLEdBQUl2VSxHQUFRcVUsRUFBTUcsT0FDbEIsUUFBUUMsS0FBZ0IvUCxTQUFWMUUsRUFBcUJBLE1BQU9BLElBVTlDLE9BTkkwVSxHQUFRQyxXQUNWTCxFQUFTTSxPQUFPTixVQUFZLFdBQzFCLE1BQU9BLEtBSUpBLEVBR1QsUUFBU08sR0FBUUMsR0FDZmxWLEtBQUttVixPQUVERCxZQUFtQkQsR0FDckJDLEVBQVEzUixRQUFRLFNBQVNuRCxFQUFPeVQsR0FDOUI3VCxLQUFLb1YsT0FBT3ZCLEVBQU16VCxJQUNqQkosTUFFTWtWLEdBQ1RoVixPQUFPbVYsb0JBQW9CSCxHQUFTM1IsUUFBUSxTQUFTc1EsR0FDbkQ3VCxLQUFLb1YsT0FBT3ZCLEVBQU1xQixFQUFRckIsS0FDekI3VCxNQTBEUCxRQUFTc1YsR0FBU0MsR0FDaEIsTUFBSUEsR0FBS0MsU0FDQXRSLFFBQVE4SyxPQUFPLEdBQUlsRCxXQUFVLHNCQUV0Q3lKLEVBQUtDLFVBQVcsR0FHbEIsUUFBU0MsR0FBZ0JDLEdBQ3ZCLE1BQU8sSUFBSXhSLFNBQVEsU0FBU0MsRUFBUzZLLEdBQ25DMEcsRUFBT0MsT0FBUyxXQUNkeFIsRUFBUXVSLEVBQU9FLFNBRWpCRixFQUFPRyxRQUFVLFdBQ2Y3RyxFQUFPMEcsRUFBT3pKLFVBS3BCLFFBQVM2SixHQUFzQkMsR0FDN0IsR0FBSUwsR0FBUyxHQUFJTSxZQUNickssRUFBVThKLEVBQWdCQyxFQUU5QixPQURBQSxHQUFPTyxrQkFBa0JGLEdBQ2xCcEssRUFHVCxRQUFTdUssR0FBZUgsR0FDdEIsR0FBSUwsR0FBUyxHQUFJTSxZQUNickssRUFBVThKLEVBQWdCQyxFQUU5QixPQURBQSxHQUFPUyxXQUFXSixHQUNYcEssRUFHVCxRQUFTeUssR0FBc0JDLEdBSTdCLElBQUssR0FIREMsR0FBTyxHQUFJQyxZQUFXRixHQUN0QkcsRUFBUSxHQUFJcFQsT0FBTWtULEVBQUtoWCxRQUVsQlAsRUFBSSxFQUFHQSxFQUFJdVgsRUFBS2hYLE9BQVFQLElBQy9CeVgsRUFBTXpYLEdBQUtxVixPQUFPcUMsYUFBYUgsRUFBS3ZYLEdBRXRDLE9BQU95WCxHQUFNRSxLQUFLLElBR3BCLFFBQVNDLEdBQVlOLEdBQ25CLEdBQUlBLEVBQUlPLE1BQ04sTUFBT1AsR0FBSU8sTUFBTSxFQUVqQixJQUFJTixHQUFPLEdBQUlDLFlBQVdGLEVBQUlRLFdBRTlCLE9BREFQLEdBQUtRLElBQUksR0FBSVAsWUFBV0YsSUFDakJDLEVBQUtTLE9BSWhCLFFBQVNDLEtBMEZQLE1BekZBaFgsTUFBS3dWLFVBQVcsRUFFaEJ4VixLQUFLaVgsVUFBWSxTQUFTMUIsR0FFeEIsR0FEQXZWLEtBQUtrWCxVQUFZM0IsRUFDWkEsRUFFRSxHQUFvQixnQkFBVEEsR0FDaEJ2VixLQUFLbVgsVUFBWTVCLE1BQ1osSUFBSVQsRUFBUWlCLE1BQVFxQixLQUFLM0gsVUFBVTRILGNBQWM5QixHQUN0RHZWLEtBQUtzWCxVQUFZL0IsTUFDWixJQUFJVCxFQUFReUMsVUFBWUMsU0FBUy9ILFVBQVU0SCxjQUFjOUIsR0FDOUR2VixLQUFLeVgsY0FBZ0JsQyxNQUNoQixJQUFJVCxFQUFRNEMsY0FBZ0JDLGdCQUFnQmxJLFVBQVU0SCxjQUFjOUIsR0FDekV2VixLQUFLbVgsVUFBWTVCLEVBQUs3RixlQUNqQixJQUFJb0YsRUFBUThDLGFBQWU5QyxFQUFRaUIsTUFBUThCLEVBQVd0QyxHQUMzRHZWLEtBQUs4WCxpQkFBbUJuQixFQUFZcEIsRUFBS3dCLFFBRXpDL1csS0FBS2tYLFVBQVksR0FBSUUsT0FBTXBYLEtBQUs4WCx1QkFDM0IsQ0FBQSxJQUFJaEQsRUFBUThDLGNBQWdCRyxZQUFZdEksVUFBVTRILGNBQWM5QixLQUFTeUMsRUFBa0J6QyxHQUdoRyxLQUFNLElBQUl0VyxPQUFNLDRCQUZoQmUsTUFBSzhYLGlCQUFtQm5CLEVBQVlwQixPQWRwQ3ZWLE1BQUttWCxVQUFZLEVBbUJkblgsTUFBS2tWLFFBQVErQyxJQUFJLGtCQUNBLGdCQUFUMUMsR0FDVHZWLEtBQUtrVixRQUFRNEIsSUFBSSxlQUFnQiw0QkFDeEI5VyxLQUFLc1gsV0FBYXRYLEtBQUtzWCxVQUFVWSxLQUMxQ2xZLEtBQUtrVixRQUFRNEIsSUFBSSxlQUFnQjlXLEtBQUtzWCxVQUFVWSxNQUN2Q3BELEVBQVE0QyxjQUFnQkMsZ0JBQWdCbEksVUFBVTRILGNBQWM5QixJQUN6RXZWLEtBQUtrVixRQUFRNEIsSUFBSSxlQUFnQixxREFLbkNoQyxFQUFRaUIsT0FDVi9WLEtBQUsrVixLQUFPLFdBQ1YsR0FBSW9DLEdBQVc3QyxFQUFTdFYsS0FDeEIsSUFBSW1ZLEVBQ0YsTUFBT0EsRUFHVCxJQUFJblksS0FBS3NYLFVBQ1AsTUFBT3BULFNBQVFDLFFBQVFuRSxLQUFLc1gsVUFDdkIsSUFBSXRYLEtBQUs4WCxpQkFDZCxNQUFPNVQsU0FBUUMsUUFBUSxHQUFJaVQsT0FBTXBYLEtBQUs4WCxtQkFDakMsSUFBSTlYLEtBQUt5WCxjQUNkLEtBQU0sSUFBSXhZLE9BQU0sdUNBRWhCLE9BQU9pRixTQUFRQyxRQUFRLEdBQUlpVCxPQUFNcFgsS0FBS21YLGNBSTFDblgsS0FBSzRYLFlBQWMsV0FDakIsTUFBSTVYLE1BQUs4WCxpQkFDQXhDLEVBQVN0VixPQUFTa0UsUUFBUUMsUUFBUW5FLEtBQUs4WCxrQkFFdkM5WCxLQUFLK1YsT0FBTzFSLEtBQUt5UixLQUs5QjlWLEtBQUt3RSxLQUFPLFdBQ1YsR0FBSTJULEdBQVc3QyxFQUFTdFYsS0FDeEIsSUFBSW1ZLEVBQ0YsTUFBT0EsRUFHVCxJQUFJblksS0FBS3NYLFVBQ1AsTUFBT3BCLEdBQWVsVyxLQUFLc1gsVUFDdEIsSUFBSXRYLEtBQUs4WCxpQkFDZCxNQUFPNVQsU0FBUUMsUUFBUWlTLEVBQXNCcFcsS0FBSzhYLGtCQUM3QyxJQUFJOVgsS0FBS3lYLGNBQ2QsS0FBTSxJQUFJeFksT0FBTSx1Q0FFaEIsT0FBT2lGLFNBQVFDLFFBQVFuRSxLQUFLbVgsWUFJNUJyQyxFQUFReUMsV0FDVnZYLEtBQUt1WCxTQUFXLFdBQ2QsTUFBT3ZYLE1BQUt3RSxPQUFPSCxLQUFLK1QsS0FJNUJwWSxLQUFLcVksS0FBTyxXQUNWLE1BQU9yWSxNQUFLd0UsT0FBT0gsS0FBS2lVLEtBQUtDLFFBR3hCdlksS0FNVCxRQUFTd1ksR0FBZ0JDLEdBQ3ZCLEdBQUlDLEdBQVVELEVBQU9FLGFBQ3JCLE9BQVFDLEdBQVFDLFFBQVFILElBQVcsRUFBTUEsRUFBVUQsRUFHckQsUUFBU0ssR0FBUXhLLEVBQU95SyxHQUN0QkEsRUFBVUEsS0FDVixJQUFJeEQsR0FBT3dELEVBQVF4RCxJQUVuQixJQUFJakgsWUFBaUJ3SyxHQUFTLENBQzVCLEdBQUl4SyxFQUFNa0gsU0FDUixLQUFNLElBQUkxSixXQUFVLGVBRXRCOUwsTUFBS2dFLElBQU1zSyxFQUFNdEssSUFDakJoRSxLQUFLZ1osWUFBYzFLLEVBQU0wSyxZQUNwQkQsRUFBUTdELFVBQ1hsVixLQUFLa1YsUUFBVSxHQUFJRCxHQUFRM0csRUFBTTRHLFVBRW5DbFYsS0FBS3lZLE9BQVNuSyxFQUFNbUssT0FDcEJ6WSxLQUFLaVosS0FBTzNLLEVBQU0ySyxLQUNiMUQsR0FBMkIsTUFBbkJqSCxFQUFNNEksWUFDakIzQixFQUFPakgsRUFBTTRJLFVBQ2I1SSxFQUFNa0gsVUFBVyxPQUduQnhWLE1BQUtnRSxJQUFNb1EsT0FBTzlGLEVBV3BCLElBUkF0TyxLQUFLZ1osWUFBY0QsRUFBUUMsYUFBZWhaLEtBQUtnWixhQUFlLFFBQzFERCxFQUFRN0QsU0FBWWxWLEtBQUtrVixVQUMzQmxWLEtBQUtrVixRQUFVLEdBQUlELEdBQVE4RCxFQUFRN0QsVUFFckNsVixLQUFLeVksT0FBU0QsRUFBZ0JPLEVBQVFOLFFBQVV6WSxLQUFLeVksUUFBVSxPQUMvRHpZLEtBQUtpWixLQUFPRixFQUFRRSxNQUFRalosS0FBS2laLE1BQVEsS0FDekNqWixLQUFLa1osU0FBVyxNQUVLLFFBQWhCbFosS0FBS3lZLFFBQW9DLFNBQWhCelksS0FBS3lZLFNBQXNCbEQsRUFDdkQsS0FBTSxJQUFJekosV0FBVSw0Q0FFdEI5TCxNQUFLaVgsVUFBVTFCLEdBT2pCLFFBQVM2QyxHQUFPN0MsR0FDZCxHQUFJNEQsR0FBTyxHQUFJM0IsU0FTZixPQVJBakMsR0FBSzZELE9BQU9DLE1BQU0sS0FBSzlWLFFBQVEsU0FBUytWLEdBQ3RDLEdBQUlBLEVBQU8sQ0FDVCxHQUFJRCxHQUFRQyxFQUFNRCxNQUFNLEtBQ3BCeEYsRUFBT3dGLEVBQU16RSxRQUFRMkUsUUFBUSxNQUFPLEtBQ3BDblosRUFBUWlaLEVBQU0zQyxLQUFLLEtBQUs2QyxRQUFRLE1BQU8sSUFDM0NKLEdBQUsvRCxPQUFPb0UsbUJBQW1CM0YsR0FBTzJGLG1CQUFtQnBaLE9BR3REK1ksRUFHVCxRQUFTTSxHQUFhQyxHQUNwQixHQUFJeEUsR0FBVSxHQUFJRCxFQVNsQixPQVJBeUUsR0FBV0wsTUFBTSxTQUFTOVYsUUFBUSxTQUFTb1csR0FDekMsR0FBSUMsR0FBUUQsRUFBS04sTUFBTSxLQUNuQlEsRUFBTUQsRUFBTWhGLFFBQVF3RSxNQUN4QixJQUFJUyxFQUFLLENBQ1AsR0FBSXpaLEdBQVF3WixFQUFNbEQsS0FBSyxLQUFLMEMsTUFDNUJsRSxHQUFRRSxPQUFPeUUsRUFBS3paLE1BR2pCOFUsRUFLVCxRQUFTNEUsR0FBU0MsRUFBVWhCLEdBQ3JCQSxJQUNIQSxNQUdGL1ksS0FBS2tZLEtBQU8sVUFDWmxZLEtBQUtnYSxPQUFTLFVBQVlqQixHQUFVQSxFQUFRaUIsT0FBUyxJQUNyRGhhLEtBQUt1RSxHQUFLdkUsS0FBS2dhLFFBQVUsS0FBT2hhLEtBQUtnYSxPQUFTLElBQzlDaGEsS0FBS2lhLFdBQWEsY0FBZ0JsQixHQUFVQSxFQUFRa0IsV0FBYSxLQUNqRWphLEtBQUtrVixRQUFVLEdBQUlELEdBQVE4RCxFQUFRN0QsU0FDbkNsVixLQUFLZ0UsSUFBTStVLEVBQVEvVSxLQUFPLEdBQzFCaEUsS0FBS2lYLFVBQVU4QyxHQTFYakIsSUFBSTFLLEVBQUtqTCxNQUFULENBSUEsR0FBSTBRLElBQ0Y0QyxhQUFjLG1CQUFxQnJJLEdBQ25DMEYsU0FBVSxVQUFZMUYsSUFBUSxZQUFjMkYsUUFDNUNlLEtBQU0sY0FBZ0IxRyxJQUFRLFFBQVVBLElBQVEsV0FDOUMsSUFFRSxNQURBLElBQUkrSCxPQUNHLEVBQ1AsTUFBTTlZLEdBQ04sT0FBTyxNQUdYaVosU0FBVSxZQUFjbEksR0FDeEJ1SSxZQUFhLGVBQWlCdkksR0FHaEMsSUFBSXlGLEVBQVE4QyxZQUNWLEdBQUlzQyxJQUNGLHFCQUNBLHNCQUNBLDZCQUNBLHNCQUNBLHVCQUNBLHNCQUNBLHVCQUNBLHdCQUNBLHlCQUdFckMsRUFBYSxTQUFTaFUsR0FDeEIsTUFBT0EsSUFBT3NXLFNBQVMxSyxVQUFVNEgsY0FBY3hULElBRzdDbVUsRUFBb0JELFlBQVlxQyxRQUFVLFNBQVN2VyxHQUNyRCxNQUFPQSxJQUFPcVcsRUFBWXJCLFFBQVEzWSxPQUFPdVAsVUFBVUMsU0FBU3JRLEtBQUt3RSxLQUFRLEVBc0Q3RW9SLEdBQVF4RixVQUFVMkYsT0FBUyxTQUFTdkIsRUFBTXpULEdBQ3hDeVQsRUFBT00sRUFBY04sR0FDckJ6VCxFQUFRbVUsRUFBZW5VLEVBQ3ZCLElBQUlpYSxHQUFXcmEsS0FBS21WLElBQUl0QixFQUN4QjdULE1BQUttVixJQUFJdEIsR0FBUXdHLEVBQVdBLEVBQVMsSUFBSWphLEVBQVFBLEdBR25ENlUsRUFBUXhGLFVBQWtCLE9BQUksU0FBU29FLFNBQzlCN1QsTUFBS21WLElBQUloQixFQUFjTixLQUdoQ29CLEVBQVF4RixVQUFVd0ksSUFBTSxTQUFTcEUsR0FFL0IsTUFEQUEsR0FBT00sRUFBY04sR0FDZDdULEtBQUtzYSxJQUFJekcsR0FBUTdULEtBQUttVixJQUFJdEIsR0FBUSxNQUczQ29CLEVBQVF4RixVQUFVNkssSUFBTSxTQUFTekcsR0FDL0IsTUFBTzdULE1BQUttVixJQUFJb0YsZUFBZXBHLEVBQWNOLEtBRy9Db0IsRUFBUXhGLFVBQVVxSCxJQUFNLFNBQVNqRCxFQUFNelQsR0FDckNKLEtBQUttVixJQUFJaEIsRUFBY04sSUFBU1UsRUFBZW5VLElBR2pENlUsRUFBUXhGLFVBQVVsTSxRQUFVLFNBQVM4RyxFQUFVbVEsR0FDN0MsSUFBSyxHQUFJM0csS0FBUTdULE1BQUttVixJQUNoQm5WLEtBQUttVixJQUFJb0YsZUFBZTFHLElBQzFCeEosRUFBU2hMLEtBQUttYixFQUFTeGEsS0FBS21WLElBQUl0QixHQUFPQSxFQUFNN1QsT0FLbkRpVixFQUFReEYsVUFBVWdMLEtBQU8sV0FDdkIsR0FBSWhHLEtBRUosT0FEQXpVLE1BQUt1RCxRQUFRLFNBQVNuRCxFQUFPeVQsR0FBUVksRUFBTTNCLEtBQUtlLEtBQ3pDVyxFQUFZQyxJQUdyQlEsRUFBUXhGLFVBQVVpTCxPQUFTLFdBQ3pCLEdBQUlqRyxLQUVKLE9BREF6VSxNQUFLdUQsUUFBUSxTQUFTbkQsR0FBU3FVLEVBQU0zQixLQUFLMVMsS0FDbkNvVSxFQUFZQyxJQUdyQlEsRUFBUXhGLFVBQVVYLFFBQVUsV0FDMUIsR0FBSTJGLEtBRUosT0FEQXpVLE1BQUt1RCxRQUFRLFNBQVNuRCxFQUFPeVQsR0FBUVksRUFBTTNCLE1BQU1lLEVBQU16VCxNQUNoRG9VLEVBQVlDLElBR2pCSyxFQUFRQyxXQUNWRSxFQUFReEYsVUFBVXVGLE9BQU9OLFVBQVlPLEVBQVF4RixVQUFVWCxRQXFKekQsSUFBSThKLElBQVcsU0FBVSxNQUFPLE9BQVEsVUFBVyxPQUFRLE1BNEMzREUsR0FBUXJKLFVBQVVrTCxNQUFRLFdBQ3hCLE1BQU8sSUFBSTdCLEdBQVE5WSxNQUFRdVYsS0FBTXZWLEtBQUtrWCxhQTZCeENGLEVBQUszWCxLQUFLeVosRUFBUXJKLFdBZ0JsQnVILEVBQUszWCxLQUFLeWEsRUFBU3JLLFdBRW5CcUssRUFBU3JLLFVBQVVrTCxNQUFRLFdBQ3pCLE1BQU8sSUFBSWIsR0FBUzlaLEtBQUtrWCxXQUN2QjhDLE9BQVFoYSxLQUFLZ2EsT0FDYkMsV0FBWWphLEtBQUtpYSxXQUNqQi9FLFFBQVMsR0FBSUQsR0FBUWpWLEtBQUtrVixTQUMxQmxSLElBQUtoRSxLQUFLZ0UsT0FJZDhWLEVBQVM3TixNQUFRLFdBQ2YsR0FBSTNILEdBQVcsR0FBSXdWLEdBQVMsTUFBT0UsT0FBUSxFQUFHQyxXQUFZLElBRTFELE9BREEzVixHQUFTNFQsS0FBTyxRQUNUNVQsRUFHVCxJQUFJc1csSUFBb0IsSUFBSyxJQUFLLElBQUssSUFBSyxJQUU1Q2QsR0FBU2UsU0FBVyxTQUFTN1csRUFBS2dXLEdBQ2hDLEdBQUlZLEVBQWlCL0IsUUFBUW1CLE1BQVksRUFDdkMsS0FBTSxJQUFJYyxZQUFXLHNCQUd2QixPQUFPLElBQUloQixHQUFTLE1BQU9FLE9BQVFBLEVBQVE5RSxTQUFVcFQsU0FBVWtDLE1BR2pFcUwsRUFBSzRGLFFBQVVBLEVBQ2Y1RixFQUFLeUosUUFBVUEsRUFDZnpKLEVBQUt5SyxTQUFXQSxFQUVoQnpLLEVBQUtqTCxNQUFRLFNBQVNrSyxFQUFPeU0sR0FDM0IsTUFBTyxJQUFJN1csU0FBUSxTQUFTQyxFQUFTNkssR0FDbkMsR0FBSWdNLEdBQVUsR0FBSWxDLEdBQVF4SyxFQUFPeU0sR0FDN0JFLEVBQU0sR0FBSUMsZUFFZEQsR0FBSXRGLE9BQVMsV0FDWCxHQUFJb0QsSUFDRmlCLE9BQVFpQixFQUFJakIsT0FDWkMsV0FBWWdCLEVBQUloQixXQUNoQi9FLFFBQVN1RSxFQUFhd0IsRUFBSUUseUJBQTJCLElBRXZEcEMsR0FBUS9VLElBQU0sZUFBaUJpWCxHQUFNQSxFQUFJRyxZQUFjckMsRUFBUTdELFFBQVErQyxJQUFJLGdCQUMzRSxJQUFJMUMsR0FBTyxZQUFjMEYsR0FBTUEsRUFBSTNXLFNBQVcyVyxFQUFJeFYsWUFDbER0QixHQUFRLEdBQUkyVixHQUFTdkUsRUFBTXdELEtBRzdCa0MsRUFBSXBGLFFBQVUsV0FDWjdHLEVBQU8sR0FBSWxELFdBQVUsNEJBR3ZCbVAsRUFBSUksVUFBWSxXQUNkck0sRUFBTyxHQUFJbEQsV0FBVSw0QkFHdkJtUCxFQUFJSyxLQUFLTixFQUFRdkMsT0FBUXVDLEVBQVFoWCxLQUFLLEdBRVYsWUFBeEJnWCxFQUFRaEMsY0FDVmlDLEVBQUlNLGlCQUFrQixHQUdwQixnQkFBa0JOLElBQU9uRyxFQUFRaUIsT0FDbkNrRixFQUFJTyxhQUFlLFFBR3JCUixFQUFROUYsUUFBUTNSLFFBQVEsU0FBU25ELEVBQU95VCxHQUN0Q29ILEVBQUlRLGlCQUFpQjVILEVBQU16VCxLQUc3QjZhLEVBQUlTLEtBQWtDLG1CQUF0QlYsR0FBUTlELFVBQTRCLEtBQU84RCxFQUFROUQsY0FHdkU3SCxFQUFLakwsTUFBTWlCLFVBQVcsSUFDTCxtQkFBVGdLLE1BQXVCQSxLQUFPclAsZ0JBRTdCIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBydW5BYm91dFBhZ2U7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIHJ1bkFib3V0UGFnZSgpIHtcblxuICAvLyBzZXQgdXAgYXJyb3cgKyBzY3JvbGwgdG8gdG9wIGZ1bmN0aW9uXG4gIC8vIFRPRE86IG9ubHkgc2hvdyBhcnJvdyBpZiBuZWVkZWQgW2hlaWdodCA+IDEwMCUgdmlld3BvcnRdXG4gIHZhciB0b3BBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1wYWdlX19hcnJvdy0tdG9wJyk7XG4gIHRvcEFycm93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICgwLCBfdXRpbHMuc2Nyb2xsVG9Ub3ApKHRoaXMucGFyZW50Tm9kZSk7XG4gIH0sIGZhbHNlKTtcbn1cblxufSx7XCIuL3V0aWxzXCI6Nn1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcnVuTGFuZGluZ1BhZ2U7XG5cbi8vIGxhbmRpbmcgcGFnZSBmdW5jdGlvbnNcbmZ1bmN0aW9uIHJ1bkxhbmRpbmdQYWdlKCkge1xuXG4gIC8vIHBpeGVsc14yICsgZmluZEFyZWEgZnVuY3Rpb25cbiAgdmFyIGZpbmRBcmVhID0gZnVuY3Rpb24gZmluZEFyZWEoKSB7XG4gICAgdmFyIGNvZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtcGl4ZWxzJyk7XG4gICAgdmFyIHBpeGVscyA9IGZ1bmN0aW9uIHBpeGVscygpIHtcbiAgICAgIGlmIChjb2RlICYmIGNvZGUudGV4dENvbnRlbnQgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGFyZWEgPSB3aW5kb3cuaW5uZXJXaWR0aCAqIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgY29kZS50ZXh0Q29udGVudCA9IGFyZWEudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShwaXhlbHMpO1xuICB9O1xuXG4gIGZpbmRBcmVhKCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmaW5kQXJlYSk7XG59XG5cbn0se31dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3NwYSA9IHJlcXVpcmUoJy4vc3BhJyk7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgLy8gIG5hdmlnYXRpb24gc2VsZWN0b3JzXG4gIHZhciBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkZXInKTtcbiAgdmFyIHRyaWdnZXJNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRyaWdnZXItLW1lbnUnKTtcbiAgdmFyIG1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbWVudScpO1xuXG4gIC8vICBuYXZpZ2F0aW9uIG1ldGhvZHNcbiAgZnVuY3Rpb24gdG9nZ2xlTWVudSgpIHtcbiAgICBoZWFkZXIuY2xhc3NMaXN0LnRvZ2dsZSgnbWVudS1vcGVuJyk7XG4gIH1cbiAgZnVuY3Rpb24gY2hhbmdlUGFnZShldmVudCkge1xuICAgIGlmIChldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0Lm5vZGVOYW1lID09PSAnQScpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0b2dnbGVNZW51KCk7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LnBhdGhuYW1lICE9PSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgZXZlbnQudGFyZ2V0LnBhdGhuYW1lKTtcbiAgICAgICAgKDAsIF9zcGEudXBkYXRlUGFnZSkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyAgbmF2aWdhdGlvbiBldmVudCBsaXN0ZW5lcnMgKyBydW4gb24gaW5pdGlhbCBsb2FkXG4gICgwLCBfc3BhLnJ1bk5ld0Z1bmN0aW9ucykoKTtcbiAgdHJpZ2dlck1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVNZW51LCBmYWxzZSk7XG4gIG1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjaGFuZ2VQYWdlLCBmYWxzZSk7XG59KSgpO1xuXG59LHtcIi4vc3BhXCI6NX1dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcnVuUHJvamVjdHNQYWdlO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4vLyBwcm9qZWN0cyBwYWdlIC0gc3BlY2lmaWMgZnVuY3Rpb25zXG5mdW5jdGlvbiBydW5Qcm9qZWN0c1BhZ2UoKSB7XG5cbiAgLy8gc2V0IHVwIGFycm93ICsgc2Nyb2xsIHRvIHRvcCBmdW5jdGlvblxuICAvLyBUT0RPOiBvbmx5IHNob3cgYXJyb3cgaWYgbmVlZGVkIFtoZWlnaHQgPiAxMDAlIHZpZXdwb3J0XVxuICB2YXIgdG9wQXJyb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtcGFnZV9fYXJyb3ctLXRvcCcpO1xuICB0b3BBcnJvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAoMCwgX3V0aWxzLnNjcm9sbFRvVG9wKSh0aGlzLnBhcmVudE5vZGUpO1xuICB9LCBmYWxzZSk7XG5cbiAgLy8gIGxvb3Agb3ZlciBldmVyeSBwcm9qZWN0LCBhZGQgZXZlbnQgbGlzdGVuZXIgdG8gZXhwYW5kIGljb24gYnV0dG9uXG4gIHZhciBwcm9qZWN0cyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXByb2plY3QnKSk7XG4gIHByb2plY3RzLmZvckVhY2goZnVuY3Rpb24gKHByb2plY3QpIHtcbiAgICB2YXIgZXhwYW5kSWNvbiA9IHByb2plY3QucXVlcnlTZWxlY3RvcignLnByb2plY3RfX2V4cGFuZEljb24nKTtcbiAgICBleHBhbmRJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXhwYW5kRGV0YWlscywgZmFsc2UpO1xuXG4gICAgdmFyIGNsb3NlSWNvbiA9IHByb2plY3QucXVlcnlTZWxlY3RvcignLnByb2plY3RfX2Nsb3NlSWNvbicpO1xuICAgIGNsb3NlSWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlRGV0YWlscywgZmFsc2UpO1xuICB9KTtcblxuICBmdW5jdGlvbiBjbG9zZURldGFpbHMoKSB7XG4gICAgdmFyIGRldGFpbHMgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgdmFyIGljb24gPSBkZXRhaWxzLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgZGV0YWlscy5zdHlsZS5tYXhIZWlnaHQgPSAwO1xuICAgIGRldGFpbHMuY2xhc3NMaXN0LnRvZ2dsZSgncHJvamVjdF9fZGV0YWlscy0tZXhwYW5kZWQnKTtcbiAgICBpY29uLmNsYXNzTGlzdC50b2dnbGUoJ3Byb2plY3RfX2V4cGFuZEljb24tLWV4cGFuZGVkJyk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBhbmREZXRhaWxzKCkge1xuICAgIHRoaXMuY2xhc3NMaXN0LnRvZ2dsZSgncHJvamVjdF9fZXhwYW5kSWNvbi0tZXhwYW5kZWQnKTtcbiAgICB2YXIgZGV0YWlscyA9IHRoaXMubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgIHZhciBpc0V4cGFuZGVkID0gZGV0YWlscy5jbGFzc0xpc3QuY29udGFpbnMoJ3Byb2plY3RfX2RldGFpbHMtLWV4cGFuZGVkJyk7XG4gICAgZGV0YWlscy5jbGFzc0xpc3QudG9nZ2xlKCdwcm9qZWN0X19kZXRhaWxzLS1leHBhbmRlZCcpO1xuICAgIGRldGFpbHMuc3R5bGUubWF4SGVpZ2h0ID0gaXNFeHBhbmRlZCA/IDAgOiBkZXRhaWxzLnNjcm9sbEhlaWdodCArICdweCc7XG4gIH1cbn1cblxufSx7XCIuL3V0aWxzXCI6Nn1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy51cGRhdGVQYWdlID0gZXhwb3J0cy5ydW5OZXdGdW5jdGlvbnMgPSB1bmRlZmluZWQ7XG5cbnZhciBfbGFuZGluZyA9IHJlcXVpcmUoJy4vbGFuZGluZycpO1xuXG52YXIgX2xhbmRpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGFuZGluZyk7XG5cbnZhciBfYWJvdXQgPSByZXF1aXJlKCcuL2Fib3V0Jyk7XG5cbnZhciBfYWJvdXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWJvdXQpO1xuXG52YXIgX3Byb2plY3RzID0gcmVxdWlyZSgnLi9wcm9qZWN0cycpO1xuXG52YXIgX3Byb2plY3RzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb2plY3RzKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gZmV0Y2ggcG9seWZpbGwgZm9yIG1vYmlsZSBkZXZpY2VzXG5yZXF1aXJlKCdlczYtcHJvbWlzZScpLnBvbHlmaWxsKCk7XG5yZXF1aXJlKCdpc29tb3JwaGljLWZldGNoJyk7XG5cbi8vIHJ1biBmdW5jdGlvbnMgc3BlY2lmaWMgdG8gcGFnZVxuLy8gVE9ETzogcmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZmluZEFyZWEpIHdoZW4gbm90IG9uIGxhbmRpbmcgcGFnZVxudmFyIHJ1bk5ld0Z1bmN0aW9ucyA9IGV4cG9ydHMucnVuTmV3RnVuY3Rpb25zID0gZnVuY3Rpb24gcnVuTmV3RnVuY3Rpb25zKCkge1xuICB2YXIgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgaWYgKHBhdGggPT09ICcvJyB8fCBwYXRoID09PSAnL2luZGV4Lmh0bWwnKSB7XG4gICAgKDAsIF9sYW5kaW5nMi5kZWZhdWx0KSgpO1xuICB9IGVsc2UgaWYgKHBhdGguc3RhcnRzV2l0aCgnL2Fib3V0JykpIHtcbiAgICAoMCwgX2Fib3V0Mi5kZWZhdWx0KSgpO1xuICB9IGVsc2UgaWYgKHBhdGguc3RhcnRzV2l0aCgnL3Byb2plY3RzJykpIHtcbiAgICAoMCwgX3Byb2plY3RzMi5kZWZhdWx0KSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxufTtcblxuLy8gdXBkYXRlICsgZmFkZSBpbiBuZXcgcGFnZSBvbiB1cmwgY2hhbmdlXG52YXIgdXBkYXRlUGFnZSA9IGV4cG9ydHMudXBkYXRlUGFnZSA9IGZ1bmN0aW9uIHVwZGF0ZVBhZ2UoKSB7XG4gIHZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgbG9hZFBhZ2UodXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZVRleHQpIHtcbiAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaHRtbCcpO1xuICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSByZXNwb25zZVRleHQ7XG4gICAgdmFyIG9sZFBhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFnZScpO1xuICAgIHZhciBuZXdQYWdlID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5wYWdlJyk7XG4gICAgdmFyIG5ld1RpdGxlID0gY29udGFpbmVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0aXRsZScpWzBdLnRleHRDb250ZW50O1xuICAgIHZhciBuZXdEZXNjID0gY29udGFpbmVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdtZXRhJylbJ2Rlc2NyaXB0aW9uJ10uY29udGVudDtcbiAgICBjb25zb2xlLmxvZyhvbGRQYWdlKTtcbiAgICBvbGRQYWdlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld1BhZ2UsIG9sZFBhZ2UpO1xuICAgIGRvY3VtZW50LnRpdGxlID0gbmV3VGl0bGU7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21ldGEnKVsnZGVzY3JpcHRpb24nXS5jb250ZW50ID0gbmV3RGVzYztcbiAgICAoMCwgX3V0aWxzLmZhZGVJbikobmV3UGFnZSk7XG4gICAgcnVuTmV3RnVuY3Rpb25zKCk7XG4gIH0pO1xufTtcblxuLy8gZmV0Y2ggKyBsb2FkIG5ldyB1cmwgKyBjYWNoZSBuZXcgY29udGVudFxudmFyIGNhY2hlID0ge307XG5mdW5jdGlvbiBsb2FkUGFnZSh1cmwpIHtcbiAgaWYgKGNhY2hlW3VybF0pIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNhY2hlW3VybF0pO1xuICB9XG4gIHJldHVybiBmZXRjaCh1cmwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICBjYWNoZVt1cmxdID0gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgcmV0dXJuIGNhY2hlW3VybF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCduZXR3b3JrIHJlc3BvbnNlIHdhcyBub3Qgb2suJyk7XG4gICAgfVxuICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgcmV0dXJuIGNvbnNvbGUubG9nKCd0aGVyZSBoYXMgYmVlbiBhbiBlcnJvciByZXF1ZXN0aW5nICgnICsgdXJsICsgJyk6ICcgKyBlcnIubWVzc2FnZSk7XG4gIH0pO1xufVxuXG4vLyB1cGRhdGUgcGFnZSBhbnl0aW1lIGhpc3RvcnkgYXBpIGlzIGNoYW5nZWRcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHVwZGF0ZVBhZ2UpO1xuXG59LHtcIi4vYWJvdXRcIjoxLFwiLi9sYW5kaW5nXCI6MixcIi4vcHJvamVjdHNcIjo0LFwiLi91dGlsc1wiOjYsXCJlczYtcHJvbWlzZVwiOjcsXCJpc29tb3JwaGljLWZldGNoXCI6OH1dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vLyB0aW1pbmcgZnVuY3Rpb25zIFsgZnJvbSBnaXRodWIgLS0gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ3JlLzE2NTAyOTQgXVxudmFyIGxpbmVhciA9IGZ1bmN0aW9uIGxpbmVhcih0KSB7XG4gIHJldHVybiB0O1xufTtcbnZhciBlYXNlSW5RdWFkID0gZnVuY3Rpb24gZWFzZUluUXVhZCh0KSB7XG4gIHJldHVybiB0ICogdDtcbn07XG52YXIgZWFzZU91dFF1YWQgPSBmdW5jdGlvbiBlYXNlT3V0UXVhZCh0KSB7XG4gIHJldHVybiB0ICogKDIgLSB0KTtcbn07XG52YXIgZWFzZUluT3V0UXVhZCA9IGZ1bmN0aW9uIGVhc2VJbk91dFF1YWQodCkge1xuICByZXR1cm4gdCA8IC41ID8gMiAqIHQgKiB0IDogLTEgKyAoNCAtIDIgKiB0KSAqIHQ7XG59O1xudmFyIGVhc2VJbkN1YmljID0gZnVuY3Rpb24gZWFzZUluQ3ViaWModCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufTtcbnZhciBlYXNlT3V0Q3ViaWMgPSBmdW5jdGlvbiBlYXNlT3V0Q3ViaWModCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufTtcbnZhciBlYXNlSW5PdXRDdWJpYyA9IGZ1bmN0aW9uIGVhc2VJbk91dEN1YmljKHQpIHtcbiAgcmV0dXJuIHQgPCAuNSA/IDQgKiB0ICogdCAqIHQgOiAodCAtIDEpICogKDIgKiB0IC0gMikgKiAoMiAqIHQgLSAyKSArIDE7XG59O1xudmFyIGVhc2VJblF1YXJ0ID0gZnVuY3Rpb24gZWFzZUluUXVhcnQodCkge1xuICByZXR1cm4gdCAqIHQgKiB0ICogdDtcbn07XG52YXIgZWFzZU91dFF1YXJ0ID0gZnVuY3Rpb24gZWFzZU91dFF1YXJ0KHQpIHtcbiAgcmV0dXJuIDEgLSAtLXQgKiB0ICogdCAqIHQ7XG59O1xudmFyIGVhc2VJbk91dFF1YXJ0ID0gZnVuY3Rpb24gZWFzZUluT3V0UXVhcnQodCkge1xuICByZXR1cm4gdCA8IC41ID8gOCAqIHQgKiB0ICogdCAqIHQgOiAxIC0gOCAqIC0tdCAqIHQgKiB0ICogdDtcbn07XG5cbi8vIHNjcm9sbC10by10b3Agb2YgZWxlbWVudC5cbnZhciBzY3JvbGxUb1RvcCA9IGV4cG9ydHMuc2Nyb2xsVG9Ub3AgPSBmdW5jdGlvbiBzY3JvbGxUb1RvcChlbCkge1xuICB2YXIgZHVyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDEyMDA7XG5cbiAgdmFyIGJvdHRvbSA9IGVsLnNjcm9sbEhlaWdodDtcbiAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgdmFyIHNjcm9sbCA9IGZ1bmN0aW9uIHNjcm9sbCgpIHtcbiAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgdGltZSA9IChub3cgLSBzdGFydCkgLyBkdXJhdGlvbjtcbiAgICB2YXIgZWFzaW5nID0gZWFzZU91dFF1YXJ0KHRpbWUpO1xuICAgIGVsLnNjcm9sbFRvcCA9IGVhc2luZyAqICgwIC0gYm90dG9tKSArIGJvdHRvbTtcbiAgICBpZiAoZWwuc2Nyb2xsVG9wID09PSAwKSByZXR1cm47XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHNjcm9sbCk7XG4gIH07XG4gIHNjcm9sbCgpO1xufTtcblxuLy8gZmFkZS1pbiBlbGVtZW50XG52YXIgZmFkZUluID0gZXhwb3J0cy5mYWRlSW4gPSBmdW5jdGlvbiBmYWRlSW4oZWwpIHtcbiAgdmFyIGR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxMjAwO1xuXG4gIGVsLnN0eWxlLm9wYWNpdHkgPSAwO1xuICB2YXIgYm90dG9tID0gMTtcbiAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgdmFyIGZhZGUgPSBmdW5jdGlvbiBmYWRlKCkge1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIHZhciB0aW1lID0gKG5vdyAtIHN0YXJ0KSAvIGR1cmF0aW9uO1xuICAgIHZhciBlYXNpbmcgPSBlYXNlSW5RdWFydCh0aW1lKTtcbiAgICBlbC5zdHlsZS5vcGFjaXR5ID0gZWFzaW5nO1xuICAgIGlmIChlbC5zdHlsZS5vcGFjaXR5ID4gMSkge1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmYWRlKTtcbiAgfTtcbiAgZmFkZSgpO1xufTtcblxuLy8gZmFkZS1vdXQgZWxlbWVudFxudmFyIGZhZGVPdXQgPSBleHBvcnRzLmZhZGVPdXQgPSBmdW5jdGlvbiBmYWRlT3V0KGVsKSB7XG4gIHZhciBkdXJhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTIwMDtcblxuICBlbC5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgdmFyIGZhZGUgPSBmdW5jdGlvbiBmYWRlKCkge1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIHZhciB0aW1lID0gKG5vdyAtIHN0YXJ0KSAvIGR1cmF0aW9uO1xuICAgIHZhciBlYXNpbmcgPSBlYXNlT3V0UXVhcnQodGltZSk7XG4gICAgZWwuc3R5bGUub3BhY2l0eSA9IDEgLSBlYXNpbmc7XG4gICAgaWYgKGVsLnN0eWxlLm9wYWNpdHkgPCAwKSB7XG4gICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZhZGUpO1xuICB9O1xuICBmYWRlKCk7XG59O1xuXG59LHt9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuLyohXG4gKiBAb3ZlcnZpZXcgZXM2LXByb21pc2UgLSBhIHRpbnkgaW1wbGVtZW50YXRpb24gb2YgUHJvbWlzZXMvQSsuXG4gKiBAY29weXJpZ2h0IENvcHlyaWdodCAoYykgMjAxNCBZZWh1ZGEgS2F0eiwgVG9tIERhbGUsIFN0ZWZhbiBQZW5uZXIgYW5kIGNvbnRyaWJ1dG9ycyAoQ29udmVyc2lvbiB0byBFUzYgQVBJIGJ5IEpha2UgQXJjaGliYWxkKVxuICogQGxpY2Vuc2UgICBMaWNlbnNlZCB1bmRlciBNSVQgbGljZW5zZVxuICogICAgICAgICAgICBTZWUgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3N0ZWZhbnBlbm5lci9lczYtcHJvbWlzZS9tYXN0ZXIvTElDRU5TRVxuICogQHZlcnNpb24gICA0LjAuNVxuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbC5FUzZQcm9taXNlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvYmplY3RPckZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiB4ICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuXG52YXIgX2lzQXJyYXkgPSB1bmRlZmluZWQ7XG5pZiAoIUFycmF5LmlzQXJyYXkpIHtcbiAgX2lzQXJyYXkgPSBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG59IGVsc2Uge1xuICBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG59XG5cbnZhciBpc0FycmF5ID0gX2lzQXJyYXk7XG5cbnZhciBsZW4gPSAwO1xudmFyIHZlcnR4TmV4dCA9IHVuZGVmaW5lZDtcbnZhciBjdXN0b21TY2hlZHVsZXJGbiA9IHVuZGVmaW5lZDtcblxudmFyIGFzYXAgPSBmdW5jdGlvbiBhc2FwKGNhbGxiYWNrLCBhcmcpIHtcbiAgcXVldWVbbGVuXSA9IGNhbGxiYWNrO1xuICBxdWV1ZVtsZW4gKyAxXSA9IGFyZztcbiAgbGVuICs9IDI7XG4gIGlmIChsZW4gPT09IDIpIHtcbiAgICAvLyBJZiBsZW4gaXMgMiwgdGhhdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gc2NoZWR1bGUgYW4gYXN5bmMgZmx1c2guXG4gICAgLy8gSWYgYWRkaXRpb25hbCBjYWxsYmFja3MgYXJlIHF1ZXVlZCBiZWZvcmUgdGhlIHF1ZXVlIGlzIGZsdXNoZWQsIHRoZXlcbiAgICAvLyB3aWxsIGJlIHByb2Nlc3NlZCBieSB0aGlzIGZsdXNoIHRoYXQgd2UgYXJlIHNjaGVkdWxpbmcuXG4gICAgaWYgKGN1c3RvbVNjaGVkdWxlckZuKSB7XG4gICAgICBjdXN0b21TY2hlZHVsZXJGbihmbHVzaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjaGVkdWxlRmx1c2goKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNjaGVkdWxlcihzY2hlZHVsZUZuKSB7XG4gIGN1c3RvbVNjaGVkdWxlckZuID0gc2NoZWR1bGVGbjtcbn1cblxuZnVuY3Rpb24gc2V0QXNhcChhc2FwRm4pIHtcbiAgYXNhcCA9IGFzYXBGbjtcbn1cblxudmFyIGJyb3dzZXJXaW5kb3cgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcbnZhciBicm93c2VyR2xvYmFsID0gYnJvd3NlcldpbmRvdyB8fCB7fTtcbnZhciBCcm93c2VyTXV0YXRpb25PYnNlcnZlciA9IGJyb3dzZXJHbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBicm93c2VyR2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgaXNOb2RlID0gdHlwZW9mIHNlbGYgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAoe30pLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJztcblxuLy8gdGVzdCBmb3Igd2ViIHdvcmtlciBidXQgbm90IGluIElFMTBcbnZhciBpc1dvcmtlciA9IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGltcG9ydFNjcmlwdHMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8vIG5vZGVcbmZ1bmN0aW9uIHVzZU5leHRUaWNrKCkge1xuICAvLyBub2RlIHZlcnNpb24gMC4xMC54IGRpc3BsYXlzIGEgZGVwcmVjYXRpb24gd2FybmluZyB3aGVuIG5leHRUaWNrIGlzIHVzZWQgcmVjdXJzaXZlbHlcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jdWpvanMvd2hlbi9pc3N1ZXMvNDEwIGZvciBkZXRhaWxzXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICB9O1xufVxuXG4vLyB2ZXJ0eFxuZnVuY3Rpb24gdXNlVmVydHhUaW1lcigpIHtcbiAgaWYgKHR5cGVvZiB2ZXJ0eE5leHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZlcnR4TmV4dChmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG59XG5cbmZ1bmN0aW9uIHVzZU11dGF0aW9uT2JzZXJ2ZXIoKSB7XG4gIHZhciBpdGVyYXRpb25zID0gMDtcbiAgdmFyIG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGZsdXNoKTtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgbm9kZS5kYXRhID0gaXRlcmF0aW9ucyA9ICsraXRlcmF0aW9ucyAlIDI7XG4gIH07XG59XG5cbi8vIHdlYiB3b3JrZXJcbmZ1bmN0aW9uIHVzZU1lc3NhZ2VDaGFubmVsKCkge1xuICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VTZXRUaW1lb3V0KCkge1xuICAvLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBlczYtcHJvbWlzZSB3aWxsIGJlIHVuYWZmZWN0ZWQgYnlcbiAgLy8gb3RoZXIgY29kZSBtb2RpZnlpbmcgc2V0VGltZW91dCAobGlrZSBzaW5vbi51c2VGYWtlVGltZXJzKCkpXG4gIHZhciBnbG9iYWxTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2xvYmFsU2V0VGltZW91dChmbHVzaCwgMSk7XG4gIH07XG59XG5cbnZhciBxdWV1ZSA9IG5ldyBBcnJheSgxMDAwKTtcbmZ1bmN0aW9uIGZsdXNoKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gcXVldWVbaV07XG4gICAgdmFyIGFyZyA9IHF1ZXVlW2kgKyAxXTtcblxuICAgIGNhbGxiYWNrKGFyZyk7XG5cbiAgICBxdWV1ZVtpXSA9IHVuZGVmaW5lZDtcbiAgICBxdWV1ZVtpICsgMV0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICBsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBhdHRlbXB0VmVydHgoKSB7XG4gIHRyeSB7XG4gICAgdmFyIHIgPSByZXF1aXJlO1xuICAgIHZhciB2ZXJ0eCA9IHIoJ3ZlcnR4Jyk7XG4gICAgdmVydHhOZXh0ID0gdmVydHgucnVuT25Mb29wIHx8IHZlcnR4LnJ1bk9uQ29udGV4dDtcbiAgICByZXR1cm4gdXNlVmVydHhUaW1lcigpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHVzZVNldFRpbWVvdXQoKTtcbiAgfVxufVxuXG52YXIgc2NoZWR1bGVGbHVzaCA9IHVuZGVmaW5lZDtcbi8vIERlY2lkZSB3aGF0IGFzeW5jIG1ldGhvZCB0byB1c2UgdG8gdHJpZ2dlcmluZyBwcm9jZXNzaW5nIG9mIHF1ZXVlZCBjYWxsYmFja3M6XG5pZiAoaXNOb2RlKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VOZXh0VGljaygpO1xufSBlbHNlIGlmIChCcm93c2VyTXV0YXRpb25PYnNlcnZlcikge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTXV0YXRpb25PYnNlcnZlcigpO1xufSBlbHNlIGlmIChpc1dvcmtlcikge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTWVzc2FnZUNoYW5uZWwoKTtcbn0gZWxzZSBpZiAoYnJvd3NlcldpbmRvdyA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSBhdHRlbXB0VmVydHgoKTtcbn0gZWxzZSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VTZXRUaW1lb3V0KCk7XG59XG5cbmZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XG5cbiAgdmFyIHBhcmVudCA9IHRoaXM7XG5cbiAgdmFyIGNoaWxkID0gbmV3IHRoaXMuY29uc3RydWN0b3Iobm9vcCk7XG5cbiAgaWYgKGNoaWxkW1BST01JU0VfSURdID09PSB1bmRlZmluZWQpIHtcbiAgICBtYWtlUHJvbWlzZShjaGlsZCk7XG4gIH1cblxuICB2YXIgX3N0YXRlID0gcGFyZW50Ll9zdGF0ZTtcblxuICBpZiAoX3N0YXRlKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjYWxsYmFjayA9IF9hcmd1bWVudHNbX3N0YXRlIC0gMV07XG4gICAgICBhc2FwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZUNhbGxiYWNrKF9zdGF0ZSwgY2hpbGQsIGNhbGxiYWNrLCBwYXJlbnQuX3Jlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbik7XG4gIH1cblxuICByZXR1cm4gY2hpbGQ7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZXNvbHZlYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIHJlc29sdmVkIHdpdGggdGhlXG4gIHBhc3NlZCBgdmFsdWVgLiBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVzb2x2ZSgxKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoMSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZXNvbHZlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHZhbHVlIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgZnVsZmlsbGVkIHdpdGggdGhlIGdpdmVuXG4gIGB2YWx1ZWBcbiovXG5mdW5jdGlvbiByZXNvbHZlKG9iamVjdCkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gIGlmIChvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0LmNvbnN0cnVjdG9yID09PSBDb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cblxuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcbiAgX3Jlc29sdmUocHJvbWlzZSwgb2JqZWN0KTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbnZhciBQUk9NSVNFX0lEID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDE2KTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBQRU5ESU5HID0gdm9pZCAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xuXG52YXIgR0VUX1RIRU5fRVJST1IgPSBuZXcgRXJyb3JPYmplY3QoKTtcblxuZnVuY3Rpb24gc2VsZkZ1bGZpbGxtZW50KCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBjYW5ub3QgcmVzb2x2ZSBhIHByb21pc2Ugd2l0aCBpdHNlbGZcIik7XG59XG5cbmZ1bmN0aW9uIGNhbm5vdFJldHVybk93bigpIHtcbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoJ0EgcHJvbWlzZXMgY2FsbGJhY2sgY2Fubm90IHJldHVybiB0aGF0IHNhbWUgcHJvbWlzZS4nKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGhlbihwcm9taXNlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBHRVRfVEhFTl9FUlJPUi5lcnJvciA9IGVycm9yO1xuICAgIHJldHVybiBHRVRfVEhFTl9FUlJPUjtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cnlUaGVuKHRoZW4sIHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpIHtcbiAgdHJ5IHtcbiAgICB0aGVuLmNhbGwodmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUsIHRoZW4pIHtcbiAgYXNhcChmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgIHZhciBzZWFsZWQgPSBmYWxzZTtcbiAgICB2YXIgZXJyb3IgPSB0cnlUaGVuKHRoZW4sIHRoZW5hYmxlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgIGlmICh0aGVuYWJsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuXG4gICAgICBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSwgJ1NldHRsZTogJyArIChwcm9taXNlLl9sYWJlbCB8fCAnIHVua25vd24gcHJvbWlzZScpKTtcblxuICAgIGlmICghc2VhbGVkICYmIGVycm9yKSB7XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgX3JlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgfVxuICB9LCBwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUpIHtcbiAgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gRlVMRklMTEVEKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgX3JlamVjdChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICBzdWJzY3JpYmUodGhlbmFibGUsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlLCB0aGVuJCQpIHtcbiAgaWYgKG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IgPT09IHByb21pc2UuY29uc3RydWN0b3IgJiYgdGhlbiQkID09PSB0aGVuICYmIG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IucmVzb2x2ZSA9PT0gcmVzb2x2ZSkge1xuICAgIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGVuJCQgPT09IEdFVF9USEVOX0VSUk9SKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIEdFVF9USEVOX0VSUk9SLmVycm9yKTtcbiAgICB9IGVsc2UgaWYgKHRoZW4kJCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih0aGVuJCQpKSB7XG4gICAgICBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgX3JlamVjdChwcm9taXNlLCBzZWxmRnVsZmlsbG1lbnQoKSk7XG4gIH0gZWxzZSBpZiAob2JqZWN0T3JGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIHZhbHVlLCBnZXRUaGVuKHZhbHVlKSk7XG4gIH0gZWxzZSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaFJlamVjdGlvbihwcm9taXNlKSB7XG4gIGlmIChwcm9taXNlLl9vbmVycm9yKSB7XG4gICAgcHJvbWlzZS5fb25lcnJvcihwcm9taXNlLl9yZXN1bHQpO1xuICB9XG5cbiAgcHVibGlzaChwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gZnVsZmlsbChwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9taXNlLl9yZXN1bHQgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fc3RhdGUgPSBGVUxGSUxMRUQ7XG5cbiAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzYXAocHVibGlzaCwgcHJvbWlzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3JlamVjdChwcm9taXNlLCByZWFzb24pIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHByb21pc2UuX3N0YXRlID0gUkVKRUNURUQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHJlYXNvbjtcblxuICBhc2FwKHB1Ymxpc2hSZWplY3Rpb24sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgdmFyIF9zdWJzY3JpYmVycyA9IHBhcmVudC5fc3Vic2NyaWJlcnM7XG4gIHZhciBsZW5ndGggPSBfc3Vic2NyaWJlcnMubGVuZ3RoO1xuXG4gIHBhcmVudC5fb25lcnJvciA9IG51bGw7XG5cbiAgX3N1YnNjcmliZXJzW2xlbmd0aF0gPSBjaGlsZDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIEZVTEZJTExFRF0gPSBvbkZ1bGZpbGxtZW50O1xuICBfc3Vic2NyaWJlcnNbbGVuZ3RoICsgUkVKRUNURURdID0gb25SZWplY3Rpb247XG5cbiAgaWYgKGxlbmd0aCA9PT0gMCAmJiBwYXJlbnQuX3N0YXRlKSB7XG4gICAgYXNhcChwdWJsaXNoLCBwYXJlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2gocHJvbWlzZSkge1xuICB2YXIgc3Vic2NyaWJlcnMgPSBwcm9taXNlLl9zdWJzY3JpYmVycztcbiAgdmFyIHNldHRsZWQgPSBwcm9taXNlLl9zdGF0ZTtcblxuICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGNoaWxkID0gdW5kZWZpbmVkLFxuICAgICAgY2FsbGJhY2sgPSB1bmRlZmluZWQsXG4gICAgICBkZXRhaWwgPSBwcm9taXNlLl9yZXN1bHQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzY3JpYmVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgIGNoaWxkID0gc3Vic2NyaWJlcnNbaV07XG4gICAgY2FsbGJhY2sgPSBzdWJzY3JpYmVyc1tpICsgc2V0dGxlZF07XG5cbiAgICBpZiAoY2hpbGQpIHtcbiAgICAgIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIGNoaWxkLCBjYWxsYmFjaywgZGV0YWlsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soZGV0YWlsKTtcbiAgICB9XG4gIH1cblxuICBwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggPSAwO1xufVxuXG5mdW5jdGlvbiBFcnJvck9iamVjdCgpIHtcbiAgdGhpcy5lcnJvciA9IG51bGw7XG59XG5cbnZhciBUUllfQ0FUQ0hfRVJST1IgPSBuZXcgRXJyb3JPYmplY3QoKTtcblxuZnVuY3Rpb24gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCkge1xuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjayhkZXRhaWwpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgVFJZX0NBVENIX0VSUk9SLmVycm9yID0gZTtcbiAgICByZXR1cm4gVFJZX0NBVENIX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIHByb21pc2UsIGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdmFyIGhhc0NhbGxiYWNrID0gaXNGdW5jdGlvbihjYWxsYmFjayksXG4gICAgICB2YWx1ZSA9IHVuZGVmaW5lZCxcbiAgICAgIGVycm9yID0gdW5kZWZpbmVkLFxuICAgICAgc3VjY2VlZGVkID0gdW5kZWZpbmVkLFxuICAgICAgZmFpbGVkID0gdW5kZWZpbmVkO1xuXG4gIGlmIChoYXNDYWxsYmFjaykge1xuICAgIHZhbHVlID0gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCk7XG5cbiAgICBpZiAodmFsdWUgPT09IFRSWV9DQVRDSF9FUlJPUikge1xuICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgIGVycm9yID0gdmFsdWUuZXJyb3I7XG4gICAgICB2YWx1ZSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIGNhbm5vdFJldHVybk93bigpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBkZXRhaWw7XG4gICAgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIC8vIG5vb3BcbiAgfSBlbHNlIGlmIChoYXNDYWxsYmFjayAmJiBzdWNjZWVkZWQpIHtcbiAgICAgIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGZhaWxlZCkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBGVUxGSUxMRUQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gUkVKRUNURUQpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVByb21pc2UocHJvbWlzZSwgcmVzb2x2ZXIpIHtcbiAgdHJ5IHtcbiAgICByZXNvbHZlcihmdW5jdGlvbiByZXNvbHZlUHJvbWlzZSh2YWx1ZSkge1xuICAgICAgX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIHJlamVjdFByb21pc2UocmVhc29uKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBfcmVqZWN0KHByb21pc2UsIGUpO1xuICB9XG59XG5cbnZhciBpZCA9IDA7XG5mdW5jdGlvbiBuZXh0SWQoKSB7XG4gIHJldHVybiBpZCsrO1xufVxuXG5mdW5jdGlvbiBtYWtlUHJvbWlzZShwcm9taXNlKSB7XG4gIHByb21pc2VbUFJPTUlTRV9JRF0gPSBpZCsrO1xuICBwcm9taXNlLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gdW5kZWZpbmVkO1xuICBwcm9taXNlLl9zdWJzY3JpYmVycyA9IFtdO1xufVxuXG5mdW5jdGlvbiBFbnVtZXJhdG9yKENvbnN0cnVjdG9yLCBpbnB1dCkge1xuICB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcblxuICBpZiAoIXRoaXMucHJvbWlzZVtQUk9NSVNFX0lEXSkge1xuICAgIG1ha2VQcm9taXNlKHRoaXMucHJvbWlzZSk7XG4gIH1cblxuICBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuICAgIHRoaXMubGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICAgIHRoaXMuX3JlbWFpbmluZyA9IGlucHV0Lmxlbmd0aDtcblxuICAgIHRoaXMuX3Jlc3VsdCA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoIHx8IDA7XG4gICAgICB0aGlzLl9lbnVtZXJhdGUoKTtcbiAgICAgIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIF9yZWplY3QodGhpcy5wcm9taXNlLCB2YWxpZGF0aW9uRXJyb3IoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGlvbkVycm9yKCkge1xuICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTtcbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9lbnVtZXJhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgdmFyIF9pbnB1dCA9IHRoaXMuX2lucHV0O1xuXG4gIGZvciAodmFyIGkgPSAwOyB0aGlzLl9zdGF0ZSA9PT0gUEVORElORyAmJiBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLl9lYWNoRW50cnkoX2lucHV0W2ldLCBpKTtcbiAgfVxufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX2VhY2hFbnRyeSA9IGZ1bmN0aW9uIChlbnRyeSwgaSkge1xuICB2YXIgYyA9IHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3I7XG4gIHZhciByZXNvbHZlJCQgPSBjLnJlc29sdmU7XG5cbiAgaWYgKHJlc29sdmUkJCA9PT0gcmVzb2x2ZSkge1xuICAgIHZhciBfdGhlbiA9IGdldFRoZW4oZW50cnkpO1xuXG4gICAgaWYgKF90aGVuID09PSB0aGVuICYmIGVudHJ5Ll9zdGF0ZSAhPT0gUEVORElORykge1xuICAgICAgdGhpcy5fc2V0dGxlZEF0KGVudHJ5Ll9zdGF0ZSwgaSwgZW50cnkuX3Jlc3VsdCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgX3RoZW4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuICAgICAgdGhpcy5fcmVzdWx0W2ldID0gZW50cnk7XG4gICAgfSBlbHNlIGlmIChjID09PSBQcm9taXNlKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBjKG5vb3ApO1xuICAgICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBlbnRyeSwgX3RoZW4pO1xuICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KHByb21pc2UsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQobmV3IGMoZnVuY3Rpb24gKHJlc29sdmUkJCkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSQkKGVudHJ5KTtcbiAgICAgIH0pLCBpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fd2lsbFNldHRsZUF0KHJlc29sdmUkJChlbnRyeSksIGkpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fc2V0dGxlZEF0ID0gZnVuY3Rpb24gKHN0YXRlLCBpLCB2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcblxuICBpZiAocHJvbWlzZS5fc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICB0aGlzLl9yZW1haW5pbmctLTtcblxuICAgIGlmIChzdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZXN1bHRbaV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fd2lsbFNldHRsZUF0ID0gZnVuY3Rpb24gKHByb21pc2UsIGkpIHtcbiAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuXG4gIHN1YnNjcmliZShwcm9taXNlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoRlVMRklMTEVELCBpLCB2YWx1ZSk7XG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KFJFSkVDVEVELCBpLCByZWFzb24pO1xuICB9KTtcbn07XG5cbi8qKlxuICBgUHJvbWlzZS5hbGxgIGFjY2VwdHMgYW4gYXJyYXkgb2YgcHJvbWlzZXMsIGFuZCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2hcbiAgaXMgZnVsZmlsbGVkIHdpdGggYW4gYXJyYXkgb2YgZnVsZmlsbG1lbnQgdmFsdWVzIGZvciB0aGUgcGFzc2VkIHByb21pc2VzLCBvclxuICByZWplY3RlZCB3aXRoIHRoZSByZWFzb24gb2YgdGhlIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIGJlIHJlamVjdGVkLiBJdCBjYXN0cyBhbGxcbiAgZWxlbWVudHMgb2YgdGhlIHBhc3NlZCBpdGVyYWJsZSB0byBwcm9taXNlcyBhcyBpdCBydW5zIHRoaXMgYWxnb3JpdGhtLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZXNvbHZlKDIpO1xuICBsZXQgcHJvbWlzZTMgPSByZXNvbHZlKDMpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gVGhlIGFycmF5IGhlcmUgd291bGQgYmUgWyAxLCAyLCAzIF07XG4gIH0pO1xuICBgYGBcblxuICBJZiBhbnkgb2YgdGhlIGBwcm9taXNlc2AgZ2l2ZW4gdG8gYGFsbGAgYXJlIHJlamVjdGVkLCB0aGUgZmlyc3QgcHJvbWlzZVxuICB0aGF0IGlzIHJlamVjdGVkIHdpbGwgYmUgZ2l2ZW4gYXMgYW4gYXJndW1lbnQgdG8gdGhlIHJldHVybmVkIHByb21pc2VzJ3NcbiAgcmVqZWN0aW9uIGhhbmRsZXIuIEZvciBleGFtcGxlOlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZWplY3QobmV3IEVycm9yKFwiMlwiKSk7XG4gIGxldCBwcm9taXNlMyA9IHJlamVjdChuZXcgRXJyb3IoXCIzXCIpKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zIGJlY2F1c2UgdGhlcmUgYXJlIHJlamVjdGVkIHByb21pc2VzIVxuICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgIC8vIGVycm9yLm1lc3NhZ2UgPT09IFwiMlwiXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIGFsbFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IGVudHJpZXMgYXJyYXkgb2YgcHJvbWlzZXNcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIGFsbCBgcHJvbWlzZXNgIGhhdmUgYmVlblxuICBmdWxmaWxsZWQsIG9yIHJlamVjdGVkIGlmIGFueSBvZiB0aGVtIGJlY29tZSByZWplY3RlZC5cbiAgQHN0YXRpY1xuKi9cbmZ1bmN0aW9uIGFsbChlbnRyaWVzKSB7XG4gIHJldHVybiBuZXcgRW51bWVyYXRvcih0aGlzLCBlbnRyaWVzKS5wcm9taXNlO1xufVxuXG4vKipcbiAgYFByb21pc2UucmFjZWAgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoIGlzIHNldHRsZWQgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZVxuICBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBzZXR0bGUuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDInKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyByZXN1bHQgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgaXQgd2FzIHJlc29sdmVkIGJlZm9yZSBwcm9taXNlMVxuICAgIC8vIHdhcyByZXNvbHZlZC5cbiAgfSk7XG4gIGBgYFxuXG4gIGBQcm9taXNlLnJhY2VgIGlzIGRldGVybWluaXN0aWMgaW4gdGhhdCBvbmx5IHRoZSBzdGF0ZSBvZiB0aGUgZmlyc3RcbiAgc2V0dGxlZCBwcm9taXNlIG1hdHRlcnMuIEZvciBleGFtcGxlLCBldmVuIGlmIG90aGVyIHByb21pc2VzIGdpdmVuIHRvIHRoZVxuICBgcHJvbWlzZXNgIGFycmF5IGFyZ3VtZW50IGFyZSByZXNvbHZlZCwgYnV0IHRoZSBmaXJzdCBzZXR0bGVkIHByb21pc2UgaGFzXG4gIGJlY29tZSByZWplY3RlZCBiZWZvcmUgdGhlIG90aGVyIHByb21pc2VzIGJlY2FtZSBmdWxmaWxsZWQsIHRoZSByZXR1cm5lZFxuICBwcm9taXNlIHdpbGwgYmVjb21lIHJlamVjdGVkOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ3Byb21pc2UgMicpKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVuc1xuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIHByb21pc2UgMiBiZWNhbWUgcmVqZWN0ZWQgYmVmb3JlXG4gICAgLy8gcHJvbWlzZSAxIGJlY2FtZSBmdWxmaWxsZWRcbiAgfSk7XG4gIGBgYFxuXG4gIEFuIGV4YW1wbGUgcmVhbC13b3JsZCB1c2UgY2FzZSBpcyBpbXBsZW1lbnRpbmcgdGltZW91dHM6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBQcm9taXNlLnJhY2UoW2FqYXgoJ2Zvby5qc29uJyksIHRpbWVvdXQoNTAwMCldKVxuICBgYGBcblxuICBAbWV0aG9kIHJhY2VcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FycmF5fSBwcm9taXNlcyBhcnJheSBvZiBwcm9taXNlcyB0byBvYnNlcnZlXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHdoaWNoIHNldHRsZXMgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZSBmaXJzdCBwYXNzZWRcbiAgcHJvbWlzZSB0byBzZXR0bGUuXG4qL1xuZnVuY3Rpb24gcmFjZShlbnRyaWVzKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKCFpc0FycmF5KGVudHJpZXMpKSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAoXywgcmVqZWN0KSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gYXJyYXkgdG8gcmFjZS4nKSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZW50cmllcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnJlc29sdmUoZW50cmllc1tpXSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZWplY3RgIHJldHVybnMgYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIHBhc3NlZCBgcmVhc29uYC5cbiAgSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdXSE9PUFMnKSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgcmVqZWN0XG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHJlYXNvbiB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aC5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgZ2l2ZW4gYHJlYXNvbmAuXG4qL1xuZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcbiAgX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gbmVlZHNSZXNvbHZlcigpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhIHJlc29sdmVyIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgcHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xufVxuXG5mdW5jdGlvbiBuZWVkc05ldygpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Byb21pc2UnOiBQbGVhc2UgdXNlIHRoZSAnbmV3JyBvcGVyYXRvciwgdGhpcyBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbn1cblxuLyoqXG4gIFByb21pc2Ugb2JqZWN0cyByZXByZXNlbnQgdGhlIGV2ZW50dWFsIHJlc3VsdCBvZiBhbiBhc3luY2hyb25vdXMgb3BlcmF0aW9uLiBUaGVcbiAgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCwgd2hpY2hcbiAgcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGUgcmVhc29uXG4gIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuXG4gIFRlcm1pbm9sb2d5XG4gIC0tLS0tLS0tLS0tXG5cbiAgLSBgcHJvbWlzZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHdpdGggYSBgdGhlbmAgbWV0aG9kIHdob3NlIGJlaGF2aW9yIGNvbmZvcm1zIHRvIHRoaXMgc3BlY2lmaWNhdGlvbi5cbiAgLSBgdGhlbmFibGVgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB0aGF0IGRlZmluZXMgYSBgdGhlbmAgbWV0aG9kLlxuICAtIGB2YWx1ZWAgaXMgYW55IGxlZ2FsIEphdmFTY3JpcHQgdmFsdWUgKGluY2x1ZGluZyB1bmRlZmluZWQsIGEgdGhlbmFibGUsIG9yIGEgcHJvbWlzZSkuXG4gIC0gYGV4Y2VwdGlvbmAgaXMgYSB2YWx1ZSB0aGF0IGlzIHRocm93biB1c2luZyB0aGUgdGhyb3cgc3RhdGVtZW50LlxuICAtIGByZWFzb25gIGlzIGEgdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2h5IGEgcHJvbWlzZSB3YXMgcmVqZWN0ZWQuXG4gIC0gYHNldHRsZWRgIHRoZSBmaW5hbCByZXN0aW5nIHN0YXRlIG9mIGEgcHJvbWlzZSwgZnVsZmlsbGVkIG9yIHJlamVjdGVkLlxuXG4gIEEgcHJvbWlzZSBjYW4gYmUgaW4gb25lIG9mIHRocmVlIHN0YXRlczogcGVuZGluZywgZnVsZmlsbGVkLCBvciByZWplY3RlZC5cblxuICBQcm9taXNlcyB0aGF0IGFyZSBmdWxmaWxsZWQgaGF2ZSBhIGZ1bGZpbGxtZW50IHZhbHVlIGFuZCBhcmUgaW4gdGhlIGZ1bGZpbGxlZFxuICBzdGF0ZS4gIFByb21pc2VzIHRoYXQgYXJlIHJlamVjdGVkIGhhdmUgYSByZWplY3Rpb24gcmVhc29uIGFuZCBhcmUgaW4gdGhlXG4gIHJlamVjdGVkIHN0YXRlLiAgQSBmdWxmaWxsbWVudCB2YWx1ZSBpcyBuZXZlciBhIHRoZW5hYmxlLlxuXG4gIFByb21pc2VzIGNhbiBhbHNvIGJlIHNhaWQgdG8gKnJlc29sdmUqIGEgdmFsdWUuICBJZiB0aGlzIHZhbHVlIGlzIGFsc28gYVxuICBwcm9taXNlLCB0aGVuIHRoZSBvcmlnaW5hbCBwcm9taXNlJ3Mgc2V0dGxlZCBzdGF0ZSB3aWxsIG1hdGNoIHRoZSB2YWx1ZSdzXG4gIHNldHRsZWQgc3RhdGUuICBTbyBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IHJlamVjdHMgd2lsbFxuICBpdHNlbGYgcmVqZWN0LCBhbmQgYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCBmdWxmaWxscyB3aWxsXG4gIGl0c2VsZiBmdWxmaWxsLlxuXG5cbiAgQmFzaWMgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLVxuXG4gIGBgYGpzXG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gb24gc3VjY2Vzc1xuICAgIHJlc29sdmUodmFsdWUpO1xuXG4gICAgLy8gb24gZmFpbHVyZVxuICAgIHJlamVjdChyZWFzb24pO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIEFkdmFuY2VkIFVzYWdlOlxuICAtLS0tLS0tLS0tLS0tLS1cblxuICBQcm9taXNlcyBzaGluZSB3aGVuIGFic3RyYWN0aW5nIGF3YXkgYXN5bmNocm9ub3VzIGludGVyYWN0aW9ucyBzdWNoIGFzXG4gIGBYTUxIdHRwUmVxdWVzdGBzLlxuXG4gIGBgYGpzXG4gIGZ1bmN0aW9uIGdldEpTT04odXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpO1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGhhbmRsZXI7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICB4aHIuc2VuZCgpO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkRPTkUpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignZ2V0SlNPTjogYCcgKyB1cmwgKyAnYCBmYWlsZWQgd2l0aCBzdGF0dXM6IFsnICsgdGhpcy5zdGF0dXMgKyAnXScpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXRKU09OKCcvcG9zdHMuanNvbicpLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgVW5saWtlIGNhbGxiYWNrcywgcHJvbWlzZXMgYXJlIGdyZWF0IGNvbXBvc2FibGUgcHJpbWl0aXZlcy5cblxuICBgYGBqc1xuICBQcm9taXNlLmFsbChbXG4gICAgZ2V0SlNPTignL3Bvc3RzJyksXG4gICAgZ2V0SlNPTignL2NvbW1lbnRzJylcbiAgXSkudGhlbihmdW5jdGlvbih2YWx1ZXMpe1xuICAgIHZhbHVlc1swXSAvLyA9PiBwb3N0c0pTT05cbiAgICB2YWx1ZXNbMV0gLy8gPT4gY29tbWVudHNKU09OXG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9KTtcbiAgYGBgXG5cbiAgQGNsYXNzIFByb21pc2VcbiAgQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZXJcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAY29uc3RydWN0b3JcbiovXG5mdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gIHRoaXNbUFJPTUlTRV9JRF0gPSBuZXh0SWQoKTtcbiAgdGhpcy5fcmVzdWx0ID0gdGhpcy5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG5cbiAgaWYgKG5vb3AgIT09IHJlc29sdmVyKSB7XG4gICAgdHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nICYmIG5lZWRzUmVzb2x2ZXIoKTtcbiAgICB0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSA/IGluaXRpYWxpemVQcm9taXNlKHRoaXMsIHJlc29sdmVyKSA6IG5lZWRzTmV3KCk7XG4gIH1cbn1cblxuUHJvbWlzZS5hbGwgPSBhbGw7XG5Qcm9taXNlLnJhY2UgPSByYWNlO1xuUHJvbWlzZS5yZXNvbHZlID0gcmVzb2x2ZTtcblByb21pc2UucmVqZWN0ID0gcmVqZWN0O1xuUHJvbWlzZS5fc2V0U2NoZWR1bGVyID0gc2V0U2NoZWR1bGVyO1xuUHJvbWlzZS5fc2V0QXNhcCA9IHNldEFzYXA7XG5Qcm9taXNlLl9hc2FwID0gYXNhcDtcblxuUHJvbWlzZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQcm9taXNlLFxuXG4gIC8qKlxuICAgIFRoZSBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLFxuICAgIHdoaWNoIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlXG4gICAgcmVhc29uIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbih1c2VyKXtcbiAgICAgIC8vIHVzZXIgaXMgYXZhaWxhYmxlXG4gICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHVzZXIgaXMgdW5hdmFpbGFibGUsIGFuZCB5b3UgYXJlIGdpdmVuIHRoZSByZWFzb24gd2h5XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIENoYWluaW5nXG4gICAgLS0tLS0tLS1cbiAgXG4gICAgVGhlIHJldHVybiB2YWx1ZSBvZiBgdGhlbmAgaXMgaXRzZWxmIGEgcHJvbWlzZS4gIFRoaXMgc2Vjb25kLCAnZG93bnN0cmVhbSdcbiAgICBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmlyc3QgcHJvbWlzZSdzIGZ1bGZpbGxtZW50XG4gICAgb3IgcmVqZWN0aW9uIGhhbmRsZXIsIG9yIHJlamVjdGVkIGlmIHRoZSBoYW5kbGVyIHRocm93cyBhbiBleGNlcHRpb24uXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gdXNlci5uYW1lO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiAnZGVmYXVsdCBuYW1lJztcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh1c2VyTmFtZSkge1xuICAgICAgLy8gSWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGB1c2VyTmFtZWAgd2lsbCBiZSB0aGUgdXNlcidzIG5hbWUsIG90aGVyd2lzZSBpdFxuICAgICAgLy8gd2lsbCBiZSBgJ2RlZmF1bHQgbmFtZSdgXG4gICAgfSk7XG4gIFxuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gaWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGByZWFzb25gIHdpbGwgYmUgJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jy5cbiAgICAgIC8vIElmIGBmaW5kVXNlcmAgcmVqZWN0ZWQsIGByZWFzb25gIHdpbGwgYmUgJ2BmaW5kVXNlcmAgcmVqZWN0ZWQgYW5kIHdlJ3JlIHVuaGFwcHknLlxuICAgIH0pO1xuICAgIGBgYFxuICAgIElmIHRoZSBkb3duc3RyZWFtIHByb21pc2UgZG9lcyBub3Qgc3BlY2lmeSBhIHJlamVjdGlvbiBoYW5kbGVyLCByZWplY3Rpb24gcmVhc29ucyB3aWxsIGJlIHByb3BhZ2F0ZWQgZnVydGhlciBkb3duc3RyZWFtLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgdGhyb3cgbmV3IFBlZGFnb2dpY2FsRXhjZXB0aW9uKCdVcHN0cmVhbSBlcnJvcicpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBUaGUgYFBlZGdhZ29jaWFsRXhjZXB0aW9uYCBpcyBwcm9wYWdhdGVkIGFsbCB0aGUgd2F5IGRvd24gdG8gaGVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBBc3NpbWlsYXRpb25cbiAgICAtLS0tLS0tLS0tLS1cbiAgXG4gICAgU29tZXRpbWVzIHRoZSB2YWx1ZSB5b3Ugd2FudCB0byBwcm9wYWdhdGUgdG8gYSBkb3duc3RyZWFtIHByb21pc2UgY2FuIG9ubHkgYmVcbiAgICByZXRyaWV2ZWQgYXN5bmNocm9ub3VzbHkuIFRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJldHVybmluZyBhIHByb21pc2UgaW4gdGhlXG4gICAgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCB0aGVuIGJlIHBlbmRpbmdcbiAgICB1bnRpbCB0aGUgcmV0dXJuZWQgcHJvbWlzZSBpcyBzZXR0bGVkLiBUaGlzIGlzIGNhbGxlZCAqYXNzaW1pbGF0aW9uKi5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgICAgLy8gVGhlIHVzZXIncyBjb21tZW50cyBhcmUgbm93IGF2YWlsYWJsZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBJZiB0aGUgYXNzaW1saWF0ZWQgcHJvbWlzZSByZWplY3RzLCB0aGVuIHRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCBhbHNvIHJlamVjdC5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCBmdWxmaWxscywgd2UnbGwgaGF2ZSB0aGUgdmFsdWUgaGVyZVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgcmVqZWN0cywgd2UnbGwgaGF2ZSB0aGUgcmVhc29uIGhlcmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgU2ltcGxlIEV4YW1wbGVcbiAgICAtLS0tLS0tLS0tLS0tLVxuICBcbiAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgcmVzdWx0O1xuICBcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZmluZFJlc3VsdCgpO1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfVxuICAgIGBgYFxuICBcbiAgICBFcnJiYWNrIEV4YW1wbGVcbiAgXG4gICAgYGBganNcbiAgICBmaW5kUmVzdWx0KGZ1bmN0aW9uKHJlc3VsdCwgZXJyKXtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBQcm9taXNlIEV4YW1wbGU7XG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBmaW5kUmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEFkdmFuY2VkIEV4YW1wbGVcbiAgICAtLS0tLS0tLS0tLS0tLVxuICBcbiAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgYXV0aG9yLCBib29rcztcbiAgXG4gICAgdHJ5IHtcbiAgICAgIGF1dGhvciA9IGZpbmRBdXRob3IoKTtcbiAgICAgIGJvb2tzICA9IGZpbmRCb29rc0J5QXV0aG9yKGF1dGhvcik7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9XG4gICAgYGBgXG4gIFxuICAgIEVycmJhY2sgRXhhbXBsZVxuICBcbiAgICBgYGBqc1xuICBcbiAgICBmdW5jdGlvbiBmb3VuZEJvb2tzKGJvb2tzKSB7XG4gIFxuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gZmFpbHVyZShyZWFzb24pIHtcbiAgXG4gICAgfVxuICBcbiAgICBmaW5kQXV0aG9yKGZ1bmN0aW9uKGF1dGhvciwgZXJyKXtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZpbmRCb29va3NCeUF1dGhvcihhdXRob3IsIGZ1bmN0aW9uKGJvb2tzLCBlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3VuZEJvb2tzKGJvb2tzKTtcbiAgICAgICAgICAgICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICBmYWlsdXJlKHJlYXNvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFByb21pc2UgRXhhbXBsZTtcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGZpbmRBdXRob3IoKS5cbiAgICAgIHRoZW4oZmluZEJvb2tzQnlBdXRob3IpLlxuICAgICAgdGhlbihmdW5jdGlvbihib29rcyl7XG4gICAgICAgIC8vIGZvdW5kIGJvb2tzXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEBtZXRob2QgdGhlblxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uRnVsZmlsbGVkXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3RlZFxuICAgIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuICB0aGVuOiB0aGVuLFxuXG4gIC8qKlxuICAgIGBjYXRjaGAgaXMgc2ltcGx5IHN1Z2FyIGZvciBgdGhlbih1bmRlZmluZWQsIG9uUmVqZWN0aW9uKWAgd2hpY2ggbWFrZXMgaXQgdGhlIHNhbWVcbiAgICBhcyB0aGUgY2F0Y2ggYmxvY2sgb2YgYSB0cnkvY2F0Y2ggc3RhdGVtZW50LlxuICBcbiAgICBgYGBqc1xuICAgIGZ1bmN0aW9uIGZpbmRBdXRob3IoKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGRuJ3QgZmluZCB0aGF0IGF1dGhvcicpO1xuICAgIH1cbiAgXG4gICAgLy8gc3luY2hyb25vdXNcbiAgICB0cnkge1xuICAgICAgZmluZEF1dGhvcigpO1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH1cbiAgXG4gICAgLy8gYXN5bmMgd2l0aCBwcm9taXNlc1xuICAgIGZpbmRBdXRob3IoKS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQG1ldGhvZCBjYXRjaFxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0aW9uXG4gICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG4gICdjYXRjaCc6IGZ1bmN0aW9uIF9jYXRjaChvblJlamVjdGlvbikge1xuICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3Rpb24pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgICB2YXIgbG9jYWwgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbG9jYWwgPSBnbG9iYWw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbG9jYWwgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2NhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncG9seWZpbGwgZmFpbGVkIGJlY2F1c2UgZ2xvYmFsIG9iamVjdCBpcyB1bmF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgUCA9IGxvY2FsLlByb21pc2U7XG5cbiAgICBpZiAoUCkge1xuICAgICAgICB2YXIgcHJvbWlzZVRvU3RyaW5nID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByb21pc2VUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChQLnJlc29sdmUoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIHNpbGVudGx5IGlnbm9yZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9taXNlVG9TdHJpbmcgPT09ICdbb2JqZWN0IFByb21pc2VdJyAmJiAhUC5jYXN0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2NhbC5Qcm9taXNlID0gUHJvbWlzZTtcbn1cblxuLy8gU3RyYW5nZSBjb21wYXQuLlxuUHJvbWlzZS5wb2x5ZmlsbCA9IHBvbHlmaWxsO1xuUHJvbWlzZS5Qcm9taXNlID0gUHJvbWlzZTtcblxucmV0dXJuIFByb21pc2U7XG5cbn0pKSk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se1wiX3Byb2Nlc3NcIjo5fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyB0aGUgd2hhdHdnLWZldGNoIHBvbHlmaWxsIGluc3RhbGxzIHRoZSBmZXRjaCgpIGZ1bmN0aW9uXG4vLyBvbiB0aGUgZ2xvYmFsIG9iamVjdCAod2luZG93IG9yIHNlbGYpXG4vL1xuLy8gUmV0dXJuIHRoYXQgYXMgdGhlIGV4cG9ydCBmb3IgdXNlIGluIFdlYnBhY2ssIEJyb3dzZXJpZnkgZXRjLlxucmVxdWlyZSgnd2hhdHdnLWZldGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHNlbGYuZmV0Y2guYmluZChzZWxmKTtcblxufSx7XCJ3aGF0d2ctZmV0Y2hcIjoxMH1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxufSx7fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uKHNlbGYpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmIChzZWxmLmZldGNoKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3VwcG9ydCA9IHtcbiAgICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXG4gICAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gICAgYmxvYjogJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiYgJ0Jsb2InIGluIHNlbGYgJiYgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gICAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG4gIH1cblxuICBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICAgIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICAgIF1cblxuICAgIHZhciBpc0RhdGFWaWV3ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbiAgICB9XG5cbiAgICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPSBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHZpZXdDbGFzc2VzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpID4gLTFcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLlxcXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICAvLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuICBmdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpdGVyYXRvclxuICB9XG5cbiAgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgdGhpcy5tYXAgPSB7fVxuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgICB9LCB0aGlzKVxuXG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gICAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUrJywnK3ZhbHVlIDogdmFsdWVcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICAgIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgICAgaWYgKHRoaXMubWFwLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IGl0ZW1zLnB1c2gobmFtZSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkgeyBpdGVtcy5wdXNoKHZhbHVlKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICAgIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gICAgfVxuICAgIGJvZHkuYm9keVVzZWQgPSB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgICB9XG4gICAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICAgIHJldHVybiBwcm9taXNlXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICAgIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gICAgfVxuICAgIHJldHVybiBjaGFycy5qb2luKCcnKVxuICB9XG5cbiAgZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gICAgaWYgKGJ1Zi5zbGljZSkge1xuICAgICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKVxuICAgICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIEJvZHkoKSB7XG4gICAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgICAgaWYgKCFib2R5KSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgICAvLyBJRSAxMC0xMSBjYW4ndCBoYW5kbGUgYSBEYXRhVmlldyBib2R5LlxuICAgICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgQm9keUluaXQgdHlwZScpXG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKVxuICAgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHJldHVybiBjb25zdW1lZCh0aGlzKSB8fCBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxuICB2YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgcmV0dXJuIChtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSkgPyB1cGNhc2VkIDogbWV0aG9kXG4gIH1cblxuICBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgICB9XG4gICAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgICAgfVxuICAgICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVybCA9IFN0cmluZyhpbnB1dClcbiAgICB9XG5cbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdvbWl0J1xuICAgIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gICAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICAgIH1cbiAgICB0aGlzLl9pbml0Qm9keShib2R5KVxuICB9XG5cbiAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywgeyBib2R5OiB0aGlzLl9ib2R5SW5pdCB9KVxuICB9XG5cbiAgZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gICAgYm9keS50cmltKCkuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBmb3JtXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAgIHJhd0hlYWRlcnMuc3BsaXQoL1xccj9cXG4vKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBoZWFkZXJzXG4gIH1cblxuICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbiAgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7fVxuICAgIH1cblxuICAgIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICAgIHRoaXMuc3RhdHVzID0gJ3N0YXR1cycgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzIDogMjAwXG4gICAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICAgIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJ1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gICAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG4gIH1cblxuICBCb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG4gIFJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgICAgdXJsOiB0aGlzLnVybFxuICAgIH0pXG4gIH1cblxuICBSZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gICAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxuXG4gIHZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG4gIFJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG4gIH1cblxuICBzZWxmLkhlYWRlcnMgPSBIZWFkZXJzXG4gIHNlbGYuUmVxdWVzdCA9IFJlcXVlc3RcbiAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlXG5cbiAgc2VsZi5mZXRjaCA9IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMudXJsID0gJ3Jlc3BvbnNlVVJMJyBpbiB4aHIgPyB4aHIucmVzcG9uc2VVUkwgOiBvcHRpb25zLmhlYWRlcnMuZ2V0KCdYLVJlcXVlc3QtVVJMJylcbiAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKVxuXG4gICAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgICB9KVxuXG4gICAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICAgIH0pXG4gIH1cbiAgc2VsZi5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzKTtcblxufSx7fV19LHt9LFszXSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0poY0hBdmFuTXZZV0p2ZFhRdWFuTWlMQ0poY0hBdmFuTXZiR0Z1WkdsdVp5NXFjeUlzSW1Gd2NDOXFjeTl0WVdsdUxtcHpJaXdpWVhCd0wycHpMM0J5YjJwbFkzUnpMbXB6SWl3aVlYQndMMnB6TDNOd1lTNXFjeUlzSW1Gd2NDOXFjeTkxZEdsc2N5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWxjell0Y0hKdmJXbHpaUzlrYVhOMEwyVnpOaTF3Y205dGFYTmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMmx6YjIxdmNuQm9hV010Wm1WMFkyZ3ZabVYwWTJndGJuQnRMV0p5YjNkelpYSnBabmt1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12Y0hKdlkyVnpjeTlpY205M2MyVnlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMM2RvWVhSM1p5MW1aWFJqYUM5bVpYUmphQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUczdPenM3TzJ0Q1EwVjNRaXhaT3p0QlFVWjRRanM3UVVGRlpTeFRRVUZUTEZsQlFWUXNSMEZCZDBJN08wRkJSWEpETzBGQlEwRTdRVUZEUVN4TlFVRk5MRmRCUVZjc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEhOQ1FVRjJRaXhEUVVGcVFqdEJRVU5CTEZkQlFWTXNaMEpCUVZRc1EwRkJNRUlzVDBGQk1VSXNSVUZCYlVNc1dVRkJWenRCUVVNMVF5dzBRa0ZCV1N4TFFVRkxMRlZCUVdwQ08wRkJRMFFzUjBGR1JDeEZRVVZITEV0QlJrZzdRVUZIUkRzN096czdPenM3YTBKRFVuVkNMR003TzBGQlJIaENPMEZCUTJVc1UwRkJVeXhqUVVGVUxFZEJRVEJDT3p0QlFVVnlRenRCUVVOQkxFMUJRVTBzVjBGQlZ5eFRRVUZZTEZGQlFWY3NSMEZCVFR0QlFVTnlRaXhSUVVGTkxFOUJRVThzVTBGQlV5eGhRVUZVTEVOQlFYVkNMRmxCUVhaQ0xFTkJRV0k3UVVGRFFTeFJRVUZOTEZOQlFWTXNVMEZCVkN4TlFVRlRMRWRCUVUwN1FVRkRia0lzVlVGQlNTeFJRVUZSTEV0QlFVc3NWMEZCVEN4TFFVRnhRaXhKUVVGcVF5eEZRVUYxUXp0QlFVTnlReXhaUVVGSkxFOUJRVThzVDBGQlR5eFZRVUZRTEVkQlFXOUNMRTlCUVU4c1YwRkJkRU03UVVGRFFTeGhRVUZMTEZkQlFVd3NSMEZCYlVJc1MwRkJTeXhqUVVGTUxFVkJRVzVDTzBGQlEwUTdRVUZEUml4TFFVeEVPMEZCVFVFc01FSkJRWE5DTEUxQlFYUkNPMEZCUTBRc1IwRlVSRHM3UVVGWFFUdEJRVU5CTEZOQlFVOHNaMEpCUVZBc1EwRkJkMElzVVVGQmVFSXNSVUZCYTBNc1VVRkJiRU03UVVGRlNEczdPenM3UVVOdVFrUTdPMEZCUlVFc1EwRkJReXhaUVVGWE96dEJRVVZXTzBGQlEwRXNUVUZCVFN4VFFVRlRMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeFJRVUYyUWl4RFFVRm1PMEZCUTBFc1RVRkJUU3hqUVVGakxGTkJRVk1zWVVGQlZDeERRVUYxUWl4dFFrRkJka0lzUTBGQmNFSTdRVUZEUVN4TlFVRk5MRTlCUVU4c1UwRkJVeXhoUVVGVUxFTkJRWFZDTEZWQlFYWkNMRU5CUVdJN08wRkJSVUU3UVVGRFFTeFhRVUZUTEZWQlFWUXNSMEZCYzBJN1FVRkRjRUlzVjBGQlR5eFRRVUZRTEVOQlFXbENMRTFCUVdwQ0xFTkJRWGRDTEZkQlFYaENPMEZCUTBRN1FVRkRSQ3hYUVVGVExGVkJRVlFzUTBGQmIwSXNTMEZCY0VJc1JVRkJNa0k3UVVGRGVrSXNVVUZCU1N4TlFVRk5MRTFCUVU0c1NVRkJaMElzVFVGQlRTeE5RVUZPTEVOQlFXRXNVVUZCWWl4TFFVRXdRaXhIUVVFNVF5eEZRVUZ0UkR0QlFVTnFSQ3haUVVGTkxHTkJRVTQ3UVVGRFFUdEJRVU5CTEZWQlFVa3NUVUZCVFN4TlFVRk9MRU5CUVdFc1VVRkJZaXhMUVVFd1FpeFBRVUZQTEZGQlFWQXNRMEZCWjBJc1VVRkJPVU1zUlVGQmQwUTdRVUZEZEVRc1owSkJRVkVzVTBGQlVpeERRVUZyUWl4SlFVRnNRaXhGUVVGM1FpeEpRVUY0UWl4RlFVRTRRaXhOUVVGTkxFMUJRVTRzUTBGQllTeFJRVUV6UXp0QlFVTkJPMEZCUTBRN1FVRkRSanRCUVVOR096dEJRVVZFTzBGQlEwRTdRVUZEUVN4alFVRlpMR2RDUVVGYUxFTkJRVFpDTEU5QlFUZENMRVZCUVhORExGVkJRWFJETEVWQlFXdEVMRXRCUVd4RU8wRkJRMEVzVDBGQlN5eG5Ra0ZCVEN4RFFVRnpRaXhQUVVGMFFpeEZRVUVyUWl4VlFVRXZRaXhGUVVFeVF5eExRVUV6UXp0QlFVVkVMRU5CTTBKRU96czdPenM3T3p0clFrTkRkMElzWlRzN1FVRkllRUk3TzBGQlJVRTdRVUZEWlN4VFFVRlRMR1ZCUVZRc1IwRkJNa0k3TzBGQlJYaERPMEZCUTBFN1FVRkRRU3hOUVVGTkxGZEJRVmNzVTBGQlV5eGhRVUZVTEVOQlFYVkNMSE5DUVVGMlFpeERRVUZxUWp0QlFVTkJMRmRCUVZNc1owSkJRVlFzUTBGQk1FSXNUMEZCTVVJc1JVRkJiVU1zV1VGQlZ6dEJRVU0xUXl3MFFrRkJXU3hMUVVGTExGVkJRV3BDTzBGQlEwUXNSMEZHUkN4RlFVVkhMRXRCUmtnN08wRkJTVUU3UVVGRFFTeE5RVUZOTEZkQlFWY3NUVUZCVFN4SlFVRk9MRU5CUVZjc1UwRkJVeXhuUWtGQlZDeERRVUV3UWl4aFFVRXhRaXhEUVVGWUxFTkJRV3BDTzBGQlEwRXNWMEZCVXl4UFFVRlVMRU5CUVdsQ0xHMUNRVUZYTzBGQlF6RkNMRkZCUVUwc1lVRkJZU3hSUVVGUkxHRkJRVklzUTBGQmMwSXNjMEpCUVhSQ0xFTkJRVzVDTzBGQlEwRXNaVUZCVnl4blFrRkJXQ3hEUVVFMFFpeFBRVUUxUWl4RlFVRnhReXhoUVVGeVF5eEZRVUZ2UkN4TFFVRndSRHM3UVVGRlFTeFJRVUZOTEZsQlFWa3NVVUZCVVN4aFFVRlNMRU5CUVhOQ0xIRkNRVUYwUWl4RFFVRnNRanRCUVVOQkxHTkJRVlVzWjBKQlFWWXNRMEZCTWtJc1QwRkJNMElzUlVGQmIwTXNXVUZCY0VNc1JVRkJhMFFzUzBGQmJFUTdRVUZEUkN4SFFVNUVPenRCUVZGQkxGZEJRVk1zV1VGQlZDeEhRVUYzUWp0QlFVTjBRaXhSUVVGTkxGVkJRVlVzUzBGQlN5eFZRVUZ5UWp0QlFVTkJMRkZCUVUwc1QwRkJUeXhSUVVGUkxITkNRVUZ5UWp0QlFVTkJMRmxCUVZFc1MwRkJVaXhEUVVGakxGTkJRV1FzUjBGQk1FSXNRMEZCTVVJN1FVRkRRU3haUVVGUkxGTkJRVklzUTBGQmEwSXNUVUZCYkVJc1EwRkJlVUlzTkVKQlFYcENPMEZCUTBFc1UwRkJTeXhUUVVGTUxFTkJRV1VzVFVGQlppeERRVUZ6UWl3clFrRkJkRUk3UVVGRFJEczdRVUZGUkN4WFFVRlRMR0ZCUVZRc1IwRkJlVUk3UVVGRGRrSXNVMEZCU3l4VFFVRk1MRU5CUVdVc1RVRkJaaXhEUVVGelFpd3JRa0ZCZEVJN1FVRkRRU3hSUVVGTkxGVkJRVlVzUzBGQlN5eHJRa0ZCY2tJN1FVRkRRU3hSUVVGTkxHRkJRV0VzVVVGQlVTeFRRVUZTTEVOQlFXdENMRkZCUVd4Q0xFTkJRVEpDTERSQ1FVRXpRaXhEUVVGdVFqdEJRVU5CTEZsQlFWRXNVMEZCVWl4RFFVRnJRaXhOUVVGc1FpeERRVUY1UWl3MFFrRkJla0k3UVVGRFFTeFpRVUZSTEV0QlFWSXNRMEZCWXl4VFFVRmtMRWRCUVRCQ0xHRkJRV0VzUTBGQllpeEhRVUZ2UWl4UlFVRlJMRmxCUVRWQ0xFOUJRVEZDTzBGQlEwUTdRVUZGUmpzN096czdPenM3T3p0QlEzUkRSRHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenRCUVVWQk8wRkJRMEVzVVVGQlVTeGhRVUZTTEVWQlFYVkNMRkZCUVhaQ08wRkJRMEVzVVVGQlVTeHJRa0ZCVWpzN1FVRkZRVHRCUVVOQk8wRkJRMDhzU1VGQlRTdzBRMEZCYTBJc1UwRkJiRUlzWlVGQmEwSXNSMEZCVFR0QlFVTnVReXhOUVVGTkxFOUJRVThzVDBGQlR5eFJRVUZRTEVOQlFXZENMRkZCUVRkQ08wRkJRMEVzVFVGQlNTeFRRVUZUTEVkQlFWUXNTVUZCWjBJc1UwRkJVeXhoUVVFM1FpeEZRVUUwUXp0QlFVTXhRenRCUVVORUxFZEJSa1FzVFVGRlR5eEpRVUZKTEV0QlFVc3NWVUZCVEN4RFFVRm5RaXhSUVVGb1FpeERRVUZLTEVWQlFTdENPMEZCUTNCRE8wRkJRMFFzUjBGR1RTeE5RVVZCTEVsQlFVa3NTMEZCU3l4VlFVRk1MRU5CUVdkQ0xGZEJRV2hDTEVOQlFVb3NSVUZCYTBNN1FVRkRka003UVVGRFJDeEhRVVpOTEUxQlJVRTdRVUZEVER0QlFVTkVPMEZCUTBZc1EwRllUVHM3UVVGaFVEdEJRVU5QTEVsQlFVMHNhME5CUVdFc1UwRkJZaXhWUVVGaExFZEJRVTA3UVVGRE9VSXNUVUZCVFN4TlFVRk5MRTlCUVU4c1VVRkJVQ3hEUVVGblFpeEpRVUUxUWp0QlFVTkJMRmRCUVZNc1IwRkJWQ3hGUVVGakxFbEJRV1FzUTBGQmJVSXNWVUZCUXl4WlFVRkVMRVZCUVd0Q08wRkJRMjVETEZGQlFVMHNXVUZCV1N4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzVFVGQmRrSXNRMEZCYkVJN1FVRkRRU3hqUVVGVkxGTkJRVllzUjBGQmMwSXNXVUZCZEVJN1FVRkRRU3hSUVVGTkxGVkJRVlVzVTBGQlV5eGhRVUZVTEVOQlFYVkNMRTlCUVhaQ0xFTkJRV2hDTzBGQlEwRXNVVUZCVFN4VlFVRlZMRlZCUVZVc1lVRkJWaXhEUVVGM1FpeFBRVUY0UWl4RFFVRm9RanRCUVVOQkxGRkJRVTBzVjBGQlZ5eFZRVUZWTEc5Q1FVRldMRU5CUVN0Q0xFOUJRUzlDTEVWQlFYZERMRU5CUVhoRExFVkJRVEpETEZkQlFUVkVPMEZCUTBFc1VVRkJUU3hWUVVGVkxGVkJRVlVzYjBKQlFWWXNRMEZCSzBJc1RVRkJMMElzUlVGQmRVTXNZVUZCZGtNc1JVRkJjMFFzVDBGQmRFVTdRVUZEUVN4WlFVRlJMRWRCUVZJc1EwRkJXU3hQUVVGYU8wRkJRMEVzV1VGQlVTeFZRVUZTTEVOQlFXMUNMRmxCUVc1Q0xFTkJRV2RETEU5QlFXaERMRVZCUVhsRExFOUJRWHBETzBGQlEwRXNZVUZCVXl4TFFVRlVMRWRCUVdsQ0xGRkJRV3BDTzBGQlEwRXNZVUZCVXl4dlFrRkJWQ3hEUVVFNFFpeE5RVUU1UWl4RlFVRnpReXhoUVVGMFF5eEZRVUZ4UkN4UFFVRnlSQ3hIUVVFclJDeFBRVUV2UkR0QlFVTkJMSFZDUVVGUExFOUJRVkE3UVVGRFFUdEJRVU5FTEVkQllrUTdRVUZqUkN4RFFXaENUVHM3UVVGclFsQTdRVUZEUVN4SlFVRk5MRkZCUVZFc1JVRkJaRHRCUVVOQkxGTkJRVk1zVVVGQlZDeERRVUZyUWl4SFFVRnNRaXhGUVVGMVFqdEJRVU55UWl4TlFVRkpMRTFCUVUwc1IwRkJUaXhEUVVGS0xFVkJRV2RDTzBGQlEyUXNWMEZCVHl4UlFVRlJMRTlCUVZJc1EwRkJaMElzVFVGQlRTeEhRVUZPTEVOQlFXaENMRU5CUVZBN1FVRkRSRHRCUVVORUxGTkJRVThzVFVGQlRTeEhRVUZPTEVWQlEwb3NTVUZFU1N4RFFVTkRMRlZCUVVNc1VVRkJSQ3hGUVVGak8wRkJRMnhDTEZGQlFVa3NVMEZCVXl4RlFVRmlMRVZCUVdsQ08wRkJRMllzV1VGQlRTeEhRVUZPTEVsQlFXRXNVMEZCVXl4SlFVRlVMRVZCUVdJN1FVRkRRU3hoUVVGUExFMUJRVTBzUjBGQlRpeERRVUZRTzBGQlEwUXNTMEZJUkN4TlFVZFBPMEZCUTB3c1kwRkJVU3hIUVVGU0xFTkJRVmtzT0VKQlFWbzdRVUZEUkR0QlFVTkdMRWRCVWtrc1JVRlRTaXhMUVZSSkxFTkJVMFVzVlVGQlF5eEhRVUZFTzBGQlFVRXNWMEZCVXl4UlFVRlJMRWRCUVZJc01FTkJRVzFFTEVkQlFXNUVMRmRCUVRSRUxFbEJRVWtzVDBGQmFFVXNRMEZCVkR0QlFVRkJMRWRCVkVZc1EwRkJVRHRCUVZWRU96dEJRVVZFTzBGQlEwRXNUMEZCVHl4blFrRkJVQ3hEUVVGM1FpeFZRVUY0UWl4RlFVRnZReXhWUVVGd1F6czdPenM3T3pzN1FVTTVSRUU3UVVGRFFTeEpRVUZOTEZOQlFWTXNVMEZCVkN4TlFVRlRMRU5CUVVNc1EwRkJSRHRCUVVGQkxGTkJRVThzUTBGQlVEdEJRVUZCTEVOQlFXWTdRVUZEUVN4SlFVRk5MR0ZCUVdFc1UwRkJZaXhWUVVGaExFTkJRVU1zUTBGQlJEdEJRVUZCTEZOQlFVOHNTVUZCUlN4RFFVRlVPMEZCUVVFc1EwRkJia0k3UVVGRFFTeEpRVUZOTEdOQlFXTXNVMEZCWkN4WFFVRmpMRU5CUVVNc1EwRkJSRHRCUVVGQkxGTkJRVThzUzBGQlJ5eEpRVUZGTEVOQlFVd3NRMEZCVUR0QlFVRkJMRU5CUVhCQ08wRkJRMEVzU1VGQlRTeG5Ra0ZCWjBJc1UwRkJhRUlzWVVGQlowSXNRMEZCUXl4RFFVRkVPMEZCUVVFc1UwRkJUeXhKUVVGRkxFVkJRVVlzUjBGQlVTeEpRVUZGTEVOQlFVWXNSMEZCU1N4RFFVRmFMRWRCUVd0Q0xFTkJRVU1zUTBGQlJDeEhRVUZITEVOQlFVTXNTVUZCUlN4SlFVRkZMRU5CUVV3c1NVRkJVU3hEUVVGd1F6dEJRVUZCTEVOQlFYUkNPMEZCUTBFc1NVRkJUU3hqUVVGakxGTkJRV1FzVjBGQll5eERRVUZETEVOQlFVUTdRVUZCUVN4VFFVRlBMRWxCUVVVc1EwRkJSaXhIUVVGSkxFTkJRVmc3UVVGQlFTeERRVUZ3UWp0QlFVTkJMRWxCUVUwc1pVRkJaU3hUUVVGbUxGbEJRV1VzUTBGQlF5eERRVUZFTzBGQlFVRXNVMEZCVVN4RlFVRkZMRU5CUVVnc1IwRkJUU3hEUVVGT0xFZEJRVkVzUTBGQlVpeEhRVUZWTEVOQlFXcENPMEZCUVVFc1EwRkJja0k3UVVGRFFTeEpRVUZOTEdsQ1FVRnBRaXhUUVVGcVFpeGpRVUZwUWl4RFFVRkRMRU5CUVVRN1FVRkJRU3hUUVVGUExFbEJRVVVzUlVGQlJpeEhRVUZSTEVsQlFVVXNRMEZCUml4SFFVRkpMRU5CUVVvc1IwRkJUU3hEUVVGa0xFZEJRVzlDTEVOQlFVTXNTVUZCUlN4RFFVRklMRXRCUVU4c1NVRkJSU3hEUVVGR0xFZEJRVWtzUTBGQldDeExRVUZsTEVsQlFVVXNRMEZCUml4SFFVRkpMRU5CUVc1Q0xFbEJRWE5DTEVOQlFXcEVPMEZCUVVFc1EwRkJka0k3UVVGRFFTeEpRVUZOTEdOQlFXTXNVMEZCWkN4WFFVRmpMRU5CUVVNc1EwRkJSRHRCUVVGQkxGTkJRVThzU1VGQlJTeERRVUZHTEVkQlFVa3NRMEZCU2l4SFFVRk5MRU5CUVdJN1FVRkJRU3hEUVVGd1FqdEJRVU5CTEVsQlFVMHNaVUZCWlN4VFFVRm1MRmxCUVdVc1EwRkJReXhEUVVGRU8wRkJRVUVzVTBGQlR5eEpRVUZITEVWQlFVVXNRMEZCU0N4SFFVRk5MRU5CUVU0c1IwRkJVU3hEUVVGU0xFZEJRVlVzUTBGQmJrSTdRVUZCUVN4RFFVRnlRanRCUVVOQkxFbEJRVTBzYVVKQlFXbENMRk5CUVdwQ0xHTkJRV2xDTEVOQlFVTXNRMEZCUkR0QlFVRkJMRk5CUVU4c1NVRkJSU3hGUVVGR0xFZEJRVkVzU1VGQlJTeERRVUZHTEVkQlFVa3NRMEZCU2l4SFFVRk5MRU5CUVU0c1IwRkJVU3hEUVVGb1FpeEhRVUZ6UWl4SlFVRkZMRWxCUVVjc1JVRkJSU3hEUVVGTUxFZEJRVkVzUTBGQlVpeEhRVUZWTEVOQlFWWXNSMEZCV1N4RFFVRXpRenRCUVVGQkxFTkJRWFpDT3p0QlFVVkJPMEZCUTA4c1NVRkJUU3h2UTBGQll5eFRRVUZrTEZkQlFXTXNRMEZCUXl4RlFVRkVMRVZCUVhsQ08wRkJRVUVzVFVGQmNFSXNVVUZCYjBJc2RVVkJRVlFzU1VGQlV6czdRVUZEYkVRc1RVRkJUU3hUUVVGVExFZEJRVWNzV1VGQmJFSTdRVUZEUVN4TlFVRk5MRkZCUVZFc1MwRkJTeXhIUVVGTUxFVkJRV1E3UVVGRFFTeE5RVUZOTEZOQlFWTXNVMEZCVkN4TlFVRlRMRWRCUVUwN1FVRkRia0lzVVVGQlRTeE5RVUZOTEV0QlFVc3NSMEZCVEN4RlFVRmFPMEZCUTBFc1VVRkJUU3hQUVVGUExFTkJRVU1zVFVGQlRTeExRVUZRTEVsQlFXZENMRkZCUVRkQ08wRkJRME1zVVVGQlRTeFRRVUZUTEdGQlFXRXNTVUZCWWl4RFFVRm1PMEZCUTBRc1QwRkJSeXhUUVVGSUxFZEJRV2RDTEZWQlFWVXNTVUZCU1N4TlFVRmtMRU5CUVVRc1IwRkJNRUlzVFVGQmVrTTdRVUZEUVN4UlFVRkpMRWRCUVVjc1UwRkJTQ3hMUVVGcFFpeERRVUZ5UWl4RlFVRjNRanRCUVVONFFpd3dRa0ZCYzBJc1RVRkJkRUk3UVVGRFJDeEhRVkJFTzBGQlVVRTdRVUZEUkN4RFFWcE5PenRCUVdOUU8wRkJRMDhzU1VGQlRTd3dRa0ZCVXl4VFFVRlVMRTFCUVZNc1EwRkJReXhGUVVGRUxFVkJRWGxDTzBGQlFVRXNUVUZCY0VJc1VVRkJiMElzZFVWQlFWUXNTVUZCVXpzN1FVRkROME1zUzBGQlJ5eExRVUZJTEVOQlFWTXNUMEZCVkN4SFFVRnRRaXhEUVVGdVFqdEJRVU5CTEUxQlFVMHNVMEZCVXl4RFFVRm1PMEZCUTBFc1RVRkJUU3hSUVVGUkxFdEJRVXNzUjBGQlRDeEZRVUZrTzBGQlEwRXNUVUZCVFN4UFFVRlBMRk5CUVZBc1NVRkJUeXhIUVVGTk8wRkJRMnBDTEZGQlFVMHNUVUZCVFN4TFFVRkxMRWRCUVV3c1JVRkJXanRCUVVOQkxGRkJRVTBzVDBGQlR5eERRVUZETEUxQlFVMHNTMEZCVUN4SlFVRm5RaXhSUVVFM1FqdEJRVU5CTEZGQlFVMHNVMEZCVXl4WlFVRlpMRWxCUVZvc1EwRkJaanRCUVVOQkxFOUJRVWNzUzBGQlNDeERRVUZUTEU5QlFWUXNSMEZCYlVJc1RVRkJia0k3UVVGRFFTeFJRVUZKTEVkQlFVY3NTMEZCU0N4RFFVRlRMRTlCUVZRc1IwRkJiVUlzUTBGQmRrSXNSVUZCTUVJN1FVRkRlRUlzVTBGQlJ5eExRVUZJTEVOQlFWTXNUMEZCVkN4SFFVRnRRaXhEUVVGdVFqdEJRVU5CTzBGQlEwUTdRVUZEUkN3d1FrRkJjMElzU1VGQmRFSTdRVUZEUkN4SFFWWkVPMEZCVjBFN1FVRkRSQ3hEUVdoQ1RUczdRVUZyUWxBN1FVRkRUeXhKUVVGTkxEUkNRVUZWTEZOQlFWWXNUMEZCVlN4RFFVRkRMRVZCUVVRc1JVRkJlVUk3UVVGQlFTeE5RVUZ3UWl4UlFVRnZRaXgxUlVGQlZDeEpRVUZUT3p0QlFVTTVReXhMUVVGSExFdEJRVWdzUTBGQlV5eFBRVUZVTEVkQlFXMUNMRU5CUVc1Q08wRkJRMEVzVFVGQlRTeFJRVUZSTEV0QlFVc3NSMEZCVEN4RlFVRmtPMEZCUTBFc1RVRkJUU3hQUVVGUExGTkJRVkFzU1VGQlR5eEhRVUZOTzBGQlEycENMRkZCUVUwc1RVRkJUU3hMUVVGTExFZEJRVXdzUlVGQldqdEJRVU5CTEZGQlFVMHNUMEZCVHl4RFFVRkRMRTFCUVUwc1MwRkJVQ3hKUVVGblFpeFJRVUUzUWp0QlFVTkJMRkZCUVUwc1UwRkJVeXhoUVVGaExFbEJRV0lzUTBGQlpqdEJRVU5CTEU5QlFVY3NTMEZCU0N4RFFVRlRMRTlCUVZRc1IwRkJiVUlzU1VGQlNTeE5RVUYyUWp0QlFVTkJMRkZCUVVrc1IwRkJSeXhMUVVGSUxFTkJRVk1zVDBGQlZDeEhRVUZ0UWl4RFFVRjJRaXhGUVVFd1FqdEJRVU40UWl4VFFVRkhMRXRCUVVnc1EwRkJVeXhQUVVGVUxFZEJRVzFDTEVOQlFXNUNPMEZCUTBFN1FVRkRSRHRCUVVORUxEQkNRVUZ6UWl4SlFVRjBRanRCUVVORUxFZEJWa1E3UVVGWFFUdEJRVU5FTEVOQlprMDdPenM3UVVNdlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0QlEzQnZRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGNFeEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVJR1VvZEN4dUxISXBlMloxYm1OMGFXOXVJSE1vYnl4MUtYdHBaaWdoYmx0dlhTbDdhV1lvSVhSYmIxMHBlM1poY2lCaFBYUjVjR1Z2WmlCeVpYRjFhWEpsUFQxY0ltWjFibU4wYVc5dVhDSW1KbkpsY1hWcGNtVTdhV1lvSVhVbUptRXBjbVYwZFhKdUlHRW9ieXdoTUNrN2FXWW9hU2x5WlhSMWNtNGdhU2h2TENFd0tUdDJZWElnWmoxdVpYY2dSWEp5YjNJb1hDSkRZVzV1YjNRZ1ptbHVaQ0J0YjJSMWJHVWdKMXdpSzI4clhDSW5YQ0lwTzNSb2NtOTNJR1l1WTI5a1pUMWNJazFQUkZWTVJWOU9UMVJmUms5VlRrUmNJaXhtZlhaaGNpQnNQVzViYjEwOWUyVjRjRzl5ZEhNNmUzMTlPM1JiYjExYk1GMHVZMkZzYkNoc0xtVjRjRzl5ZEhNc1puVnVZM1JwYjI0b1pTbDdkbUZ5SUc0OWRGdHZYVnN4WFZ0bFhUdHlaWFIxY200Z2N5aHVQMjQ2WlNsOUxHd3NiQzVsZUhCdmNuUnpMR1VzZEN4dUxISXBmWEpsZEhWeWJpQnVXMjlkTG1WNGNHOXlkSE45ZG1GeUlHazlkSGx3Wlc5bUlISmxjWFZwY21VOVBWd2lablZ1WTNScGIyNWNJaVltY21WeGRXbHlaVHRtYjNJb2RtRnlJRzg5TUR0dlBISXViR1Z1WjNSb08yOHJLeWx6S0hKYmIxMHBPM0psZEhWeWJpQnpmU2tpTENKcGJYQnZjblFnZXlCelkzSnZiR3hVYjFSdmNDQjlJR1p5YjIwZ0p5NHZkWFJwYkhNblhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlISjFia0ZpYjNWMFVHRm5aU2dwSUh0Y2JseHVJQ0F2THlCelpYUWdkWEFnWVhKeWIzY2dLeUJ6WTNKdmJHd2dkRzhnZEc5d0lHWjFibU4wYVc5dVhHNGdJQzh2SUZSUFJFODZJRzl1YkhrZ2MyaHZkeUJoY25KdmR5QnBaaUJ1WldWa1pXUWdXMmhsYVdkb2RDQStJREV3TUNVZ2RtbGxkM0J2Y25SZFhHNGdJR052Ym5OMElIUnZjRUZ5Y205M0lEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxtcHpMWEJoWjJWZlgyRnljbTkzTFMxMGIzQW5LVnh1SUNCMGIzQkJjbkp2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhOamNtOXNiRlJ2Vkc5d0tIUm9hWE11Y0dGeVpXNTBUbTlrWlNsY2JpQWdmU3dnWm1Gc2MyVXBYRzU5WEc0aUxDSmNiaTh2SUd4aGJtUnBibWNnY0dGblpTQm1kVzVqZEdsdmJuTmNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlISjFia3hoYm1ScGJtZFFZV2RsS0NrZ2UxeHVYRzRnSUNBZ0x5OGdjR2w0Wld4elhqSWdLeUJtYVc1a1FYSmxZU0JtZFc1amRHbHZibHh1SUNBZ0lHTnZibk4wSUdacGJtUkJjbVZoSUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdZMjlrWlNBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1cWN5MXdhWGhsYkhNbktWeHVJQ0FnSUNBZ1kyOXVjM1FnY0dsNFpXeHpJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb1kyOWtaU0FtSmlCamIyUmxMblJsZUhSRGIyNTBaVzUwSUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdGeVpXRWdQU0IzYVc1a2IzY3VhVzV1WlhKWGFXUjBhQ0FxSUhkcGJtUnZkeTVwYm01bGNraGxhV2RvZEZ4dUlDQWdJQ0FnSUNBZ0lHTnZaR1V1ZEdWNGRFTnZiblJsYm5RZ1BTQmhjbVZoTG5SdlRHOWpZV3hsVTNSeWFXNW5LQ2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbEtIQnBlR1ZzY3lsY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JtYVc1a1FYSmxZU2dwWEc0Z0lDQWdkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozSmxjMmw2WlNjc0lHWnBibVJCY21WaEtWeHVYRzU5WEc0aUxDSnBiWEJ2Y25RZ2V5QjFjR1JoZEdWUVlXZGxMQ0J5ZFc1T1pYZEdkVzVqZEdsdmJuTWdmU0JtY205dElDY3VMM053WVNkY2JseHVLR1oxYm1OMGFXOXVLQ2tnZTF4dVhHNGdJQzh2SUNCdVlYWnBaMkYwYVc5dUlITmxiR1ZqZEc5eWMxeHVJQ0JqYjI1emRDQm9aV0ZrWlhJZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0Nkb1pXRmtaWEluS1Z4dUlDQmpiMjV6ZENCMGNtbG5aMlZ5VFdWdWRTQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXFjeTEwY21sbloyVnlMUzF0Wlc1MUp5bGNiaUFnWTI5dWMzUWdiV1Z1ZFNBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1cWN5MXRaVzUxSnlsY2JseHVJQ0F2THlBZ2JtRjJhV2RoZEdsdmJpQnRaWFJvYjJSelhHNGdJR1oxYm1OMGFXOXVJSFJ2WjJkc1pVMWxiblVvS1NCN1hHNGdJQ0FnYUdWaFpHVnlMbU5zWVhOelRHbHpkQzUwYjJkbmJHVW9KMjFsYm5VdGIzQmxiaWNwWEc0Z0lIMWNiaUFnWm5WdVkzUnBiMjRnWTJoaGJtZGxVR0ZuWlNobGRtVnVkQ2tnZTF4dUlDQWdJR2xtSUNobGRtVnVkQzUwWVhKblpYUWdKaVlnWlhabGJuUXVkR0Z5WjJWMExtNXZaR1ZPWVcxbElEMDlQU0FuUVNjcElIdGNiaUFnSUNBZ0lHVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2xjYmlBZ0lDQWdJSFJ2WjJkc1pVMWxiblVvS1Z4dUlDQWdJQ0FnYVdZZ0tHVjJaVzUwTG5SaGNtZGxkQzV3WVhSb2JtRnRaU0FoUFQwZ2QybHVaRzkzTG14dlkyRjBhVzl1TG5CaGRHaHVZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lHaHBjM1J2Y25rdWNIVnphRk4wWVhSbEtHNTFiR3dzSUc1MWJHd3NJR1YyWlc1MExuUmhjbWRsZEM1d1lYUm9ibUZ0WlNsY2JpQWdJQ0FnSUNBZ2RYQmtZWFJsVUdGblpTZ3BYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeThnSUc1aGRtbG5ZWFJwYjI0Z1pYWmxiblFnYkdsemRHVnVaWEp6SUNzZ2NuVnVJRzl1SUdsdWFYUnBZV3dnYkc5aFpGeHVJQ0J5ZFc1T1pYZEdkVzVqZEdsdmJuTW9LVnh1SUNCMGNtbG5aMlZ5VFdWdWRTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lIUnZaMmRzWlUxbGJuVXNJR1poYkhObEtWeHVJQ0J0Wlc1MUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z1kyaGhibWRsVUdGblpTd2dabUZzYzJVcFhHNWNibjBwS0NsY2JpSXNJbWx0Y0c5eWRDQjdJSE5qY205c2JGUnZWRzl3TENCbVlXUmxUM1YwTENCbVlXUmxTVzRnZlNCbWNtOXRJQ2N1TDNWMGFXeHpKMXh1WEc0dkx5QndjbTlxWldOMGN5QndZV2RsSUMwZ2MzQmxZMmxtYVdNZ1puVnVZM1JwYjI1elhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCeWRXNVFjbTlxWldOMGMxQmhaMlVvS1NCN1hHNWNiaUFnTHk4Z2MyVjBJSFZ3SUdGeWNtOTNJQ3NnYzJOeWIyeHNJSFJ2SUhSdmNDQm1kVzVqZEdsdmJseHVJQ0F2THlCVVQwUlBPaUJ2Ym14NUlITm9iM2NnWVhKeWIzY2dhV1lnYm1WbFpHVmtJRnRvWldsbmFIUWdQaUF4TURBbElIWnBaWGR3YjNKMFhWeHVJQ0JqYjI1emRDQjBiM0JCY25KdmR5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXFjeTF3WVdkbFgxOWhjbkp2ZHkwdGRHOXdKeWxjYmlBZ2RHOXdRWEp5YjNjdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCelkzSnZiR3hVYjFSdmNDaDBhR2x6TG5CaGNtVnVkRTV2WkdVcFhHNGdJSDBzSUdaaGJITmxLVnh1WEc0Z0lDOHZJQ0JzYjI5d0lHOTJaWElnWlhabGNua2djSEp2YW1WamRDd2dZV1JrSUdWMlpXNTBJR3hwYzNSbGJtVnlJSFJ2SUdWNGNHRnVaQ0JwWTI5dUlHSjFkSFJ2Ymx4dUlDQmpiMjV6ZENCd2NtOXFaV04wY3lBOUlFRnljbUY1TG1aeWIyMG9aRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25MbXB6TFhCeWIycGxZM1FuS1NsY2JpQWdjSEp2YW1WamRITXVabTl5UldGamFDaHdjbTlxWldOMElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCbGVIQmhibVJKWTI5dUlEMGdjSEp2YW1WamRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWNISnZhbVZqZEY5ZlpYaHdZVzVrU1dOdmJpY3BYRzRnSUNBZ1pYaHdZVzVrU1dOdmJpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lHVjRjR0Z1WkVSbGRHRnBiSE1zSUdaaGJITmxLVnh1WEc0Z0lDQWdZMjl1YzNRZ1kyeHZjMlZKWTI5dUlEMGdjSEp2YW1WamRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWNISnZhbVZqZEY5ZlkyeHZjMlZKWTI5dUp5bGNiaUFnSUNCamJHOXpaVWxqYjI0dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCamJHOXpaVVJsZEdGcGJITXNJR1poYkhObEtWeHVJQ0I5S1Z4dVhHNGdJR1oxYm1OMGFXOXVJR05zYjNObFJHVjBZV2xzY3lncElIdGNiaUFnSUNCamIyNXpkQ0JrWlhSaGFXeHpJRDBnZEdocGN5NXdZWEpsYm5ST2IyUmxYRzRnSUNBZ1kyOXVjM1FnYVdOdmJpQTlJR1JsZEdGcGJITXVjSEpsZG1sdmRYTkZiR1Z0Wlc1MFUybGliR2x1WjF4dUlDQWdJR1JsZEdGcGJITXVjM1I1YkdVdWJXRjRTR1ZwWjJoMElEMGdNRnh1SUNBZ0lHUmxkR0ZwYkhNdVkyeGhjM05NYVhOMExuUnZaMmRzWlNnbmNISnZhbVZqZEY5ZlpHVjBZV2xzY3kwdFpYaHdZVzVrWldRbktWeHVJQ0FnSUdsamIyNHVZMnhoYzNOTWFYTjBMblJ2WjJkc1pTZ25jSEp2YW1WamRGOWZaWGh3WVc1a1NXTnZiaTB0Wlhod1lXNWtaV1FuS1Z4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z1pYaHdZVzVrUkdWMFlXbHNjeWdwSUh0Y2JpQWdJQ0IwYUdsekxtTnNZWE56VEdsemRDNTBiMmRuYkdVb0ozQnliMnBsWTNSZlgyVjRjR0Z1WkVsamIyNHRMV1Y0Y0dGdVpHVmtKeWxjYmlBZ0lDQmpiMjV6ZENCa1pYUmhhV3h6SUQwZ2RHaHBjeTV1WlhoMFJXeGxiV1Z1ZEZOcFlteHBibWRjYmlBZ0lDQmpiMjV6ZENCcGMwVjRjR0Z1WkdWa0lEMGdaR1YwWVdsc2N5NWpiR0Z6YzB4cGMzUXVZMjl1ZEdGcGJuTW9KM0J5YjJwbFkzUmZYMlJsZEdGcGJITXRMV1Y0Y0dGdVpHVmtKeWxjYmlBZ0lDQmtaWFJoYVd4ekxtTnNZWE56VEdsemRDNTBiMmRuYkdVb0ozQnliMnBsWTNSZlgyUmxkR0ZwYkhNdExXVjRjR0Z1WkdWa0p5bGNiaUFnSUNCa1pYUmhhV3h6TG5OMGVXeGxMbTFoZUVobGFXZG9kQ0E5SUdselJYaHdZVzVrWldRZ1B5QXdJRG9nWUNSN1pHVjBZV2xzY3k1elkzSnZiR3hJWldsbmFIUjljSGhnWEc0Z0lIMWNibHh1ZlZ4dUlpd2lhVzF3YjNKMElISjFia3hoYm1ScGJtZFFZV2RsSUdaeWIyMGdKeTR2YkdGdVpHbHVaeWRjYm1sdGNHOXlkQ0J5ZFc1QlltOTFkRkJoWjJVZ1puSnZiU0FuTGk5aFltOTFkQ2RjYm1sdGNHOXlkQ0J5ZFc1UWNtOXFaV04wYzFCaFoyVWdabkp2YlNBbkxpOXdjbTlxWldOMGN5ZGNibWx0Y0c5eWRDQjdJR1poWkdWSmJpQjlJR1p5YjIwZ0p5NHZkWFJwYkhNblhHNWNiaTh2SUdabGRHTm9JSEJ2YkhsbWFXeHNJR1p2Y2lCdGIySnBiR1VnWkdWMmFXTmxjMXh1Y21WeGRXbHlaU2duWlhNMkxYQnliMjFwYzJVbktTNXdiMng1Wm1sc2JDZ3BYRzV5WlhGMWFYSmxLQ2RwYzI5dGIzSndhR2xqTFdabGRHTm9KeWxjYmx4dUx5OGdjblZ1SUdaMWJtTjBhVzl1Y3lCemNHVmphV1pwWXlCMGJ5QndZV2RsWEc0dkx5QlVUMFJQT2lCeVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZHlaWE5wZW1VbkxDQm1hVzVrUVhKbFlTa2dkMmhsYmlCdWIzUWdiMjRnYkdGdVpHbHVaeUJ3WVdkbFhHNWxlSEJ2Y25RZ1kyOXVjM1FnY25WdVRtVjNSblZ1WTNScGIyNXpJRDBnS0NrZ1BUNGdlMXh1SUNCamIyNXpkQ0J3WVhSb0lEMGdkMmx1Wkc5M0xteHZZMkYwYVc5dUxuQmhkR2h1WVcxbFhHNGdJR2xtSUNod1lYUm9JRDA5UFNBbkx5Y2dmSHdnY0dGMGFDQTlQVDBnSnk5cGJtUmxlQzVvZEcxc0p5a2dlMXh1SUNBZ0lISjFia3hoYm1ScGJtZFFZV2RsS0NsY2JpQWdmU0JsYkhObElHbG1JQ2h3WVhSb0xuTjBZWEowYzFkcGRHZ29KeTloWW05MWRDY3BLU0I3WEc0Z0lDQWdjblZ1UVdKdmRYUlFZV2RsS0NsY2JpQWdmU0JsYkhObElHbG1JQ2h3WVhSb0xuTjBZWEowYzFkcGRHZ29KeTl3Y205cVpXTjBjeWNwS1NCN1hHNGdJQ0FnY25WdVVISnZhbVZqZEhOUVlXZGxLQ2xjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dWZWeHVYRzR2THlCMWNHUmhkR1VnS3lCbVlXUmxJR2x1SUc1bGR5QndZV2RsSUc5dUlIVnliQ0JqYUdGdVoyVmNibVY0Y0c5eWRDQmpiMjV6ZENCMWNHUmhkR1ZRWVdkbElEMGdLQ2tnUFQ0Z2UxeHVJQ0JqYjI1emRDQjFjbXdnUFNCM2FXNWtiM2N1Ykc5allYUnBiMjR1YUhKbFpseHVJQ0JzYjJGa1VHRm5aU2gxY213cExuUm9aVzRvS0hKbGMzQnZibk5sVkdWNGRDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHTnZiblJoYVc1bGNpQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyaDBiV3duS1Z4dUlDQWdJR052Ym5SaGFXNWxjaTVwYm01bGNraFVUVXdnUFNCeVpYTndiMjV6WlZSbGVIUmNiaUFnSUNCamIyNXpkQ0J2YkdSUVlXZGxJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbkJoWjJVbktWeHVJQ0FnSUdOdmJuTjBJRzVsZDFCaFoyVWdQU0JqYjI1MFlXbHVaWEl1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbkJoWjJVbktWeHVJQ0FnSUdOdmJuTjBJRzVsZDFScGRHeGxJRDBnWTI5dWRHRnBibVZ5TG1kbGRFVnNaVzFsYm5SelFubFVZV2RPWVcxbEtDZDBhWFJzWlNjcFd6QmRMblJsZUhSRGIyNTBaVzUwWEc0Z0lDQWdZMjl1YzNRZ2JtVjNSR1Z6WXlBOUlHTnZiblJoYVc1bGNpNW5aWFJGYkdWdFpXNTBjMEo1VkdGblRtRnRaU2duYldWMFlTY3BXeWRrWlhOamNtbHdkR2x2YmlkZExtTnZiblJsYm5SY2JpQWdJQ0JqYjI1emIyeGxMbXh2WnlodmJHUlFZV2RsS1Z4dUlDQWdJRzlzWkZCaFoyVXVjR0Z5Wlc1MFRtOWtaUzV5WlhCc1lXTmxRMmhwYkdRb2JtVjNVR0ZuWlN3Z2IyeGtVR0ZuWlNsY2JpQWdJQ0JrYjJOMWJXVnVkQzUwYVhSc1pTQTlJRzVsZDFScGRHeGxYRzRnSUNBZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRITkNlVlJoWjA1aGJXVW9KMjFsZEdFbktWc25aR1Z6WTNKcGNIUnBiMjRuWFM1amIyNTBaVzUwSUQwZ2JtVjNSR1Z6WTF4dUlDQWdJR1poWkdWSmJpaHVaWGRRWVdkbEtWeHVJQ0FnSUhKMWJrNWxkMFoxYm1OMGFXOXVjeWdwWEc0Z0lIMHBYRzU5WEc1Y2JpOHZJR1psZEdOb0lDc2diRzloWkNCdVpYY2dkWEpzSUNzZ1kyRmphR1VnYm1WM0lHTnZiblJsYm5SY2JtTnZibk4wSUdOaFkyaGxJRDBnZTMxY2JtWjFibU4wYVc5dUlHeHZZV1JRWVdkbEtIVnliQ2tnZTF4dUlDQnBaaUFvWTJGamFHVmJkWEpzWFNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9ZMkZqYUdWYmRYSnNYU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdabVYwWTJnb2RYSnNLVnh1SUNBZ0lDNTBhR1Z1S0NoeVpYTndiMjV6WlNrZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0hKbGMzQnZibk5sTG05cktTQjdYRzRnSUNBZ0lDQWdJR05oWTJobFczVnliRjBnUFNCeVpYTndiMjV6WlM1MFpYaDBLQ2xjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobFczVnliRjFjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkdVpYUjNiM0pySUhKbGMzQnZibk5sSUhkaGN5QnViM1FnYjJzdUp5bGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtWeHVJQ0FnSUM1allYUmphQ2dvWlhKeUtTQTlQaUJqYjI1emIyeGxMbXh2WnloZ2RHaGxjbVVnYUdGeklHSmxaVzRnWVc0Z1pYSnliM0lnY21WeGRXVnpkR2x1WnlBb0pIdDFjbXg5S1RvZ0pIdGxjbkl1YldWemMyRm5aWDFnS1NsY2JuMWNibHh1THk4Z2RYQmtZWFJsSUhCaFoyVWdZVzU1ZEdsdFpTQm9hWE4wYjNKNUlHRndhU0JwY3lCamFHRnVaMlZrWEc1M2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduY0c5d2MzUmhkR1VuTENCMWNHUmhkR1ZRWVdkbEtWeHVJaXdpTHk4Z2RHbHRhVzVuSUdaMWJtTjBhVzl1Y3lCYklHWnliMjBnWjJsMGFIVmlJQzB0SUdoMGRIQnpPaTh2WjJsemRDNW5hWFJvZFdJdVkyOXRMMmR5WlM4eE5qVXdNamswSUYxY2JtTnZibk4wSUd4cGJtVmhjaUE5SUNoMEtTQTlQaUIwWEc1amIyNXpkQ0JsWVhObFNXNVJkV0ZrSUQwZ0tIUXBJRDArSUhRcWRGeHVZMjl1YzNRZ1pXRnpaVTkxZEZGMVlXUWdQU0FvZENrZ1BUNGdkQ29vTWkxMEtWeHVZMjl1YzNRZ1pXRnpaVWx1VDNWMFVYVmhaQ0E5SUNoMEtTQTlQaUIwUEM0MUlEOGdLRElxZENwMEtTQTZJQ2d0TVNzb05DMHlLblFwS25RcFhHNWpiMjV6ZENCbFlYTmxTVzVEZFdKcFl5QTlJQ2gwS1NBOVBpQjBLblFxZEZ4dVkyOXVjM1FnWldGelpVOTFkRU4xWW1saklEMGdLSFFwSUQwK0lDZ3RMWFFwS25RcWRDc3hYRzVqYjI1emRDQmxZWE5sU1c1UGRYUkRkV0pwWXlBOUlDaDBLU0E5UGlCMFBDNDFJRDhnS0RRcWRDcDBLblFwSURvZ0tDaDBMVEVwS2lneUtuUXRNaWtxS0RJcWRDMHlLU3N4S1Z4dVkyOXVjM1FnWldGelpVbHVVWFZoY25RZ1BTQW9kQ2tnUFQ0Z2RDcDBLblFxZEZ4dVkyOXVjM1FnWldGelpVOTFkRkYxWVhKMElEMGdLSFFwSUQwK0lERXRLQzB0ZENrcWRDcDBLblJjYm1OdmJuTjBJR1ZoYzJWSmJrOTFkRkYxWVhKMElEMGdLSFFwSUQwK0lIUThMalVnUHlBb09DcDBLblFxZENwMEtTQTZJQ2d4TFRncUtDMHRkQ2txZENwMEtuUXBYRzVjYmk4dklITmpjbTlzYkMxMGJ5MTBiM0FnYjJZZ1pXeGxiV1Z1ZEM1Y2JtVjRjRzl5ZENCamIyNXpkQ0J6WTNKdmJHeFViMVJ2Y0NBOUlDaGxiQ3dnWkhWeVlYUnBiMjRnUFNBeE1qQXdLU0E5UGlCN1hHNGdJR052Ym5OMElHSnZkSFJ2YlNBOUlHVnNMbk5qY205c2JFaGxhV2RvZEZ4dUlDQmpiMjV6ZENCemRHRnlkQ0E5SUVSaGRHVXVibTkzS0NsY2JpQWdZMjl1YzNRZ2MyTnliMnhzSUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHNXZkeUE5SUVSaGRHVXVibTkzS0NsY2JpQWdJQ0JqYjI1emRDQjBhVzFsSUQwZ0tHNXZkeUF0SUhOMFlYSjBLU0F2SUdSMWNtRjBhVzl1WEc0Z0lDQWdJR052Ym5OMElHVmhjMmx1WnlBOUlHVmhjMlZQZFhSUmRXRnlkQ2gwYVcxbEtWeHVJQ0FnSUdWc0xuTmpjbTlzYkZSdmNDQTlJQ2hsWVhOcGJtY2dLaUFvTUNBdElHSnZkSFJ2YlNrcElDc2dZbTkwZEc5dFhHNGdJQ0FnYVdZZ0tHVnNMbk5qY205c2JGUnZjQ0E5UFQwZ01Da2djbVYwZFhKdVhHNGdJQ0FnY21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbEtITmpjbTlzYkNsY2JpQWdmVnh1SUNCelkzSnZiR3dvS1Z4dWZWeHVYRzR2THlCbVlXUmxMV2x1SUdWc1pXMWxiblJjYm1WNGNHOXlkQ0JqYjI1emRDQm1ZV1JsU1c0Z1BTQW9aV3dzSUdSMWNtRjBhVzl1SUQwZ01USXdNQ2tnUFQ0Z2UxeHVJQ0JsYkM1emRIbHNaUzV2Y0dGamFYUjVJRDBnTUZ4dUlDQmpiMjV6ZENCaWIzUjBiMjBnUFNBeFhHNGdJR052Ym5OMElITjBZWEowSUQwZ1JHRjBaUzV1YjNjb0tWeHVJQ0JqYjI1emRDQm1ZV1JsSUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHNXZkeUE5SUVSaGRHVXVibTkzS0NsY2JpQWdJQ0JqYjI1emRDQjBhVzFsSUQwZ0tHNXZkeUF0SUhOMFlYSjBLU0F2SUdSMWNtRjBhVzl1WEc0Z0lDQWdZMjl1YzNRZ1pXRnphVzVuSUQwZ1pXRnpaVWx1VVhWaGNuUW9kR2x0WlNsY2JpQWdJQ0JsYkM1emRIbHNaUzV2Y0dGamFYUjVJRDBnWldGemFXNW5YRzRnSUNBZ2FXWWdLR1ZzTG5OMGVXeGxMbTl3WVdOcGRIa2dQaUF4S1NCN1hHNGdJQ0FnSUNCbGJDNXpkSGxzWlM1dmNHRmphWFI1SUQwZ01WeHVJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdmVnh1SUNBZ0lISmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaU2htWVdSbEtWeHVJQ0I5WEc0Z0lHWmhaR1VvS1Z4dWZWeHVYRzR2THlCbVlXUmxMVzkxZENCbGJHVnRaVzUwWEc1bGVIQnZjblFnWTI5dWMzUWdabUZrWlU5MWRDQTlJQ2hsYkN3Z1pIVnlZWFJwYjI0Z1BTQXhNakF3S1NBOVBpQjdYRzRnSUdWc0xuTjBlV3hsTG05d1lXTnBkSGtnUFNBeFhHNGdJR052Ym5OMElITjBZWEowSUQwZ1JHRjBaUzV1YjNjb0tWeHVJQ0JqYjI1emRDQm1ZV1JsSUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHNXZkeUE5SUVSaGRHVXVibTkzS0NsY2JpQWdJQ0JqYjI1emRDQjBhVzFsSUQwZ0tHNXZkeUF0SUhOMFlYSjBLU0F2SUdSMWNtRjBhVzl1WEc0Z0lDQWdZMjl1YzNRZ1pXRnphVzVuSUQwZ1pXRnpaVTkxZEZGMVlYSjBLSFJwYldVcFhHNGdJQ0FnWld3dWMzUjViR1V1YjNCaFkybDBlU0E5SURFZ0xTQmxZWE5wYm1kY2JpQWdJQ0JwWmlBb1pXd3VjM1I1YkdVdWIzQmhZMmwwZVNBOElEQXBJSHRjYmlBZ0lDQWdJR1ZzTG5OMGVXeGxMbTl3WVdOcGRIa2dQU0F3WEc0Z0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNCOVhHNGdJQ0FnY21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbEtHWmhaR1VwWEc0Z0lIMWNiaUFnWm1Ga1pTZ3BYRzU5WEc0aUxDSXZLaUZjYmlBcUlFQnZkbVZ5ZG1sbGR5Qmxjell0Y0hKdmJXbHpaU0F0SUdFZ2RHbHVlU0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUJRY205dGFYTmxjeTlCS3k1Y2JpQXFJRUJqYjNCNWNtbG5hSFFnUTI5d2VYSnBaMmgwSUNoaktTQXlNREUwSUZsbGFIVmtZU0JMWVhSNkxDQlViMjBnUkdGc1pTd2dVM1JsWm1GdUlGQmxibTVsY2lCaGJtUWdZMjl1ZEhKcFluVjBiM0p6SUNoRGIyNTJaWEp6YVc5dUlIUnZJRVZUTmlCQlVFa2dZbmtnU21GclpTQkJjbU5vYVdKaGJHUXBYRzRnS2lCQWJHbGpaVzV6WlNBZ0lFeHBZMlZ1YzJWa0lIVnVaR1Z5SUUxSlZDQnNhV05sYm5ObFhHNGdLaUFnSUNBZ0lDQWdJQ0FnSUZObFpTQm9kSFJ3Y3pvdkwzSmhkeTVuYVhSb2RXSjFjMlZ5WTI5dWRHVnVkQzVqYjIwdmMzUmxabUZ1Y0dWdWJtVnlMMlZ6Tmkxd2NtOXRhWE5sTDIxaGMzUmxjaTlNU1VORlRsTkZYRzRnS2lCQWRtVnljMmx2YmlBZ0lEUXVNQzQxWEc0Z0tpOWNibHh1S0daMWJtTjBhVzl1SUNobmJHOWlZV3dzSUdaaFkzUnZjbmtwSUh0Y2JpQWdJQ0IwZVhCbGIyWWdaWGh3YjNKMGN5QTlQVDBnSjI5aWFtVmpkQ2NnSmlZZ2RIbHdaVzltSUcxdlpIVnNaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJ0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1poWTNSdmNua29LU0E2WEc0Z0lDQWdkSGx3Wlc5bUlHUmxabWx1WlNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCa1pXWnBibVV1WVcxa0lEOGdaR1ZtYVc1bEtHWmhZM1J2Y25rcElEcGNiaUFnSUNBb1oyeHZZbUZzTGtWVE5sQnliMjFwYzJVZ1BTQm1ZV04wYjNKNUtDa3BPMXh1ZlNoMGFHbHpMQ0FvWm5WdVkzUnBiMjRnS0NrZ2V5QW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtWjFibU4wYVc5dUlHOWlhbVZqZEU5eVJuVnVZM1JwYjI0b2VDa2dlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JSGdnUFQwOUlDZG1kVzVqZEdsdmJpY2dmSHdnZEhsd1pXOW1JSGdnUFQwOUlDZHZZbXBsWTNRbklDWW1JSGdnSVQwOUlHNTFiR3c3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2x6Um5WdVkzUnBiMjRvZUNrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlIZ2dQVDA5SUNkbWRXNWpkR2x2YmljN1hHNTlYRzVjYm5aaGNpQmZhWE5CY25KaGVTQTlJSFZ1WkdWbWFXNWxaRHRjYm1sbUlDZ2hRWEp5WVhrdWFYTkJjbkpoZVNrZ2UxeHVJQ0JmYVhOQmNuSmhlU0E5SUdaMWJtTjBhVzl1SUNoNEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1ZEc5VGRISnBibWN1WTJGc2JDaDRLU0E5UFQwZ0oxdHZZbXBsWTNRZ1FYSnlZWGxkSnp0Y2JpQWdmVHRjYm4wZ1pXeHpaU0I3WEc0Z0lGOXBjMEZ5Y21GNUlEMGdRWEp5WVhrdWFYTkJjbkpoZVR0Y2JuMWNibHh1ZG1GeUlHbHpRWEp5WVhrZ1BTQmZhWE5CY25KaGVUdGNibHh1ZG1GeUlHeGxiaUE5SURBN1hHNTJZWElnZG1WeWRIaE9aWGgwSUQwZ2RXNWtaV1pwYm1Wa08xeHVkbUZ5SUdOMWMzUnZiVk5qYUdWa2RXeGxja1p1SUQwZ2RXNWtaV1pwYm1Wa08xeHVYRzUyWVhJZ1lYTmhjQ0E5SUdaMWJtTjBhVzl1SUdGellYQW9ZMkZzYkdKaFkyc3NJR0Z5WnlrZ2UxeHVJQ0J4ZFdWMVpWdHNaVzVkSUQwZ1kyRnNiR0poWTJzN1hHNGdJSEYxWlhWbFcyeGxiaUFySURGZElEMGdZWEpuTzF4dUlDQnNaVzRnS3owZ01qdGNiaUFnYVdZZ0tHeGxiaUE5UFQwZ01pa2dlMXh1SUNBZ0lDOHZJRWxtSUd4bGJpQnBjeUF5TENCMGFHRjBJRzFsWVc1eklIUm9ZWFFnZDJVZ2JtVmxaQ0IwYnlCelkyaGxaSFZzWlNCaGJpQmhjM2x1WXlCbWJIVnphQzVjYmlBZ0lDQXZMeUJKWmlCaFpHUnBkR2x2Ym1Gc0lHTmhiR3hpWVdOcmN5QmhjbVVnY1hWbGRXVmtJR0psWm05eVpTQjBhR1VnY1hWbGRXVWdhWE1nWm14MWMyaGxaQ3dnZEdobGVWeHVJQ0FnSUM4dklIZHBiR3dnWW1VZ2NISnZZMlZ6YzJWa0lHSjVJSFJvYVhNZ1pteDFjMmdnZEdoaGRDQjNaU0JoY21VZ2MyTm9aV1IxYkdsdVp5NWNiaUFnSUNCcFppQW9ZM1Z6ZEc5dFUyTm9aV1IxYkdWeVJtNHBJSHRjYmlBZ0lDQWdJR04xYzNSdmJWTmphR1ZrZFd4bGNrWnVLR1pzZFhOb0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYzJOb1pXUjFiR1ZHYkhWemFDZ3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZUdGNibHh1Wm5WdVkzUnBiMjRnYzJWMFUyTm9aV1IxYkdWeUtITmphR1ZrZFd4bFJtNHBJSHRjYmlBZ1kzVnpkRzl0VTJOb1pXUjFiR1Z5Um00Z1BTQnpZMmhsWkhWc1pVWnVPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpaWFJCYzJGd0tHRnpZWEJHYmlrZ2UxeHVJQ0JoYzJGd0lEMGdZWE5oY0VadU8xeHVmVnh1WEc1MllYSWdZbkp2ZDNObGNsZHBibVJ2ZHlBOUlIUjVjR1Z2WmlCM2FXNWtiM2NnSVQwOUlDZDFibVJsWm1sdVpXUW5JRDhnZDJsdVpHOTNJRG9nZFc1a1pXWnBibVZrTzF4dWRtRnlJR0p5YjNkelpYSkhiRzlpWVd3Z1BTQmljbTkzYzJWeVYybHVaRzkzSUh4OElIdDlPMXh1ZG1GeUlFSnliM2R6WlhKTmRYUmhkR2x2Yms5aWMyVnlkbVZ5SUQwZ1luSnZkM05sY2tkc2IySmhiQzVOZFhSaGRHbHZiazlpYzJWeWRtVnlJSHg4SUdKeWIzZHpaWEpIYkc5aVlXd3VWMlZpUzJsMFRYVjBZWFJwYjI1UFluTmxjblpsY2p0Y2JuWmhjaUJwYzA1dlpHVWdQU0IwZVhCbGIyWWdjMlZzWmlBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2RIbHdaVzltSUhCeWIyTmxjM01nSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUNoN2ZTa3VkRzlUZEhKcGJtY3VZMkZzYkNod2NtOWpaWE56S1NBOVBUMGdKMXR2WW1wbFkzUWdjSEp2WTJWemMxMG5PMXh1WEc0dkx5QjBaWE4wSUdadmNpQjNaV0lnZDI5eWEyVnlJR0oxZENCdWIzUWdhVzRnU1VVeE1GeHVkbUZ5SUdselYyOXlhMlZ5SUQwZ2RIbHdaVzltSUZWcGJuUTRRMnhoYlhCbFpFRnljbUY1SUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCMGVYQmxiMllnYVcxd2IzSjBVMk55YVhCMGN5QWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdkSGx3Wlc5bUlFMWxjM05oWjJWRGFHRnVibVZzSUNFOVBTQW5kVzVrWldacGJtVmtKenRjYmx4dUx5OGdibTlrWlZ4dVpuVnVZM1JwYjI0Z2RYTmxUbVY0ZEZScFkyc29LU0I3WEc0Z0lDOHZJRzV2WkdVZ2RtVnljMmx2YmlBd0xqRXdMbmdnWkdsemNHeGhlWE1nWVNCa1pYQnlaV05oZEdsdmJpQjNZWEp1YVc1bklIZG9aVzRnYm1WNGRGUnBZMnNnYVhNZ2RYTmxaQ0J5WldOMWNuTnBkbVZzZVZ4dUlDQXZMeUJ6WldVZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyTjFhbTlxY3k5M2FHVnVMMmx6YzNWbGN5ODBNVEFnWm05eUlHUmxkR0ZwYkhOY2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXlobWJIVnphQ2s3WEc0Z0lIMDdYRzU5WEc1Y2JpOHZJSFpsY25SNFhHNW1kVzVqZEdsdmJpQjFjMlZXWlhKMGVGUnBiV1Z5S0NrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUhabGNuUjRUbVY0ZENBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnZG1WeWRIaE9aWGgwS0dac2RYTm9LVHRjYmlBZ0lDQjlPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSFZ6WlZObGRGUnBiV1Z2ZFhRb0tUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RYTmxUWFYwWVhScGIyNVBZbk5sY25abGNpZ3BJSHRjYmlBZ2RtRnlJR2wwWlhKaGRHbHZibk1nUFNBd08xeHVJQ0IyWVhJZ2IySnpaWEoyWlhJZ1BTQnVaWGNnUW5KdmQzTmxjazExZEdGMGFXOXVUMkp6WlhKMlpYSW9abXgxYzJncE8xeHVJQ0IyWVhJZ2JtOWtaU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVlJsZUhST2IyUmxLQ2NuS1R0Y2JpQWdiMkp6WlhKMlpYSXViMkp6WlhKMlpTaHViMlJsTENCN0lHTm9ZWEpoWTNSbGNrUmhkR0U2SUhSeWRXVWdmU2s3WEc1Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQnViMlJsTG1SaGRHRWdQU0JwZEdWeVlYUnBiMjV6SUQwZ0t5dHBkR1Z5WVhScGIyNXpJQ1VnTWp0Y2JpQWdmVHRjYm4xY2JseHVMeThnZDJWaUlIZHZjbXRsY2x4dVpuVnVZM1JwYjI0Z2RYTmxUV1Z6YzJGblpVTm9ZVzV1Wld3b0tTQjdYRzRnSUhaaGNpQmphR0Z1Ym1Wc0lEMGdibVYzSUUxbGMzTmhaMlZEYUdGdWJtVnNLQ2s3WEc0Z0lHTm9ZVzV1Wld3dWNHOXlkREV1YjI1dFpYTnpZV2RsSUQwZ1pteDFjMmc3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUdOb1lXNXVaV3d1Y0c5eWRESXVjRzl6ZEUxbGMzTmhaMlVvTUNrN1hHNGdJSDA3WEc1OVhHNWNibVoxYm1OMGFXOXVJSFZ6WlZObGRGUnBiV1Z2ZFhRb0tTQjdYRzRnSUM4dklGTjBiM0psSUhObGRGUnBiV1Z2ZFhRZ2NtVm1aWEpsYm1ObElITnZJR1Z6Tmkxd2NtOXRhWE5sSUhkcGJHd2dZbVVnZFc1aFptWmxZM1JsWkNCaWVWeHVJQ0F2THlCdmRHaGxjaUJqYjJSbElHMXZaR2xtZVdsdVp5QnpaWFJVYVcxbGIzVjBJQ2hzYVd0bElITnBibTl1TG5WelpVWmhhMlZVYVcxbGNuTW9LU2xjYmlBZ2RtRnlJR2RzYjJKaGJGTmxkRlJwYldWdmRYUWdQU0J6WlhSVWFXMWxiM1YwTzF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbmJHOWlZV3hUWlhSVWFXMWxiM1YwS0dac2RYTm9MQ0F4S1R0Y2JpQWdmVHRjYm4xY2JseHVkbUZ5SUhGMVpYVmxJRDBnYm1WM0lFRnljbUY1S0RFd01EQXBPMXh1Wm5WdVkzUnBiMjRnWm14MWMyZ29LU0I3WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diR1Z1T3lCcElDczlJRElwSUh0Y2JpQWdJQ0IyWVhJZ1kyRnNiR0poWTJzZ1BTQnhkV1YxWlZ0cFhUdGNiaUFnSUNCMllYSWdZWEpuSUQwZ2NYVmxkV1ZiYVNBcklERmRPMXh1WEc0Z0lDQWdZMkZzYkdKaFkyc29ZWEpuS1R0Y2JseHVJQ0FnSUhGMVpYVmxXMmxkSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUhGMVpYVmxXMmtnS3lBeFhTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ2ZWeHVYRzRnSUd4bGJpQTlJREE3WEc1OVhHNWNibVoxYm1OMGFXOXVJR0YwZEdWdGNIUldaWEowZUNncElIdGNiaUFnZEhKNUlIdGNiaUFnSUNCMllYSWdjaUE5SUhKbGNYVnBjbVU3WEc0Z0lDQWdkbUZ5SUhabGNuUjRJRDBnY2lnbmRtVnlkSGduS1R0Y2JpQWdJQ0IyWlhKMGVFNWxlSFFnUFNCMlpYSjBlQzV5ZFc1UGJreHZiM0FnZkh3Z2RtVnlkSGd1Y25WdVQyNURiMjUwWlhoME8xeHVJQ0FnSUhKbGRIVnliaUIxYzJWV1pYSjBlRlJwYldWeUtDazdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCeVpYUjFjbTRnZFhObFUyVjBWR2x0Wlc5MWRDZ3BPMXh1SUNCOVhHNTlYRzVjYm5aaGNpQnpZMmhsWkhWc1pVWnNkWE5vSUQwZ2RXNWtaV1pwYm1Wa08xeHVMeThnUkdWamFXUmxJSGRvWVhRZ1lYTjVibU1nYldWMGFHOWtJSFJ2SUhWelpTQjBieUIwY21sbloyVnlhVzVuSUhCeWIyTmxjM05wYm1jZ2IyWWdjWFZsZFdWa0lHTmhiR3hpWVdOcmN6cGNibWxtSUNocGMwNXZaR1VwSUh0Y2JpQWdjMk5vWldSMWJHVkdiSFZ6YUNBOUlIVnpaVTVsZUhSVWFXTnJLQ2s3WEc1OUlHVnNjMlVnYVdZZ0tFSnliM2R6WlhKTmRYUmhkR2x2Yms5aWMyVnlkbVZ5S1NCN1hHNGdJSE5qYUdWa2RXeGxSbXgxYzJnZ1BTQjFjMlZOZFhSaGRHbHZiazlpYzJWeWRtVnlLQ2s3WEc1OUlHVnNjMlVnYVdZZ0tHbHpWMjl5YTJWeUtTQjdYRzRnSUhOamFHVmtkV3hsUm14MWMyZ2dQU0IxYzJWTlpYTnpZV2RsUTJoaGJtNWxiQ2dwTzF4dWZTQmxiSE5sSUdsbUlDaGljbTkzYzJWeVYybHVaRzkzSUQwOVBTQjFibVJsWm1sdVpXUWdKaVlnZEhsd1pXOW1JSEpsY1hWcGNtVWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnYzJOb1pXUjFiR1ZHYkhWemFDQTlJR0YwZEdWdGNIUldaWEowZUNncE8xeHVmU0JsYkhObElIdGNiaUFnYzJOb1pXUjFiR1ZHYkhWemFDQTlJSFZ6WlZObGRGUnBiV1Z2ZFhRb0tUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RHaGxiaWh2YmtaMWJHWnBiR3h0Wlc1MExDQnZibEpsYW1WamRHbHZiaWtnZTF4dUlDQjJZWElnWDJGeVozVnRaVzUwY3lBOUlHRnlaM1Z0Wlc1MGN6dGNibHh1SUNCMllYSWdjR0Z5Wlc1MElEMGdkR2hwY3p0Y2JseHVJQ0IyWVhJZ1kyaHBiR1FnUFNCdVpYY2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpaHViMjl3S1R0Y2JseHVJQ0JwWmlBb1kyaHBiR1JiVUZKUFRVbFRSVjlKUkYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJRzFoYTJWUWNtOXRhWE5sS0dOb2FXeGtLVHRjYmlBZ2ZWeHVYRzRnSUhaaGNpQmZjM1JoZEdVZ1BTQndZWEpsYm5RdVgzTjBZWFJsTzF4dVhHNGdJR2xtSUNoZmMzUmhkR1VwSUh0Y2JpQWdJQ0FvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ2RtRnlJR05oYkd4aVlXTnJJRDBnWDJGeVozVnRaVzUwYzF0ZmMzUmhkR1VnTFNBeFhUdGNiaUFnSUNBZ0lHRnpZWEFvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FXNTJiMnRsUTJGc2JHSmhZMnNvWDNOMFlYUmxMQ0JqYUdsc1pDd2dZMkZzYkdKaFkyc3NJSEJoY21WdWRDNWZjbVZ6ZFd4MEtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBLQ2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYzNWaWMyTnlhV0psS0hCaGNtVnVkQ3dnWTJocGJHUXNJRzl1Um5Wc1ptbHNiRzFsYm5Rc0lHOXVVbVZxWldOMGFXOXVLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJqYUdsc1pEdGNibjFjYmx4dUx5b3FYRzRnSUdCUWNtOXRhWE5sTG5KbGMyOXNkbVZnSUhKbGRIVnlibk1nWVNCd2NtOXRhWE5sSUhSb1lYUWdkMmxzYkNCaVpXTnZiV1VnY21WemIyeDJaV1FnZDJsMGFDQjBhR1ZjYmlBZ2NHRnpjMlZrSUdCMllXeDFaV0F1SUVsMElHbHpJSE5vYjNKMGFHRnVaQ0JtYjNJZ2RHaGxJR1p2Ykd4dmQybHVaenBjYmx4dUlDQmdZR0JxWVhaaGMyTnlhWEIwWEc0Z0lHeGxkQ0J3Y205dGFYTmxJRDBnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1h0Y2JpQWdJQ0J5WlhOdmJIWmxLREVwTzF4dUlDQjlLVHRjYmx4dUlDQndjbTl0YVhObExuUm9aVzRvWm5WdVkzUnBiMjRvZG1Gc2RXVXBlMXh1SUNBZ0lDOHZJSFpoYkhWbElEMDlQU0F4WEc0Z0lIMHBPMXh1SUNCZ1lHQmNibHh1SUNCSmJuTjBaV0ZrSUc5bUlIZHlhWFJwYm1jZ2RHaGxJR0ZpYjNabExDQjViM1Z5SUdOdlpHVWdibTkzSUhOcGJYQnNlU0JpWldOdmJXVnpJSFJvWlNCbWIyeHNiM2RwYm1jNlhHNWNiaUFnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0JzWlhRZ2NISnZiV2x6WlNBOUlGQnliMjFwYzJVdWNtVnpiMngyWlNneEtUdGNibHh1SUNCd2NtOXRhWE5sTG5Sb1pXNG9ablZ1WTNScGIyNG9kbUZzZFdVcGUxeHVJQ0FnSUM4dklIWmhiSFZsSUQwOVBTQXhYRzRnSUgwcE8xeHVJQ0JnWUdCY2JseHVJQ0JBYldWMGFHOWtJSEpsYzI5c2RtVmNiaUFnUUhOMFlYUnBZMXh1SUNCQWNHRnlZVzBnZTBGdWVYMGdkbUZzZFdVZ2RtRnNkV1VnZEdoaGRDQjBhR1VnY21WMGRYSnVaV1FnY0hKdmJXbHpaU0IzYVd4c0lHSmxJSEpsYzI5c2RtVmtJSGRwZEdoY2JpQWdWWE5sWm5Wc0lHWnZjaUIwYjI5c2FXNW5MbHh1SUNCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNCaElIQnliMjFwYzJVZ2RHaGhkQ0IzYVd4c0lHSmxZMjl0WlNCbWRXeG1hV3hzWldRZ2QybDBhQ0IwYUdVZ1oybDJaVzVjYmlBZ1lIWmhiSFZsWUZ4dUtpOWNibVoxYm1OMGFXOXVJSEpsYzI5c2RtVW9iMkpxWldOMEtTQjdYRzRnSUM4cWFuTm9hVzUwSUhaaGJHbGtkR2hwY3pwMGNuVmxJQ292WEc0Z0lIWmhjaUJEYjI1emRISjFZM1J2Y2lBOUlIUm9hWE03WEc1Y2JpQWdhV1lnS0c5aWFtVmpkQ0FtSmlCMGVYQmxiMllnYjJKcVpXTjBJRDA5UFNBbmIySnFaV04wSnlBbUppQnZZbXBsWTNRdVkyOXVjM1J5ZFdOMGIzSWdQVDA5SUVOdmJuTjBjblZqZEc5eUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc5aWFtVmpkRHRjYmlBZ2ZWeHVYRzRnSUhaaGNpQndjbTl0YVhObElEMGdibVYzSUVOdmJuTjBjblZqZEc5eUtHNXZiM0FwTzF4dUlDQmZjbVZ6YjJ4MlpTaHdjbTl0YVhObExDQnZZbXBsWTNRcE8xeHVJQ0J5WlhSMWNtNGdjSEp2YldselpUdGNibjFjYmx4dWRtRnlJRkJTVDAxSlUwVmZTVVFnUFNCTllYUm9MbkpoYm1SdmJTZ3BMblJ2VTNSeWFXNW5LRE0yS1M1emRXSnpkSEpwYm1jb01UWXBPMXh1WEc1bWRXNWpkR2x2YmlCdWIyOXdLQ2tnZTMxY2JseHVkbUZ5SUZCRlRrUkpUa2NnUFNCMmIybGtJREE3WEc1MllYSWdSbFZNUmtsTVRFVkVJRDBnTVR0Y2JuWmhjaUJTUlVwRlExUkZSQ0E5SURJN1hHNWNiblpoY2lCSFJWUmZWRWhGVGw5RlVsSlBVaUE5SUc1bGR5QkZjbkp2Y2s5aWFtVmpkQ2dwTzF4dVhHNW1kVzVqZEdsdmJpQnpaV3htUm5Wc1ptbHNiRzFsYm5Rb0tTQjdYRzRnSUhKbGRIVnliaUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lXVzkxSUdOaGJtNXZkQ0J5WlhOdmJIWmxJR0VnY0hKdmJXbHpaU0IzYVhSb0lHbDBjMlZzWmx3aUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyRnVibTkwVW1WMGRYSnVUM2R1S0NrZ2UxeHVJQ0J5WlhSMWNtNGdibVYzSUZSNWNHVkZjbkp2Y2lnblFTQndjbTl0YVhObGN5QmpZV3hzWW1GamF5QmpZVzV1YjNRZ2NtVjBkWEp1SUhSb1lYUWdjMkZ0WlNCd2NtOXRhWE5sTGljcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUlVhR1Z1S0hCeWIyMXBjMlVwSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0J5WlhSMWNtNGdjSEp2YldselpTNTBhR1Z1TzF4dUlDQjlJR05oZEdOb0lDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUVkRlZGOVVTRVZPWDBWU1VrOVNMbVZ5Y205eUlEMGdaWEp5YjNJN1hHNGdJQ0FnY21WMGRYSnVJRWRGVkY5VVNFVk9YMFZTVWs5U08xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJSFJ5ZVZSb1pXNG9kR2hsYml3Z2RtRnNkV1VzSUdaMWJHWnBiR3h0Wlc1MFNHRnVaR3hsY2l3Z2NtVnFaV04wYVc5dVNHRnVaR3hsY2lrZ2UxeHVJQ0IwY25rZ2UxeHVJQ0FnSUhSb1pXNHVZMkZzYkNoMllXeDFaU3dnWm5Wc1ptbHNiRzFsYm5SSVlXNWtiR1Z5TENCeVpXcGxZM1JwYjI1SVlXNWtiR1Z5S1R0Y2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmxPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdoaGJtUnNaVVp2Y21WcFoyNVVhR1Z1WVdKc1pTaHdjbTl0YVhObExDQjBhR1Z1WVdKc1pTd2dkR2hsYmlrZ2UxeHVJQ0JoYzJGd0tHWjFibU4wYVc5dUlDaHdjbTl0YVhObEtTQjdYRzRnSUNBZ2RtRnlJSE5sWVd4bFpDQTlJR1poYkhObE8xeHVJQ0FnSUhaaGNpQmxjbkp2Y2lBOUlIUnllVlJvWlc0b2RHaGxiaXdnZEdobGJtRmliR1VzSUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnYVdZZ0tITmxZV3hsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCelpXRnNaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdhV1lnS0hSb1pXNWhZbXhsSUNFOVBTQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQmZjbVZ6YjJ4MlpTaHdjbTl0YVhObExDQjJZV3gxWlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCbWRXeG1hV3hzS0hCeWIyMXBjMlVzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMQ0JtZFc1amRHbHZiaUFvY21WaGMyOXVLU0I3WEc0Z0lDQWdJQ0JwWmlBb2MyVmhiR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhObFlXeGxaQ0E5SUhSeWRXVTdYRzVjYmlBZ0lDQWdJRjl5WldwbFkzUW9jSEp2YldselpTd2djbVZoYzI5dUtUdGNiaUFnSUNCOUxDQW5VMlYwZEd4bE9pQW5JQ3NnS0hCeWIyMXBjMlV1WDJ4aFltVnNJSHg4SUNjZ2RXNXJibTkzYmlCd2NtOXRhWE5sSnlrcE8xeHVYRzRnSUNBZ2FXWWdLQ0Z6WldGc1pXUWdKaVlnWlhKeWIzSXBJSHRjYmlBZ0lDQWdJSE5sWVd4bFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCZmNtVnFaV04wS0hCeWIyMXBjMlVzSUdWeWNtOXlLVHRjYmlBZ0lDQjlYRzRnSUgwc0lIQnliMjFwYzJVcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCb1lXNWtiR1ZQZDI1VWFHVnVZV0pzWlNod2NtOXRhWE5sTENCMGFHVnVZV0pzWlNrZ2UxeHVJQ0JwWmlBb2RHaGxibUZpYkdVdVgzTjBZWFJsSUQwOVBTQkdWVXhHU1V4TVJVUXBJSHRjYmlBZ0lDQm1kV3htYVd4c0tIQnliMjFwYzJVc0lIUm9aVzVoWW14bExsOXlaWE4xYkhRcE8xeHVJQ0I5SUdWc2MyVWdhV1lnS0hSb1pXNWhZbXhsTGw5emRHRjBaU0E5UFQwZ1VrVktSVU5VUlVRcElIdGNiaUFnSUNCZmNtVnFaV04wS0hCeWIyMXBjMlVzSUhSb1pXNWhZbXhsTGw5eVpYTjFiSFFwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhOMVluTmpjbWxpWlNoMGFHVnVZV0pzWlN3Z2RXNWtaV1pwYm1Wa0xDQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCZmNtVnpiMngyWlNod2NtOXRhWE5sTENCMllXeDFaU2s3WEc0Z0lDQWdmU3dnWm5WdVkzUnBiMjRnS0hKbFlYTnZiaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRjl5WldwbFkzUW9jSEp2YldselpTd2djbVZoYzI5dUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJvWVc1a2JHVk5ZWGxpWlZSb1pXNWhZbXhsS0hCeWIyMXBjMlVzSUcxaGVXSmxWR2hsYm1GaWJHVXNJSFJvWlc0a0pDa2dlMXh1SUNCcFppQW9iV0Y1WW1WVWFHVnVZV0pzWlM1amIyNXpkSEoxWTNSdmNpQTlQVDBnY0hKdmJXbHpaUzVqYjI1emRISjFZM1J2Y2lBbUppQjBhR1Z1SkNRZ1BUMDlJSFJvWlc0Z0ppWWdiV0Y1WW1WVWFHVnVZV0pzWlM1amIyNXpkSEoxWTNSdmNpNXlaWE52YkhabElEMDlQU0J5WlhOdmJIWmxLU0I3WEc0Z0lDQWdhR0Z1Wkd4bFQzZHVWR2hsYm1GaWJHVW9jSEp2YldselpTd2diV0Y1WW1WVWFHVnVZV0pzWlNrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2FXWWdLSFJvWlc0a0pDQTlQVDBnUjBWVVgxUklSVTVmUlZKU1QxSXBJSHRjYmlBZ0lDQWdJRjl5WldwbFkzUW9jSEp2YldselpTd2dSMFZVWDFSSVJVNWZSVkpTVDFJdVpYSnliM0lwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvZEdobGJpUWtJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lHWjFiR1pwYkd3b2NISnZiV2x6WlN3Z2JXRjVZbVZVYUdWdVlXSnNaU2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hwYzBaMWJtTjBhVzl1S0hSb1pXNGtKQ2twSUh0Y2JpQWdJQ0FnSUdoaGJtUnNaVVp2Y21WcFoyNVVhR1Z1WVdKc1pTaHdjbTl0YVhObExDQnRZWGxpWlZSb1pXNWhZbXhsTENCMGFHVnVKQ1FwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQm1kV3htYVd4c0tIQnliMjFwYzJVc0lHMWhlV0psVkdobGJtRmliR1VwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCZmNtVnpiMngyWlNod2NtOXRhWE5sTENCMllXeDFaU2tnZTF4dUlDQnBaaUFvY0hKdmJXbHpaU0E5UFQwZ2RtRnNkV1VwSUh0Y2JpQWdJQ0JmY21WcVpXTjBLSEJ5YjIxcGMyVXNJSE5sYkdaR2RXeG1hV3hzYldWdWRDZ3BLVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaHZZbXBsWTNSUGNrWjFibU4wYVc5dUtIWmhiSFZsS1NrZ2UxeHVJQ0FnSUdoaGJtUnNaVTFoZVdKbFZHaGxibUZpYkdVb2NISnZiV2x6WlN3Z2RtRnNkV1VzSUdkbGRGUm9aVzRvZG1Gc2RXVXBLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JtZFd4bWFXeHNLSEJ5YjIxcGMyVXNJSFpoYkhWbEtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ3ZFdKc2FYTm9VbVZxWldOMGFXOXVLSEJ5YjIxcGMyVXBJSHRjYmlBZ2FXWWdLSEJ5YjIxcGMyVXVYMjl1WlhKeWIzSXBJSHRjYmlBZ0lDQndjbTl0YVhObExsOXZibVZ5Y205eUtIQnliMjFwYzJVdVgzSmxjM1ZzZENrN1hHNGdJSDFjYmx4dUlDQndkV0pzYVhOb0tIQnliMjFwYzJVcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCbWRXeG1hV3hzS0hCeWIyMXBjMlVzSUhaaGJIVmxLU0I3WEc0Z0lHbG1JQ2h3Y205dGFYTmxMbDl6ZEdGMFpTQWhQVDBnVUVWT1JFbE9SeWtnZTF4dUlDQWdJSEpsZEhWeWJqdGNiaUFnZlZ4dVhHNGdJSEJ5YjIxcGMyVXVYM0psYzNWc2RDQTlJSFpoYkhWbE8xeHVJQ0J3Y205dGFYTmxMbDl6ZEdGMFpTQTlJRVpWVEVaSlRFeEZSRHRjYmx4dUlDQnBaaUFvY0hKdmJXbHpaUzVmYzNWaWMyTnlhV0psY25NdWJHVnVaM1JvSUNFOVBTQXdLU0I3WEc0Z0lDQWdZWE5oY0Nod2RXSnNhWE5vTENCd2NtOXRhWE5sS1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZjbVZxWldOMEtIQnliMjFwYzJVc0lISmxZWE52YmlrZ2UxeHVJQ0JwWmlBb2NISnZiV2x6WlM1ZmMzUmhkR1VnSVQwOUlGQkZUa1JKVGtjcElIdGNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNiaUFnY0hKdmJXbHpaUzVmYzNSaGRHVWdQU0JTUlVwRlExUkZSRHRjYmlBZ2NISnZiV2x6WlM1ZmNtVnpkV3gwSUQwZ2NtVmhjMjl1TzF4dVhHNGdJR0Z6WVhBb2NIVmliR2x6YUZKbGFtVmpkR2x2Yml3Z2NISnZiV2x6WlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhOMVluTmpjbWxpWlNod1lYSmxiblFzSUdOb2FXeGtMQ0J2YmtaMWJHWnBiR3h0Wlc1MExDQnZibEpsYW1WamRHbHZiaWtnZTF4dUlDQjJZWElnWDNOMVluTmpjbWxpWlhKeklEMGdjR0Z5Wlc1MExsOXpkV0p6WTNKcFltVnljenRjYmlBZ2RtRnlJR3hsYm1kMGFDQTlJRjl6ZFdKelkzSnBZbVZ5Y3k1c1pXNW5kR2c3WEc1Y2JpQWdjR0Z5Wlc1MExsOXZibVZ5Y205eUlEMGdiblZzYkR0Y2JseHVJQ0JmYzNWaWMyTnlhV0psY25OYmJHVnVaM1JvWFNBOUlHTm9hV3hrTzF4dUlDQmZjM1ZpYzJOeWFXSmxjbk5iYkdWdVozUm9JQ3NnUmxWTVJrbE1URVZFWFNBOUlHOXVSblZzWm1sc2JHMWxiblE3WEc0Z0lGOXpkV0p6WTNKcFltVnljMXRzWlc1bmRHZ2dLeUJTUlVwRlExUkZSRjBnUFNCdmJsSmxhbVZqZEdsdmJqdGNibHh1SUNCcFppQW9iR1Z1WjNSb0lEMDlQU0F3SUNZbUlIQmhjbVZ1ZEM1ZmMzUmhkR1VwSUh0Y2JpQWdJQ0JoYzJGd0tIQjFZbXhwYzJnc0lIQmhjbVZ1ZENrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdjSFZpYkdsemFDaHdjbTl0YVhObEtTQjdYRzRnSUhaaGNpQnpkV0p6WTNKcFltVnljeUE5SUhCeWIyMXBjMlV1WDNOMVluTmpjbWxpWlhKek8xeHVJQ0IyWVhJZ2MyVjBkR3hsWkNBOUlIQnliMjFwYzJVdVgzTjBZWFJsTzF4dVhHNGdJR2xtSUNoemRXSnpZM0pwWW1WeWN5NXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JseHVJQ0IyWVhJZ1kyaHBiR1FnUFNCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNCallXeHNZbUZqYXlBOUlIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lHUmxkR0ZwYkNBOUlIQnliMjFwYzJVdVgzSmxjM1ZzZER0Y2JseHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhOMVluTmpjbWxpWlhKekxteGxibWQwYURzZ2FTQXJQU0F6S1NCN1hHNGdJQ0FnWTJocGJHUWdQU0J6ZFdKelkzSnBZbVZ5YzF0cFhUdGNiaUFnSUNCallXeHNZbUZqYXlBOUlITjFZbk5qY21saVpYSnpXMmtnS3lCelpYUjBiR1ZrWFR0Y2JseHVJQ0FnSUdsbUlDaGphR2xzWkNrZ2UxeHVJQ0FnSUNBZ2FXNTJiMnRsUTJGc2JHSmhZMnNvYzJWMGRHeGxaQ3dnWTJocGJHUXNJR05oYkd4aVlXTnJMQ0JrWlhSaGFXd3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCallXeHNZbUZqYXloa1pYUmhhV3dwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhCeWIyMXBjMlV1WDNOMVluTmpjbWxpWlhKekxteGxibWQwYUNBOUlEQTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlFVnljbTl5VDJKcVpXTjBLQ2tnZTF4dUlDQjBhR2x6TG1WeWNtOXlJRDBnYm5Wc2JEdGNibjFjYmx4dWRtRnlJRlJTV1Y5RFFWUkRTRjlGVWxKUFVpQTlJRzVsZHlCRmNuSnZjazlpYW1WamRDZ3BPMXh1WEc1bWRXNWpkR2x2YmlCMGNubERZWFJqYUNoallXeHNZbUZqYXl3Z1pHVjBZV2xzS1NCN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnY21WMGRYSnVJR05oYkd4aVlXTnJLR1JsZEdGcGJDazdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCVVVsbGZRMEZVUTBoZlJWSlNUMUl1WlhKeWIzSWdQU0JsTzF4dUlDQWdJSEpsZEhWeWJpQlVVbGxmUTBGVVEwaGZSVkpTVDFJN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdhVzUyYjJ0bFEyRnNiR0poWTJzb2MyVjBkR3hsWkN3Z2NISnZiV2x6WlN3Z1kyRnNiR0poWTJzc0lHUmxkR0ZwYkNrZ2UxeHVJQ0IyWVhJZ2FHRnpRMkZzYkdKaFkyc2dQU0JwYzBaMWJtTjBhVzl1S0dOaGJHeGlZV05yS1N4Y2JpQWdJQ0FnSUhaaGJIVmxJRDBnZFc1a1pXWnBibVZrTEZ4dUlDQWdJQ0FnWlhKeWIzSWdQU0IxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0J6ZFdOalpXVmtaV1FnUFNCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNCbVlXbHNaV1FnUFNCMWJtUmxabWx1WldRN1hHNWNiaUFnYVdZZ0tHaGhjME5oYkd4aVlXTnJLU0I3WEc0Z0lDQWdkbUZzZFdVZ1BTQjBjbmxEWVhSamFDaGpZV3hzWW1GamF5d2daR1YwWVdsc0tUdGNibHh1SUNBZ0lHbG1JQ2gyWVd4MVpTQTlQVDBnVkZKWlgwTkJWRU5JWDBWU1VrOVNLU0I3WEc0Z0lDQWdJQ0JtWVdsc1pXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ1pYSnliM0lnUFNCMllXeDFaUzVsY25KdmNqdGNiaUFnSUNBZ0lIWmhiSFZsSUQwZ2JuVnNiRHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2MzVmpZMlZsWkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2NISnZiV2x6WlNBOVBUMGdkbUZzZFdVcElIdGNiaUFnSUNBZ0lGOXlaV3BsWTNRb2NISnZiV2x6WlN3Z1kyRnVibTkwVW1WMGRYSnVUM2R1S0NrcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IyWVd4MVpTQTlJR1JsZEdGcGJEdGNiaUFnSUNCemRXTmpaV1ZrWldRZ1BTQjBjblZsTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSEJ5YjIxcGMyVXVYM04wWVhSbElDRTlQU0JRUlU1RVNVNUhLU0I3WEc0Z0lDQWdMeThnYm05dmNGeHVJQ0I5SUdWc2MyVWdhV1lnS0doaGMwTmhiR3hpWVdOcklDWW1JSE4xWTJObFpXUmxaQ2tnZTF4dUlDQWdJQ0FnWDNKbGMyOXNkbVVvY0hKdmJXbHpaU3dnZG1Gc2RXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9abUZwYkdWa0tTQjdYRzRnSUNBZ0lDQmZjbVZxWldOMEtIQnliMjFwYzJVc0lHVnljbTl5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hObGRIUnNaV1FnUFQwOUlFWlZURVpKVEV4RlJDa2dlMXh1SUNBZ0lDQWdablZzWm1sc2JDaHdjbTl0YVhObExDQjJZV3gxWlNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoelpYUjBiR1ZrSUQwOVBTQlNSVXBGUTFSRlJDa2dlMXh1SUNBZ0lDQWdYM0psYW1WamRDaHdjbTl0YVhObExDQjJZV3gxWlNrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1sMGFXRnNhWHBsVUhKdmJXbHpaU2h3Y205dGFYTmxMQ0J5WlhOdmJIWmxjaWtnZTF4dUlDQjBjbmtnZTF4dUlDQWdJSEpsYzI5c2RtVnlLR1oxYm1OMGFXOXVJSEpsYzI5c2RtVlFjbTl0YVhObEtIWmhiSFZsS1NCN1hHNGdJQ0FnSUNCZmNtVnpiMngyWlNod2NtOXRhWE5sTENCMllXeDFaU2s3WEc0Z0lDQWdmU3dnWm5WdVkzUnBiMjRnY21WcVpXTjBVSEp2YldselpTaHlaV0Z6YjI0cElIdGNiaUFnSUNBZ0lGOXlaV3BsWTNRb2NISnZiV2x6WlN3Z2NtVmhjMjl1S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJRjl5WldwbFkzUW9jSEp2YldselpTd2daU2s3WEc0Z0lIMWNibjFjYmx4dWRtRnlJR2xrSUQwZ01EdGNibVoxYm1OMGFXOXVJRzVsZUhSSlpDZ3BJSHRjYmlBZ2NtVjBkWEp1SUdsa0t5czdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHMWhhMlZRY205dGFYTmxLSEJ5YjIxcGMyVXBJSHRjYmlBZ2NISnZiV2x6WlZ0UVVrOU5TVk5GWDBsRVhTQTlJR2xrS3lzN1hHNGdJSEJ5YjIxcGMyVXVYM04wWVhSbElEMGdkVzVrWldacGJtVmtPMXh1SUNCd2NtOXRhWE5sTGw5eVpYTjFiSFFnUFNCMWJtUmxabWx1WldRN1hHNGdJSEJ5YjIxcGMyVXVYM04xWW5OamNtbGlaWEp6SUQwZ1cxMDdYRzU5WEc1Y2JtWjFibU4wYVc5dUlFVnVkVzFsY21GMGIzSW9RMjl1YzNSeWRXTjBiM0lzSUdsdWNIVjBLU0I3WEc0Z0lIUm9hWE11WDJsdWMzUmhibU5sUTI5dWMzUnlkV04wYjNJZ1BTQkRiMjV6ZEhKMVkzUnZjanRjYmlBZ2RHaHBjeTV3Y205dGFYTmxJRDBnYm1WM0lFTnZibk4wY25WamRHOXlLRzV2YjNBcE8xeHVYRzRnSUdsbUlDZ2hkR2hwY3k1d2NtOXRhWE5sVzFCU1QwMUpVMFZmU1VSZEtTQjdYRzRnSUNBZ2JXRnJaVkJ5YjIxcGMyVW9kR2hwY3k1d2NtOXRhWE5sS1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2hwYzBGeWNtRjVLR2x1Y0hWMEtTa2dlMXh1SUNBZ0lIUm9hWE11WDJsdWNIVjBJRDBnYVc1d2RYUTdYRzRnSUNBZ2RHaHBjeTVzWlc1bmRHZ2dQU0JwYm5CMWRDNXNaVzVuZEdnN1hHNGdJQ0FnZEdocGN5NWZjbVZ0WVdsdWFXNW5JRDBnYVc1d2RYUXViR1Z1WjNSb08xeHVYRzRnSUNBZ2RHaHBjeTVmY21WemRXeDBJRDBnYm1WM0lFRnljbUY1S0hSb2FYTXViR1Z1WjNSb0tUdGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnWm5Wc1ptbHNiQ2gwYUdsekxuQnliMjFwYzJVc0lIUm9hWE11WDNKbGMzVnNkQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11YkdWdVozUm9JRDBnZEdocGN5NXNaVzVuZEdnZ2ZId2dNRHRjYmlBZ0lDQWdJSFJvYVhNdVgyVnVkVzFsY21GMFpTZ3BPMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVYM0psYldGcGJtbHVaeUE5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0JtZFd4bWFXeHNLSFJvYVhNdWNISnZiV2x6WlN3Z2RHaHBjeTVmY21WemRXeDBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdYM0psYW1WamRDaDBhR2x6TG5CeWIyMXBjMlVzSUhaaGJHbGtZWFJwYjI1RmNuSnZjaWdwS1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjJZV3hwWkdGMGFXOXVSWEp5YjNJb0tTQjdYRzRnSUhKbGRIVnliaUJ1WlhjZ1JYSnliM0lvSjBGeWNtRjVJRTFsZEdodlpITWdiWFZ6ZENCaVpTQndjbTkyYVdSbFpDQmhiaUJCY25KaGVTY3BPMXh1ZlR0Y2JseHVSVzUxYldWeVlYUnZjaTV3Y205MGIzUjVjR1V1WDJWdWRXMWxjbUYwWlNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2RtRnlJR3hsYm1kMGFDQTlJSFJvYVhNdWJHVnVaM1JvTzF4dUlDQjJZWElnWDJsdWNIVjBJRDBnZEdocGN5NWZhVzV3ZFhRN1hHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJSFJvYVhNdVgzTjBZWFJsSUQwOVBTQlFSVTVFU1U1SElDWW1JR2tnUENCc1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lIUm9hWE11WDJWaFkyaEZiblJ5ZVNoZmFXNXdkWFJiYVYwc0lHa3BPMXh1SUNCOVhHNTlPMXh1WEc1RmJuVnRaWEpoZEc5eUxuQnliM1J2ZEhsd1pTNWZaV0ZqYUVWdWRISjVJRDBnWm5WdVkzUnBiMjRnS0dWdWRISjVMQ0JwS1NCN1hHNGdJSFpoY2lCaklEMGdkR2hwY3k1ZmFXNXpkR0Z1WTJWRGIyNXpkSEoxWTNSdmNqdGNiaUFnZG1GeUlISmxjMjlzZG1Va0pDQTlJR011Y21WemIyeDJaVHRjYmx4dUlDQnBaaUFvY21WemIyeDJaU1FrSUQwOVBTQnlaWE52YkhabEtTQjdYRzRnSUNBZ2RtRnlJRjkwYUdWdUlEMGdaMlYwVkdobGJpaGxiblJ5ZVNrN1hHNWNiaUFnSUNCcFppQW9YM1JvWlc0Z1BUMDlJSFJvWlc0Z0ppWWdaVzUwY25rdVgzTjBZWFJsSUNFOVBTQlFSVTVFU1U1SEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5elpYUjBiR1ZrUVhRb1pXNTBjbmt1WDNOMFlYUmxMQ0JwTENCbGJuUnllUzVmY21WemRXeDBLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQmZkR2hsYmlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnZEdocGN5NWZjbVZ0WVdsdWFXNW5MUzA3WEc0Z0lDQWdJQ0IwYUdsekxsOXlaWE4xYkhSYmFWMGdQU0JsYm5SeWVUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHTWdQVDA5SUZCeWIyMXBjMlVwSUh0Y2JpQWdJQ0FnSUhaaGNpQndjbTl0YVhObElEMGdibVYzSUdNb2JtOXZjQ2s3WEc0Z0lDQWdJQ0JvWVc1a2JHVk5ZWGxpWlZSb1pXNWhZbXhsS0hCeWIyMXBjMlVzSUdWdWRISjVMQ0JmZEdobGJpazdYRzRnSUNBZ0lDQjBhR2x6TGw5M2FXeHNVMlYwZEd4bFFYUW9jSEp2YldselpTd2dhU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11WDNkcGJHeFRaWFIwYkdWQmRDaHVaWGNnWXlobWRXNWpkR2x2YmlBb2NtVnpiMngyWlNRa0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE52YkhabEpDUW9aVzUwY25rcE8xeHVJQ0FnSUNBZ2ZTa3NJR2twTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwYUdsekxsOTNhV3hzVTJWMGRHeGxRWFFvY21WemIyeDJaU1FrS0dWdWRISjVLU3dnYVNrN1hHNGdJSDFjYm4wN1hHNWNia1Z1ZFcxbGNtRjBiM0l1Y0hKdmRHOTBlWEJsTGw5elpYUjBiR1ZrUVhRZ1BTQm1kVzVqZEdsdmJpQW9jM1JoZEdVc0lHa3NJSFpoYkhWbEtTQjdYRzRnSUhaaGNpQndjbTl0YVhObElEMGdkR2hwY3k1d2NtOXRhWE5sTzF4dVhHNGdJR2xtSUNod2NtOXRhWE5sTGw5emRHRjBaU0E5UFQwZ1VFVk9SRWxPUnlrZ2UxeHVJQ0FnSUhSb2FYTXVYM0psYldGcGJtbHVaeTB0TzF4dVhHNGdJQ0FnYVdZZ0tITjBZWFJsSUQwOVBTQlNSVXBGUTFSRlJDa2dlMXh1SUNBZ0lDQWdYM0psYW1WamRDaHdjbTl0YVhObExDQjJZV3gxWlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzSmxjM1ZzZEZ0cFhTQTlJSFpoYkhWbE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHbG1JQ2gwYUdsekxsOXlaVzFoYVc1cGJtY2dQVDA5SURBcElIdGNiaUFnSUNCbWRXeG1hV3hzS0hCeWIyMXBjMlVzSUhSb2FYTXVYM0psYzNWc2RDazdYRzRnSUgxY2JuMDdYRzVjYmtWdWRXMWxjbUYwYjNJdWNISnZkRzkwZVhCbExsOTNhV3hzVTJWMGRHeGxRWFFnUFNCbWRXNWpkR2x2YmlBb2NISnZiV2x6WlN3Z2FTa2dlMXh1SUNCMllYSWdaVzUxYldWeVlYUnZjaUE5SUhSb2FYTTdYRzVjYmlBZ2MzVmljMk55YVdKbEtIQnliMjFwYzJVc0lIVnVaR1ZtYVc1bFpDd2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWdWRXMWxjbUYwYjNJdVgzTmxkSFJzWldSQmRDaEdWVXhHU1V4TVJVUXNJR2tzSUhaaGJIVmxLVHRjYmlBZ2ZTd2dablZ1WTNScGIyNGdLSEpsWVhOdmJpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGJuVnRaWEpoZEc5eUxsOXpaWFIwYkdWa1FYUW9Va1ZLUlVOVVJVUXNJR2tzSUhKbFlYTnZiaWs3WEc0Z0lIMHBPMXh1ZlR0Y2JseHVMeW9xWEc0Z0lHQlFjbTl0YVhObExtRnNiR0FnWVdOalpYQjBjeUJoYmlCaGNuSmhlU0J2WmlCd2NtOXRhWE5sY3l3Z1lXNWtJSEpsZEhWeWJuTWdZU0J1WlhjZ2NISnZiV2x6WlNCM2FHbGphRnh1SUNCcGN5Qm1kV3htYVd4c1pXUWdkMmwwYUNCaGJpQmhjbkpoZVNCdlppQm1kV3htYVd4c2JXVnVkQ0IyWVd4MVpYTWdabTl5SUhSb1pTQndZWE56WldRZ2NISnZiV2x6WlhNc0lHOXlYRzRnSUhKbGFtVmpkR1ZrSUhkcGRHZ2dkR2hsSUhKbFlYTnZiaUJ2WmlCMGFHVWdabWx5YzNRZ2NHRnpjMlZrSUhCeWIyMXBjMlVnZEc4Z1ltVWdjbVZxWldOMFpXUXVJRWwwSUdOaGMzUnpJR0ZzYkZ4dUlDQmxiR1Z0Wlc1MGN5QnZaaUIwYUdVZ2NHRnpjMlZrSUdsMFpYSmhZbXhsSUhSdklIQnliMjFwYzJWeklHRnpJR2wwSUhKMWJuTWdkR2hwY3lCaGJHZHZjbWwwYUcwdVhHNWNiaUFnUlhoaGJYQnNaVHBjYmx4dUlDQmdZR0JxWVhaaGMyTnlhWEIwWEc0Z0lHeGxkQ0J3Y205dGFYTmxNU0E5SUhKbGMyOXNkbVVvTVNrN1hHNGdJR3hsZENCd2NtOXRhWE5sTWlBOUlISmxjMjlzZG1Vb01pazdYRzRnSUd4bGRDQndjbTl0YVhObE15QTlJSEpsYzI5c2RtVW9NeWs3WEc0Z0lHeGxkQ0J3Y205dGFYTmxjeUE5SUZzZ2NISnZiV2x6WlRFc0lIQnliMjFwYzJVeUxDQndjbTl0YVhObE15QmRPMXh1WEc0Z0lGQnliMjFwYzJVdVlXeHNLSEJ5YjIxcGMyVnpLUzUwYUdWdUtHWjFibU4wYVc5dUtHRnljbUY1S1h0Y2JpQWdJQ0F2THlCVWFHVWdZWEp5WVhrZ2FHVnlaU0IzYjNWc1pDQmlaU0JiSURFc0lESXNJRE1nWFR0Y2JpQWdmU2s3WEc0Z0lHQmdZRnh1WEc0Z0lFbG1JR0Z1ZVNCdlppQjBhR1VnWUhCeWIyMXBjMlZ6WUNCbmFYWmxiaUIwYnlCZ1lXeHNZQ0JoY21VZ2NtVnFaV04wWldRc0lIUm9aU0JtYVhKemRDQndjbTl0YVhObFhHNGdJSFJvWVhRZ2FYTWdjbVZxWldOMFpXUWdkMmxzYkNCaVpTQm5hWFpsYmlCaGN5QmhiaUJoY21kMWJXVnVkQ0IwYnlCMGFHVWdjbVYwZFhKdVpXUWdjSEp2YldselpYTW5jMXh1SUNCeVpXcGxZM1JwYjI0Z2FHRnVaR3hsY2k0Z1JtOXlJR1Y0WVcxd2JHVTZYRzVjYmlBZ1JYaGhiWEJzWlRwY2JseHVJQ0JnWUdCcVlYWmhjMk55YVhCMFhHNGdJR3hsZENCd2NtOXRhWE5sTVNBOUlISmxjMjlzZG1Vb01TazdYRzRnSUd4bGRDQndjbTl0YVhObE1pQTlJSEpsYW1WamRDaHVaWGNnUlhKeWIzSW9YQ0l5WENJcEtUdGNiaUFnYkdWMElIQnliMjFwYzJVeklEMGdjbVZxWldOMEtHNWxkeUJGY25KdmNpaGNJak5jSWlrcE8xeHVJQ0JzWlhRZ2NISnZiV2x6WlhNZ1BTQmJJSEJ5YjIxcGMyVXhMQ0J3Y205dGFYTmxNaXdnY0hKdmJXbHpaVE1nWFR0Y2JseHVJQ0JRY205dGFYTmxMbUZzYkNod2NtOXRhWE5sY3lrdWRHaGxiaWhtZFc1amRHbHZiaWhoY25KaGVTbDdYRzRnSUNBZ0x5OGdRMjlrWlNCb1pYSmxJRzVsZG1WeUlISjFibk1nWW1WallYVnpaU0IwYUdWeVpTQmhjbVVnY21WcVpXTjBaV1FnY0hKdmJXbHpaWE1oWEc0Z0lIMHNJR1oxYm1OMGFXOXVLR1Z5Y205eUtTQjdYRzRnSUNBZ0x5OGdaWEp5YjNJdWJXVnpjMkZuWlNBOVBUMGdYQ0l5WENKY2JpQWdmU2s3WEc0Z0lHQmdZRnh1WEc0Z0lFQnRaWFJvYjJRZ1lXeHNYRzRnSUVCemRHRjBhV05jYmlBZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnWlc1MGNtbGxjeUJoY25KaGVTQnZaaUJ3Y205dGFYTmxjMXh1SUNCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYkdGaVpXd2diM0IwYVc5dVlXd2djM1J5YVc1bklHWnZjaUJzWVdKbGJHbHVaeUIwYUdVZ2NISnZiV2x6WlM1Y2JpQWdWWE5sWm5Wc0lHWnZjaUIwYjI5c2FXNW5MbHh1SUNCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNCd2NtOXRhWE5sSUhSb1lYUWdhWE1nWm5Wc1ptbHNiR1ZrSUhkb1pXNGdZV3hzSUdCd2NtOXRhWE5sYzJBZ2FHRjJaU0JpWldWdVhHNGdJR1oxYkdacGJHeGxaQ3dnYjNJZ2NtVnFaV04wWldRZ2FXWWdZVzU1SUc5bUlIUm9aVzBnWW1WamIyMWxJSEpsYW1WamRHVmtMbHh1SUNCQWMzUmhkR2xqWEc0cUwxeHVablZ1WTNScGIyNGdZV3hzS0dWdWRISnBaWE1wSUh0Y2JpQWdjbVYwZFhKdUlHNWxkeUJGYm5WdFpYSmhkRzl5S0hSb2FYTXNJR1Z1ZEhKcFpYTXBMbkJ5YjIxcGMyVTdYRzU5WEc1Y2JpOHFLbHh1SUNCZ1VISnZiV2x6WlM1eVlXTmxZQ0J5WlhSMWNtNXpJR0VnYm1WM0lIQnliMjFwYzJVZ2QyaHBZMmdnYVhNZ2MyVjBkR3hsWkNCcGJpQjBhR1VnYzJGdFpTQjNZWGtnWVhNZ2RHaGxYRzRnSUdacGNuTjBJSEJoYzNObFpDQndjbTl0YVhObElIUnZJSE5sZEhSc1pTNWNibHh1SUNCRmVHRnRjR3hsT2x4dVhHNGdJR0JnWUdwaGRtRnpZM0pwY0hSY2JpQWdiR1YwSUhCeWIyMXBjMlV4SUQwZ2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtYdGNiaUFnSUNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQnlaWE52YkhabEtDZHdjbTl0YVhObElERW5LVHRjYmlBZ0lDQjlMQ0F5TURBcE8xeHVJQ0I5S1R0Y2JseHVJQ0JzWlhRZ2NISnZiV2x6WlRJZ1BTQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBlMXh1SUNBZ0lITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJSEpsYzI5c2RtVW9KM0J5YjIxcGMyVWdNaWNwTzF4dUlDQWdJSDBzSURFd01DazdYRzRnSUgwcE8xeHVYRzRnSUZCeWIyMXBjMlV1Y21GalpTaGJjSEp2YldselpURXNJSEJ5YjIxcGMyVXlYU2t1ZEdobGJpaG1kVzVqZEdsdmJpaHlaWE4xYkhRcGUxeHVJQ0FnSUM4dklISmxjM1ZzZENBOVBUMGdKM0J5YjIxcGMyVWdNaWNnWW1WallYVnpaU0JwZENCM1lYTWdjbVZ6YjJ4MlpXUWdZbVZtYjNKbElIQnliMjFwYzJVeFhHNGdJQ0FnTHk4Z2QyRnpJSEpsYzI5c2RtVmtMbHh1SUNCOUtUdGNiaUFnWUdCZ1hHNWNiaUFnWUZCeWIyMXBjMlV1Y21GalpXQWdhWE1nWkdWMFpYSnRhVzVwYzNScFl5QnBiaUIwYUdGMElHOXViSGtnZEdobElITjBZWFJsSUc5bUlIUm9aU0JtYVhKemRGeHVJQ0J6WlhSMGJHVmtJSEJ5YjIxcGMyVWdiV0YwZEdWeWN5NGdSbTl5SUdWNFlXMXdiR1VzSUdWMlpXNGdhV1lnYjNSb1pYSWdjSEp2YldselpYTWdaMmwyWlc0Z2RHOGdkR2hsWEc0Z0lHQndjbTl0YVhObGMyQWdZWEp5WVhrZ1lYSm5kVzFsYm5RZ1lYSmxJSEpsYzI5c2RtVmtMQ0JpZFhRZ2RHaGxJR1pwY25OMElITmxkSFJzWldRZ2NISnZiV2x6WlNCb1lYTmNiaUFnWW1WamIyMWxJSEpsYW1WamRHVmtJR0psWm05eVpTQjBhR1VnYjNSb1pYSWdjSEp2YldselpYTWdZbVZqWVcxbElHWjFiR1pwYkd4bFpDd2dkR2hsSUhKbGRIVnlibVZrWEc0Z0lIQnliMjFwYzJVZ2QybHNiQ0JpWldOdmJXVWdjbVZxWldOMFpXUTZYRzVjYmlBZ1lHQmdhbUYyWVhOamNtbHdkRnh1SUNCc1pYUWdjSEp2YldselpURWdQU0J1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwZTF4dUlDQWdJSE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUhKbGMyOXNkbVVvSjNCeWIyMXBjMlVnTVNjcE8xeHVJQ0FnSUgwc0lESXdNQ2s3WEc0Z0lIMHBPMXh1WEc0Z0lHeGxkQ0J3Y205dGFYTmxNaUE5SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENsN1hHNGdJQ0FnYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ2NtVnFaV04wS0c1bGR5QkZjbkp2Y2lnbmNISnZiV2x6WlNBeUp5a3BPMXh1SUNBZ0lIMHNJREV3TUNrN1hHNGdJSDBwTzF4dVhHNGdJRkJ5YjIxcGMyVXVjbUZqWlNoYmNISnZiV2x6WlRFc0lIQnliMjFwYzJVeVhTa3VkR2hsYmlobWRXNWpkR2x2YmloeVpYTjFiSFFwZTF4dUlDQWdJQzh2SUVOdlpHVWdhR1Z5WlNCdVpYWmxjaUJ5ZFc1elhHNGdJSDBzSUdaMWJtTjBhVzl1S0hKbFlYTnZiaWw3WEc0Z0lDQWdMeThnY21WaGMyOXVMbTFsYzNOaFoyVWdQVDA5SUNkd2NtOXRhWE5sSURJbklHSmxZMkYxYzJVZ2NISnZiV2x6WlNBeUlHSmxZMkZ0WlNCeVpXcGxZM1JsWkNCaVpXWnZjbVZjYmlBZ0lDQXZMeUJ3Y205dGFYTmxJREVnWW1WallXMWxJR1oxYkdacGJHeGxaRnh1SUNCOUtUdGNiaUFnWUdCZ1hHNWNiaUFnUVc0Z1pYaGhiWEJzWlNCeVpXRnNMWGR2Y214a0lIVnpaU0JqWVhObElHbHpJR2x0Y0d4bGJXVnVkR2x1WnlCMGFXMWxiM1YwY3pwY2JseHVJQ0JnWUdCcVlYWmhjMk55YVhCMFhHNGdJRkJ5YjIxcGMyVXVjbUZqWlNoYllXcGhlQ2duWm05dkxtcHpiMjRuS1N3Z2RHbHRaVzkxZENnMU1EQXdLVjBwWEc0Z0lHQmdZRnh1WEc0Z0lFQnRaWFJvYjJRZ2NtRmpaVnh1SUNCQWMzUmhkR2xqWEc0Z0lFQndZWEpoYlNCN1FYSnlZWGw5SUhCeWIyMXBjMlZ6SUdGeWNtRjVJRzltSUhCeWIyMXBjMlZ6SUhSdklHOWljMlZ5ZG1WY2JpQWdWWE5sWm5Wc0lHWnZjaUIwYjI5c2FXNW5MbHh1SUNCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNCaElIQnliMjFwYzJVZ2QyaHBZMmdnYzJWMGRHeGxjeUJwYmlCMGFHVWdjMkZ0WlNCM1lYa2dZWE1nZEdobElHWnBjbk4wSUhCaGMzTmxaRnh1SUNCd2NtOXRhWE5sSUhSdklITmxkSFJzWlM1Y2Jpb3ZYRzVtZFc1amRHbHZiaUJ5WVdObEtHVnVkSEpwWlhNcElIdGNiaUFnTHlwcWMyaHBiblFnZG1Gc2FXUjBhR2x6T25SeWRXVWdLaTljYmlBZ2RtRnlJRU52Ym5OMGNuVmpkRzl5SUQwZ2RHaHBjenRjYmx4dUlDQnBaaUFvSVdselFYSnlZWGtvWlc1MGNtbGxjeWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVOdmJuTjBjblZqZEc5eUtHWjFibU4wYVc5dUlDaGZMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaV3BsWTNRb2JtVjNJRlI1Y0dWRmNuSnZjaWduV1c5MUlHMTFjM1FnY0dGemN5QmhiaUJoY25KaGVTQjBieUJ5WVdObExpY3BLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVOdmJuTjBjblZqZEc5eUtHWjFibU4wYVc5dUlDaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lIWmhjaUJzWlc1bmRHZ2dQU0JsYm5SeWFXVnpMbXhsYm1kMGFEdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ1EyOXVjM1J5ZFdOMGIzSXVjbVZ6YjJ4MlpTaGxiblJ5YVdWelcybGRLUzUwYUdWdUtISmxjMjlzZG1Vc0lISmxhbVZqZENrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0lHQlFjbTl0YVhObExuSmxhbVZqZEdBZ2NtVjBkWEp1Y3lCaElIQnliMjFwYzJVZ2NtVnFaV04wWldRZ2QybDBhQ0IwYUdVZ2NHRnpjMlZrSUdCeVpXRnpiMjVnTGx4dUlDQkpkQ0JwY3lCemFHOXlkR2hoYm1RZ1ptOXlJSFJvWlNCbWIyeHNiM2RwYm1jNlhHNWNiaUFnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0JzWlhRZ2NISnZiV2x6WlNBOUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDbDdYRzRnSUNBZ2NtVnFaV04wS0c1bGR5QkZjbkp2Y2lnblYwaFBUMUJUSnlrcE8xeHVJQ0I5S1R0Y2JseHVJQ0J3Y205dGFYTmxMblJvWlc0b1puVnVZM1JwYjI0b2RtRnNkV1VwZTF4dUlDQWdJQzh2SUVOdlpHVWdhR1Z5WlNCa2IyVnpiaWQwSUhKMWJpQmlaV05oZFhObElIUm9aU0J3Y205dGFYTmxJR2x6SUhKbGFtVmpkR1ZrSVZ4dUlDQjlMQ0JtZFc1amRHbHZiaWh5WldGemIyNHBlMXh1SUNBZ0lDOHZJSEpsWVhOdmJpNXRaWE56WVdkbElEMDlQU0FuVjBoUFQxQlRKMXh1SUNCOUtUdGNiaUFnWUdCZ1hHNWNiaUFnU1c1emRHVmhaQ0J2WmlCM2NtbDBhVzVuSUhSb1pTQmhZbTkyWlN3Z2VXOTFjaUJqYjJSbElHNXZkeUJ6YVcxd2JIa2dZbVZqYjIxbGN5QjBhR1VnWm05c2JHOTNhVzVuT2x4dVhHNGdJR0JnWUdwaGRtRnpZM0pwY0hSY2JpQWdiR1YwSUhCeWIyMXBjMlVnUFNCUWNtOXRhWE5sTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0lvSjFkSVQwOVFVeWNwS1R0Y2JseHVJQ0J3Y205dGFYTmxMblJvWlc0b1puVnVZM1JwYjI0b2RtRnNkV1VwZTF4dUlDQWdJQzh2SUVOdlpHVWdhR1Z5WlNCa2IyVnpiaWQwSUhKMWJpQmlaV05oZFhObElIUm9aU0J3Y205dGFYTmxJR2x6SUhKbGFtVmpkR1ZrSVZ4dUlDQjlMQ0JtZFc1amRHbHZiaWh5WldGemIyNHBlMXh1SUNBZ0lDOHZJSEpsWVhOdmJpNXRaWE56WVdkbElEMDlQU0FuVjBoUFQxQlRKMXh1SUNCOUtUdGNiaUFnWUdCZ1hHNWNiaUFnUUcxbGRHaHZaQ0J5WldwbFkzUmNiaUFnUUhOMFlYUnBZMXh1SUNCQWNHRnlZVzBnZTBGdWVYMGdjbVZoYzI5dUlIWmhiSFZsSUhSb1lYUWdkR2hsSUhKbGRIVnlibVZrSUhCeWIyMXBjMlVnZDJsc2JDQmlaU0J5WldwbFkzUmxaQ0IzYVhSb0xseHVJQ0JWYzJWbWRXd2dabTl5SUhSdmIyeHBibWN1WEc0Z0lFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlHRWdjSEp2YldselpTQnlaV3BsWTNSbFpDQjNhWFJvSUhSb1pTQm5hWFpsYmlCZ2NtVmhjMjl1WUM1Y2Jpb3ZYRzVtZFc1amRHbHZiaUJ5WldwbFkzUW9jbVZoYzI5dUtTQjdYRzRnSUM4cWFuTm9hVzUwSUhaaGJHbGtkR2hwY3pwMGNuVmxJQ292WEc0Z0lIWmhjaUJEYjI1emRISjFZM1J2Y2lBOUlIUm9hWE03WEc0Z0lIWmhjaUJ3Y205dGFYTmxJRDBnYm1WM0lFTnZibk4wY25WamRHOXlLRzV2YjNBcE8xeHVJQ0JmY21WcVpXTjBLSEJ5YjIxcGMyVXNJSEpsWVhOdmJpazdYRzRnSUhKbGRIVnliaUJ3Y205dGFYTmxPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnVaV1ZrYzFKbGMyOXNkbVZ5S0NrZ2UxeHVJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkWmIzVWdiWFZ6ZENCd1lYTnpJR0VnY21WemIyeDJaWElnWm5WdVkzUnBiMjRnWVhNZ2RHaGxJR1pwY25OMElHRnlaM1Z0Wlc1MElIUnZJSFJvWlNCd2NtOXRhWE5sSUdOdmJuTjBjblZqZEc5eUp5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHNWxaV1J6VG1WM0tDa2dlMXh1SUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lSbUZwYkdWa0lIUnZJR052Ym5OMGNuVmpkQ0FuVUhKdmJXbHpaU2M2SUZCc1pXRnpaU0IxYzJVZ2RHaGxJQ2R1WlhjbklHOXdaWEpoZEc5eUxDQjBhR2x6SUc5aWFtVmpkQ0JqYjI1emRISjFZM1J2Y2lCallXNXViM1FnWW1VZ1kyRnNiR1ZrSUdGeklHRWdablZ1WTNScGIyNHVYQ0lwTzF4dWZWeHVYRzR2S2lwY2JpQWdVSEp2YldselpTQnZZbXBsWTNSeklISmxjSEpsYzJWdWRDQjBhR1VnWlhabGJuUjFZV3dnY21WemRXeDBJRzltSUdGdUlHRnplVzVqYUhKdmJtOTFjeUJ2Y0dWeVlYUnBiMjR1SUZSb1pWeHVJQ0J3Y21sdFlYSjVJSGRoZVNCdlppQnBiblJsY21GamRHbHVaeUIzYVhSb0lHRWdjSEp2YldselpTQnBjeUIwYUhKdmRXZG9JR2wwY3lCZ2RHaGxibUFnYldWMGFHOWtMQ0IzYUdsamFGeHVJQ0J5WldkcGMzUmxjbk1nWTJGc2JHSmhZMnR6SUhSdklISmxZMlZwZG1VZ1pXbDBhR1Z5SUdFZ2NISnZiV2x6WlNkeklHVjJaVzUwZFdGc0lIWmhiSFZsSUc5eUlIUm9aU0J5WldGemIyNWNiaUFnZDJoNUlIUm9aU0J3Y205dGFYTmxJR05oYm01dmRDQmlaU0JtZFd4bWFXeHNaV1F1WEc1Y2JpQWdWR1Z5YldsdWIyeHZaM2xjYmlBZ0xTMHRMUzB0TFMwdExTMWNibHh1SUNBdElHQndjbTl0YVhObFlDQnBjeUJoYmlCdlltcGxZM1FnYjNJZ1puVnVZM1JwYjI0Z2QybDBhQ0JoSUdCMGFHVnVZQ0J0WlhSb2IyUWdkMmh2YzJVZ1ltVm9ZWFpwYjNJZ1kyOXVabTl5YlhNZ2RHOGdkR2hwY3lCemNHVmphV1pwWTJGMGFXOXVMbHh1SUNBdElHQjBhR1Z1WVdKc1pXQWdhWE1nWVc0Z2IySnFaV04wSUc5eUlHWjFibU4wYVc5dUlIUm9ZWFFnWkdWbWFXNWxjeUJoSUdCMGFHVnVZQ0J0WlhSb2IyUXVYRzRnSUMwZ1lIWmhiSFZsWUNCcGN5QmhibmtnYkdWbllXd2dTbUYyWVZOamNtbHdkQ0IyWVd4MVpTQW9hVzVqYkhWa2FXNW5JSFZ1WkdWbWFXNWxaQ3dnWVNCMGFHVnVZV0pzWlN3Z2IzSWdZU0J3Y205dGFYTmxLUzVjYmlBZ0xTQmdaWGhqWlhCMGFXOXVZQ0JwY3lCaElIWmhiSFZsSUhSb1lYUWdhWE1nZEdoeWIzZHVJSFZ6YVc1bklIUm9aU0IwYUhKdmR5QnpkR0YwWlcxbGJuUXVYRzRnSUMwZ1lISmxZWE52Ym1BZ2FYTWdZU0IyWVd4MVpTQjBhR0YwSUdsdVpHbGpZWFJsY3lCM2FIa2dZU0J3Y205dGFYTmxJSGRoY3lCeVpXcGxZM1JsWkM1Y2JpQWdMU0JnYzJWMGRHeGxaR0FnZEdobElHWnBibUZzSUhKbGMzUnBibWNnYzNSaGRHVWdiMllnWVNCd2NtOXRhWE5sTENCbWRXeG1hV3hzWldRZ2IzSWdjbVZxWldOMFpXUXVYRzVjYmlBZ1FTQndjbTl0YVhObElHTmhiaUJpWlNCcGJpQnZibVVnYjJZZ2RHaHlaV1VnYzNSaGRHVnpPaUJ3Wlc1a2FXNW5MQ0JtZFd4bWFXeHNaV1FzSUc5eUlISmxhbVZqZEdWa0xseHVYRzRnSUZCeWIyMXBjMlZ6SUhSb1lYUWdZWEpsSUdaMWJHWnBiR3hsWkNCb1lYWmxJR0VnWm5Wc1ptbHNiRzFsYm5RZ2RtRnNkV1VnWVc1a0lHRnlaU0JwYmlCMGFHVWdablZzWm1sc2JHVmtYRzRnSUhOMFlYUmxMaUFnVUhKdmJXbHpaWE1nZEdoaGRDQmhjbVVnY21WcVpXTjBaV1FnYUdGMlpTQmhJSEpsYW1WamRHbHZiaUJ5WldGemIyNGdZVzVrSUdGeVpTQnBiaUIwYUdWY2JpQWdjbVZxWldOMFpXUWdjM1JoZEdVdUlDQkJJR1oxYkdacGJHeHRaVzUwSUhaaGJIVmxJR2x6SUc1bGRtVnlJR0VnZEdobGJtRmliR1V1WEc1Y2JpQWdVSEp2YldselpYTWdZMkZ1SUdGc2MyOGdZbVVnYzJGcFpDQjBieUFxY21WemIyeDJaU29nWVNCMllXeDFaUzRnSUVsbUlIUm9hWE1nZG1Gc2RXVWdhWE1nWVd4emJ5QmhYRzRnSUhCeWIyMXBjMlVzSUhSb1pXNGdkR2hsSUc5eWFXZHBibUZzSUhCeWIyMXBjMlVuY3lCelpYUjBiR1ZrSUhOMFlYUmxJSGRwYkd3Z2JXRjBZMmdnZEdobElIWmhiSFZsSjNOY2JpQWdjMlYwZEd4bFpDQnpkR0YwWlM0Z0lGTnZJR0VnY0hKdmJXbHpaU0IwYUdGMElDcHlaWE52YkhabGN5b2dZU0J3Y205dGFYTmxJSFJvWVhRZ2NtVnFaV04wY3lCM2FXeHNYRzRnSUdsMGMyVnNaaUJ5WldwbFkzUXNJR0Z1WkNCaElIQnliMjFwYzJVZ2RHaGhkQ0FxY21WemIyeDJaWE1xSUdFZ2NISnZiV2x6WlNCMGFHRjBJR1oxYkdacGJHeHpJSGRwYkd4Y2JpQWdhWFJ6Wld4bUlHWjFiR1pwYkd3dVhHNWNibHh1SUNCQ1lYTnBZeUJWYzJGblpUcGNiaUFnTFMwdExTMHRMUzB0TFMwdFhHNWNiaUFnWUdCZ2FuTmNiaUFnYkdWMElIQnliMjFwYzJVZ1BTQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQXZMeUJ2YmlCemRXTmpaWE56WEc0Z0lDQWdjbVZ6YjJ4MlpTaDJZV3gxWlNrN1hHNWNiaUFnSUNBdkx5QnZiaUJtWVdsc2RYSmxYRzRnSUNBZ2NtVnFaV04wS0hKbFlYTnZiaWs3WEc0Z0lIMHBPMXh1WEc0Z0lIQnliMjFwYzJVdWRHaGxiaWhtZFc1amRHbHZiaWgyWVd4MVpTa2dlMXh1SUNBZ0lDOHZJRzl1SUdaMWJHWnBiR3h0Wlc1MFhHNGdJSDBzSUdaMWJtTjBhVzl1S0hKbFlYTnZiaWtnZTF4dUlDQWdJQzh2SUc5dUlISmxhbVZqZEdsdmJseHVJQ0I5S1R0Y2JpQWdZR0JnWEc1Y2JpQWdRV1IyWVc1alpXUWdWWE5oWjJVNlhHNGdJQzB0TFMwdExTMHRMUzB0TFMwdExWeHVYRzRnSUZCeWIyMXBjMlZ6SUhOb2FXNWxJSGRvWlc0Z1lXSnpkSEpoWTNScGJtY2dZWGRoZVNCaGMzbHVZMmh5YjI1dmRYTWdhVzUwWlhKaFkzUnBiMjV6SUhOMVkyZ2dZWE5jYmlBZ1lGaE5URWgwZEhCU1pYRjFaWE4wWUhNdVhHNWNiaUFnWUdCZ2FuTmNiaUFnWm5WdVkzUnBiMjRnWjJWMFNsTlBUaWgxY213cElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1h0Y2JpQWdJQ0FnSUd4bGRDQjRhSElnUFNCdVpYY2dXRTFNU0hSMGNGSmxjWFZsYzNRb0tUdGNibHh1SUNBZ0lDQWdlR2h5TG05d1pXNG9KMGRGVkNjc0lIVnliQ2s3WEc0Z0lDQWdJQ0I0YUhJdWIyNXlaV0ZrZVhOMFlYUmxZMmhoYm1kbElEMGdhR0Z1Wkd4bGNqdGNiaUFnSUNBZ0lIaG9jaTV5WlhOd2IyNXpaVlI1Y0dVZ1BTQW5hbk52YmljN1hHNGdJQ0FnSUNCNGFISXVjMlYwVW1WeGRXVnpkRWhsWVdSbGNpZ25RV05qWlhCMEp5d2dKMkZ3Y0d4cFkyRjBhVzl1TDJwemIyNG5LVHRjYmlBZ0lDQWdJSGhvY2k1elpXNWtLQ2s3WEc1Y2JpQWdJQ0FnSUdaMWJtTjBhVzl1SUdoaGJtUnNaWElvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuSmxZV1I1VTNSaGRHVWdQVDA5SUhSb2FYTXVSRTlPUlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbk4wWVhSMWN5QTlQVDBnTWpBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hSb2FYTXVjbVZ6Y0c5dWMyVXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb2JtVjNJRVZ5Y205eUtDZG5aWFJLVTA5T09pQmdKeUFySUhWeWJDQXJJQ2RnSUdaaGFXeGxaQ0IzYVhSb0lITjBZWFIxY3pvZ1d5Y2dLeUIwYUdsekxuTjBZWFIxY3lBcklDZGRKeWtwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdkbGRFcFRUMDRvSnk5d2IzTjBjeTVxYzI5dUp5a3VkR2hsYmlobWRXNWpkR2x2YmlocWMyOXVLU0I3WEc0Z0lDQWdMeThnYjI0Z1puVnNabWxzYkcxbGJuUmNiaUFnZlN3Z1puVnVZM1JwYjI0b2NtVmhjMjl1S1NCN1hHNGdJQ0FnTHk4Z2IyNGdjbVZxWldOMGFXOXVYRzRnSUgwcE8xeHVJQ0JnWUdCY2JseHVJQ0JWYm14cGEyVWdZMkZzYkdKaFkydHpMQ0J3Y205dGFYTmxjeUJoY21VZ1ozSmxZWFFnWTI5dGNHOXpZV0pzWlNCd2NtbHRhWFJwZG1WekxseHVYRzRnSUdCZ1lHcHpYRzRnSUZCeWIyMXBjMlV1WVd4c0tGdGNiaUFnSUNCblpYUktVMDlPS0NjdmNHOXpkSE1uS1N4Y2JpQWdJQ0JuWlhSS1UwOU9LQ2N2WTI5dGJXVnVkSE1uS1Z4dUlDQmRLUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsY3lsN1hHNGdJQ0FnZG1Gc2RXVnpXekJkSUM4dklEMCtJSEJ2YzNSelNsTlBUbHh1SUNBZ0lIWmhiSFZsYzFzeFhTQXZMeUE5UGlCamIyMXRaVzUwYzBwVFQwNWNibHh1SUNBZ0lISmxkSFZ5YmlCMllXeDFaWE03WEc0Z0lIMHBPMXh1SUNCZ1lHQmNibHh1SUNCQVkyeGhjM01nVUhKdmJXbHpaVnh1SUNCQWNHRnlZVzBnZTJaMWJtTjBhVzl1ZlNCeVpYTnZiSFpsY2x4dUlDQlZjMlZtZFd3Z1ptOXlJSFJ2YjJ4cGJtY3VYRzRnSUVCamIyNXpkSEoxWTNSdmNseHVLaTljYm1aMWJtTjBhVzl1SUZCeWIyMXBjMlVvY21WemIyeDJaWElwSUh0Y2JpQWdkR2hwYzF0UVVrOU5TVk5GWDBsRVhTQTlJRzVsZUhSSlpDZ3BPMXh1SUNCMGFHbHpMbDl5WlhOMWJIUWdQU0IwYUdsekxsOXpkR0YwWlNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnZEdocGN5NWZjM1ZpYzJOeWFXSmxjbk1nUFNCYlhUdGNibHh1SUNCcFppQW9ibTl2Y0NBaFBUMGdjbVZ6YjJ4MlpYSXBJSHRjYmlBZ0lDQjBlWEJsYjJZZ2NtVnpiMngyWlhJZ0lUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ2JtVmxaSE5TWlhOdmJIWmxjaWdwTzF4dUlDQWdJSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQlFjbTl0YVhObElEOGdhVzVwZEdsaGJHbDZaVkJ5YjIxcGMyVW9kR2hwY3l3Z2NtVnpiMngyWlhJcElEb2dibVZsWkhOT1pYY29LVHRjYmlBZ2ZWeHVmVnh1WEc1UWNtOXRhWE5sTG1Gc2JDQTlJR0ZzYkR0Y2JsQnliMjFwYzJVdWNtRmpaU0E5SUhKaFkyVTdYRzVRY205dGFYTmxMbkpsYzI5c2RtVWdQU0J5WlhOdmJIWmxPMXh1VUhKdmJXbHpaUzV5WldwbFkzUWdQU0J5WldwbFkzUTdYRzVRY205dGFYTmxMbDl6WlhSVFkyaGxaSFZzWlhJZ1BTQnpaWFJUWTJobFpIVnNaWEk3WEc1UWNtOXRhWE5sTGw5elpYUkJjMkZ3SUQwZ2MyVjBRWE5oY0R0Y2JsQnliMjFwYzJVdVgyRnpZWEFnUFNCaGMyRndPMXh1WEc1UWNtOXRhWE5sTG5CeWIzUnZkSGx3WlNBOUlIdGNiaUFnWTI5dWMzUnlkV04wYjNJNklGQnliMjFwYzJVc1hHNWNiaUFnTHlvcVhHNGdJQ0FnVkdobElIQnlhVzFoY25rZ2QyRjVJRzltSUdsdWRHVnlZV04wYVc1bklIZHBkR2dnWVNCd2NtOXRhWE5sSUdseklIUm9jbTkxWjJnZ2FYUnpJR0IwYUdWdVlDQnRaWFJvYjJRc1hHNGdJQ0FnZDJocFkyZ2djbVZuYVhOMFpYSnpJR05oYkd4aVlXTnJjeUIwYnlCeVpXTmxhWFpsSUdWcGRHaGxjaUJoSUhCeWIyMXBjMlVuY3lCbGRtVnVkSFZoYkNCMllXeDFaU0J2Y2lCMGFHVmNiaUFnSUNCeVpXRnpiMjRnZDJoNUlIUm9aU0J3Y205dGFYTmxJR05oYm01dmRDQmlaU0JtZFd4bWFXeHNaV1F1WEc0Z0lGeHVJQ0FnSUdCZ1lHcHpYRzRnSUNBZ1ptbHVaRlZ6WlhJb0tTNTBhR1Z1S0daMWJtTjBhVzl1S0hWelpYSXBlMXh1SUNBZ0lDQWdMeThnZFhObGNpQnBjeUJoZG1GcGJHRmliR1ZjYmlBZ0lDQjlMQ0JtZFc1amRHbHZiaWh5WldGemIyNHBlMXh1SUNBZ0lDQWdMeThnZFhObGNpQnBjeUIxYm1GMllXbHNZV0pzWlN3Z1lXNWtJSGx2ZFNCaGNtVWdaMmwyWlc0Z2RHaGxJSEpsWVhOdmJpQjNhSGxjYmlBZ0lDQjlLVHRjYmlBZ0lDQmdZR0JjYmlBZ1hHNGdJQ0FnUTJoaGFXNXBibWRjYmlBZ0lDQXRMUzB0TFMwdExWeHVJQ0JjYmlBZ0lDQlVhR1VnY21WMGRYSnVJSFpoYkhWbElHOW1JR0IwYUdWdVlDQnBjeUJwZEhObGJHWWdZU0J3Y205dGFYTmxMaUFnVkdocGN5QnpaV052Ym1Rc0lDZGtiM2R1YzNSeVpXRnRKMXh1SUNBZ0lIQnliMjFwYzJVZ2FYTWdjbVZ6YjJ4MlpXUWdkMmwwYUNCMGFHVWdjbVYwZFhKdUlIWmhiSFZsSUc5bUlIUm9aU0JtYVhKemRDQndjbTl0YVhObEozTWdablZzWm1sc2JHMWxiblJjYmlBZ0lDQnZjaUJ5WldwbFkzUnBiMjRnYUdGdVpHeGxjaXdnYjNJZ2NtVnFaV04wWldRZ2FXWWdkR2hsSUdoaGJtUnNaWElnZEdoeWIzZHpJR0Z1SUdWNFkyVndkR2x2Ymk1Y2JpQWdYRzRnSUNBZ1lHQmdhbk5jYmlBZ0lDQm1hVzVrVlhObGNpZ3BMblJvWlc0b1puVnVZM1JwYjI0Z0tIVnpaWElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIxYzJWeUxtNWhiV1U3WEc0Z0lDQWdmU3dnWm5WdVkzUnBiMjRnS0hKbFlYTnZiaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQ2RrWldaaGRXeDBJRzVoYldVbk8xeHVJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRnS0hWelpYSk9ZVzFsS1NCN1hHNGdJQ0FnSUNBdkx5QkpaaUJnWm1sdVpGVnpaWEpnSUdaMWJHWnBiR3hsWkN3Z1lIVnpaWEpPWVcxbFlDQjNhV3hzSUdKbElIUm9aU0IxYzJWeUozTWdibUZ0WlN3Z2IzUm9aWEozYVhObElHbDBYRzRnSUNBZ0lDQXZMeUIzYVd4c0lHSmxJR0FuWkdWbVlYVnNkQ0J1WVcxbEoyQmNiaUFnSUNCOUtUdGNiaUFnWEc0Z0lDQWdabWx1WkZWelpYSW9LUzUwYUdWdUtHWjFibU4wYVc5dUlDaDFjMlZ5S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBadmRXNWtJSFZ6WlhJc0lHSjFkQ0J6ZEdsc2JDQjFibWhoY0hCNUp5azdYRzRnSUNBZ2ZTd2dablZ1WTNScGIyNGdLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGdabWx1WkZWelpYSmdJSEpsYW1WamRHVmtJR0Z1WkNCM1pTZHlaU0IxYm1oaGNIQjVKeWs3WEc0Z0lDQWdmU2t1ZEdobGJpaG1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDOHZJRzVsZG1WeUlISmxZV05vWldSY2JpQWdJQ0I5TENCbWRXNWpkR2x2YmlBb2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNBdkx5QnBaaUJnWm1sdVpGVnpaWEpnSUdaMWJHWnBiR3hsWkN3Z1lISmxZWE52Ym1BZ2QybHNiQ0JpWlNBblJtOTFibVFnZFhObGNpd2dZblYwSUhOMGFXeHNJSFZ1YUdGd2NIa25MbHh1SUNBZ0lDQWdMeThnU1dZZ1lHWnBibVJWYzJWeVlDQnlaV3BsWTNSbFpDd2dZSEpsWVhOdmJtQWdkMmxzYkNCaVpTQW5ZR1pwYm1SVmMyVnlZQ0J5WldwbFkzUmxaQ0JoYm1RZ2QyVW5jbVVnZFc1b1lYQndlU2N1WEc0Z0lDQWdmU2s3WEc0Z0lDQWdZR0JnWEc0Z0lDQWdTV1lnZEdobElHUnZkMjV6ZEhKbFlXMGdjSEp2YldselpTQmtiMlZ6SUc1dmRDQnpjR1ZqYVdaNUlHRWdjbVZxWldOMGFXOXVJR2hoYm1Sc1pYSXNJSEpsYW1WamRHbHZiaUJ5WldGemIyNXpJSGRwYkd3Z1ltVWdjSEp2Y0dGbllYUmxaQ0JtZFhKMGFHVnlJR1J2ZDI1emRISmxZVzB1WEc0Z0lGeHVJQ0FnSUdCZ1lHcHpYRzRnSUNBZ1ptbHVaRlZ6WlhJb0tTNTBhR1Z1S0daMWJtTjBhVzl1SUNoMWMyVnlLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnVUdWa1lXZHZaMmxqWVd4RmVHTmxjSFJwYjI0b0oxVndjM1J5WldGdElHVnljbTl5SnlrN1hHNGdJQ0FnZlNrdWRHaGxiaWhtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQzh2SUc1bGRtVnlJSEpsWVdOb1pXUmNiaUFnSUNCOUtTNTBhR1Z1S0daMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnTHk4Z2JtVjJaWElnY21WaFkyaGxaRnh1SUNBZ0lIMHNJR1oxYm1OMGFXOXVJQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJQzh2SUZSb1pTQmdVR1ZrWjJGbmIyTnBZV3hGZUdObGNIUnBiMjVnSUdseklIQnliM0JoWjJGMFpXUWdZV3hzSUhSb1pTQjNZWGtnWkc5M2JpQjBieUJvWlhKbFhHNGdJQ0FnZlNrN1hHNGdJQ0FnWUdCZ1hHNGdJRnh1SUNBZ0lFRnpjMmx0YVd4aGRHbHZibHh1SUNBZ0lDMHRMUzB0TFMwdExTMHRMVnh1SUNCY2JpQWdJQ0JUYjIxbGRHbHRaWE1nZEdobElIWmhiSFZsSUhsdmRTQjNZVzUwSUhSdklIQnliM0JoWjJGMFpTQjBieUJoSUdSdmQyNXpkSEpsWVcwZ2NISnZiV2x6WlNCallXNGdiMjVzZVNCaVpWeHVJQ0FnSUhKbGRISnBaWFpsWkNCaGMzbHVZMmh5YjI1dmRYTnNlUzRnVkdocGN5QmpZVzRnWW1VZ1lXTm9hV1YyWldRZ1lua2djbVYwZFhKdWFXNW5JR0VnY0hKdmJXbHpaU0JwYmlCMGFHVmNiaUFnSUNCbWRXeG1hV3hzYldWdWRDQnZjaUJ5WldwbFkzUnBiMjRnYUdGdVpHeGxjaTRnVkdobElHUnZkMjV6ZEhKbFlXMGdjSEp2YldselpTQjNhV3hzSUhSb1pXNGdZbVVnY0dWdVpHbHVaMXh1SUNBZ0lIVnVkR2xzSUhSb1pTQnlaWFIxY201bFpDQndjbTl0YVhObElHbHpJSE5sZEhSc1pXUXVJRlJvYVhNZ2FYTWdZMkZzYkdWa0lDcGhjM05wYldsc1lYUnBiMjRxTGx4dUlDQmNiaUFnSUNCZ1lHQnFjMXh1SUNBZ0lHWnBibVJWYzJWeUtDa3VkR2hsYmlobWRXNWpkR2x2YmlBb2RYTmxjaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1pwYm1SRGIyMXRaVzUwYzBKNVFYVjBhRzl5S0hWelpYSXBPMXh1SUNBZ0lIMHBMblJvWlc0b1puVnVZM1JwYjI0Z0tHTnZiVzFsYm5SektTQjdYRzRnSUNBZ0lDQXZMeUJVYUdVZ2RYTmxjaWR6SUdOdmJXMWxiblJ6SUdGeVpTQnViM2NnWVhaaGFXeGhZbXhsWEc0Z0lDQWdmU2s3WEc0Z0lDQWdZR0JnWEc0Z0lGeHVJQ0FnSUVsbUlIUm9aU0JoYzNOcGJXeHBZWFJsWkNCd2NtOXRhWE5sSUhKbGFtVmpkSE1zSUhSb1pXNGdkR2hsSUdSdmQyNXpkSEpsWVcwZ2NISnZiV2x6WlNCM2FXeHNJR0ZzYzI4Z2NtVnFaV04wTGx4dUlDQmNiaUFnSUNCZ1lHQnFjMXh1SUNBZ0lHWnBibVJWYzJWeUtDa3VkR2hsYmlobWRXNWpkR2x2YmlBb2RYTmxjaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1pwYm1SRGIyMXRaVzUwYzBKNVFYVjBhRzl5S0hWelpYSXBPMXh1SUNBZ0lIMHBMblJvWlc0b1puVnVZM1JwYjI0Z0tHTnZiVzFsYm5SektTQjdYRzRnSUNBZ0lDQXZMeUJKWmlCZ1ptbHVaRU52YlcxbGJuUnpRbmxCZFhSb2IzSmdJR1oxYkdacGJHeHpMQ0IzWlNkc2JDQm9ZWFpsSUhSb1pTQjJZV3gxWlNCb1pYSmxYRzRnSUNBZ2ZTd2dablZ1WTNScGIyNGdLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdMeThnU1dZZ1lHWnBibVJEYjIxdFpXNTBjMEo1UVhWMGFHOXlZQ0J5WldwbFkzUnpMQ0IzWlNkc2JDQm9ZWFpsSUhSb1pTQnlaV0Z6YjI0Z2FHVnlaVnh1SUNBZ0lIMHBPMXh1SUNBZ0lHQmdZRnh1SUNCY2JpQWdJQ0JUYVcxd2JHVWdSWGhoYlhCc1pWeHVJQ0FnSUMwdExTMHRMUzB0TFMwdExTMHRYRzRnSUZ4dUlDQWdJRk41Ym1Ob2NtOXViM1Z6SUVWNFlXMXdiR1ZjYmlBZ1hHNGdJQ0FnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0FnSUd4bGRDQnlaWE4xYkhRN1hHNGdJRnh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0J5WlhOMWJIUWdQU0JtYVc1a1VtVnpkV3gwS0NrN1hHNGdJQ0FnSUNBdkx5QnpkV05qWlhOelhHNGdJQ0FnZlNCallYUmphQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJQzh2SUdaaGFXeDFjbVZjYmlBZ0lDQjlYRzRnSUNBZ1lHQmdYRzRnSUZ4dUlDQWdJRVZ5Y21KaFkyc2dSWGhoYlhCc1pWeHVJQ0JjYmlBZ0lDQmdZR0JxYzF4dUlDQWdJR1pwYm1SU1pYTjFiSFFvWm5WdVkzUnBiMjRvY21WemRXeDBMQ0JsY25JcGUxeHVJQ0FnSUNBZ2FXWWdLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJtWVdsc2RYSmxYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJ6ZFdOalpYTnpYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUNBZ1lHQmdYRzRnSUZ4dUlDQWdJRkJ5YjIxcGMyVWdSWGhoYlhCc1pUdGNiaUFnWEc0Z0lDQWdZR0JnYW1GMllYTmpjbWx3ZEZ4dUlDQWdJR1pwYm1SU1pYTjFiSFFvS1M1MGFHVnVLR1oxYm1OMGFXOXVLSEpsYzNWc2RDbDdYRzRnSUNBZ0lDQXZMeUJ6ZFdOalpYTnpYRzRnSUNBZ2ZTd2dablZ1WTNScGIyNG9jbVZoYzI5dUtYdGNiaUFnSUNBZ0lDOHZJR1poYVd4MWNtVmNiaUFnSUNCOUtUdGNiaUFnSUNCZ1lHQmNiaUFnWEc0Z0lDQWdRV1IyWVc1alpXUWdSWGhoYlhCc1pWeHVJQ0FnSUMwdExTMHRMUzB0TFMwdExTMHRYRzRnSUZ4dUlDQWdJRk41Ym1Ob2NtOXViM1Z6SUVWNFlXMXdiR1ZjYmlBZ1hHNGdJQ0FnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0FnSUd4bGRDQmhkWFJvYjNJc0lHSnZiMnR6TzF4dUlDQmNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdZWFYwYUc5eUlEMGdabWx1WkVGMWRHaHZjaWdwTzF4dUlDQWdJQ0FnWW05dmEzTWdJRDBnWm1sdVpFSnZiMnR6UW5sQmRYUm9iM0lvWVhWMGFHOXlLVHRjYmlBZ0lDQWdJQzh2SUhOMVkyTmxjM05jYmlBZ0lDQjlJR05oZEdOb0tISmxZWE52YmlrZ2UxeHVJQ0FnSUNBZ0x5OGdabUZwYkhWeVpWeHVJQ0FnSUgxY2JpQWdJQ0JnWUdCY2JpQWdYRzRnSUNBZ1JYSnlZbUZqYXlCRmVHRnRjR3hsWEc0Z0lGeHVJQ0FnSUdCZ1lHcHpYRzRnSUZ4dUlDQWdJR1oxYm1OMGFXOXVJR1p2ZFc1a1FtOXZhM01vWW05dmEzTXBJSHRjYmlBZ1hHNGdJQ0FnZlZ4dUlDQmNiaUFnSUNCbWRXNWpkR2x2YmlCbVlXbHNkWEpsS0hKbFlYTnZiaWtnZTF4dUlDQmNiaUFnSUNCOVhHNGdJRnh1SUNBZ0lHWnBibVJCZFhSb2IzSW9ablZ1WTNScGIyNG9ZWFYwYUc5eUxDQmxjbklwZTF4dUlDQWdJQ0FnYVdZZ0tHVnljaWtnZTF4dUlDQWdJQ0FnSUNCbVlXbHNkWEpsS0dWeWNpazdYRzRnSUNBZ0lDQWdJQzh2SUdaaGFXeDFjbVZjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdabWx1WkVKdmIyOXJjMEo1UVhWMGFHOXlLR0YxZEdodmNpd2dablZ1WTNScGIyNG9ZbTl2YTNNc0lHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm1ZV2xzZFhKbEtHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2ZFc1a1FtOXZhM01vWW05dmEzTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0tISmxZWE52YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhhV3gxY21Vb2NtVmhjMjl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0tHVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdabUZwYkhWeVpTaGxjbklwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJSE4xWTJObGMzTmNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCZ1lHQmNiaUFnWEc0Z0lDQWdVSEp2YldselpTQkZlR0Z0Y0d4bE8xeHVJQ0JjYmlBZ0lDQmdZR0JxWVhaaGMyTnlhWEIwWEc0Z0lDQWdabWx1WkVGMWRHaHZjaWdwTGx4dUlDQWdJQ0FnZEdobGJpaG1hVzVrUW05dmEzTkNlVUYxZEdodmNpa3VYRzRnSUNBZ0lDQjBhR1Z1S0daMWJtTjBhVzl1S0dKdmIydHpLWHRjYmlBZ0lDQWdJQ0FnTHk4Z1ptOTFibVFnWW05dmEzTmNiaUFnSUNCOUtTNWpZWFJqYUNobWRXNWpkR2x2YmloeVpXRnpiMjRwZTF4dUlDQWdJQ0FnTHk4Z2MyOXRaWFJvYVc1bklIZGxiblFnZDNKdmJtZGNiaUFnSUNCOUtUdGNiaUFnSUNCZ1lHQmNiaUFnWEc0Z0lDQWdRRzFsZEdodlpDQjBhR1Z1WEc0Z0lDQWdRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdiMjVHZFd4bWFXeHNaV1JjYmlBZ0lDQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQnZibEpsYW1WamRHVmtYRzRnSUNBZ1ZYTmxablZzSUdadmNpQjBiMjlzYVc1bkxseHVJQ0FnSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5WEc0Z0lDb3ZYRzRnSUhSb1pXNDZJSFJvWlc0c1hHNWNiaUFnTHlvcVhHNGdJQ0FnWUdOaGRHTm9ZQ0JwY3lCemFXMXdiSGtnYzNWbllYSWdabTl5SUdCMGFHVnVLSFZ1WkdWbWFXNWxaQ3dnYjI1U1pXcGxZM1JwYjI0cFlDQjNhR2xqYUNCdFlXdGxjeUJwZENCMGFHVWdjMkZ0WlZ4dUlDQWdJR0Z6SUhSb1pTQmpZWFJqYUNCaWJHOWpheUJ2WmlCaElIUnllUzlqWVhSamFDQnpkR0YwWlcxbGJuUXVYRzRnSUZ4dUlDQWdJR0JnWUdwelhHNGdJQ0FnWm5WdVkzUnBiMjRnWm1sdVpFRjFkR2h2Y2lncGUxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkamIzVnNaRzRuZENCbWFXNWtJSFJvWVhRZ1lYVjBhRzl5SnlrN1hHNGdJQ0FnZlZ4dUlDQmNiaUFnSUNBdkx5QnplVzVqYUhKdmJtOTFjMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0JtYVc1a1FYVjBhRzl5S0NrN1hHNGdJQ0FnZlNCallYUmphQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJQzh2SUhOdmJXVjBhR2x1WnlCM1pXNTBJSGR5YjI1blhHNGdJQ0FnZlZ4dUlDQmNiaUFnSUNBdkx5QmhjM2x1WXlCM2FYUm9JSEJ5YjIxcGMyVnpYRzRnSUNBZ1ptbHVaRUYxZEdodmNpZ3BMbU5oZEdOb0tHWjFibU4wYVc5dUtISmxZWE52YmlsN1hHNGdJQ0FnSUNBdkx5QnpiMjFsZEdocGJtY2dkMlZ1ZENCM2NtOXVaMXh1SUNBZ0lIMHBPMXh1SUNBZ0lHQmdZRnh1SUNCY2JpQWdJQ0JBYldWMGFHOWtJR05oZEdOb1hHNGdJQ0FnUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnYjI1U1pXcGxZM1JwYjI1Y2JpQWdJQ0JWYzJWbWRXd2dabTl5SUhSdmIyeHBibWN1WEc0Z0lDQWdRSEpsZEhWeWJpQjdVSEp2YldselpYMWNiaUFnS2k5Y2JpQWdKMk5oZEdOb0p6b2dablZ1WTNScGIyNGdYMk5oZEdOb0tHOXVVbVZxWldOMGFXOXVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZEdobGJpaHVkV3hzTENCdmJsSmxhbVZqZEdsdmJpazdYRzRnSUgxY2JuMDdYRzVjYm1aMWJtTjBhVzl1SUhCdmJIbG1hV3hzS0NrZ2UxeHVJQ0FnSUhaaGNpQnNiMk5oYkNBOUlIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaMnh2WW1Gc0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQnNiMk5oYkNBOUlHZHNiMkpoYkR0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJ6Wld4bUlDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQnNiMk5oYkNBOUlITmxiR1k3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WTJGc0lEMGdSblZ1WTNScGIyNG9KM0psZEhWeWJpQjBhR2x6Snlrb0tUdGNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHdiMng1Wm1sc2JDQm1ZV2xzWldRZ1ltVmpZWFZ6WlNCbmJHOWlZV3dnYjJKcVpXTjBJR2x6SUhWdVlYWmhhV3hoWW14bElHbHVJSFJvYVhNZ1pXNTJhWEp2Ym0xbGJuUW5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCUUlEMGdiRzlqWVd3dVVISnZiV2x6WlR0Y2JseHVJQ0FnSUdsbUlDaFFLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQndjbTl0YVhObFZHOVRkSEpwYm1jZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZiV2x6WlZSdlUzUnlhVzVuSUQwZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLRkF1Y21WemIyeDJaU2dwS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjMmxzWlc1MGJIa2dhV2R1YjNKbFpGeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnliMjFwYzJWVWIxTjBjbWx1WnlBOVBUMGdKMXR2WW1wbFkzUWdVSEp2YldselpWMG5JQ1ltSUNGUUxtTmhjM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHeHZZMkZzTGxCeWIyMXBjMlVnUFNCUWNtOXRhWE5sTzF4dWZWeHVYRzR2THlCVGRISmhibWRsSUdOdmJYQmhkQzR1WEc1UWNtOXRhWE5sTG5CdmJIbG1hV3hzSUQwZ2NHOXNlV1pwYkd3N1hHNVFjbTl0YVhObExsQnliMjFwYzJVZ1BTQlFjbTl0YVhObE8xeHVYRzV5WlhSMWNtNGdVSEp2YldselpUdGNibHh1ZlNrcEtUdGNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdWek5pMXdjbTl0YVhObExtMWhjQ0lzSWk4dklIUm9aU0IzYUdGMGQyY3RabVYwWTJnZ2NHOXNlV1pwYkd3Z2FXNXpkR0ZzYkhNZ2RHaGxJR1psZEdOb0tDa2dablZ1WTNScGIyNWNiaTh2SUc5dUlIUm9aU0JuYkc5aVlXd2diMkpxWldOMElDaDNhVzVrYjNjZ2IzSWdjMlZzWmlsY2JpOHZYRzR2THlCU1pYUjFjbTRnZEdoaGRDQmhjeUIwYUdVZ1pYaHdiM0owSUdadmNpQjFjMlVnYVc0Z1YyVmljR0ZqYXl3Z1FuSnZkM05sY21sbWVTQmxkR011WEc1eVpYRjFhWEpsS0NkM2FHRjBkMmN0Wm1WMFkyZ25LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYzJWc1ppNW1aWFJqYUM1aWFXNWtLSE5sYkdZcE8xeHVJaXdpTHk4Z2MyaHBiU0JtYjNJZ2RYTnBibWNnY0hKdlkyVnpjeUJwYmlCaWNtOTNjMlZ5WEc1MllYSWdjSEp2WTJWemN5QTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMzA3WEc1Y2JpOHZJR05oWTJobFpDQm1jbTl0SUhkb1lYUmxkbVZ5SUdkc2IySmhiQ0JwY3lCd2NtVnpaVzUwSUhOdklIUm9ZWFFnZEdWemRDQnlkVzV1WlhKeklIUm9ZWFFnYzNSMVlpQnBkRnh1THk4Z1pHOXVKM1FnWW5KbFlXc2dkR2hwYm1kekxpQWdRblYwSUhkbElHNWxaV1FnZEc4Z2QzSmhjQ0JwZENCcGJpQmhJSFJ5ZVNCallYUmphQ0JwYmlCallYTmxJR2wwSUdselhHNHZMeUIzY21Gd2NHVmtJR2x1SUhOMGNtbGpkQ0J0YjJSbElHTnZaR1VnZDJocFkyZ2daRzlsYzI0bmRDQmtaV1pwYm1VZ1lXNTVJR2RzYjJKaGJITXVJQ0JKZENkeklHbHVjMmxrWlNCaFhHNHZMeUJtZFc1amRHbHZiaUJpWldOaGRYTmxJSFJ5ZVM5allYUmphR1Z6SUdSbGIzQjBhVzFwZW1VZ2FXNGdZMlZ5ZEdGcGJpQmxibWRwYm1WekxseHVYRzUyWVhJZ1kyRmphR1ZrVTJWMFZHbHRaVzkxZER0Y2JuWmhjaUJqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFE3WEc1Y2JtWjFibU4wYVc5dUlHUmxabUYxYkhSVFpYUlVhVzF2ZFhRb0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkelpYUlVhVzFsYjNWMElHaGhjeUJ1YjNRZ1ltVmxiaUJrWldacGJtVmtKeWs3WEc1OVhHNW1kVzVqZEdsdmJpQmtaV1poZFd4MFEyeGxZWEpVYVcxbGIzVjBJQ2dwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMk5zWldGeVZHbHRaVzkxZENCb1lYTWdibTkwSUdKbFpXNGdaR1ZtYVc1bFpDY3BPMXh1ZlZ4dUtHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlITmxkRlJwYldWdmRYUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFNCelpYUlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVmtVMlYwVkdsdFpXOTFkQ0E5SUdSbFptRjFiSFJUWlhSVWFXMXZkWFE3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BTQmtaV1poZFd4MFUyVjBWR2x0YjNWME8xeHVJQ0FnSUgxY2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR05zWldGeVZHbHRaVzkxZENBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDBnWTJ4bFlYSlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSUQwZ1pHVm1ZWFZzZEVOc1pXRnlWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSUQwZ1pHVm1ZWFZzZEVOc1pXRnlWR2x0Wlc5MWREdGNiaUFnSUNCOVhHNTlJQ2dwS1Z4dVpuVnVZM1JwYjI0Z2NuVnVWR2x0Wlc5MWRDaG1kVzRwSUh0Y2JpQWdJQ0JwWmlBb1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOVBUMGdjMlYwVkdsdFpXOTFkQ2tnZTF4dUlDQWdJQ0FnSUNBdkwyNXZjbTFoYkNCbGJuWnBjbTl0Wlc1MGN5QnBiaUJ6WVc1bElITnBkSFZoZEdsdmJuTmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxkRlJwYldWdmRYUW9ablZ1TENBd0tUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z2FXWWdjMlYwVkdsdFpXOTFkQ0IzWVhOdUozUWdZWFpoYVd4aFlteGxJR0oxZENCM1lYTWdiR0YwZEdWeUlHUmxabWx1WldSY2JpQWdJQ0JwWmlBb0tHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BUMDlJR1JsWm1GMWJIUlRaWFJVYVcxdmRYUWdmSHdnSVdOaFkyaGxaRk5sZEZScGJXVnZkWFFwSUNZbUlITmxkRlJwYldWdmRYUXBJSHRjYmlBZ0lDQWdJQ0FnWTJGamFHVmtVMlYwVkdsdFpXOTFkQ0E5SUhObGRGUnBiV1Z2ZFhRN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpYUlVhVzFsYjNWMEtHWjFiaXdnTUNrN1hHNGdJQ0FnZlZ4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDOHZJSGRvWlc0Z2QyaGxiaUJ6YjIxbFltOWtlU0JvWVhNZ2MyTnlaWGRsWkNCM2FYUm9JSE5sZEZScGJXVnZkWFFnWW5WMElHNXZJRWt1UlM0Z2JXRmtaRzVsYzNOY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRk5sZEZScGJXVnZkWFFvWm5WdUxDQXdLVHRjYmlBZ0lDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1YyaGxiaUIzWlNCaGNtVWdhVzRnU1M1RkxpQmlkWFFnZEdobElITmpjbWx3ZENCb1lYTWdZbVZsYmlCbGRtRnNaV1FnYzI4Z1NTNUZMaUJrYjJWemJpZDBJSFJ5ZFhOMElIUm9aU0JuYkc5aVlXd2diMkpxWldOMElIZG9aVzRnWTJGc2JHVmtJRzV2Y20xaGJHeDVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGamFHVmtVMlYwVkdsdFpXOTFkQzVqWVd4c0tHNTFiR3dzSUdaMWJpd2dNQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdvWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCellXMWxJR0Z6SUdGaWIzWmxJR0oxZENCM2FHVnVJR2wwSjNNZ1lTQjJaWEp6YVc5dUlHOW1JRWt1UlM0Z2RHaGhkQ0J0ZFhOMElHaGhkbVVnZEdobElHZHNiMkpoYkNCdlltcGxZM1FnWm05eUlDZDBhR2x6Snl3Z2FHOXdablZzYkhrZ2IzVnlJR052Ym5SbGVIUWdZMjl5Y21WamRDQnZkR2hsY25kcGMyVWdhWFFnZDJsc2JDQjBhSEp2ZHlCaElHZHNiMkpoYkNCbGNuSnZjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRk5sZEZScGJXVnZkWFF1WTJGc2JDaDBhR2x6TENCbWRXNHNJREFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNWNibjFjYm1aMWJtTjBhVzl1SUhKMWJrTnNaV0Z5VkdsdFpXOTFkQ2h0WVhKclpYSXBJSHRjYmlBZ0lDQnBaaUFvWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSUQwOVBTQmpiR1ZoY2xScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OXViM0p0WVd3Z1pXNTJhWEp2YldWdWRITWdhVzRnYzJGdVpTQnphWFIxWVhScGIyNXpYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiR1ZoY2xScGJXVnZkWFFvYldGeWEyVnlLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdhV1lnWTJ4bFlYSlVhVzFsYjNWMElIZGhjMjRuZENCaGRtRnBiR0ZpYkdVZ1luVjBJSGRoY3lCc1lYUjBaWElnWkdWbWFXNWxaRnh1SUNBZ0lHbG1JQ2dvWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSUQwOVBTQmtaV1poZFd4MFEyeGxZWEpVYVcxbGIzVjBJSHg4SUNGallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRcElDWW1JR05zWldGeVZHbHRaVzkxZENrZ2UxeHVJQ0FnSUNBZ0lDQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUWdQU0JqYkdWaGNsUnBiV1Z2ZFhRN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamJHVmhjbFJwYldWdmRYUW9iV0Z5YTJWeUtUdGNiaUFnSUNCOVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdMeThnZDJobGJpQjNhR1Z1SUhOdmJXVmliMlI1SUdoaGN5QnpZM0psZDJWa0lIZHBkR2dnYzJWMFZHbHRaVzkxZENCaWRYUWdibThnU1M1RkxpQnRZV1JrYm1WemMxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMEtHMWhjbXRsY2lrN1hHNGdJQ0FnZlNCallYUmphQ0FvWlNsN1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJYYUdWdUlIZGxJR0Z5WlNCcGJpQkpMa1V1SUdKMWRDQjBhR1VnYzJOeWFYQjBJR2hoY3lCaVpXVnVJR1YyWVd4bFpDQnpieUJKTGtVdUlHUnZaWE51SjNRZ0lIUnlkWE4wSUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wSUhkb1pXNGdZMkZzYkdWa0lHNXZjbTFoYkd4NVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBMbU5oYkd3b2JuVnNiQ3dnYldGeWEyVnlLVHRjYmlBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCellXMWxJR0Z6SUdGaWIzWmxJR0oxZENCM2FHVnVJR2wwSjNNZ1lTQjJaWEp6YVc5dUlHOW1JRWt1UlM0Z2RHaGhkQ0J0ZFhOMElHaGhkbVVnZEdobElHZHNiMkpoYkNCdlltcGxZM1FnWm05eUlDZDBhR2x6Snl3Z2FHOXdablZzYkhrZ2IzVnlJR052Ym5SbGVIUWdZMjl5Y21WamRDQnZkR2hsY25kcGMyVWdhWFFnZDJsc2JDQjBhSEp2ZHlCaElHZHNiMkpoYkNCbGNuSnZjaTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk52YldVZ2RtVnljMmx2Ym5NZ2IyWWdTUzVGTGlCb1lYWmxJR1JwWm1abGNtVnVkQ0J5ZFd4bGN5Qm1iM0lnWTJ4bFlYSlVhVzFsYjNWMElIWnpJSE5sZEZScGJXVnZkWFJjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRdVkyRnNiQ2gwYUdsekxDQnRZWEpyWlhJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzVjYmx4dWZWeHVkbUZ5SUhGMVpYVmxJRDBnVzEwN1hHNTJZWElnWkhKaGFXNXBibWNnUFNCbVlXeHpaVHRjYm5aaGNpQmpkWEp5Wlc1MFVYVmxkV1U3WEc1MllYSWdjWFZsZFdWSmJtUmxlQ0E5SUMweE8xeHVYRzVtZFc1amRHbHZiaUJqYkdWaGJsVndUbVY0ZEZScFkyc29LU0I3WEc0Z0lDQWdhV1lnS0NGa2NtRnBibWx1WnlCOGZDQWhZM1Z5Y21WdWRGRjFaWFZsS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdaSEpoYVc1cGJtY2dQU0JtWVd4elpUdGNiaUFnSUNCcFppQW9ZM1Z5Y21WdWRGRjFaWFZsTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNCeGRXVjFaU0E5SUdOMWNuSmxiblJSZFdWMVpTNWpiMjVqWVhRb2NYVmxkV1VwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEYxWlhWbFNXNWtaWGdnUFNBdE1UdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIRjFaWFZsTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNCa2NtRnBibEYxWlhWbEtDazdYRzRnSUNBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCa2NtRnBibEYxWlhWbEtDa2dlMXh1SUNBZ0lHbG1JQ2hrY21GcGJtbHVaeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUIwYVcxbGIzVjBJRDBnY25WdVZHbHRaVzkxZENoamJHVmhibFZ3VG1WNGRGUnBZMnNwTzF4dUlDQWdJR1J5WVdsdWFXNW5JRDBnZEhKMVpUdGNibHh1SUNBZ0lIWmhjaUJzWlc0Z1BTQnhkV1YxWlM1c1pXNW5kR2c3WEc0Z0lDQWdkMmhwYkdVb2JHVnVLU0I3WEc0Z0lDQWdJQ0FnSUdOMWNuSmxiblJSZFdWMVpTQTlJSEYxWlhWbE8xeHVJQ0FnSUNBZ0lDQnhkV1YxWlNBOUlGdGRPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9LeXR4ZFdWMVpVbHVaR1Y0SUR3Z2JHVnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTNWeWNtVnVkRkYxWlhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRGRjFaWFZsVzNGMVpYVmxTVzVrWlhoZExuSjFiaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhGMVpYVmxTVzVrWlhnZ1BTQXRNVHRjYmlBZ0lDQWdJQ0FnYkdWdUlEMGdjWFZsZFdVdWJHVnVaM1JvTzF4dUlDQWdJSDFjYmlBZ0lDQmpkWEp5Wlc1MFVYVmxkV1VnUFNCdWRXeHNPMXh1SUNBZ0lHUnlZV2x1YVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnY25WdVEyeGxZWEpVYVcxbGIzVjBLSFJwYldWdmRYUXBPMXh1ZlZ4dVhHNXdjbTlqWlhOekxtNWxlSFJVYVdOcklEMGdablZ1WTNScGIyNGdLR1oxYmlrZ2UxeHVJQ0FnSUhaaGNpQmhjbWR6SUQwZ2JtVjNJRUZ5Y21GNUtHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ0xTQXhLVHRjYmlBZ0lDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURFcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURFN0lHa2dQQ0JoY21kMWJXVnVkSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGeVozTmJhU0F0SURGZElEMGdZWEpuZFcxbGJuUnpXMmxkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEYxWlhWbExuQjFjMmdvYm1WM0lFbDBaVzBvWm5WdUxDQmhjbWR6S1NrN1hHNGdJQ0FnYVdZZ0tIRjFaWFZsTG14bGJtZDBhQ0E5UFQwZ01TQW1KaUFoWkhKaGFXNXBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2NuVnVWR2x0Wlc5MWRDaGtjbUZwYmxGMVpYVmxLVHRjYmlBZ0lDQjlYRzU5TzF4dVhHNHZMeUIyT0NCc2FXdGxjeUJ3Y21Wa2FXTjBhV0pzWlNCdlltcGxZM1J6WEc1bWRXNWpkR2x2YmlCSmRHVnRLR1oxYml3Z1lYSnlZWGtwSUh0Y2JpQWdJQ0IwYUdsekxtWjFiaUE5SUdaMWJqdGNiaUFnSUNCMGFHbHpMbUZ5Y21GNUlEMGdZWEp5WVhrN1hHNTlYRzVKZEdWdExuQnliM1J2ZEhsd1pTNXlkVzRnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RHaHBjeTVtZFc0dVlYQndiSGtvYm5Wc2JDd2dkR2hwY3k1aGNuSmhlU2s3WEc1OU8xeHVjSEp2WTJWemN5NTBhWFJzWlNBOUlDZGljbTkzYzJWeUp6dGNibkJ5YjJObGMzTXVZbkp2ZDNObGNpQTlJSFJ5ZFdVN1hHNXdjbTlqWlhOekxtVnVkaUE5SUh0OU8xeHVjSEp2WTJWemN5NWhjbWQySUQwZ1cxMDdYRzV3Y205alpYTnpMblpsY25OcGIyNGdQU0FuSnpzZ0x5OGdaVzF3ZEhrZ2MzUnlhVzVuSUhSdklHRjJiMmxrSUhKbFoyVjRjQ0JwYzNOMVpYTmNibkJ5YjJObGMzTXVkbVZ5YzJsdmJuTWdQU0I3ZlR0Y2JseHVablZ1WTNScGIyNGdibTl2Y0NncElIdDlYRzVjYm5CeWIyTmxjM011YjI0Z1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1aFpHUk1hWE4wWlc1bGNpQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxtOXVZMlVnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV2Wm1ZZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1eVpXMXZkbVZNYVhOMFpXNWxjaUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbkpsYlc5MlpVRnNiRXhwYzNSbGJtVnljeUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbVZ0YVhRZ1BTQnViMjl3TzF4dVhHNXdjbTlqWlhOekxtSnBibVJwYm1jZ1BTQm1kVzVqZEdsdmJpQW9ibUZ0WlNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduY0hKdlkyVnpjeTVpYVc1a2FXNW5JR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUW5LVHRjYm4wN1hHNWNibkJ5YjJObGMzTXVZM2RrSUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdKeThuSUgwN1hHNXdjbTlqWlhOekxtTm9aR2x5SUQwZ1puVnVZM1JwYjI0Z0tHUnBjaWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jSEp2WTJWemN5NWphR1JwY2lCcGN5QnViM1FnYzNWd2NHOXlkR1ZrSnlrN1hHNTlPMXh1Y0hKdlkyVnpjeTUxYldGemF5QTlJR1oxYm1OMGFXOXVLQ2tnZXlCeVpYUjFjbTRnTURzZ2ZUdGNiaUlzSWlobWRXNWpkR2x2YmloelpXeG1LU0I3WEc0Z0lDZDFjMlVnYzNSeWFXTjBKenRjYmx4dUlDQnBaaUFvYzJWc1ppNW1aWFJqYUNrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNWNiaUFnZG1GeUlITjFjSEJ2Y25RZ1BTQjdYRzRnSUNBZ2MyVmhjbU5vVUdGeVlXMXpPaUFuVlZKTVUyVmhjbU5vVUdGeVlXMXpKeUJwYmlCelpXeG1MRnh1SUNBZ0lHbDBaWEpoWW14bE9pQW5VM2x0WW05c0p5QnBiaUJ6Wld4bUlDWW1JQ2RwZEdWeVlYUnZjaWNnYVc0Z1UzbHRZbTlzTEZ4dUlDQWdJR0pzYjJJNklDZEdhV3hsVW1WaFpHVnlKeUJwYmlCelpXeG1JQ1ltSUNkQ2JHOWlKeUJwYmlCelpXeG1JQ1ltSUNobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUc1bGR5QkNiRzlpS0NsY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVmNiaUFnSUNBZ0lIMGdZMkYwWTJnb1pTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1NncExGeHVJQ0FnSUdadmNtMUVZWFJoT2lBblJtOXliVVJoZEdFbklHbHVJSE5sYkdZc1hHNGdJQ0FnWVhKeVlYbENkV1ptWlhJNklDZEJjbkpoZVVKMVptWmxjaWNnYVc0Z2MyVnNabHh1SUNCOVhHNWNiaUFnYVdZZ0tITjFjSEJ2Y25RdVlYSnlZWGxDZFdabVpYSXBJSHRjYmlBZ0lDQjJZWElnZG1sbGQwTnNZWE56WlhNZ1BTQmJYRzRnSUNBZ0lDQW5XMjlpYW1WamRDQkpiblE0UVhKeVlYbGRKeXhjYmlBZ0lDQWdJQ2RiYjJKcVpXTjBJRlZwYm5RNFFYSnlZWGxkSnl4Y2JpQWdJQ0FnSUNkYmIySnFaV04wSUZWcGJuUTRRMnhoYlhCbFpFRnljbUY1WFNjc1hHNGdJQ0FnSUNBblcyOWlhbVZqZENCSmJuUXhOa0Z5Y21GNVhTY3NYRzRnSUNBZ0lDQW5XMjlpYW1WamRDQlZhVzUwTVRaQmNuSmhlVjBuTEZ4dUlDQWdJQ0FnSjF0dlltcGxZM1FnU1c1ME16SkJjbkpoZVYwbkxGeHVJQ0FnSUNBZ0oxdHZZbXBsWTNRZ1ZXbHVkRE15UVhKeVlYbGRKeXhjYmlBZ0lDQWdJQ2RiYjJKcVpXTjBJRVpzYjJGME16SkJjbkpoZVYwbkxGeHVJQ0FnSUNBZ0oxdHZZbXBsWTNRZ1JteHZZWFEyTkVGeWNtRjVYU2RjYmlBZ0lDQmRYRzVjYmlBZ0lDQjJZWElnYVhORVlYUmhWbWxsZHlBOUlHWjFibU4wYVc5dUtHOWlhaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzlpYWlBbUppQkVZWFJoVm1sbGR5NXdjbTkwYjNSNWNHVXVhWE5RY205MGIzUjVjR1ZQWmlodlltb3BYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJR2x6UVhKeVlYbENkV1ptWlhKV2FXVjNJRDBnUVhKeVlYbENkV1ptWlhJdWFYTldhV1YzSUh4OElHWjFibU4wYVc5dUtHOWlhaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzlpYWlBbUppQjJhV1YzUTJ4aGMzTmxjeTVwYm1SbGVFOW1LRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY3VZMkZzYkNodlltb3BLU0ErSUMweFhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z2JtOXliV0ZzYVhwbFRtRnRaU2h1WVcxbEtTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnVZVzFsSUNFOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdibUZ0WlNBOUlGTjBjbWx1WnlodVlXMWxLVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9MMXRlWVMxNk1DMDVYRnd0SXlRbEppY3FLeTVjWEY1ZllIeCtYUzlwTG5SbGMzUW9ibUZ0WlNrcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMGx1ZG1Gc2FXUWdZMmhoY21GamRHVnlJR2x1SUdobFlXUmxjaUJtYVdWc1pDQnVZVzFsSnlsY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdibTl5YldGc2FYcGxWbUZzZFdVb2RtRnNkV1VwSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJQ0U5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ2RtRnNkV1VnUFNCVGRISnBibWNvZG1Gc2RXVXBYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIyWVd4MVpWeHVJQ0I5WEc1Y2JpQWdMeThnUW5WcGJHUWdZU0JrWlhOMGNuVmpkR2wyWlNCcGRHVnlZWFJ2Y2lCbWIzSWdkR2hsSUhaaGJIVmxJR3hwYzNSY2JpQWdablZ1WTNScGIyNGdhWFJsY21GMGIzSkdiM0lvYVhSbGJYTXBJSHRjYmlBZ0lDQjJZWElnYVhSbGNtRjBiM0lnUFNCN1hHNGdJQ0FnSUNCdVpYaDBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpoYkhWbElEMGdhWFJsYlhNdWMyaHBablFvS1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTJSdmJtVTZJSFpoYkhWbElEMDlQU0IxYm1SbFptbHVaV1FzSUhaaGJIVmxPaUIyWVd4MVpYMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jM1Z3Y0c5eWRDNXBkR1Z5WVdKc1pTa2dlMXh1SUNBZ0lDQWdhWFJsY21GMGIzSmJVM2x0WW05c0xtbDBaWEpoZEc5eVhTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYVhSbGNtRjBiM0pjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2FYUmxjbUYwYjNKY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlFaGxZV1JsY25Nb2FHVmhaR1Z5Y3lrZ2UxeHVJQ0FnSUhSb2FYTXViV0Z3SUQwZ2UzMWNibHh1SUNBZ0lHbG1JQ2hvWldGa1pYSnpJR2x1YzNSaGJtTmxiMllnU0dWaFpHVnljeWtnZTF4dUlDQWdJQ0FnYUdWaFpHVnljeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLSFpoYkhWbExDQnVZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVhCd1pXNWtLRzVoYldVc0lIWmhiSFZsS1Z4dUlDQWdJQ0FnZlN3Z2RHaHBjeWxjYmx4dUlDQWdJSDBnWld4elpTQnBaaUFvYUdWaFpHVnljeWtnZTF4dUlDQWdJQ0FnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1vYUdWaFpHVnljeWt1Wm05eVJXRmphQ2htZFc1amRHbHZiaWh1WVcxbEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVlYQndaVzVrS0c1aGJXVXNJR2hsWVdSbGNuTmJibUZ0WlYwcFhHNGdJQ0FnSUNCOUxDQjBhR2x6S1Z4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUVobFlXUmxjbk11Y0hKdmRHOTBlWEJsTG1Gd2NHVnVaQ0E5SUdaMWJtTjBhVzl1S0c1aGJXVXNJSFpoYkhWbEtTQjdYRzRnSUNBZ2JtRnRaU0E5SUc1dmNtMWhiR2w2WlU1aGJXVW9ibUZ0WlNsY2JpQWdJQ0IyWVd4MVpTQTlJRzV2Y20xaGJHbDZaVlpoYkhWbEtIWmhiSFZsS1Z4dUlDQWdJSFpoY2lCdmJHUldZV3gxWlNBOUlIUm9hWE11YldGd1cyNWhiV1ZkWEc0Z0lDQWdkR2hwY3k1dFlYQmJibUZ0WlYwZ1BTQnZiR1JXWVd4MVpTQS9JRzlzWkZaaGJIVmxLeWNzSnl0MllXeDFaU0E2SUhaaGJIVmxYRzRnSUgxY2JseHVJQ0JJWldGa1pYSnpMbkJ5YjNSdmRIbHdaVnNuWkdWc1pYUmxKMTBnUFNCbWRXNWpkR2x2YmlodVlXMWxLU0I3WEc0Z0lDQWdaR1ZzWlhSbElIUm9hWE11YldGd1cyNXZjbTFoYkdsNlpVNWhiV1VvYm1GdFpTbGRYRzRnSUgxY2JseHVJQ0JJWldGa1pYSnpMbkJ5YjNSdmRIbHdaUzVuWlhRZ1BTQm1kVzVqZEdsdmJpaHVZVzFsS1NCN1hHNGdJQ0FnYm1GdFpTQTlJRzV2Y20xaGJHbDZaVTVoYldVb2JtRnRaU2xjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVvWVhNb2JtRnRaU2tnUHlCMGFHbHpMbTFoY0Z0dVlXMWxYU0E2SUc1MWJHeGNiaUFnZlZ4dVhHNGdJRWhsWVdSbGNuTXVjSEp2ZEc5MGVYQmxMbWhoY3lBOUlHWjFibU4wYVc5dUtHNWhiV1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dFlYQXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2JtOXliV0ZzYVhwbFRtRnRaU2h1WVcxbEtTbGNiaUFnZlZ4dVhHNGdJRWhsWVdSbGNuTXVjSEp2ZEc5MGVYQmxMbk5sZENBOUlHWjFibU4wYVc5dUtHNWhiV1VzSUhaaGJIVmxLU0I3WEc0Z0lDQWdkR2hwY3k1dFlYQmJibTl5YldGc2FYcGxUbUZ0WlNodVlXMWxLVjBnUFNCdWIzSnRZV3hwZW1WV1lXeDFaU2gyWVd4MVpTbGNiaUFnZlZ4dVhHNGdJRWhsWVdSbGNuTXVjSEp2ZEc5MGVYQmxMbVp2Y2tWaFkyZ2dQU0JtZFc1amRHbHZiaWhqWVd4c1ltRmpheXdnZEdocGMwRnlaeWtnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJRzVoYldVZ2FXNGdkR2hwY3k1dFlYQXBJSHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbTFoY0M1b1lYTlBkMjVRY205d1pYSjBlU2h1WVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0JqWVd4c1ltRmpheTVqWVd4c0tIUm9hWE5CY21jc0lIUm9hWE11YldGd1cyNWhiV1ZkTENCdVlXMWxMQ0IwYUdsektWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lFaGxZV1JsY25NdWNISnZkRzkwZVhCbExtdGxlWE1nUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCMllYSWdhWFJsYlhNZ1BTQmJYVnh1SUNBZ0lIUm9hWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaWgyWVd4MVpTd2dibUZ0WlNrZ2V5QnBkR1Z0Y3k1d2RYTm9LRzVoYldVcElIMHBYRzRnSUNBZ2NtVjBkWEp1SUdsMFpYSmhkRzl5Um05eUtHbDBaVzF6S1Z4dUlDQjlYRzVjYmlBZ1NHVmhaR1Z5Y3k1d2NtOTBiM1I1Y0dVdWRtRnNkV1Z6SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2RtRnlJR2wwWlcxeklEMGdXMTFjYmlBZ0lDQjBhR2x6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHNnYVhSbGJYTXVjSFZ6YUNoMllXeDFaU2tnZlNsY2JpQWdJQ0J5WlhSMWNtNGdhWFJsY21GMGIzSkdiM0lvYVhSbGJYTXBYRzRnSUgxY2JseHVJQ0JJWldGa1pYSnpMbkJ5YjNSdmRIbHdaUzVsYm5SeWFXVnpJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnZG1GeUlHbDBaVzF6SUQwZ1cxMWNiaUFnSUNCMGFHbHpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9kbUZzZFdVc0lHNWhiV1VwSUhzZ2FYUmxiWE11Y0hWemFDaGJibUZ0WlN3Z2RtRnNkV1ZkS1NCOUtWeHVJQ0FnSUhKbGRIVnliaUJwZEdWeVlYUnZja1p2Y2locGRHVnRjeWxjYmlBZ2ZWeHVYRzRnSUdsbUlDaHpkWEJ3YjNKMExtbDBaWEpoWW14bEtTQjdYRzRnSUNBZ1NHVmhaR1Z5Y3k1d2NtOTBiM1I1Y0dWYlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNBOUlFaGxZV1JsY25NdWNISnZkRzkwZVhCbExtVnVkSEpwWlhOY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHTnZibk4xYldWa0tHSnZaSGtwSUh0Y2JpQWdJQ0JwWmlBb1ltOWtlUzVpYjJSNVZYTmxaQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZxWldOMEtHNWxkeUJVZVhCbFJYSnliM0lvSjBGc2NtVmhaSGtnY21WaFpDY3BLVnh1SUNBZ0lIMWNiaUFnSUNCaWIyUjVMbUp2WkhsVmMyVmtJRDBnZEhKMVpWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdabWxzWlZKbFlXUmxjbEpsWVdSNUtISmxZV1JsY2lrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JpQWdJQ0FnSUhKbFlXUmxjaTV2Ym14dllXUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpXRmtaWEl1Y21WemRXeDBLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVZoWkdWeUxtOXVaWEp5YjNJZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLSEpsWVdSbGNpNWxjbkp2Y2lsY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1Z4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z2NtVmhaRUpzYjJKQmMwRnljbUY1UW5WbVptVnlLR0pzYjJJcElIdGNiaUFnSUNCMllYSWdjbVZoWkdWeUlEMGdibVYzSUVacGJHVlNaV0ZrWlhJb0tWeHVJQ0FnSUhaaGNpQndjbTl0YVhObElEMGdabWxzWlZKbFlXUmxjbEpsWVdSNUtISmxZV1JsY2lsY2JpQWdJQ0J5WldGa1pYSXVjbVZoWkVGelFYSnlZWGxDZFdabVpYSW9ZbXh2WWlsY2JpQWdJQ0J5WlhSMWNtNGdjSEp2YldselpWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdjbVZoWkVKc2IySkJjMVJsZUhRb1lteHZZaWtnZTF4dUlDQWdJSFpoY2lCeVpXRmtaWElnUFNCdVpYY2dSbWxzWlZKbFlXUmxjaWdwWEc0Z0lDQWdkbUZ5SUhCeWIyMXBjMlVnUFNCbWFXeGxVbVZoWkdWeVVtVmhaSGtvY21WaFpHVnlLVnh1SUNBZ0lISmxZV1JsY2k1eVpXRmtRWE5VWlhoMEtHSnNiMklwWEc0Z0lDQWdjbVYwZFhKdUlIQnliMjFwYzJWY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlISmxZV1JCY25KaGVVSjFabVpsY2tGelZHVjRkQ2hpZFdZcElIdGNiaUFnSUNCMllYSWdkbWxsZHlBOUlHNWxkeUJWYVc1ME9FRnljbUY1S0dKMVppbGNiaUFnSUNCMllYSWdZMmhoY25NZ1BTQnVaWGNnUVhKeVlYa29kbWxsZHk1c1pXNW5kR2dwWEc1Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhacFpYY3ViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUdOb1lYSnpXMmxkSUQwZ1UzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTaDJhV1YzVzJsZEtWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdZMmhoY25NdWFtOXBiaWduSnlsY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHSjFabVpsY2tOc2IyNWxLR0oxWmlrZ2UxeHVJQ0FnSUdsbUlDaGlkV1l1YzJ4cFkyVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmlkV1l1YzJ4cFkyVW9NQ2xjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RtRnlJSFpwWlhjZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNoaWRXWXVZbmwwWlV4bGJtZDBhQ2xjYmlBZ0lDQWdJSFpwWlhjdWMyVjBLRzVsZHlCVmFXNTBPRUZ5Y21GNUtHSjFaaWtwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdkbWxsZHk1aWRXWm1aWEpjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUJDYjJSNUtDa2dlMXh1SUNBZ0lIUm9hWE11WW05a2VWVnpaV1FnUFNCbVlXeHpaVnh1WEc0Z0lDQWdkR2hwY3k1ZmFXNXBkRUp2WkhrZ1BTQm1kVzVqZEdsdmJpaGliMlI1S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDlpYjJSNVNXNXBkQ0E5SUdKdlpIbGNiaUFnSUNBZ0lHbG1JQ2doWW05a2VTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWliMlI1VkdWNGRDQTlJQ2NuWEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJpYjJSNUlEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlpYjJSNVZHVjRkQ0E5SUdKdlpIbGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jM1Z3Y0c5eWRDNWliRzlpSUNZbUlFSnNiMkl1Y0hKdmRHOTBlWEJsTG1selVISnZkRzkwZVhCbFQyWW9ZbTlrZVNrcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlltOWtlVUpzYjJJZ1BTQmliMlI1WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hOMWNIQnZjblF1Wm05eWJVUmhkR0VnSmlZZ1JtOXliVVJoZEdFdWNISnZkRzkwZVhCbExtbHpVSEp2ZEc5MGVYQmxUMllvWW05a2VTa3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZbTlrZVVadmNtMUVZWFJoSUQwZ1ltOWtlVnh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6ZFhCd2IzSjBMbk5sWVhKamFGQmhjbUZ0Y3lBbUppQlZVa3hUWldGeVkyaFFZWEpoYlhNdWNISnZkRzkwZVhCbExtbHpVSEp2ZEc5MGVYQmxUMllvWW05a2VTa3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZbTlrZVZSbGVIUWdQU0JpYjJSNUxuUnZVM1J5YVc1bktDbGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jM1Z3Y0c5eWRDNWhjbkpoZVVKMVptWmxjaUFtSmlCemRYQndiM0owTG1Kc2IySWdKaVlnYVhORVlYUmhWbWxsZHloaWIyUjVLU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlpYjJSNVFYSnlZWGxDZFdabVpYSWdQU0JpZFdabVpYSkRiRzl1WlNoaWIyUjVMbUoxWm1abGNpbGNiaUFnSUNBZ0lDQWdMeThnU1VVZ01UQXRNVEVnWTJGdUozUWdhR0Z1Wkd4bElHRWdSR0YwWVZacFpYY2dZbTlrZVM1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWW05a2VVbHVhWFFnUFNCdVpYY2dRbXh2WWloYmRHaHBjeTVmWW05a2VVRnljbUY1UW5WbVptVnlYU2xjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvYzNWd2NHOXlkQzVoY25KaGVVSjFabVpsY2lBbUppQW9RWEp5WVhsQ2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG1selVISnZkRzkwZVhCbFQyWW9ZbTlrZVNrZ2ZId2dhWE5CY25KaGVVSjFabVpsY2xacFpYY29ZbTlrZVNrcEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgySnZaSGxCY25KaGVVSjFabVpsY2lBOUlHSjFabVpsY2tOc2IyNWxLR0p2WkhrcFhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNWdWMzVndjRzl5ZEdWa0lFSnZaSGxKYm1sMElIUjVjR1VuS1Z4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9JWFJvYVhNdWFHVmhaR1Z5Y3k1blpYUW9KMk52Ym5SbGJuUXRkSGx3WlNjcEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWW05a2VTQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1obFlXUmxjbk11YzJWMEtDZGpiMjUwWlc1MExYUjVjR1VuTENBbmRHVjRkQzl3YkdGcGJqdGphR0Z5YzJWMFBWVlVSaTA0SnlsY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TGw5aWIyUjVRbXh2WWlBbUppQjBhR2x6TGw5aWIyUjVRbXh2WWk1MGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVvWldGa1pYSnpMbk5sZENnblkyOXVkR1Z1ZEMxMGVYQmxKeXdnZEdocGN5NWZZbTlrZVVKc2IySXVkSGx3WlNsY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpkWEJ3YjNKMExuTmxZWEpqYUZCaGNtRnRjeUFtSmlCVlVreFRaV0Z5WTJoUVlYSmhiWE11Y0hKdmRHOTBlWEJsTG1selVISnZkRzkwZVhCbFQyWW9ZbTlrZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtaGxZV1JsY25NdWMyVjBLQ2RqYjI1MFpXNTBMWFI1Y0dVbkxDQW5ZWEJ3YkdsallYUnBiMjR2ZUMxM2QzY3RabTl5YlMxMWNteGxibU52WkdWa08yTm9ZWEp6WlhROVZWUkdMVGduS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tITjFjSEJ2Y25RdVlteHZZaWtnZTF4dUlDQWdJQ0FnZEdocGN5NWliRzlpSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpXcGxZM1JsWkNBOUlHTnZibk4xYldWa0tIUm9hWE1wWEc0Z0lDQWdJQ0FnSUdsbUlDaHlaV3BsWTNSbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WldwbFkzUmxaRnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgySnZaSGxDYkc5aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTaDBhR2x6TGw5aWIyUjVRbXh2WWlsY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TGw5aWIyUjVRWEp5WVhsQ2RXWm1aWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0c1bGR5QkNiRzlpS0Z0MGFHbHpMbDlpYjJSNVFYSnlZWGxDZFdabVpYSmRLU2xjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMGFHbHpMbDlpYjJSNVJtOXliVVJoZEdFcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMk52ZFd4a0lHNXZkQ0J5WldGa0lFWnZjbTFFWVhSaElHSnZaSGtnWVhNZ1lteHZZaWNwWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2h1WlhjZ1FteHZZaWhiZEdocGN5NWZZbTlrZVZSbGVIUmRLU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMGFHbHpMbUZ5Y21GNVFuVm1abVZ5SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlpYjJSNVFYSnlZWGxDZFdabVpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTI5dWMzVnRaV1FvZEdocGN5a2dmSHdnVUhKdmJXbHpaUzV5WlhOdmJIWmxLSFJvYVhNdVgySnZaSGxCY25KaGVVSjFabVpsY2lsY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVpYkc5aUtDa3VkR2hsYmloeVpXRmtRbXh2WWtGelFYSnlZWGxDZFdabVpYSXBYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG5SbGVIUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhaaGNpQnlaV3BsWTNSbFpDQTlJR052Ym5OMWJXVmtLSFJvYVhNcFhHNGdJQ0FnSUNCcFppQW9jbVZxWldOMFpXUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYW1WamRHVmtYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbDlpYjJSNVFteHZZaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WaFpFSnNiMkpCYzFSbGVIUW9kR2hwY3k1ZlltOWtlVUpzYjJJcFhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11WDJKdlpIbEJjbkpoZVVKMVptWmxjaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLSEpsWVdSQmNuSmhlVUoxWm1abGNrRnpWR1Y0ZENoMGFHbHpMbDlpYjJSNVFYSnlZWGxDZFdabVpYSXBLVnh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwYUdsekxsOWliMlI1Um05eWJVUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkamIzVnNaQ0J1YjNRZ2NtVmhaQ0JHYjNKdFJHRjBZU0JpYjJSNUlHRnpJSFJsZUhRbktWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2gwYUdsekxsOWliMlI1VkdWNGRDbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jM1Z3Y0c5eWRDNW1iM0p0UkdGMFlTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1bWIzSnRSR0YwWVNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MFpYaDBLQ2t1ZEdobGJpaGtaV052WkdVcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NXFjMjl1SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUwWlhoMEtDa3VkR2hsYmloS1UwOU9MbkJoY25ObEtWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJSDFjYmx4dUlDQXZMeUJJVkZSUUlHMWxkR2h2WkhNZ2QyaHZjMlVnWTJGd2FYUmhiR2w2WVhScGIyNGdjMmh2ZFd4a0lHSmxJRzV2Y20xaGJHbDZaV1JjYmlBZ2RtRnlJRzFsZEdodlpITWdQU0JiSjBSRlRFVlVSU2NzSUNkSFJWUW5MQ0FuU0VWQlJDY3NJQ2RQVUZSSlQwNVRKeXdnSjFCUFUxUW5MQ0FuVUZWVUoxMWNibHh1SUNCbWRXNWpkR2x2YmlCdWIzSnRZV3hwZW1WTlpYUm9iMlFvYldWMGFHOWtLU0I3WEc0Z0lDQWdkbUZ5SUhWd1kyRnpaV1FnUFNCdFpYUm9iMlF1ZEc5VmNIQmxja05oYzJVb0tWeHVJQ0FnSUhKbGRIVnliaUFvYldWMGFHOWtjeTVwYm1SbGVFOW1LSFZ3WTJGelpXUXBJRDRnTFRFcElEOGdkWEJqWVhObFpDQTZJRzFsZEdodlpGeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdVbVZ4ZFdWemRDaHBibkIxZEN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUc5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlYRzRnSUNBZ2RtRnlJR0p2WkhrZ1BTQnZjSFJwYjI1ekxtSnZaSGxjYmx4dUlDQWdJR2xtSUNocGJuQjFkQ0JwYm5OMFlXNWpaVzltSUZKbGNYVmxjM1FwSUh0Y2JpQWdJQ0FnSUdsbUlDaHBibkIxZEM1aWIyUjVWWE5sWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RCYkhKbFlXUjVJSEpsWVdRbktWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RHaHBjeTUxY213Z1BTQnBibkIxZEM1MWNteGNiaUFnSUNBZ0lIUm9hWE11WTNKbFpHVnVkR2xoYkhNZ1BTQnBibkIxZEM1amNtVmtaVzUwYVdGc2MxeHVJQ0FnSUNBZ2FXWWdLQ0Z2Y0hScGIyNXpMbWhsWVdSbGNuTXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW9aV0ZrWlhKeklEMGdibVYzSUVobFlXUmxjbk1vYVc1d2RYUXVhR1ZoWkdWeWN5bGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIUm9hWE11YldWMGFHOWtJRDBnYVc1d2RYUXViV1YwYUc5a1hHNGdJQ0FnSUNCMGFHbHpMbTF2WkdVZ1BTQnBibkIxZEM1dGIyUmxYRzRnSUNBZ0lDQnBaaUFvSVdKdlpIa2dKaVlnYVc1d2RYUXVYMkp2WkhsSmJtbDBJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnWW05a2VTQTlJR2x1Y0hWMExsOWliMlI1U1c1cGRGeHVJQ0FnSUNBZ0lDQnBibkIxZEM1aWIyUjVWWE5sWkNBOUlIUnlkV1ZjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUxY213Z1BTQlRkSEpwYm1jb2FXNXdkWFFwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1amNtVmtaVzUwYVdGc2N5QTlJRzl3ZEdsdmJuTXVZM0psWkdWdWRHbGhiSE1nZkh3Z2RHaHBjeTVqY21Wa1pXNTBhV0ZzY3lCOGZDQW5iMjFwZENkY2JpQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1b1pXRmtaWEp6SUh4OElDRjBhR2x6TG1obFlXUmxjbk1wSUh0Y2JpQWdJQ0FnSUhSb2FYTXVhR1ZoWkdWeWN5QTlJRzVsZHlCSVpXRmtaWEp6S0c5d2RHbHZibk11YUdWaFpHVnljeWxjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTV0WlhSb2IyUWdQU0J1YjNKdFlXeHBlbVZOWlhSb2IyUW9iM0IwYVc5dWN5NXRaWFJvYjJRZ2ZId2dkR2hwY3k1dFpYUm9iMlFnZkh3Z0owZEZWQ2NwWEc0Z0lDQWdkR2hwY3k1dGIyUmxJRDBnYjNCMGFXOXVjeTV0YjJSbElIeDhJSFJvYVhNdWJXOWtaU0I4ZkNCdWRXeHNYRzRnSUNBZ2RHaHBjeTV5WldabGNuSmxjaUE5SUc1MWJHeGNibHh1SUNBZ0lHbG1JQ2dvZEdocGN5NXRaWFJvYjJRZ1BUMDlJQ2RIUlZRbklIeDhJSFJvYVhNdWJXVjBhRzlrSUQwOVBTQW5TRVZCUkNjcElDWW1JR0p2WkhrcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMEp2WkhrZ2JtOTBJR0ZzYkc5M1pXUWdabTl5SUVkRlZDQnZjaUJJUlVGRUlISmxjWFZsYzNSekp5bGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NWZhVzVwZEVKdlpIa29ZbTlrZVNsY2JpQWdmVnh1WEc0Z0lGSmxjWFZsYzNRdWNISnZkRzkwZVhCbExtTnNiMjVsSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlNaWEYxWlhOMEtIUm9hWE1zSUhzZ1ltOWtlVG9nZEdocGN5NWZZbTlrZVVsdWFYUWdmU2xjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdSbFkyOWtaU2hpYjJSNUtTQjdYRzRnSUNBZ2RtRnlJR1p2Y20wZ1BTQnVaWGNnUm05eWJVUmhkR0VvS1Z4dUlDQWdJR0p2WkhrdWRISnBiU2dwTG5Od2JHbDBLQ2NtSnlrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloaWVYUmxjeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHSjVkR1Z6S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6Y0d4cGRDQTlJR0o1ZEdWekxuTndiR2wwS0NjOUp5bGNiaUFnSUNBZ0lDQWdkbUZ5SUc1aGJXVWdQU0J6Y0d4cGRDNXphR2xtZENncExuSmxjR3hoWTJVb0wxeGNLeTluTENBbklDY3BYRzRnSUNBZ0lDQWdJSFpoY2lCMllXeDFaU0E5SUhOd2JHbDBMbXB2YVc0b0p6MG5LUzV5WlhCc1lXTmxLQzljWENzdlp5d2dKeUFuS1Z4dUlDQWdJQ0FnSUNCbWIzSnRMbUZ3Y0dWdVpDaGtaV052WkdWVlVrbERiMjF3YjI1bGJuUW9ibUZ0WlNrc0lHUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaDJZV3gxWlNrcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNsY2JpQWdJQ0J5WlhSMWNtNGdabTl5YlZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z2NHRnljMlZJWldGa1pYSnpLSEpoZDBobFlXUmxjbk1wSUh0Y2JpQWdJQ0IyWVhJZ2FHVmhaR1Z5Y3lBOUlHNWxkeUJJWldGa1pYSnpLQ2xjYmlBZ0lDQnlZWGRJWldGa1pYSnpMbk53YkdsMEtDOWNYSEkvWEZ4dUx5a3VabTl5UldGamFDaG1kVzVqZEdsdmJpaHNhVzVsS1NCN1hHNGdJQ0FnSUNCMllYSWdjR0Z5ZEhNZ1BTQnNhVzVsTG5Od2JHbDBLQ2M2SnlsY2JpQWdJQ0FnSUhaaGNpQnJaWGtnUFNCd1lYSjBjeTV6YUdsbWRDZ3BMblJ5YVcwb0tWeHVJQ0FnSUNBZ2FXWWdLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnZG1Gc2RXVWdQU0J3WVhKMGN5NXFiMmx1S0NjNkp5a3VkSEpwYlNncFhHNGdJQ0FnSUNBZ0lHaGxZV1JsY25NdVlYQndaVzVrS0d0bGVTd2dkbUZzZFdVcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNsY2JpQWdJQ0J5WlhSMWNtNGdhR1ZoWkdWeWMxeHVJQ0I5WEc1Y2JpQWdRbTlrZVM1allXeHNLRkpsY1hWbGMzUXVjSEp2ZEc5MGVYQmxLVnh1WEc0Z0lHWjFibU4wYVc5dUlGSmxjM0J2Ym5ObEtHSnZaSGxKYm1sMExDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ2FXWWdLQ0Z2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpJRDBnZTMxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxuUjVjR1VnUFNBblpHVm1ZWFZzZENkY2JpQWdJQ0IwYUdsekxuTjBZWFIxY3lBOUlDZHpkR0YwZFhNbklHbHVJRzl3ZEdsdmJuTWdQeUJ2Y0hScGIyNXpMbk4wWVhSMWN5QTZJREl3TUZ4dUlDQWdJSFJvYVhNdWIyc2dQU0IwYUdsekxuTjBZWFIxY3lBK1BTQXlNREFnSmlZZ2RHaHBjeTV6ZEdGMGRYTWdQQ0F6TURCY2JpQWdJQ0IwYUdsekxuTjBZWFIxYzFSbGVIUWdQU0FuYzNSaGRIVnpWR1Y0ZENjZ2FXNGdiM0IwYVc5dWN5QS9JRzl3ZEdsdmJuTXVjM1JoZEhWelZHVjRkQ0E2SUNkUFN5ZGNiaUFnSUNCMGFHbHpMbWhsWVdSbGNuTWdQU0J1WlhjZ1NHVmhaR1Z5Y3lodmNIUnBiMjV6TG1obFlXUmxjbk1wWEc0Z0lDQWdkR2hwY3k1MWNtd2dQU0J2Y0hScGIyNXpMblZ5YkNCOGZDQW5KMXh1SUNBZ0lIUm9hWE11WDJsdWFYUkNiMlI1S0dKdlpIbEpibWwwS1Z4dUlDQjlYRzVjYmlBZ1FtOWtlUzVqWVd4c0tGSmxjM0J2Ym5ObExuQnliM1J2ZEhsd1pTbGNibHh1SUNCU1pYTndiMjV6WlM1d2NtOTBiM1I1Y0dVdVkyeHZibVVnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGSmxjM0J2Ym5ObEtIUm9hWE11WDJKdlpIbEpibWwwTENCN1hHNGdJQ0FnSUNCemRHRjBkWE02SUhSb2FYTXVjM1JoZEhWekxGeHVJQ0FnSUNBZ2MzUmhkSFZ6VkdWNGREb2dkR2hwY3k1emRHRjBkWE5VWlhoMExGeHVJQ0FnSUNBZ2FHVmhaR1Z5Y3pvZ2JtVjNJRWhsWVdSbGNuTW9kR2hwY3k1b1pXRmtaWEp6S1N4Y2JpQWdJQ0FnSUhWeWJEb2dkR2hwY3k1MWNteGNiaUFnSUNCOUtWeHVJQ0I5WEc1Y2JpQWdVbVZ6Y0c5dWMyVXVaWEp5YjNJZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQjJZWElnY21WemNHOXVjMlVnUFNCdVpYY2dVbVZ6Y0c5dWMyVW9iblZzYkN3Z2UzTjBZWFIxY3pvZ01Dd2djM1JoZEhWelZHVjRkRG9nSnlkOUtWeHVJQ0FnSUhKbGMzQnZibk5sTG5SNWNHVWdQU0FuWlhKeWIzSW5YRzRnSUNBZ2NtVjBkWEp1SUhKbGMzQnZibk5sWEc0Z0lIMWNibHh1SUNCMllYSWdjbVZrYVhKbFkzUlRkR0YwZFhObGN5QTlJRnN6TURFc0lETXdNaXdnTXpBekxDQXpNRGNzSURNd09GMWNibHh1SUNCU1pYTndiMjV6WlM1eVpXUnBjbVZqZENBOUlHWjFibU4wYVc5dUtIVnliQ3dnYzNSaGRIVnpLU0I3WEc0Z0lDQWdhV1lnS0hKbFpHbHlaV04wVTNSaGRIVnpaWE11YVc1a1pYaFBaaWh6ZEdGMGRYTXBJRDA5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjBsdWRtRnNhV1FnYzNSaGRIVnpJR052WkdVbktWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VtVnpjRzl1YzJVb2JuVnNiQ3dnZTNOMFlYUjFjem9nYzNSaGRIVnpMQ0JvWldGa1pYSnpPaUI3Ykc5allYUnBiMjQ2SUhWeWJIMTlLVnh1SUNCOVhHNWNiaUFnYzJWc1ppNUlaV0ZrWlhKeklEMGdTR1ZoWkdWeWMxeHVJQ0J6Wld4bUxsSmxjWFZsYzNRZ1BTQlNaWEYxWlhOMFhHNGdJSE5sYkdZdVVtVnpjRzl1YzJVZ1BTQlNaWE53YjI1elpWeHVYRzRnSUhObGJHWXVabVYwWTJnZ1BTQm1kVzVqZEdsdmJpaHBibkIxZEN3Z2FXNXBkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJSFpoY2lCeVpYRjFaWE4wSUQwZ2JtVjNJRkpsY1hWbGMzUW9hVzV3ZFhRc0lHbHVhWFFwWEc0Z0lDQWdJQ0IyWVhJZ2VHaHlJRDBnYm1WM0lGaE5URWgwZEhCU1pYRjFaWE4wS0NsY2JseHVJQ0FnSUNBZ2VHaHlMbTl1Ykc5aFpDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdiM0IwYVc5dWN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNCemRHRjBkWE02SUhob2NpNXpkR0YwZFhNc1hHNGdJQ0FnSUNBZ0lDQWdjM1JoZEhWelZHVjRkRG9nZUdoeUxuTjBZWFIxYzFSbGVIUXNYRzRnSUNBZ0lDQWdJQ0FnYUdWaFpHVnljem9nY0dGeWMyVklaV0ZrWlhKektIaG9jaTVuWlhSQmJHeFNaWE53YjI1elpVaGxZV1JsY25Nb0tTQjhmQ0FuSnlsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxuVnliQ0E5SUNkeVpYTndiMjV6WlZWU1RDY2dhVzRnZUdoeUlEOGdlR2h5TG5KbGMzQnZibk5sVlZKTUlEb2diM0IwYVc5dWN5NW9aV0ZrWlhKekxtZGxkQ2duV0MxU1pYRjFaWE4wTFZWU1RDY3BYRzRnSUNBZ0lDQWdJSFpoY2lCaWIyUjVJRDBnSjNKbGMzQnZibk5sSnlCcGJpQjRhSElnUHlCNGFISXVjbVZ6Y0c5dWMyVWdPaUI0YUhJdWNtVnpjRzl1YzJWVVpYaDBYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9ibVYzSUZKbGMzQnZibk5sS0dKdlpIa3NJRzl3ZEdsdmJuTXBLVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0I0YUhJdWIyNWxjbkp2Y2lBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9ibVYzSUZSNWNHVkZjbkp2Y2lnblRtVjBkMjl5YXlCeVpYRjFaWE4wSUdaaGFXeGxaQ2NwS1Z4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCNGFISXViMjUwYVcxbGIzVjBJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxhbVZqZENodVpYY2dWSGx3WlVWeWNtOXlLQ2RPWlhSM2IzSnJJSEpsY1hWbGMzUWdabUZwYkdWa0p5a3BYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSGhvY2k1dmNHVnVLSEpsY1hWbGMzUXViV1YwYUc5a0xDQnlaWEYxWlhOMExuVnliQ3dnZEhKMVpTbGNibHh1SUNBZ0lDQWdhV1lnS0hKbGNYVmxjM1F1WTNKbFpHVnVkR2xoYkhNZ1BUMDlJQ2RwYm1Oc2RXUmxKeWtnZTF4dUlDQWdJQ0FnSUNCNGFISXVkMmwwYUVOeVpXUmxiblJwWVd4eklEMGdkSEoxWlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9KM0psYzNCdmJuTmxWSGx3WlNjZ2FXNGdlR2h5SUNZbUlITjFjSEJ2Y25RdVlteHZZaWtnZTF4dUlDQWdJQ0FnSUNCNGFISXVjbVZ6Y0c5dWMyVlVlWEJsSUQwZ0oySnNiMkluWEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGNYVmxjM1F1YUdWaFpHVnljeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLSFpoYkhWbExDQnVZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lIaG9jaTV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLRzVoYldVc0lIWmhiSFZsS1Z4dUlDQWdJQ0FnZlNsY2JseHVJQ0FnSUNBZ2VHaHlMbk5sYm1Rb2RIbHdaVzltSUhKbGNYVmxjM1F1WDJKdlpIbEpibWwwSUQwOVBTQW5kVzVrWldacGJtVmtKeUEvSUc1MWJHd2dPaUJ5WlhGMVpYTjBMbDlpYjJSNVNXNXBkQ2xjYmlBZ0lDQjlLVnh1SUNCOVhHNGdJSE5sYkdZdVptVjBZMmd1Y0c5c2VXWnBiR3dnUFNCMGNuVmxYRzU5S1NoMGVYQmxiMllnYzJWc1ppQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ1B5QnpaV3htSURvZ2RHaHBjeWs3WEc0aVhYMD1cbiJdfQ==
