!function t(e,r,n){function o(s,a){if(!r[s]){if(!e[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var f=r[s]={exports:{}};e[s][0].call(f.exports,function(t){var r=e[s][1][t];return o(r||t)},f,f.exports,t,e,r,n)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(t,e,r){"use strict";function n(){document.querySelector(".js-page__arrow--top").addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)},!1)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],2:[function(t,e,r){"use strict";function n(){(0,o.findArea)(),window.addEventListener("resize",o.findArea)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],3:[function(t,e,r){"use strict";var n=t("./spa");t("./utils");!function(){function t(){r.classList.toggle("menu-open")}function e(e){e.target&&"A"===e.target.nodeName&&(e.preventDefault(),t(),e.target.pathname!==window.location.pathname&&(history.pushState(null,null,e.target.pathname),(0,n.updatePage)()))}var r=document.querySelector("header"),o=document.querySelector(".js-trigger--menu"),i=document.querySelector(".js-menu");(0,n.runNewFunctions)(),o.addEventListener("click",t),i.addEventListener("click",e)}()},{"./spa":5,"./utils":6}],4:[function(t,e,r){"use strict";function n(){function t(){var t=this.parentNode,e=t.previousElementSibling;t.style.maxHeight=0,t.classList.toggle("project__details--expanded"),e.classList.toggle("project__expandIcon--expanded")}function e(){this.classList.toggle("project__expandIcon--expanded");var t=this.nextElementSibling,e=t.classList.contains("project__details--expanded");t.classList.toggle("project__details--expanded"),t.style.maxHeight=e?0:t.scrollHeight+"px"}document.querySelector(".js-page__arrow--top").addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)},!1),Array.from(document.querySelectorAll(".js-project")).forEach(function(r){r.querySelector(".project__expandIcon").addEventListener("click",e,!1),r.querySelector(".project__closeIcon").addEventListener("click",t,!1)})}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],5:[function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function o(t){return l[t]?Promise.resolve(l[t]):fetch(t).then(function(e){if(e.ok)return l[t]=e.text(),l[t];console.log("network response was not ok.")}).catch(function(e){return console.log("there has been an error requesting ("+t+"): "+e.message)})}Object.defineProperty(r,"__esModule",{value:!0}),r.updatePage=r.runNewFunctions=void 0;var i=n(t("./landing")),s=n(t("./about")),a=n(t("./projects")),u=t("./utils");t("es6-promise").polyfill(),t("isomorphic-fetch");var c=r.runNewFunctions=function(){var t=window.location.pathname;window.removeEventListener("resize",u.findArea),"/"===t||"/index.html"===t?(0,i.default)():t.startsWith("/about")?(0,s.default)():t.startsWith("/projects")&&(0,a.default)()},f=r.updatePage=function(){o(window.location.href).then(function(t){var e=document.createElement("html");e.innerHTML=t;var r=document.querySelector(".page"),n=e.querySelector(".page"),o=e.getElementsByTagName("title")[0].textContent,i=e.getElementsByTagName("meta").description.content;console.log(r),r.parentNode.replaceChild(n,r),document.title=o,document.getElementsByTagName("meta").description.content=i,(0,u.fadeIn)(n),c()})},l={};window.addEventListener("popstate",f)},{"./about":1,"./landing":2,"./projects":4,"./utils":6,"es6-promise":7,"isomorphic-fetch":8}],6:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(t){return t*t*t*t},o=function(t){return 1- --t*t*t*t};r.scrollToTop=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200,r=t.scrollHeight,n=Date.now();!function i(){var s=Date.now(),a=o((s-n)/e);t.scrollTop=a*(0-r)+r,0!==t.scrollTop&&requestAnimationFrame(i)}()},r.fadeIn=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200;t.style.opacity=0;var r=Date.now();!function o(){var i=Date.now(),s=n((i-r)/e);t.style.opacity=s,t.style.opacity>1?t.style.opacity=1:requestAnimationFrame(o)}()},r.fadeOut=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200;t.style.opacity=1;var r=Date.now();!function n(){var i=Date.now(),s=o((i-r)/e);t.style.opacity=1-s,t.style.opacity<0?t.style.opacity=0:requestAnimationFrame(n)}()},r.findArea=function(){console.log("called");var t=document.querySelector(".js-pixels"),e=function(){if(t&&null!==t.textContent){var e=window.innerWidth*window.innerHeight;t.textContent=e.toLocaleString()}};requestAnimationFrame(e)}},{}],7:[function(t,e,r){(function(n,o){!function(t,n){"object"==typeof r&&void 0!==e?e.exports=n():"function"==typeof define&&define.amd?define(n):t.ES6Promise=n()}(this,function(){"use strict";function e(t){return"function"==typeof t||"object"==typeof t&&null!==t}function r(t){return"function"==typeof t}function i(t){z=t}function s(t){Y=t}function a(){return void 0!==W?function(){W(c)}:u()}function u(){var t=setTimeout;return function(){return t(c,1)}}function c(){for(var t=0;t<G;t+=2)(0,Q[t])(Q[t+1]),Q[t]=void 0,Q[t+1]=void 0;G=0}function f(t,e){var r=arguments,n=this,o=new this.constructor(h);void 0===o[tt]&&L(o);var i=n._state;return i?function(){var t=r[i-1];Y(function(){return S(i,o,t,n._result)})}():E(n,o,t,e),o}function l(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var r=new e(h);return _(r,t),r}function h(){}function d(){return new TypeError("You cannot resolve a promise with itself")}function p(){return new TypeError("A promises callback cannot return that same promise.")}function y(t){try{return t.then}catch(t){return ot.error=t,ot}}function m(t,e,r,n){try{t.call(e,r,n)}catch(t){return t}}function v(t,e,r){Y(function(t){var n=!1,o=m(r,e,function(r){n||(n=!0,e!==r?_(t,r):T(t,r))},function(e){n||(n=!0,A(t,e))},"Settle: "+(t._label||" unknown promise"));!n&&o&&(n=!0,A(t,o))},t)}function b(t,e){e._state===rt?T(t,e._result):e._state===nt?A(t,e._result):E(e,void 0,function(e){return _(t,e)},function(e){return A(t,e)})}function w(t,e,n){e.constructor===t.constructor&&n===f&&e.constructor.resolve===l?b(t,e):n===ot?(A(t,ot.error),ot.error=null):void 0===n?T(t,e):r(n)?v(t,e,n):T(t,e)}function _(t,r){t===r?A(t,d()):e(r)?w(t,r,y(r)):T(t,r)}function g(t){t._onerror&&t._onerror(t._result),x(t)}function T(t,e){t._state===et&&(t._result=e,t._state=rt,0!==t._subscribers.length&&Y(x,t))}function A(t,e){t._state===et&&(t._state=nt,t._result=e,Y(g,t))}function E(t,e,r,n){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+rt]=r,o[i+nt]=n,0===i&&t._state&&Y(x,t)}function x(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var n=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)n=e[s],o=e[s+r],n?S(r,n,o,i):o(i);t._subscribers.length=0}}function j(){this.error=null}function P(t,e){try{return t(e)}catch(t){return it.error=t,it}}function S(t,e,n,o){var i=r(n),s=void 0,a=void 0,u=void 0,c=void 0;if(i){if(s=P(n,o),s===it?(c=!0,a=s.error,s.error=null):u=!0,e===s)return void A(e,p())}else s=o,u=!0;e._state!==et||(i&&u?_(e,s):c?A(e,a):t===rt?T(e,s):t===nt&&A(e,s))}function B(t,e){try{e(function(e){_(t,e)},function(e){A(t,e)})}catch(e){A(t,e)}}function O(){return st++}function L(t){t[tt]=st++,t._state=void 0,t._result=void 0,t._subscribers=[]}function q(t,e){this._instanceConstructor=t,this.promise=new t(h),this.promise[tt]||L(this.promise),H(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?T(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&T(this.promise,this._result))):A(this.promise,D())}function D(){return new Error("Array Methods must be provided an Array")}function U(t){return new q(this,t).promise}function F(t){var e=this;return new e(H(t)?function(r,n){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(r,n)}:function(t,e){return e(new TypeError("You must pass an array to race."))})}function I(t){var e=new this(h);return A(e,t),e}function C(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function N(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function k(t){this[tt]=O(),this._result=this._state=void 0,this._subscribers=[],h!==t&&("function"!=typeof t&&C(),this instanceof k?B(this,t):N())}function R(){var t=void 0;if(void 0!==o)t=o;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===r&&!e.cast)return}t.Promise=k}var M=void 0,H=M=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},G=0,W=void 0,z=void 0,Y=function(t,e){Q[G]=t,Q[G+1]=e,2===(G+=2)&&(z?z(c):Z())},K="undefined"!=typeof window?window:void 0,V=K||{},X=V.MutationObserver||V.WebKitMutationObserver,J="undefined"==typeof self&&void 0!==n&&"[object process]"==={}.toString.call(n),$="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,Q=new Array(1e3),Z=void 0;Z=J?function(){return function(){return n.nextTick(c)}}():X?function(){var t=0,e=new X(c),r=document.createTextNode("");return e.observe(r,{characterData:!0}),function(){r.data=t=++t%2}}():$?function(){var t=new MessageChannel;return t.port1.onmessage=c,function(){return t.port2.postMessage(0)}}():void 0===K&&"function"==typeof t?function(){try{var e=t("vertx");return W=e.runOnLoop||e.runOnContext,a()}catch(t){return u()}}():u();var tt=Math.random().toString(36).substring(16),et=void 0,rt=1,nt=2,ot=new j,it=new j,st=0;return q.prototype._enumerate=function(){for(var t=this.length,e=this._input,r=0;this._state===et&&r<t;r++)this._eachEntry(e[r],r)},q.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===l){var o=y(t);if(o===f&&t._state!==et)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(r===k){var i=new r(h);w(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new r(function(e){return e(t)}),e)}else this._willSettleAt(n(t),e)},q.prototype._settledAt=function(t,e,r){var n=this.promise;n._state===et&&(this._remaining--,t===nt?A(n,r):this._result[e]=r),0===this._remaining&&T(n,this._result)},q.prototype._willSettleAt=function(t,e){var r=this;E(t,void 0,function(t){return r._settledAt(rt,e,t)},function(t){return r._settledAt(nt,e,t)})},k.all=U,k.race=F,k.resolve=l,k.reject=I,k._setScheduler=i,k._setAsap=s,k._asap=Y,k.prototype={constructor:k,then:f,catch:function(t){return this.then(null,t)}},k.polyfill=R,k.Promise=k,k})}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:9}],8:[function(t,e,r){t("whatwg-fetch"),e.exports=self.fetch.bind(self)},{"whatwg-fetch":10}],9:[function(t,e,r){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(t){if(l===setTimeout)return setTimeout(t,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(t,0);try{return l(t,0)}catch(e){try{return l.call(null,t,0)}catch(e){return l.call(this,t,0)}}}function s(t){if(h===clearTimeout)return clearTimeout(t);if((h===o||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(t);try{return h(t)}catch(e){try{return h.call(null,t)}catch(e){return h.call(this,t)}}}function a(){m&&p&&(m=!1,p.length?y=p.concat(y):v=-1,y.length&&u())}function u(){if(!m){var t=i(a);m=!0;for(var e=y.length;e;){for(p=y,y=[];++v<e;)p&&p[v].run();v=-1,e=y.length}p=null,m=!1,s(t)}}function c(t,e){this.fun=t,this.array=e}function f(){}var l,h,d=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(t){l=n}try{h="function"==typeof clearTimeout?clearTimeout:o}catch(t){h=o}}();var p,y=[],m=!1,v=-1;d.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];y.push(new c(t,e)),1!==y.length||m||i(u)},c.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=f,d.addListener=f,d.once=f,d.off=f,d.removeListener=f,d.removeAllListeners=f,d.emit=f,d.prependListener=f,d.prependOnceListener=f,d.listeners=function(t){return[]},d.binding=function(t){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(t){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},{}],10:[function(t,e,r){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function r(t){return"string"!=typeof t&&(t=String(t)),t}function n(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return v.iterable&&(e[Symbol.iterator]=function(){return e}),e}function o(t){this.map={},t instanceof o?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function i(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function s(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function a(t){var e=new FileReader,r=s(e);return e.readAsArrayBuffer(t),r}function u(t){var e=new FileReader,r=s(e);return e.readAsText(t),r}function c(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}function f(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function l(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(v.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(v.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(v.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(v.arrayBuffer&&v.blob&&w(t))this._bodyArrayBuffer=f(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!v.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!_(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=f(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):v.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},v.blob&&(this.blob=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?i(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(a)}),this.text=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return u(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(c(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},v.formData&&(this.formData=function(){return this.text().then(p)}),this.json=function(){return this.text().then(JSON.parse)},this}function h(t){var e=t.toUpperCase();return g.indexOf(e)>-1?e:t}function d(t,e){var r=(e=e||{}).body;if(t instanceof d){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new o(t.headers)),this.method=t.method,this.mode=t.mode,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new o(e.headers)),this.method=h(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function p(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}}),e}function y(t){var e=new o;return t.split(/\r?\n/).forEach(function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}}),e}function m(t,e){e||(e={}),this.type="default",this.status="status"in e?e.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new o(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var v={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(v.arrayBuffer)var b=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],w=function(t){return t&&DataView.prototype.isPrototypeOf(t)},_=ArrayBuffer.isView||function(t){return t&&b.indexOf(Object.prototype.toString.call(t))>-1};o.prototype.append=function(t,n){t=e(t),n=r(n);var o=this.map[t];this.map[t]=o?o+","+n:n},o.prototype.delete=function(t){delete this.map[e(t)]},o.prototype.get=function(t){return t=e(t),this.has(t)?this.map[t]:null},o.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},o.prototype.set=function(t,n){this.map[e(t)]=r(n)},o.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},o.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),n(t)},o.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),n(t)},o.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),n(t)},v.iterable&&(o.prototype[Symbol.iterator]=o.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];d.prototype.clone=function(){return new d(this,{body:this._bodyInit})},l.call(d.prototype),l.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new o(this.headers),url:this.url})},m.error=function(){var t=new m(null,{status:0,statusText:""});return t.type="error",t};var T=[301,302,303,307,308];m.redirect=function(t,e){if(-1===T.indexOf(e))throw new RangeError("Invalid status code");return new m(null,{status:e,headers:{location:t}})},t.Headers=o,t.Request=d,t.Response=m,t.fetch=function(t,e){return new Promise(function(r,n){var o=new d(t,e),i=new XMLHttpRequest;i.onload=function(){var t={status:i.status,statusText:i.statusText,headers:y(i.getAllResponseHeaders()||"")};t.url="responseURL"in i?i.responseURL:t.headers.get("X-Request-URL");var e="response"in i?i.response:i.responseText;r(new m(e,t))},i.onerror=function(){n(new TypeError("Network request failed"))},i.ontimeout=function(){n(new TypeError("Network request failed"))},i.open(o.method,o.url,!0),"include"===o.credentials&&(i.withCredentials=!0),"responseType"in i&&v.blob&&(i.responseType="blob"),o.headers.forEach(function(t,e){i.setRequestHeader(e,t)}),i.send(void 0===o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},{}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwicnVuQWJvdXRQYWdlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl91dGlscyIsInNjcm9sbFRvVG9wIiwidGhpcyIsInBhcmVudE5vZGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZGVmYXVsdCIsIi4vdXRpbHMiLCIyIiwicnVuTGFuZGluZ1BhZ2UiLCJmaW5kQXJlYSIsIndpbmRvdyIsIjMiLCJfc3BhIiwidG9nZ2xlTWVudSIsImhlYWRlciIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImNoYW5nZVBhZ2UiLCJldmVudCIsInRhcmdldCIsIm5vZGVOYW1lIiwicHJldmVudERlZmF1bHQiLCJwYXRobmFtZSIsImxvY2F0aW9uIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInVwZGF0ZVBhZ2UiLCJ0cmlnZ2VyTWVudSIsIm1lbnUiLCJydW5OZXdGdW5jdGlvbnMiLCIuL3NwYSIsIjQiLCJydW5Qcm9qZWN0c1BhZ2UiLCJjbG9zZURldGFpbHMiLCJkZXRhaWxzIiwiaWNvbiIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJzdHlsZSIsIm1heEhlaWdodCIsImV4cGFuZERldGFpbHMiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJpc0V4cGFuZGVkIiwiY29udGFpbnMiLCJzY3JvbGxIZWlnaHQiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInByb2plY3QiLCI1IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJsb2FkUGFnZSIsInVybCIsImNhY2hlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsIm9rIiwidGV4dCIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsIm1lc3NhZ2UiLCJ1bmRlZmluZWQiLCJfbGFuZGluZzIiLCJfYWJvdXQyIiwiX3Byb2plY3RzMiIsInBvbHlmaWxsIiwicGF0aCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzdGFydHNXaXRoIiwiaHJlZiIsInJlc3BvbnNlVGV4dCIsImNvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJvbGRQYWdlIiwibmV3UGFnZSIsIm5ld1RpdGxlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ0ZXh0Q29udGVudCIsIm5ld0Rlc2MiLCJjb250ZW50IiwicmVwbGFjZUNoaWxkIiwidGl0bGUiLCJmYWRlSW4iLCIuL2Fib3V0IiwiLi9sYW5kaW5nIiwiLi9wcm9qZWN0cyIsImVzNi1wcm9taXNlIiwiaXNvbW9ycGhpYy1mZXRjaCIsIjYiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVsIiwiZHVyYXRpb24iLCJhcmd1bWVudHMiLCJib3R0b20iLCJzdGFydCIsIkRhdGUiLCJub3ciLCJzY3JvbGwiLCJlYXNpbmciLCJzY3JvbGxUb3AiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvcGFjaXR5IiwiZmFkZSIsImZhZGVPdXQiLCJwaXhlbHMiLCJhcmVhIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwidG9Mb2NhbGVTdHJpbmciLCI3IiwicHJvY2VzcyIsImdsb2JhbCIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJFUzZQcm9taXNlIiwib2JqZWN0T3JGdW5jdGlvbiIsIngiLCJpc0Z1bmN0aW9uIiwic2V0U2NoZWR1bGVyIiwic2NoZWR1bGVGbiIsImN1c3RvbVNjaGVkdWxlckZuIiwic2V0QXNhcCIsImFzYXBGbiIsImFzYXAiLCJ1c2VWZXJ0eFRpbWVyIiwidmVydHhOZXh0IiwiZmx1c2giLCJ1c2VTZXRUaW1lb3V0IiwiZ2xvYmFsU2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJsZW4iLCJjYWxsYmFjayIsInF1ZXVlIiwib25GdWxmaWxsbWVudCIsIm9uUmVqZWN0aW9uIiwiX2FyZ3VtZW50cyIsInBhcmVudCIsImNoaWxkIiwiY29uc3RydWN0b3IiLCJub29wIiwiUFJPTUlTRV9JRCIsIm1ha2VQcm9taXNlIiwiX3N0YXRlIiwiaW52b2tlQ2FsbGJhY2siLCJfcmVzdWx0Iiwic3Vic2NyaWJlIiwib2JqZWN0IiwiQ29uc3RydWN0b3IiLCJwcm9taXNlIiwiX3Jlc29sdmUiLCJzZWxmRnVsZmlsbG1lbnQiLCJUeXBlRXJyb3IiLCJjYW5ub3RSZXR1cm5Pd24iLCJnZXRUaGVuIiwiZXJyb3IiLCJHRVRfVEhFTl9FUlJPUiIsInRyeVRoZW4iLCJmdWxmaWxsbWVudEhhbmRsZXIiLCJyZWplY3Rpb25IYW5kbGVyIiwiaGFuZGxlRm9yZWlnblRoZW5hYmxlIiwidGhlbmFibGUiLCJzZWFsZWQiLCJmdWxmaWxsIiwicmVhc29uIiwiX3JlamVjdCIsIl9sYWJlbCIsImhhbmRsZU93blRoZW5hYmxlIiwiRlVMRklMTEVEIiwiUkVKRUNURUQiLCJoYW5kbGVNYXliZVRoZW5hYmxlIiwibWF5YmVUaGVuYWJsZSIsInRoZW4kJCIsInB1Ymxpc2hSZWplY3Rpb24iLCJfb25lcnJvciIsInB1Ymxpc2giLCJQRU5ESU5HIiwiX3N1YnNjcmliZXJzIiwic3Vic2NyaWJlcnMiLCJzZXR0bGVkIiwiZGV0YWlsIiwiRXJyb3JPYmplY3QiLCJ0cnlDYXRjaCIsIlRSWV9DQVRDSF9FUlJPUiIsImhhc0NhbGxiYWNrIiwic3VjY2VlZGVkIiwiZmFpbGVkIiwiaW5pdGlhbGl6ZVByb21pc2UiLCJyZXNvbHZlciIsIm5leHRJZCIsImlkIiwiRW51bWVyYXRvciIsImlucHV0IiwiX2luc3RhbmNlQ29uc3RydWN0b3IiLCJpc0FycmF5IiwiX2lucHV0IiwiX3JlbWFpbmluZyIsIl9lbnVtZXJhdGUiLCJ2YWxpZGF0aW9uRXJyb3IiLCJhbGwiLCJlbnRyaWVzIiwicmFjZSIsInJlamVjdCIsIl8iLCJuZWVkc1Jlc29sdmVyIiwibmVlZHNOZXciLCJsb2NhbCIsInNlbGYiLCJGdW5jdGlvbiIsIlAiLCJwcm9taXNlVG9TdHJpbmciLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhc3QiLCJfaXNBcnJheSIsImFyZyIsInNjaGVkdWxlRmx1c2giLCJicm93c2VyV2luZG93IiwiYnJvd3Nlckdsb2JhbCIsIkJyb3dzZXJNdXRhdGlvbk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJpc05vZGUiLCJpc1dvcmtlciIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiaW1wb3J0U2NyaXB0cyIsIk1lc3NhZ2VDaGFubmVsIiwibmV4dFRpY2siLCJpdGVyYXRpb25zIiwib2JzZXJ2ZXIiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImRhdGEiLCJjaGFubmVsIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3J0MiIsInBvc3RNZXNzYWdlIiwidmVydHgiLCJydW5Pbkxvb3AiLCJydW5PbkNvbnRleHQiLCJNYXRoIiwicmFuZG9tIiwic3Vic3RyaW5nIiwiX2VhY2hFbnRyeSIsImVudHJ5IiwiYyIsInJlc29sdmUkJCIsIl90aGVuIiwiX3NldHRsZWRBdCIsIl93aWxsU2V0dGxlQXQiLCJzdGF0ZSIsImVudW1lcmF0b3IiLCJfc2V0U2NoZWR1bGVyIiwiX3NldEFzYXAiLCJfYXNhcCIsIl9wcm9jZXNzIiwiOCIsImJpbmQiLCJ3aGF0d2ctZmV0Y2giLCI5IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2FjaGVkU2V0VGltZW91dCIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsImNhY2hlZENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwiY29uY2F0IiwicXVldWVJbmRleCIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwiSXRlbSIsImFycmF5IiwiYXJncyIsInB1c2giLCJhcHBseSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwibmFtZSIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiMTAiLCJub3JtYWxpemVOYW1lIiwiU3RyaW5nIiwidGVzdCIsInRvTG93ZXJDYXNlIiwibm9ybWFsaXplVmFsdWUiLCJpdGVyYXRvckZvciIsIml0ZW1zIiwiaXRlcmF0b3IiLCJuZXh0Iiwic2hpZnQiLCJkb25lIiwic3VwcG9ydCIsIml0ZXJhYmxlIiwiU3ltYm9sIiwiSGVhZGVycyIsImhlYWRlcnMiLCJtYXAiLCJhcHBlbmQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5IiwiYm9keVVzZWQiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJvbmxvYWQiLCJyZXN1bHQiLCJvbmVycm9yIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsInJlYWRCbG9iQXNUZXh0IiwicmVhZEFzVGV4dCIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImJ1ZiIsInZpZXciLCJVaW50OEFycmF5IiwiY2hhcnMiLCJmcm9tQ2hhckNvZGUiLCJqb2luIiwiYnVmZmVyQ2xvbmUiLCJzbGljZSIsImJ5dGVMZW5ndGgiLCJzZXQiLCJidWZmZXIiLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiQmxvYiIsImlzUHJvdG90eXBlT2YiLCJfYm9keUJsb2IiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsInNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImFycmF5QnVmZmVyIiwiaXNEYXRhVmlldyIsIl9ib2R5QXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXJWaWV3IiwiZ2V0IiwidHlwZSIsInJlamVjdGVkIiwiZGVjb2RlIiwianNvbiIsIkpTT04iLCJwYXJzZSIsIm5vcm1hbGl6ZU1ldGhvZCIsIm1ldGhvZCIsInVwY2FzZWQiLCJ0b1VwcGVyQ2FzZSIsIm1ldGhvZHMiLCJpbmRleE9mIiwiUmVxdWVzdCIsIm9wdGlvbnMiLCJjcmVkZW50aWFscyIsIm1vZGUiLCJyZWZlcnJlciIsImZvcm0iLCJ0cmltIiwic3BsaXQiLCJieXRlcyIsInJlcGxhY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZUhlYWRlcnMiLCJyYXdIZWFkZXJzIiwibGluZSIsInBhcnRzIiwia2V5IiwiUmVzcG9uc2UiLCJib2R5SW5pdCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJ2aWV3Q2xhc3NlcyIsIkRhdGFWaWV3IiwiaXNWaWV3Iiwib2xkVmFsdWUiLCJoYXMiLCJoYXNPd25Qcm9wZXJ0eSIsInRoaXNBcmciLCJrZXlzIiwidmFsdWVzIiwiY2xvbmUiLCJyZWRpcmVjdFN0YXR1c2VzIiwicmVkaXJlY3QiLCJSYW5nZUVycm9yIiwiaW5pdCIsInJlcXVlc3QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVVJMIiwib250aW1lb3V0Iiwib3BlbiIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFVQSxFQUFFQyxFQUFFQyxFQUFFQyxHQUFHLFNBQVNDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSUosRUFBRUcsR0FBRyxDQUFDLElBQUlKLEVBQUVJLEdBQUcsQ0FBQyxJQUFJRSxFQUFrQixtQkFBVEMsU0FBcUJB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RUFBTytOLEdBQzNCLE9BQU8sSUFBSWhYLFFBQVEsU0FBU0MsRUFBUzBKLEdBQ25DLElBQUlzTixFQUFVLElBQUlsQyxFQUFROUwsRUFBTytOLEdBQzdCRSxFQUFNLElBQUlDLGVBRWRELEVBQUl0RixPQUFTLFdBQ1gsSUFBSW9ELEdBQ0ZpQixPQUFRaUIsRUFBSWpCLE9BQ1pDLFdBQVlnQixFQUFJaEIsV0FDaEIvRSxRQUFTdUUsRUFBYXdCLEVBQUlFLHlCQUEyQixLQUV2RHBDLEVBQVFsVixJQUFNLGdCQUFpQm9YLEVBQU1BLEVBQUlHLFlBQWNyQyxFQUFRN0QsUUFBUStDLElBQUksaUJBQzNFLElBQUkxQyxFQUFPLGFBQWMwRixFQUFNQSxFQUFJOVcsU0FBVzhXLEVBQUk3VixhQUNsRHBCLEVBQVEsSUFBSThWLEVBQVN2RSxFQUFNd0QsS0FHN0JrQyxFQUFJcEYsUUFBVSxXQUNabkksRUFBTyxJQUFJbEQsVUFBVSw0QkFHdkJ5USxFQUFJSSxVQUFZLFdBQ2QzTixFQUFPLElBQUlsRCxVQUFVLDRCQUd2QnlRLEVBQUlLLEtBQUtOLEVBQVF2QyxPQUFRdUMsRUFBUW5YLEtBQUssR0FFVixZQUF4Qm1YLEVBQVFoQyxjQUNWaUMsRUFBSU0saUJBQWtCLEdBR3BCLGlCQUFrQk4sR0FBT25HLEVBQVFpQixPQUNuQ2tGLEVBQUlPLGFBQWUsUUFHckJSLEVBQVE5RixRQUFRNVIsUUFBUSxTQUFTM0MsRUFBT2lULEdBQ3RDcUgsRUFBSVEsaUJBQWlCN0gsRUFBTWpULEtBRzdCc2EsRUFBSVMsVUFBa0MsSUFBdEJWLEVBQVE5RCxVQUE0QixLQUFPOEQsRUFBUTlELGNBR3ZFbkosRUFBSzlKLE1BQU1jLFVBQVcsSUFDTCxvQkFBVGdKLEtBQXVCQSxLQUFPeE4sZ0JBRTdCIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBydW5BYm91dFBhZ2U7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIHJ1bkFib3V0UGFnZSgpIHtcblxuICAvLyBzZXQgdXAgYXJyb3cgKyBzY3JvbGwgdG8gdG9wIGZ1bmN0aW9uXG4gIC8vIFRPRE86IG9ubHkgc2hvdyBhcnJvdyBpZiBuZWVkZWQgW2hlaWdodCA+IDEwMCUgdmlld3BvcnRdXG4gIHZhciB0b3BBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1wYWdlX19hcnJvdy0tdG9wJyk7XG4gIHRvcEFycm93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICgwLCBfdXRpbHMuc2Nyb2xsVG9Ub3ApKHRoaXMucGFyZW50Tm9kZSk7XG4gIH0sIGZhbHNlKTtcbn1cblxufSx7XCIuL3V0aWxzXCI6Nn1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcnVuTGFuZGluZ1BhZ2U7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIHJ1bkxhbmRpbmdQYWdlKCkge1xuXG4gICgwLCBfdXRpbHMuZmluZEFyZWEpKCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBfdXRpbHMuZmluZEFyZWEpO1xufVxuXG59LHtcIi4vdXRpbHNcIjo2fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfc3BhID0gcmVxdWlyZSgnLi9zcGEnKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuKGZ1bmN0aW9uICgpIHtcblxuICAvLyAgbmF2aWdhdGlvbiBzZWxlY3RvcnNcbiAgdmFyIGhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlcicpO1xuICB2YXIgdHJpZ2dlck1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdHJpZ2dlci0tbWVudScpO1xuICB2YXIgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1tZW51J1xuXG4gIC8vICBuYXZpZ2F0aW9uIG1ldGhvZHNcbiAgKTtmdW5jdGlvbiB0b2dnbGVNZW51KCkge1xuICAgIGhlYWRlci5jbGFzc0xpc3QudG9nZ2xlKCdtZW51LW9wZW4nKTtcbiAgfVxuICBmdW5jdGlvbiBjaGFuZ2VQYWdlKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQubm9kZU5hbWUgPT09ICdBJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRvZ2dsZU1lbnUoKTtcbiAgICAgIGlmIChldmVudC50YXJnZXQucGF0aG5hbWUgIT09IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBldmVudC50YXJnZXQucGF0aG5hbWUpO1xuICAgICAgICAoMCwgX3NwYS51cGRhdGVQYWdlKSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vICBuYXZpZ2F0aW9uIGV2ZW50IGxpc3RlbmVycyArIHJ1biBvbiBpbml0aWFsIGxvYWRcbiAgKDAsIF9zcGEucnVuTmV3RnVuY3Rpb25zKSgpO1xuICB0cmlnZ2VyTWVudS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZU1lbnUpO1xuICBtZW51LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2hhbmdlUGFnZSk7XG59KSgpO1xuXG59LHtcIi4vc3BhXCI6NSxcIi4vdXRpbHNcIjo2fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBydW5Qcm9qZWN0c1BhZ2U7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8vIHByb2plY3RzIHBhZ2UgLSBzcGVjaWZpYyBmdW5jdGlvbnNcbmZ1bmN0aW9uIHJ1blByb2plY3RzUGFnZSgpIHtcblxuICAvLyBzZXQgdXAgYXJyb3cgKyBzY3JvbGwgdG8gdG9wIGZ1bmN0aW9uXG4gIC8vIFRPRE86IG9ubHkgc2hvdyBhcnJvdyBpZiBuZWVkZWQgW2hlaWdodCA+IDEwMCUgdmlld3BvcnRdXG4gIHZhciB0b3BBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1wYWdlX19hcnJvdy0tdG9wJyk7XG4gIHRvcEFycm93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICgwLCBfdXRpbHMuc2Nyb2xsVG9Ub3ApKHRoaXMucGFyZW50Tm9kZSk7XG4gIH0sIGZhbHNlXG5cbiAgLy8gIGxvb3Agb3ZlciBldmVyeSBwcm9qZWN0LCBhZGQgZXZlbnQgbGlzdGVuZXIgdG8gZXhwYW5kIGljb24gYnV0dG9uXG4gICk7dmFyIHByb2plY3RzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtcHJvamVjdCcpKTtcbiAgcHJvamVjdHMuZm9yRWFjaChmdW5jdGlvbiAocHJvamVjdCkge1xuICAgIHZhciBleHBhbmRJY29uID0gcHJvamVjdC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdF9fZXhwYW5kSWNvbicpO1xuICAgIGV4cGFuZEljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBleHBhbmREZXRhaWxzLCBmYWxzZSk7XG5cbiAgICB2YXIgY2xvc2VJY29uID0gcHJvamVjdC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdF9fY2xvc2VJY29uJyk7XG4gICAgY2xvc2VJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xvc2VEZXRhaWxzLCBmYWxzZSk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGNsb3NlRGV0YWlscygpIHtcbiAgICB2YXIgZGV0YWlscyA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICB2YXIgaWNvbiA9IGRldGFpbHMucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICBkZXRhaWxzLnN0eWxlLm1heEhlaWdodCA9IDA7XG4gICAgZGV0YWlscy5jbGFzc0xpc3QudG9nZ2xlKCdwcm9qZWN0X19kZXRhaWxzLS1leHBhbmRlZCcpO1xuICAgIGljb24uY2xhc3NMaXN0LnRvZ2dsZSgncHJvamVjdF9fZXhwYW5kSWNvbi0tZXhwYW5kZWQnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4cGFuZERldGFpbHMoKSB7XG4gICAgdGhpcy5jbGFzc0xpc3QudG9nZ2xlKCdwcm9qZWN0X19leHBhbmRJY29uLS1leHBhbmRlZCcpO1xuICAgIHZhciBkZXRhaWxzID0gdGhpcy5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgdmFyIGlzRXhwYW5kZWQgPSBkZXRhaWxzLmNsYXNzTGlzdC5jb250YWlucygncHJvamVjdF9fZGV0YWlscy0tZXhwYW5kZWQnKTtcbiAgICBkZXRhaWxzLmNsYXNzTGlzdC50b2dnbGUoJ3Byb2plY3RfX2RldGFpbHMtLWV4cGFuZGVkJyk7XG4gICAgZGV0YWlscy5zdHlsZS5tYXhIZWlnaHQgPSBpc0V4cGFuZGVkID8gMCA6IGRldGFpbHMuc2Nyb2xsSGVpZ2h0ICsgJ3B4JztcbiAgfVxufVxuXG59LHtcIi4vdXRpbHNcIjo2fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnVwZGF0ZVBhZ2UgPSBleHBvcnRzLnJ1bk5ld0Z1bmN0aW9ucyA9IHVuZGVmaW5lZDtcblxudmFyIF9sYW5kaW5nID0gcmVxdWlyZSgnLi9sYW5kaW5nJyk7XG5cbnZhciBfbGFuZGluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sYW5kaW5nKTtcblxudmFyIF9hYm91dCA9IHJlcXVpcmUoJy4vYWJvdXQnKTtcblxudmFyIF9hYm91dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hYm91dCk7XG5cbnZhciBfcHJvamVjdHMgPSByZXF1aXJlKCcuL3Byb2plY3RzJyk7XG5cbnZhciBfcHJvamVjdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvamVjdHMpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBmZXRjaCBwb2x5ZmlsbCBmb3IgbW9iaWxlIGRldmljZXNcbnJlcXVpcmUoJ2VzNi1wcm9taXNlJykucG9seWZpbGwoKTtcbnJlcXVpcmUoJ2lzb21vcnBoaWMtZmV0Y2gnXG5cbi8vIHJ1biBmdW5jdGlvbnMgc3BlY2lmaWMgdG8gcGFnZVxuKTt2YXIgcnVuTmV3RnVuY3Rpb25zID0gZXhwb3J0cy5ydW5OZXdGdW5jdGlvbnMgPSBmdW5jdGlvbiBydW5OZXdGdW5jdGlvbnMoKSB7XG4gIHZhciBwYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgX3V0aWxzLmZpbmRBcmVhKTtcbiAgaWYgKHBhdGggPT09ICcvJyB8fCBwYXRoID09PSAnL2luZGV4Lmh0bWwnKSB7XG4gICAgKDAsIF9sYW5kaW5nMi5kZWZhdWx0KSgpO1xuICB9IGVsc2UgaWYgKHBhdGguc3RhcnRzV2l0aCgnL2Fib3V0JykpIHtcbiAgICAoMCwgX2Fib3V0Mi5kZWZhdWx0KSgpO1xuICB9IGVsc2UgaWYgKHBhdGguc3RhcnRzV2l0aCgnL3Byb2plY3RzJykpIHtcbiAgICAoMCwgX3Byb2plY3RzMi5kZWZhdWx0KSgpO1xuICB9XG59O1xuXG4vLyB1cGRhdGUgKyBmYWRlIGluIG5ldyBwYWdlIG9uIHVybCBjaGFuZ2VcbnZhciB1cGRhdGVQYWdlID0gZXhwb3J0cy51cGRhdGVQYWdlID0gZnVuY3Rpb24gdXBkYXRlUGFnZSgpIHtcbiAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICBsb2FkUGFnZSh1cmwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlVGV4dCkge1xuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdodG1sJyk7XG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9IHJlc3BvbnNlVGV4dDtcbiAgICB2YXIgb2xkUGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdlJyk7XG4gICAgdmFyIG5ld1BhZ2UgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnBhZ2UnKTtcbiAgICB2YXIgbmV3VGl0bGUgPSBjb250YWluZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RpdGxlJylbMF0udGV4dENvbnRlbnQ7XG4gICAgdmFyIG5ld0Rlc2MgPSBjb250YWluZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21ldGEnKVsnZGVzY3JpcHRpb24nXS5jb250ZW50O1xuICAgIGNvbnNvbGUubG9nKG9sZFBhZ2UpO1xuICAgIG9sZFBhZ2UucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3UGFnZSwgb2xkUGFnZSk7XG4gICAgZG9jdW1lbnQudGl0bGUgPSBuZXdUaXRsZTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWV0YScpWydkZXNjcmlwdGlvbiddLmNvbnRlbnQgPSBuZXdEZXNjO1xuICAgICgwLCBfdXRpbHMuZmFkZUluKShuZXdQYWdlKTtcbiAgICBydW5OZXdGdW5jdGlvbnMoKTtcbiAgfSk7XG59O1xuXG4vLyBmZXRjaCArIGxvYWQgbmV3IHVybCArIGNhY2hlIG5ldyBjb250ZW50XG52YXIgY2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGxvYWRQYWdlKHVybCkge1xuICBpZiAoY2FjaGVbdXJsXSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2FjaGVbdXJsXSk7XG4gIH1cbiAgcmV0dXJuIGZldGNoKHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgIGNhY2hlW3VybF0gPSByZXNwb25zZS50ZXh0KCk7XG4gICAgICByZXR1cm4gY2FjaGVbdXJsXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ25ldHdvcmsgcmVzcG9uc2Ugd2FzIG5vdCBvay4nKTtcbiAgICB9XG4gIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICByZXR1cm4gY29uc29sZS5sb2coJ3RoZXJlIGhhcyBiZWVuIGFuIGVycm9yIHJlcXVlc3RpbmcgKCcgKyB1cmwgKyAnKTogJyArIGVyci5tZXNzYWdlKTtcbiAgfSk7XG59XG5cbi8vIHVwZGF0ZSBwYWdlIGFueXRpbWUgaGlzdG9yeSBhcGkgaXMgY2hhbmdlZFxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgdXBkYXRlUGFnZSk7XG5cbn0se1wiLi9hYm91dFwiOjEsXCIuL2xhbmRpbmdcIjoyLFwiLi9wcm9qZWN0c1wiOjQsXCIuL3V0aWxzXCI6NixcImVzNi1wcm9taXNlXCI6NyxcImlzb21vcnBoaWMtZmV0Y2hcIjo4fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vLyB0aW1pbmcgZnVuY3Rpb25zIFsgZnJvbSBnaXRodWIgLS0gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ3JlLzE2NTAyOTQgXVxudmFyIGxpbmVhciA9IGZ1bmN0aW9uIGxpbmVhcih0KSB7XG4gIHJldHVybiB0O1xufTtcbnZhciBlYXNlSW5RdWFkID0gZnVuY3Rpb24gZWFzZUluUXVhZCh0KSB7XG4gIHJldHVybiB0ICogdDtcbn07XG52YXIgZWFzZU91dFF1YWQgPSBmdW5jdGlvbiBlYXNlT3V0UXVhZCh0KSB7XG4gIHJldHVybiB0ICogKDIgLSB0KTtcbn07XG52YXIgZWFzZUluT3V0UXVhZCA9IGZ1bmN0aW9uIGVhc2VJbk91dFF1YWQodCkge1xuICByZXR1cm4gdCA8IC41ID8gMiAqIHQgKiB0IDogLTEgKyAoNCAtIDIgKiB0KSAqIHQ7XG59O1xudmFyIGVhc2VJbkN1YmljID0gZnVuY3Rpb24gZWFzZUluQ3ViaWModCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufTtcbnZhciBlYXNlT3V0Q3ViaWMgPSBmdW5jdGlvbiBlYXNlT3V0Q3ViaWModCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufTtcbnZhciBlYXNlSW5PdXRDdWJpYyA9IGZ1bmN0aW9uIGVhc2VJbk91dEN1YmljKHQpIHtcbiAgcmV0dXJuIHQgPCAuNSA/IDQgKiB0ICogdCAqIHQgOiAodCAtIDEpICogKDIgKiB0IC0gMikgKiAoMiAqIHQgLSAyKSArIDE7XG59O1xudmFyIGVhc2VJblF1YXJ0ID0gZnVuY3Rpb24gZWFzZUluUXVhcnQodCkge1xuICByZXR1cm4gdCAqIHQgKiB0ICogdDtcbn07XG52YXIgZWFzZU91dFF1YXJ0ID0gZnVuY3Rpb24gZWFzZU91dFF1YXJ0KHQpIHtcbiAgcmV0dXJuIDEgLSAtLXQgKiB0ICogdCAqIHQ7XG59O1xudmFyIGVhc2VJbk91dFF1YXJ0ID0gZnVuY3Rpb24gZWFzZUluT3V0UXVhcnQodCkge1xuICByZXR1cm4gdCA8IC41ID8gOCAqIHQgKiB0ICogdCAqIHQgOiAxIC0gOCAqIC0tdCAqIHQgKiB0ICogdDtcbn07XG5cbi8vIHNjcm9sbC10by10b3Agb2YgZWxlbWVudC5cbnZhciBzY3JvbGxUb1RvcCA9IGV4cG9ydHMuc2Nyb2xsVG9Ub3AgPSBmdW5jdGlvbiBzY3JvbGxUb1RvcChlbCkge1xuICB2YXIgZHVyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDEyMDA7XG5cbiAgdmFyIGJvdHRvbSA9IGVsLnNjcm9sbEhlaWdodDtcbiAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgdmFyIHNjcm9sbCA9IGZ1bmN0aW9uIHNjcm9sbCgpIHtcbiAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgdGltZSA9IChub3cgLSBzdGFydCkgLyBkdXJhdGlvbjtcbiAgICB2YXIgZWFzaW5nID0gZWFzZU91dFF1YXJ0KHRpbWUpO1xuICAgIGVsLnNjcm9sbFRvcCA9IGVhc2luZyAqICgwIC0gYm90dG9tKSArIGJvdHRvbTtcbiAgICBpZiAoZWwuc2Nyb2xsVG9wID09PSAwKSByZXR1cm47XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHNjcm9sbCk7XG4gIH07XG4gIHNjcm9sbCgpO1xufTtcblxuLy8gZmFkZS1pbiBlbGVtZW50XG52YXIgZmFkZUluID0gZXhwb3J0cy5mYWRlSW4gPSBmdW5jdGlvbiBmYWRlSW4oZWwpIHtcbiAgdmFyIGR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxMjAwO1xuXG4gIGVsLnN0eWxlLm9wYWNpdHkgPSAwO1xuICB2YXIgYm90dG9tID0gMTtcbiAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgdmFyIGZhZGUgPSBmdW5jdGlvbiBmYWRlKCkge1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIHZhciB0aW1lID0gKG5vdyAtIHN0YXJ0KSAvIGR1cmF0aW9uO1xuICAgIHZhciBlYXNpbmcgPSBlYXNlSW5RdWFydCh0aW1lKTtcbiAgICBlbC5zdHlsZS5vcGFjaXR5ID0gZWFzaW5nO1xuICAgIGlmIChlbC5zdHlsZS5vcGFjaXR5ID4gMSkge1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmYWRlKTtcbiAgfTtcbiAgZmFkZSgpO1xufTtcblxuLy8gZmFkZS1vdXQgZWxlbWVudFxudmFyIGZhZGVPdXQgPSBleHBvcnRzLmZhZGVPdXQgPSBmdW5jdGlvbiBmYWRlT3V0KGVsKSB7XG4gIHZhciBkdXJhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTIwMDtcblxuICBlbC5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgdmFyIGZhZGUgPSBmdW5jdGlvbiBmYWRlKCkge1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIHZhciB0aW1lID0gKG5vdyAtIHN0YXJ0KSAvIGR1cmF0aW9uO1xuICAgIHZhciBlYXNpbmcgPSBlYXNlT3V0UXVhcnQodGltZSk7XG4gICAgZWwuc3R5bGUub3BhY2l0eSA9IDEgLSBlYXNpbmc7XG4gICAgaWYgKGVsLnN0eWxlLm9wYWNpdHkgPCAwKSB7XG4gICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZhZGUpO1xuICB9O1xuICBmYWRlKCk7XG59O1xuXG52YXIgZmluZEFyZWEgPSBleHBvcnRzLmZpbmRBcmVhID0gZnVuY3Rpb24gZmluZEFyZWEoKSB7XG4gIGNvbnNvbGUubG9nKCdjYWxsZWQnKTtcbiAgdmFyIGNvZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtcGl4ZWxzJyk7XG4gIHZhciBwaXhlbHMgPSBmdW5jdGlvbiBwaXhlbHMoKSB7XG4gICAgaWYgKGNvZGUgJiYgY29kZS50ZXh0Q29udGVudCAhPT0gbnVsbCkge1xuICAgICAgdmFyIGFyZWEgPSB3aW5kb3cuaW5uZXJXaWR0aCAqIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIGNvZGUudGV4dENvbnRlbnQgPSBhcmVhLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgfVxuICB9O1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocGl4ZWxzKTtcbn07XG5cbn0se31dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4vKiFcbiAqIEBvdmVydmlldyBlczYtcHJvbWlzZSAtIGEgdGlueSBpbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlcy9BKy5cbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE0IFllaHVkYSBLYXR6LCBUb20gRGFsZSwgU3RlZmFuIFBlbm5lciBhbmQgY29udHJpYnV0b3JzIChDb252ZXJzaW9uIHRvIEVTNiBBUEkgYnkgSmFrZSBBcmNoaWJhbGQpXG4gKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXG4gKiAgICAgICAgICAgIFNlZSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc3RlZmFucGVubmVyL2VzNi1wcm9taXNlL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIDQuMS4wXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLkVTNlByb21pc2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5cbnZhciBfaXNBcnJheSA9IHVuZGVmaW5lZDtcbmlmICghQXJyYXkuaXNBcnJheSkge1xuICBfaXNBcnJheSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcbn0gZWxzZSB7XG4gIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbn1cblxudmFyIGlzQXJyYXkgPSBfaXNBcnJheTtcblxudmFyIGxlbiA9IDA7XG52YXIgdmVydHhOZXh0ID0gdW5kZWZpbmVkO1xudmFyIGN1c3RvbVNjaGVkdWxlckZuID0gdW5kZWZpbmVkO1xuXG52YXIgYXNhcCA9IGZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGFyZykge1xuICBxdWV1ZVtsZW5dID0gY2FsbGJhY2s7XG4gIHF1ZXVlW2xlbiArIDFdID0gYXJnO1xuICBsZW4gKz0gMjtcbiAgaWYgKGxlbiA9PT0gMikge1xuICAgIC8vIElmIGxlbiBpcyAyLCB0aGF0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byBzY2hlZHVsZSBhbiBhc3luYyBmbHVzaC5cbiAgICAvLyBJZiBhZGRpdGlvbmFsIGNhbGxiYWNrcyBhcmUgcXVldWVkIGJlZm9yZSB0aGUgcXVldWUgaXMgZmx1c2hlZCwgdGhleVxuICAgIC8vIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IHRoaXMgZmx1c2ggdGhhdCB3ZSBhcmUgc2NoZWR1bGluZy5cbiAgICBpZiAoY3VzdG9tU2NoZWR1bGVyRm4pIHtcbiAgICAgIGN1c3RvbVNjaGVkdWxlckZuKGZsdXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2NoZWR1bGVyKHNjaGVkdWxlRm4pIHtcbiAgY3VzdG9tU2NoZWR1bGVyRm4gPSBzY2hlZHVsZUZuO1xufVxuXG5mdW5jdGlvbiBzZXRBc2FwKGFzYXBGbikge1xuICBhc2FwID0gYXNhcEZuO1xufVxuXG52YXIgYnJvd3NlcldpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdW5kZWZpbmVkO1xudmFyIGJyb3dzZXJHbG9iYWwgPSBicm93c2VyV2luZG93IHx8IHt9O1xudmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBpc05vZGUgPSB0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICh7fSkudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xuXG4vLyB0ZXN0IGZvciB3ZWIgd29ya2VyIGJ1dCBub3QgaW4gSUUxMFxudmFyIGlzV29ya2VyID0gdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgaW1wb3J0U2NyaXB0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJztcblxuLy8gbm9kZVxuZnVuY3Rpb24gdXNlTmV4dFRpY2soKSB7XG4gIC8vIG5vZGUgdmVyc2lvbiAwLjEwLnggZGlzcGxheXMgYSBkZXByZWNhdGlvbiB3YXJuaW5nIHdoZW4gbmV4dFRpY2sgaXMgdXNlZCByZWN1cnNpdmVseVxuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2N1am9qcy93aGVuL2lzc3Vlcy80MTAgZm9yIGRldGFpbHNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gIH07XG59XG5cbi8vIHZlcnR4XG5mdW5jdGlvbiB1c2VWZXJ0eFRpbWVyKCkge1xuICBpZiAodHlwZW9mIHZlcnR4TmV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmVydHhOZXh0KGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHVzZVNldFRpbWVvdXQoKTtcbn1cblxuZnVuY3Rpb24gdXNlTXV0YXRpb25PYnNlcnZlcigpIHtcbiAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpO1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBub2RlLmRhdGEgPSBpdGVyYXRpb25zID0gKytpdGVyYXRpb25zICUgMjtcbiAgfTtcbn1cblxuLy8gd2ViIHdvcmtlclxuZnVuY3Rpb24gdXNlTWVzc2FnZUNoYW5uZWwoKSB7XG4gIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZmx1c2g7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZVNldFRpbWVvdXQoKSB7XG4gIC8vIFN0b3JlIHNldFRpbWVvdXQgcmVmZXJlbmNlIHNvIGVzNi1wcm9taXNlIHdpbGwgYmUgdW5hZmZlY3RlZCBieVxuICAvLyBvdGhlciBjb2RlIG1vZGlmeWluZyBzZXRUaW1lb3V0IChsaWtlIHNpbm9uLnVzZUZha2VUaW1lcnMoKSlcbiAgdmFyIGdsb2JhbFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnbG9iYWxTZXRUaW1lb3V0KGZsdXNoLCAxKTtcbiAgfTtcbn1cblxudmFyIHF1ZXVlID0gbmV3IEFycmF5KDEwMDApO1xuZnVuY3Rpb24gZmx1c2goKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBxdWV1ZVtpXTtcbiAgICB2YXIgYXJnID0gcXVldWVbaSArIDFdO1xuXG4gICAgY2FsbGJhY2soYXJnKTtcblxuICAgIHF1ZXVlW2ldID0gdW5kZWZpbmVkO1xuICAgIHF1ZXVlW2kgKyAxXSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIGF0dGVtcHRWZXJ0eCgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgciA9IHJlcXVpcmU7XG4gICAgdmFyIHZlcnR4ID0gcigndmVydHgnKTtcbiAgICB2ZXJ0eE5leHQgPSB2ZXJ0eC5ydW5Pbkxvb3AgfHwgdmVydHgucnVuT25Db250ZXh0O1xuICAgIHJldHVybiB1c2VWZXJ0eFRpbWVyKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xuICB9XG59XG5cbnZhciBzY2hlZHVsZUZsdXNoID0gdW5kZWZpbmVkO1xuLy8gRGVjaWRlIHdoYXQgYXN5bmMgbWV0aG9kIHRvIHVzZSB0byB0cmlnZ2VyaW5nIHByb2Nlc3Npbmcgb2YgcXVldWVkIGNhbGxiYWNrczpcbmlmIChpc05vZGUpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU5leHRUaWNrKCk7XG59IGVsc2UgaWYgKEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNdXRhdGlvbk9ic2VydmVyKCk7XG59IGVsc2UgaWYgKGlzV29ya2VyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNZXNzYWdlQ2hhbm5lbCgpO1xufSBlbHNlIGlmIChicm93c2VyV2luZG93ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IGF0dGVtcHRWZXJ0eCgpO1xufSBlbHNlIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZVNldFRpbWVvdXQoKTtcbn1cblxuZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblxuICB2YXIgcGFyZW50ID0gdGhpcztcblxuICB2YXIgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihub29wKTtcblxuICBpZiAoY2hpbGRbUFJPTUlTRV9JRF0gPT09IHVuZGVmaW5lZCkge1xuICAgIG1ha2VQcm9taXNlKGNoaWxkKTtcbiAgfVxuXG4gIHZhciBfc3RhdGUgPSBwYXJlbnQuX3N0YXRlO1xuXG4gIGlmIChfc3RhdGUpIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNhbGxiYWNrID0gX2FyZ3VtZW50c1tfc3RhdGUgLSAxXTtcbiAgICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaW52b2tlQ2FsbGJhY2soX3N0YXRlLCBjaGlsZCwgY2FsbGJhY2ssIHBhcmVudC5fcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH0pKCk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZDtcbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlc29sdmVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgcmVzb2x2ZWQgd2l0aCB0aGVcbiAgcGFzc2VkIGB2YWx1ZWAuIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICByZXNvbHZlKDEpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgxKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlc29sdmVcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gdmFsdWUgdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGhcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSBmdWxmaWxsZWQgd2l0aCB0aGUgZ2l2ZW5cbiAgYHZhbHVlYFxuKi9cbmZ1bmN0aW9uIHJlc29sdmUob2JqZWN0KSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuXG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICBfcmVzb2x2ZShwcm9taXNlLCBvYmplY3QpO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxudmFyIFBST01JU0VfSUQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMTYpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIFBFTkRJTkcgPSB2b2lkIDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG5cbnZhciBHRVRfVEhFTl9FUlJPUiA9IG5ldyBFcnJvck9iamVjdCgpO1xuXG5mdW5jdGlvbiBzZWxmRnVsZmlsbG1lbnQoKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IGNhbm5vdCByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKTtcbn1cblxuZnVuY3Rpb24gY2Fubm90UmV0dXJuT3duKCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcignQSBwcm9taXNlcyBjYWxsYmFjayBjYW5ub3QgcmV0dXJuIHRoYXQgc2FtZSBwcm9taXNlLicpO1xufVxuXG5mdW5jdGlvbiBnZXRUaGVuKHByb21pc2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIEdFVF9USEVOX0VSUk9SLmVycm9yID0gZXJyb3I7XG4gICAgcmV0dXJuIEdFVF9USEVOX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyeVRoZW4odGhlbiwgdmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcikge1xuICB0cnkge1xuICAgIHRoZW4uY2FsbCh2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSwgdGhlbikge1xuICBhc2FwKGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgdmFyIHNlYWxlZCA9IGZhbHNlO1xuICAgIHZhciBlcnJvciA9IHRyeVRoZW4odGhlbiwgdGhlbmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgaWYgKHRoZW5hYmxlICE9PSB2YWx1ZSkge1xuICAgICAgICBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBpZiAoc2VhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlYWxlZCA9IHRydWU7XG5cbiAgICAgIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9LCAnU2V0dGxlOiAnICsgKHByb21pc2UuX2xhYmVsIHx8ICcgdW5rbm93biBwcm9taXNlJykpO1xuXG4gICAgaWYgKCFzZWFsZWQgJiYgZXJyb3IpIHtcbiAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9XG4gIH0sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSkge1xuICBpZiAodGhlbmFibGUuX3N0YXRlID09PSBGVUxGSUxMRUQpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2UgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICBfcmVqZWN0KHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZSh0aGVuYWJsZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJCkge1xuICBpZiAobWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3RvciA9PT0gcHJvbWlzZS5jb25zdHJ1Y3RvciAmJiB0aGVuJCQgPT09IHRoZW4gJiYgbWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3Rvci5yZXNvbHZlID09PSByZXNvbHZlKSB7XG4gICAgaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoZW4kJCA9PT0gR0VUX1RIRU5fRVJST1IpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgR0VUX1RIRU5fRVJST1IuZXJyb3IpO1xuICAgICAgR0VUX1RIRU5fRVJST1IuZXJyb3IgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAodGhlbiQkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoZW4kJCkpIHtcbiAgICAgIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlLCB0aGVuJCQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICBfcmVqZWN0KHByb21pc2UsIHNlbGZGdWxmaWxsbWVudCgpKTtcbiAgfSBlbHNlIGlmIChvYmplY3RPckZ1bmN0aW9uKHZhbHVlKSkge1xuICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgdmFsdWUsIGdldFRoZW4odmFsdWUpKTtcbiAgfSBlbHNlIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoUmVqZWN0aW9uKHByb21pc2UpIHtcbiAgaWYgKHByb21pc2UuX29uZXJyb3IpIHtcbiAgICBwcm9taXNlLl9vbmVycm9yKHByb21pc2UuX3Jlc3VsdCk7XG4gIH1cblxuICBwdWJsaXNoKHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBmdWxmaWxsKHByb21pc2UsIHZhbHVlKSB7XG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb21pc2UuX3Jlc3VsdCA9IHZhbHVlO1xuICBwcm9taXNlLl9zdGF0ZSA9IEZVTEZJTExFRDtcblxuICBpZiAocHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgYXNhcChwdWJsaXNoLCBwcm9taXNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvbWlzZS5fc3RhdGUgPSBSRUpFQ1RFRDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gcmVhc29uO1xuXG4gIGFzYXAocHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX3N1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgdmFyIGxlbmd0aCA9IF9zdWJzY3JpYmVycy5sZW5ndGg7XG5cbiAgcGFyZW50Ll9vbmVycm9yID0gbnVsbDtcblxuICBfc3Vic2NyaWJlcnNbbGVuZ3RoXSA9IGNoaWxkO1xuICBfc3Vic2NyaWJlcnNbbGVuZ3RoICsgRlVMRklMTEVEXSA9IG9uRnVsZmlsbG1lbnQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBSRUpFQ1RFRF0gPSBvblJlamVjdGlvbjtcblxuICBpZiAobGVuZ3RoID09PSAwICYmIHBhcmVudC5fc3RhdGUpIHtcbiAgICBhc2FwKHB1Ymxpc2gsIHBhcmVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaChwcm9taXNlKSB7XG4gIHZhciBzdWJzY3JpYmVycyA9IHByb21pc2UuX3N1YnNjcmliZXJzO1xuICB2YXIgc2V0dGxlZCA9IHByb21pc2UuX3N0YXRlO1xuXG4gIGlmIChzdWJzY3JpYmVycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY2hpbGQgPSB1bmRlZmluZWQsXG4gICAgICBjYWxsYmFjayA9IHVuZGVmaW5lZCxcbiAgICAgIGRldGFpbCA9IHByb21pc2UuX3Jlc3VsdDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNjcmliZXJzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgY2hpbGQgPSBzdWJzY3JpYmVyc1tpXTtcbiAgICBjYWxsYmFjayA9IHN1YnNjcmliZXJzW2kgKyBzZXR0bGVkXTtcblxuICAgIGlmIChjaGlsZCkge1xuICAgICAgaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgY2hpbGQsIGNhbGxiYWNrLCBkZXRhaWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayhkZXRhaWwpO1xuICAgIH1cbiAgfVxuXG4gIHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCA9IDA7XG59XG5cbmZ1bmN0aW9uIEVycm9yT2JqZWN0KCkge1xuICB0aGlzLmVycm9yID0gbnVsbDtcbn1cblxudmFyIFRSWV9DQVRDSF9FUlJPUiA9IG5ldyBFcnJvck9iamVjdCgpO1xuXG5mdW5jdGlvbiB0cnlDYXRjaChjYWxsYmFjaywgZGV0YWlsKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKGRldGFpbCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBUUllfQ0FUQ0hfRVJST1IuZXJyb3IgPSBlO1xuICAgIHJldHVybiBUUllfQ0FUQ0hfRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgcHJvbWlzZSwgY2FsbGJhY2ssIGRldGFpbCkge1xuICB2YXIgaGFzQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKGNhbGxiYWNrKSxcbiAgICAgIHZhbHVlID0gdW5kZWZpbmVkLFxuICAgICAgZXJyb3IgPSB1bmRlZmluZWQsXG4gICAgICBzdWNjZWVkZWQgPSB1bmRlZmluZWQsXG4gICAgICBmYWlsZWQgPSB1bmRlZmluZWQ7XG5cbiAgaWYgKGhhc0NhbGxiYWNrKSB7XG4gICAgdmFsdWUgPSB0cnlDYXRjaChjYWxsYmFjaywgZGV0YWlsKTtcblxuICAgIGlmICh2YWx1ZSA9PT0gVFJZX0NBVENIX0VSUk9SKSB7XG4gICAgICBmYWlsZWQgPSB0cnVlO1xuICAgICAgZXJyb3IgPSB2YWx1ZS5lcnJvcjtcbiAgICAgIHZhbHVlLmVycm9yID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGRldGFpbDtcbiAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgLy8gbm9vcFxuICB9IGVsc2UgaWYgKGhhc0NhbGxiYWNrICYmIHN1Y2NlZWRlZCkge1xuICAgICAgX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoZmFpbGVkKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IEZVTEZJTExFRCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBSRUpFQ1RFRCkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplUHJvbWlzZShwcm9taXNlLCByZXNvbHZlcikge1xuICB0cnkge1xuICAgIHJlc29sdmVyKGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHZhbHVlKSB7XG4gICAgICBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShyZWFzb24pIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIF9yZWplY3QocHJvbWlzZSwgZSk7XG4gIH1cbn1cblxudmFyIGlkID0gMDtcbmZ1bmN0aW9uIG5leHRJZCgpIHtcbiAgcmV0dXJuIGlkKys7XG59XG5cbmZ1bmN0aW9uIG1ha2VQcm9taXNlKHByb21pc2UpIHtcbiAgcHJvbWlzZVtQUk9NSVNFX0lEXSA9IGlkKys7XG4gIHByb21pc2UuX3N0YXRlID0gdW5kZWZpbmVkO1xuICBwcm9taXNlLl9yZXN1bHQgPSB1bmRlZmluZWQ7XG4gIHByb21pc2UuX3N1YnNjcmliZXJzID0gW107XG59XG5cbmZ1bmN0aW9uIEVudW1lcmF0b3IoQ29uc3RydWN0b3IsIGlucHV0KSB7XG4gIHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgdGhpcy5wcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGlmICghdGhpcy5wcm9taXNlW1BST01JU0VfSURdKSB7XG4gICAgbWFrZVByb21pc2UodGhpcy5wcm9taXNlKTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5sZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgdGhpcy5fcmVtYWluaW5nID0gaW5wdXQubGVuZ3RoO1xuXG4gICAgdGhpcy5fcmVzdWx0ID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGggfHwgMDtcbiAgICAgIHRoaXMuX2VudW1lcmF0ZSgpO1xuICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICBmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgX3JlamVjdCh0aGlzLnByb21pc2UsIHZhbGlkYXRpb25FcnJvcigpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0aW9uRXJyb3IoKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ0FycmF5IE1ldGhvZHMgbXVzdCBiZSBwcm92aWRlZCBhbiBBcnJheScpO1xufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX2VudW1lcmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICB2YXIgX2lucHV0ID0gdGhpcy5faW5wdXQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IHRoaXMuX3N0YXRlID09PSBQRU5ESU5HICYmIGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHRoaXMuX2VhY2hFbnRyeShfaW5wdXRbaV0sIGkpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fZWFjaEVudHJ5ID0gZnVuY3Rpb24gKGVudHJ5LCBpKSB7XG4gIHZhciBjID0gdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvcjtcbiAgdmFyIHJlc29sdmUkJCA9IGMucmVzb2x2ZTtcblxuICBpZiAocmVzb2x2ZSQkID09PSByZXNvbHZlKSB7XG4gICAgdmFyIF90aGVuID0gZ2V0VGhlbihlbnRyeSk7XG5cbiAgICBpZiAoX3RoZW4gPT09IHRoZW4gJiYgZW50cnkuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgICB0aGlzLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdGhlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fcmVtYWluaW5nLS07XG4gICAgICB0aGlzLl9yZXN1bHRbaV0gPSBlbnRyeTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFByb21pc2UpIHtcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IGMobm9vcCk7XG4gICAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIGVudHJ5LCBfdGhlbik7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQocHJvbWlzZSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChuZXcgYyhmdW5jdGlvbiAocmVzb2x2ZSQkKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlJCQoZW50cnkpO1xuICAgICAgfSksIGkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl93aWxsU2V0dGxlQXQocmVzb2x2ZSQkKGVudHJ5KSwgaSk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9zZXR0bGVkQXQgPSBmdW5jdGlvbiAoc3RhdGUsIGksIHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcy5wcm9taXNlO1xuXG4gIGlmIChwcm9taXNlLl9zdGF0ZSA9PT0gUEVORElORykge1xuICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuXG4gICAgaWYgKHN0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl93aWxsU2V0dGxlQXQgPSBmdW5jdGlvbiAocHJvbWlzZSwgaSkge1xuICB2YXIgZW51bWVyYXRvciA9IHRoaXM7XG5cbiAgc3Vic2NyaWJlKHByb21pc2UsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChGVUxGSUxMRUQsIGksIHZhbHVlKTtcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoUkVKRUNURUQsIGksIHJlYXNvbik7XG4gIH0pO1xufTtcblxuLyoqXG4gIGBQcm9taXNlLmFsbGAgYWNjZXB0cyBhbiBhcnJheSBvZiBwcm9taXNlcywgYW5kIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaFxuICBpcyBmdWxmaWxsZWQgd2l0aCBhbiBhcnJheSBvZiBmdWxmaWxsbWVudCB2YWx1ZXMgZm9yIHRoZSBwYXNzZWQgcHJvbWlzZXMsIG9yXG4gIHJlamVjdGVkIHdpdGggdGhlIHJlYXNvbiBvZiB0aGUgZmlyc3QgcGFzc2VkIHByb21pc2UgdG8gYmUgcmVqZWN0ZWQuIEl0IGNhc3RzIGFsbFxuICBlbGVtZW50cyBvZiB0aGUgcGFzc2VkIGl0ZXJhYmxlIHRvIHByb21pc2VzIGFzIGl0IHJ1bnMgdGhpcyBhbGdvcml0aG0uXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IHJlc29sdmUoMik7XG4gIGxldCBwcm9taXNlMyA9IHJlc29sdmUoMyk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBUaGUgYXJyYXkgaGVyZSB3b3VsZCBiZSBbIDEsIDIsIDMgXTtcbiAgfSk7XG4gIGBgYFxuXG4gIElmIGFueSBvZiB0aGUgYHByb21pc2VzYCBnaXZlbiB0byBgYWxsYCBhcmUgcmVqZWN0ZWQsIHRoZSBmaXJzdCBwcm9taXNlXG4gIHRoYXQgaXMgcmVqZWN0ZWQgd2lsbCBiZSBnaXZlbiBhcyBhbiBhcmd1bWVudCB0byB0aGUgcmV0dXJuZWQgcHJvbWlzZXMnc1xuICByZWplY3Rpb24gaGFuZGxlci4gRm9yIGV4YW1wbGU6XG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IHJlamVjdChuZXcgRXJyb3IoXCIyXCIpKTtcbiAgbGV0IHByb21pc2UzID0gcmVqZWN0KG5ldyBFcnJvcihcIjNcIikpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnMgYmVjYXVzZSB0aGVyZSBhcmUgcmVqZWN0ZWQgcHJvbWlzZXMhXG4gIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgLy8gZXJyb3IubWVzc2FnZSA9PT0gXCIyXCJcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgYWxsXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBcnJheX0gZW50cmllcyBhcnJheSBvZiBwcm9taXNlc1xuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBsYWJlbGluZyB0aGUgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIGBwcm9taXNlc2AgaGF2ZSBiZWVuXG4gIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQgaWYgYW55IG9mIHRoZW0gYmVjb21lIHJlamVjdGVkLlxuICBAc3RhdGljXG4qL1xuZnVuY3Rpb24gYWxsKGVudHJpZXMpIHtcbiAgcmV0dXJuIG5ldyBFbnVtZXJhdG9yKHRoaXMsIGVudHJpZXMpLnByb21pc2U7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yYWNlYCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2ggaXMgc2V0dGxlZCBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlXG4gIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIHNldHRsZS5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMicpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIHJlc3VsdCA9PT0gJ3Byb21pc2UgMicgYmVjYXVzZSBpdCB3YXMgcmVzb2x2ZWQgYmVmb3JlIHByb21pc2UxXG4gICAgLy8gd2FzIHJlc29sdmVkLlxuICB9KTtcbiAgYGBgXG5cbiAgYFByb21pc2UucmFjZWAgaXMgZGV0ZXJtaW5pc3RpYyBpbiB0aGF0IG9ubHkgdGhlIHN0YXRlIG9mIHRoZSBmaXJzdFxuICBzZXR0bGVkIHByb21pc2UgbWF0dGVycy4gRm9yIGV4YW1wbGUsIGV2ZW4gaWYgb3RoZXIgcHJvbWlzZXMgZ2l2ZW4gdG8gdGhlXG4gIGBwcm9taXNlc2AgYXJyYXkgYXJndW1lbnQgYXJlIHJlc29sdmVkLCBidXQgdGhlIGZpcnN0IHNldHRsZWQgcHJvbWlzZSBoYXNcbiAgYmVjb21lIHJlamVjdGVkIGJlZm9yZSB0aGUgb3RoZXIgcHJvbWlzZXMgYmVjYW1lIGZ1bGZpbGxlZCwgdGhlIHJldHVybmVkXG4gIHByb21pc2Ugd2lsbCBiZWNvbWUgcmVqZWN0ZWQ6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMScpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuXG4gIGxldCBwcm9taXNlMiA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcigncHJvbWlzZSAyJykpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgcHJvbWlzZSAyIGJlY2FtZSByZWplY3RlZCBiZWZvcmVcbiAgICAvLyBwcm9taXNlIDEgYmVjYW1lIGZ1bGZpbGxlZFxuICB9KTtcbiAgYGBgXG5cbiAgQW4gZXhhbXBsZSByZWFsLXdvcmxkIHVzZSBjYXNlIGlzIGltcGxlbWVudGluZyB0aW1lb3V0czpcblxuICBgYGBqYXZhc2NyaXB0XG4gIFByb21pc2UucmFjZShbYWpheCgnZm9vLmpzb24nKSwgdGltZW91dCg1MDAwKV0pXG4gIGBgYFxuXG4gIEBtZXRob2QgcmFjZVxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IHByb21pc2VzIGFycmF5IG9mIHByb21pc2VzIHRvIG9ic2VydmVcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2Ugd2hpY2ggc2V0dGxlcyBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlIGZpcnN0IHBhc3NlZFxuICBwcm9taXNlIHRvIHNldHRsZS5cbiovXG5mdW5jdGlvbiByYWNlKGVudHJpZXMpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICBpZiAoIWlzQXJyYXkoZW50cmllcykpIHtcbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChfLCByZWplY3QpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLicpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBsZW5ndGggPSBlbnRyaWVzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgQ29uc3RydWN0b3IucmVzb2x2ZShlbnRyaWVzW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlamVjdGAgcmV0dXJucyBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgcGFzc2VkIGByZWFzb25gLlxuICBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZWplY3RcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gcmVhc29uIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBnaXZlbiBgcmVhc29uYC5cbiovXG5mdW5jdGlvbiByZWplY3QocmVhc29uKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBuZWVkc1Jlc29sdmVyKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG59XG5cbmZ1bmN0aW9uIG5lZWRzTmV3KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUHJvbWlzZSc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xufVxuXG4vKipcbiAgUHJvbWlzZSBvYmplY3RzIHJlcHJlc2VudCB0aGUgZXZlbnR1YWwgcmVzdWx0IG9mIGFuIGFzeW5jaHJvbm91cyBvcGVyYXRpb24uIFRoZVxuICBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLCB3aGljaFxuICByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZSByZWFzb25cbiAgd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG5cbiAgVGVybWlub2xvZ3lcbiAgLS0tLS0tLS0tLS1cblxuICAtIGBwcm9taXNlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gd2l0aCBhIGB0aGVuYCBtZXRob2Qgd2hvc2UgYmVoYXZpb3IgY29uZm9ybXMgdG8gdGhpcyBzcGVjaWZpY2F0aW9uLlxuICAtIGB0aGVuYWJsZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHRoYXQgZGVmaW5lcyBhIGB0aGVuYCBtZXRob2QuXG4gIC0gYHZhbHVlYCBpcyBhbnkgbGVnYWwgSmF2YVNjcmlwdCB2YWx1ZSAoaW5jbHVkaW5nIHVuZGVmaW5lZCwgYSB0aGVuYWJsZSwgb3IgYSBwcm9taXNlKS5cbiAgLSBgZXhjZXB0aW9uYCBpcyBhIHZhbHVlIHRoYXQgaXMgdGhyb3duIHVzaW5nIHRoZSB0aHJvdyBzdGF0ZW1lbnQuXG4gIC0gYHJlYXNvbmAgaXMgYSB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aHkgYSBwcm9taXNlIHdhcyByZWplY3RlZC5cbiAgLSBgc2V0dGxlZGAgdGhlIGZpbmFsIHJlc3Rpbmcgc3RhdGUgb2YgYSBwcm9taXNlLCBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQuXG5cbiAgQSBwcm9taXNlIGNhbiBiZSBpbiBvbmUgb2YgdGhyZWUgc3RhdGVzOiBwZW5kaW5nLCBmdWxmaWxsZWQsIG9yIHJlamVjdGVkLlxuXG4gIFByb21pc2VzIHRoYXQgYXJlIGZ1bGZpbGxlZCBoYXZlIGEgZnVsZmlsbG1lbnQgdmFsdWUgYW5kIGFyZSBpbiB0aGUgZnVsZmlsbGVkXG4gIHN0YXRlLiAgUHJvbWlzZXMgdGhhdCBhcmUgcmVqZWN0ZWQgaGF2ZSBhIHJlamVjdGlvbiByZWFzb24gYW5kIGFyZSBpbiB0aGVcbiAgcmVqZWN0ZWQgc3RhdGUuICBBIGZ1bGZpbGxtZW50IHZhbHVlIGlzIG5ldmVyIGEgdGhlbmFibGUuXG5cbiAgUHJvbWlzZXMgY2FuIGFsc28gYmUgc2FpZCB0byAqcmVzb2x2ZSogYSB2YWx1ZS4gIElmIHRoaXMgdmFsdWUgaXMgYWxzbyBhXG4gIHByb21pc2UsIHRoZW4gdGhlIG9yaWdpbmFsIHByb21pc2UncyBzZXR0bGVkIHN0YXRlIHdpbGwgbWF0Y2ggdGhlIHZhbHVlJ3NcbiAgc2V0dGxlZCBzdGF0ZS4gIFNvIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgcmVqZWN0cyB3aWxsXG4gIGl0c2VsZiByZWplY3QsIGFuZCBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdpbGxcbiAgaXRzZWxmIGZ1bGZpbGwuXG5cblxuICBCYXNpYyBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tXG5cbiAgYGBganNcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAvLyBvbiBzdWNjZXNzXG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG5cbiAgICAvLyBvbiBmYWlsdXJlXG4gICAgcmVqZWN0KHJlYXNvbik7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgQWR2YW5jZWQgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLS0tLVxuXG4gIFByb21pc2VzIHNoaW5lIHdoZW4gYWJzdHJhY3RpbmcgYXdheSBhc3luY2hyb25vdXMgaW50ZXJhY3Rpb25zIHN1Y2ggYXNcbiAgYFhNTEh0dHBSZXF1ZXN0YHMuXG5cbiAgYGBganNcbiAgZnVuY3Rpb24gZ2V0SlNPTih1cmwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gaGFuZGxlcjtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHhoci5zZW5kKCk7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHRoaXMuRE9ORSkge1xuICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICByZXNvbHZlKHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdnZXRKU09OOiBgJyArIHVybCArICdgIGZhaWxlZCB3aXRoIHN0YXR1czogWycgKyB0aGlzLnN0YXR1cyArICddJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEpTT04oJy9wb3N0cy5qc29uJykudGhlbihmdW5jdGlvbihqc29uKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBVbmxpa2UgY2FsbGJhY2tzLCBwcm9taXNlcyBhcmUgZ3JlYXQgY29tcG9zYWJsZSBwcmltaXRpdmVzLlxuXG4gIGBgYGpzXG4gIFByb21pc2UuYWxsKFtcbiAgICBnZXRKU09OKCcvcG9zdHMnKSxcbiAgICBnZXRKU09OKCcvY29tbWVudHMnKVxuICBdKS50aGVuKGZ1bmN0aW9uKHZhbHVlcyl7XG4gICAgdmFsdWVzWzBdIC8vID0+IHBvc3RzSlNPTlxuICAgIHZhbHVlc1sxXSAvLyA9PiBjb21tZW50c0pTT05cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0pO1xuICBgYGBcblxuICBAY2xhc3MgUHJvbWlzZVxuICBAcGFyYW0ge2Z1bmN0aW9ufSByZXNvbHZlclxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEBjb25zdHJ1Y3RvclxuKi9cbmZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIpIHtcbiAgdGhpc1tQUk9NSVNFX0lEXSA9IG5leHRJZCgpO1xuICB0aGlzLl9yZXN1bHQgPSB0aGlzLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcblxuICBpZiAobm9vcCAhPT0gcmVzb2x2ZXIpIHtcbiAgICB0eXBlb2YgcmVzb2x2ZXIgIT09ICdmdW5jdGlvbicgJiYgbmVlZHNSZXNvbHZlcigpO1xuICAgIHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlID8gaW5pdGlhbGl6ZVByb21pc2UodGhpcywgcmVzb2x2ZXIpIDogbmVlZHNOZXcoKTtcbiAgfVxufVxuXG5Qcm9taXNlLmFsbCA9IGFsbDtcblByb21pc2UucmFjZSA9IHJhY2U7XG5Qcm9taXNlLnJlc29sdmUgPSByZXNvbHZlO1xuUHJvbWlzZS5yZWplY3QgPSByZWplY3Q7XG5Qcm9taXNlLl9zZXRTY2hlZHVsZXIgPSBzZXRTY2hlZHVsZXI7XG5Qcm9taXNlLl9zZXRBc2FwID0gc2V0QXNhcDtcblByb21pc2UuX2FzYXAgPSBhc2FwO1xuXG5Qcm9taXNlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFByb21pc2UsXG5cbiAgLyoqXG4gICAgVGhlIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsXG4gICAgd2hpY2ggcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGVcbiAgICByZWFzb24gd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uKHVzZXIpe1xuICAgICAgLy8gdXNlciBpcyBhdmFpbGFibGVcbiAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gdXNlciBpcyB1bmF2YWlsYWJsZSwgYW5kIHlvdSBhcmUgZ2l2ZW4gdGhlIHJlYXNvbiB3aHlcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQ2hhaW5pbmdcbiAgICAtLS0tLS0tLVxuICBcbiAgICBUaGUgcmV0dXJuIHZhbHVlIG9mIGB0aGVuYCBpcyBpdHNlbGYgYSBwcm9taXNlLiAgVGhpcyBzZWNvbmQsICdkb3duc3RyZWFtJ1xuICAgIHByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmaXJzdCBwcm9taXNlJ3MgZnVsZmlsbG1lbnRcbiAgICBvciByZWplY3Rpb24gaGFuZGxlciwgb3IgcmVqZWN0ZWQgaWYgdGhlIGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiB1c2VyLm5hbWU7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuICdkZWZhdWx0IG5hbWUnO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHVzZXJOYW1lKSB7XG4gICAgICAvLyBJZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHVzZXJOYW1lYCB3aWxsIGJlIHRoZSB1c2VyJ3MgbmFtZSwgb3RoZXJ3aXNlIGl0XG4gICAgICAvLyB3aWxsIGJlIGAnZGVmYXVsdCBuYW1lJ2BcbiAgICB9KTtcbiAgXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jyk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBpZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHJlYXNvbmAgd2lsbCBiZSAnRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknLlxuICAgICAgLy8gSWYgYGZpbmRVc2VyYCByZWplY3RlZCwgYHJlYXNvbmAgd2lsbCBiZSAnYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScuXG4gICAgfSk7XG4gICAgYGBgXG4gICAgSWYgdGhlIGRvd25zdHJlYW0gcHJvbWlzZSBkb2VzIG5vdCBzcGVjaWZ5IGEgcmVqZWN0aW9uIGhhbmRsZXIsIHJlamVjdGlvbiByZWFzb25zIHdpbGwgYmUgcHJvcGFnYXRlZCBmdXJ0aGVyIGRvd25zdHJlYW0uXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgUGVkYWdvZ2ljYWxFeGNlcHRpb24oJ1Vwc3RyZWFtIGVycm9yJyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIFRoZSBgUGVkZ2Fnb2NpYWxFeGNlcHRpb25gIGlzIHByb3BhZ2F0ZWQgYWxsIHRoZSB3YXkgZG93biB0byBoZXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEFzc2ltaWxhdGlvblxuICAgIC0tLS0tLS0tLS0tLVxuICBcbiAgICBTb21ldGltZXMgdGhlIHZhbHVlIHlvdSB3YW50IHRvIHByb3BhZ2F0ZSB0byBhIGRvd25zdHJlYW0gcHJvbWlzZSBjYW4gb25seSBiZVxuICAgIHJldHJpZXZlZCBhc3luY2hyb25vdXNseS4gVGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmV0dXJuaW5nIGEgcHJvbWlzZSBpbiB0aGVcbiAgICBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gaGFuZGxlci4gVGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIHRoZW4gYmUgcGVuZGluZ1xuICAgIHVudGlsIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHNldHRsZWQuIFRoaXMgaXMgY2FsbGVkICphc3NpbWlsYXRpb24qLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAvLyBUaGUgdXNlcidzIGNvbW1lbnRzIGFyZSBub3cgYXZhaWxhYmxlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIElmIHRoZSBhc3NpbWxpYXRlZCBwcm9taXNlIHJlamVjdHMsIHRoZW4gdGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIGFsc28gcmVqZWN0LlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIGZ1bGZpbGxzLCB3ZSdsbCBoYXZlIHRoZSB2YWx1ZSBoZXJlXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCByZWplY3RzLCB3ZSdsbCBoYXZlIHRoZSByZWFzb24gaGVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBTaW1wbGUgRXhhbXBsZVxuICAgIC0tLS0tLS0tLS0tLS0tXG4gIFxuICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGxldCByZXN1bHQ7XG4gIFxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBmaW5kUmVzdWx0KCk7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9XG4gICAgYGBgXG4gIFxuICAgIEVycmJhY2sgRXhhbXBsZVxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRSZXN1bHQoZnVuY3Rpb24ocmVzdWx0LCBlcnIpe1xuICAgICAgaWYgKGVycikge1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFByb21pc2UgRXhhbXBsZTtcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGZpbmRSZXN1bHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQWR2YW5jZWQgRXhhbXBsZVxuICAgIC0tLS0tLS0tLS0tLS0tXG4gIFxuICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGxldCBhdXRob3IsIGJvb2tzO1xuICBcbiAgICB0cnkge1xuICAgICAgYXV0aG9yID0gZmluZEF1dGhvcigpO1xuICAgICAgYm9va3MgID0gZmluZEJvb2tzQnlBdXRob3IoYXV0aG9yKTtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgRXJyYmFjayBFeGFtcGxlXG4gIFxuICAgIGBgYGpzXG4gIFxuICAgIGZ1bmN0aW9uIGZvdW5kQm9va3MoYm9va3MpIHtcbiAgXG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBmYWlsdXJlKHJlYXNvbikge1xuICBcbiAgICB9XG4gIFxuICAgIGZpbmRBdXRob3IoZnVuY3Rpb24oYXV0aG9yLCBlcnIpe1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZmluZEJvb29rc0J5QXV0aG9yKGF1dGhvciwgZnVuY3Rpb24oYm9va3MsIGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvdW5kQm9va3MoYm9va3MpO1xuICAgICAgICAgICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIGZhaWx1cmUocmVhc29uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH1cbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgUHJvbWlzZSBFeGFtcGxlO1xuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgZmluZEF1dGhvcigpLlxuICAgICAgdGhlbihmaW5kQm9va3NCeUF1dGhvcikuXG4gICAgICB0aGVuKGZ1bmN0aW9uKGJvb2tzKXtcbiAgICAgICAgLy8gZm91bmQgYm9va3NcbiAgICB9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQG1ldGhvZCB0aGVuXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25GdWxmaWxsZWRcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGVkXG4gICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG4gIHRoZW46IHRoZW4sXG5cbiAgLyoqXG4gICAgYGNhdGNoYCBpcyBzaW1wbHkgc3VnYXIgZm9yIGB0aGVuKHVuZGVmaW5lZCwgb25SZWplY3Rpb24pYCB3aGljaCBtYWtlcyBpdCB0aGUgc2FtZVxuICAgIGFzIHRoZSBjYXRjaCBibG9jayBvZiBhIHRyeS9jYXRjaCBzdGF0ZW1lbnQuXG4gIFxuICAgIGBgYGpzXG4gICAgZnVuY3Rpb24gZmluZEF1dGhvcigpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZG4ndCBmaW5kIHRoYXQgYXV0aG9yJyk7XG4gICAgfVxuICBcbiAgICAvLyBzeW5jaHJvbm91c1xuICAgIHRyeSB7XG4gICAgICBmaW5kQXV0aG9yKCk7XG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfVxuICBcbiAgICAvLyBhc3luYyB3aXRoIHByb21pc2VzXG4gICAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIGNhdGNoXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3Rpb25cbiAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgJ2NhdGNoJzogZnVuY3Rpb24gX2NhdGNoKG9uUmVqZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGlvbik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICAgIHZhciBsb2NhbCA9IHVuZGVmaW5lZDtcblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsb2NhbCA9IGdsb2JhbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsb2NhbCA9IHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvY2FsID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2x5ZmlsbCBmYWlsZWQgYmVjYXVzZSBnbG9iYWwgb2JqZWN0IGlzIHVuYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBQID0gbG9jYWwuUHJvbWlzZTtcblxuICAgIGlmIChQKSB7XG4gICAgICAgIHZhciBwcm9taXNlVG9TdHJpbmcgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvbWlzZVRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFAucmVzb2x2ZSgpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gc2lsZW50bHkgaWdub3JlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb21pc2VUb1N0cmluZyA9PT0gJ1tvYmplY3QgUHJvbWlzZV0nICYmICFQLmNhc3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvY2FsLlByb21pc2UgPSBQcm9taXNlO1xufVxuXG4vLyBTdHJhbmdlIGNvbXBhdC4uXG5Qcm9taXNlLnBvbHlmaWxsID0gcG9seWZpbGw7XG5Qcm9taXNlLlByb21pc2UgPSBQcm9taXNlO1xuXG5yZXR1cm4gUHJvbWlzZTtcblxufSkpKTtcblxuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIl9wcm9jZXNzXCI6OX1dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gdGhlIHdoYXR3Zy1mZXRjaCBwb2x5ZmlsbCBpbnN0YWxscyB0aGUgZmV0Y2goKSBmdW5jdGlvblxuLy8gb24gdGhlIGdsb2JhbCBvYmplY3QgKHdpbmRvdyBvciBzZWxmKVxuLy9cbi8vIFJldHVybiB0aGF0IGFzIHRoZSBleHBvcnQgZm9yIHVzZSBpbiBXZWJwYWNrLCBCcm93c2VyaWZ5IGV0Yy5cbnJlcXVpcmUoJ3doYXR3Zy1mZXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBzZWxmLmZldGNoLmJpbmQoc2VsZik7XG5cbn0se1wid2hhdHdnLWZldGNoXCI6MTB9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cbn0se31dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbihzZWxmKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoc2VsZi5mZXRjaCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN1cHBvcnQgPSB7XG4gICAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICAgIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICAgIGJsb2I6ICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmICdCbG9iJyBpbiBzZWxmICYmIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgICBdXG5cbiAgICB2YXIgaXNEYXRhVmlldyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG4gICAgfVxuXG4gICAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID0gQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICAgIH1cbiAgICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5cXF5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbiAgZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXRlcmF0b3JcbiAgfVxuXG4gIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICAgIHRoaXMubWFwID0ge31cblxuICAgIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgICAgfSwgdGhpcylcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgICB9LCB0aGlzKVxuICAgIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgICB9LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gICAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlKycsJyt2YWx1ZSA6IHZhbHVlXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKG5hbWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHsgaXRlbXMucHVzaCh2YWx1ZSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgICAgfVxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICAgIH1cbiAgICByZXR1cm4gY2hhcnMuam9pbignJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICAgIGlmIChidWYuc2xpY2UpIHtcbiAgICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBCb2R5KCkge1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIEJvZHlJbml0IHR5cGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICAgIHJldHVybiAobWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEpID8gdXBjYXNlZCA6IG1ldGhvZFxuICB9XG5cbiAgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gICAgfVxuXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnb21pdCdcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gICAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keSlcbiAgfVxuXG4gIFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHsgYm9keTogdGhpcy5fYm9keUluaXQgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICAgIGJvZHkudHJpbSgpLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZm9ybVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgICByYXdIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gaGVhZGVyc1xuICB9XG5cbiAgQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9XG5cbiAgICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgICB0aGlzLnN0YXR1cyA9ICdzdGF0dXMnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1cyA6IDIwMFxuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICdPSydcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICAgIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxuICB9XG5cbiAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICAgIHVybDogdGhpcy51cmxcbiAgICB9KVxuICB9XG5cbiAgUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICAgIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICB2YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuICBSZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxuICB9XG5cbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVyc1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZVxuXG4gIHNlbGYuZmV0Y2ggPSBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfVxuXG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgfSlcblxuICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgICB9KVxuICB9XG4gIHNlbGYuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcyk7XG5cbn0se31dfSx7fSxbM10pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKaGNIQXZhbk12WVdKdmRYUXVhbk1pTENKaGNIQXZhbk12YkdGdVpHbHVaeTVxY3lJc0ltRndjQzlxY3k5dFlXbHVMbXB6SWl3aVlYQndMMnB6TDNCeWIycGxZM1J6TG1weklpd2lZWEJ3TDJwekwzTndZUzVxY3lJc0ltRndjQzlxY3k5MWRHbHNjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlsY3pZdGNISnZiV2x6WlM5a2FYTjBMMlZ6Tmkxd2NtOXRhWE5sTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJsemIyMXZjbkJvYVdNdFptVjBZMmd2Wm1WMFkyZ3RibkJ0TFdKeWIzZHpaWEpwWm5rdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdmNISnZZMlZ6Y3k5aWNtOTNjMlZ5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDNkb1lYUjNaeTFtWlhSamFDOW1aWFJqYUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHM3T3pzN08ydENRMFYzUWl4Wk96dEJRVVo0UWpzN1FVRkZaU3hUUVVGVExGbEJRVlFzUjBGQmQwSTdPMEZCUlhKRE8wRkJRMEU3UVVGRFFTeE5RVUZOTEZkQlFWY3NVMEZCVXl4aFFVRlVMRU5CUVhWQ0xITkNRVUYyUWl4RFFVRnFRanRCUVVOQkxGZEJRVk1zWjBKQlFWUXNRMEZCTUVJc1QwRkJNVUlzUlVGQmJVTXNXVUZCVnp0QlFVTTFReXcwUWtGQldTeExRVUZMTEZWQlFXcENPMEZCUTBRc1IwRkdSQ3hGUVVWSExFdEJSa2c3UVVGSFJEczdPenM3T3pzN2EwSkRVblZDTEdNN08wRkJSbmhDT3p0QlFVVmxMRk5CUVZNc1kwRkJWQ3hIUVVFd1FqczdRVUZGZGtNN1FVRkRRU3hUUVVGUExHZENRVUZRTEVOQlFYZENMRkZCUVhoQ08wRkJSVVE3T3pzN08wRkRVRVE3TzBGQlEwRTdPMEZCUlVFc1EwRkJReXhaUVVGWE96dEJRVVZXTzBGQlEwRXNUVUZCVFN4VFFVRlRMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeFJRVUYyUWl4RFFVRm1PMEZCUTBFc1RVRkJUU3hqUVVGakxGTkJRVk1zWVVGQlZDeERRVUYxUWl4dFFrRkJka0lzUTBGQmNFSTdRVUZEUVN4TlFVRk5MRTlCUVU4c1UwRkJVeXhoUVVGVUxFTkJRWFZDT3p0QlFVVndRenRCUVVaaExFZEJRV0lzUTBGSFFTeFRRVUZUTEZWQlFWUXNSMEZCYzBJN1FVRkRjRUlzVjBGQlR5eFRRVUZRTEVOQlFXbENMRTFCUVdwQ0xFTkJRWGRDTEZkQlFYaENPMEZCUTBRN1FVRkRSQ3hYUVVGVExGVkJRVlFzUTBGQmIwSXNTMEZCY0VJc1JVRkJNa0k3UVVGRGVrSXNVVUZCU1N4TlFVRk5MRTFCUVU0c1NVRkJaMElzVFVGQlRTeE5RVUZPTEVOQlFXRXNVVUZCWWl4TFFVRXdRaXhIUVVFNVF5eEZRVUZ0UkR0QlFVTnFSQ3haUVVGTkxHTkJRVTQ3UVVGRFFUdEJRVU5CTEZWQlFVa3NUVUZCVFN4TlFVRk9MRU5CUVdFc1VVRkJZaXhMUVVFd1FpeFBRVUZQTEZGQlFWQXNRMEZCWjBJc1VVRkJPVU1zUlVGQmQwUTdRVUZEZEVRc1owSkJRVkVzVTBGQlVpeERRVUZyUWl4SlFVRnNRaXhGUVVGM1FpeEpRVUY0UWl4RlFVRTRRaXhOUVVGTkxFMUJRVTRzUTBGQllTeFJRVUV6UXp0QlFVTkJPMEZCUTBRN1FVRkRSanRCUVVOR096dEJRVVZFTzBGQlEwRTdRVUZEUVN4alFVRlpMR2RDUVVGYUxFTkJRVFpDTEU5QlFUZENMRVZCUVhORExGVkJRWFJETzBGQlEwRXNUMEZCU3l4blFrRkJUQ3hEUVVGelFpeFBRVUYwUWl4RlFVRXJRaXhWUVVFdlFqdEJRVVZFTEVOQk0wSkVPenM3T3pzN096dHJRa05CZDBJc1pUczdRVUZJZUVJN08wRkJSVUU3UVVGRFpTeFRRVUZUTEdWQlFWUXNSMEZCTWtJN08wRkJSWGhETzBGQlEwRTdRVUZEUVN4TlFVRk5MRmRCUVZjc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEhOQ1FVRjJRaXhEUVVGcVFqdEJRVU5CTEZkQlFWTXNaMEpCUVZRc1EwRkJNRUlzVDBGQk1VSXNSVUZCYlVNc1dVRkJWenRCUVVNMVF5dzBRa0ZCV1N4TFFVRkxMRlZCUVdwQ08wRkJRMFFzUjBGR1JDeEZRVVZIT3p0QlFVVklPMEZCU2tFc1NVRkxRU3hKUVVGTkxGZEJRVmNzVFVGQlRTeEpRVUZPTEVOQlFWY3NVMEZCVXl4blFrRkJWQ3hEUVVFd1FpeGhRVUV4UWl4RFFVRllMRU5CUVdwQ08wRkJRMEVzVjBGQlV5eFBRVUZVTEVOQlFXbENMRzFDUVVGWE8wRkJRekZDTEZGQlFVMHNZVUZCWVN4UlFVRlJMR0ZCUVZJc1EwRkJjMElzYzBKQlFYUkNMRU5CUVc1Q08wRkJRMEVzWlVGQlZ5eG5Ra0ZCV0N4RFFVRTBRaXhQUVVFMVFpeEZRVUZ4UXl4aFFVRnlReXhGUVVGdlJDeExRVUZ3UkRzN1FVRkZRU3hSUVVGTkxGbEJRVmtzVVVGQlVTeGhRVUZTTEVOQlFYTkNMSEZDUVVGMFFpeERRVUZzUWp0QlFVTkJMR05CUVZVc1owSkJRVllzUTBGQk1rSXNUMEZCTTBJc1JVRkJiME1zV1VGQmNFTXNSVUZCYTBRc1MwRkJiRVE3UVVGRFJDeEhRVTVFT3p0QlFWRkJMRmRCUVZNc1dVRkJWQ3hIUVVGM1FqdEJRVU4wUWl4UlFVRk5MRlZCUVZVc1MwRkJTeXhWUVVGeVFqdEJRVU5CTEZGQlFVMHNUMEZCVHl4UlFVRlJMSE5DUVVGeVFqdEJRVU5CTEZsQlFWRXNTMEZCVWl4RFFVRmpMRk5CUVdRc1IwRkJNRUlzUTBGQk1VSTdRVUZEUVN4WlFVRlJMRk5CUVZJc1EwRkJhMElzVFVGQmJFSXNRMEZCZVVJc05FSkJRWHBDTzBGQlEwRXNVMEZCU3l4VFFVRk1MRU5CUVdVc1RVRkJaaXhEUVVGelFpd3JRa0ZCZEVJN1FVRkRSRHM3UVVGRlJDeFhRVUZUTEdGQlFWUXNSMEZCZVVJN1FVRkRka0lzVTBGQlN5eFRRVUZNTEVOQlFXVXNUVUZCWml4RFFVRnpRaXdyUWtGQmRFSTdRVUZEUVN4UlFVRk5MRlZCUVZVc1MwRkJTeXhyUWtGQmNrSTdRVUZEUVN4UlFVRk5MR0ZCUVdFc1VVRkJVU3hUUVVGU0xFTkJRV3RDTEZGQlFXeENMRU5CUVRKQ0xEUkNRVUV6UWl4RFFVRnVRanRCUVVOQkxGbEJRVkVzVTBGQlVpeERRVUZyUWl4TlFVRnNRaXhEUVVGNVFpdzBRa0ZCZWtJN1FVRkRRU3haUVVGUkxFdEJRVklzUTBGQll5eFRRVUZrTEVkQlFUQkNMR0ZCUVdFc1EwRkJZaXhIUVVGdlFpeFJRVUZSTEZsQlFUVkNMRTlCUVRGQ08wRkJRMFE3UVVGRlJqczdPenM3T3pzN096dEJRM1JEUkRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVVkJPMEZCUTBFc1VVRkJVU3hoUVVGU0xFVkJRWFZDTEZGQlFYWkNPMEZCUTBFc1VVRkJVVHM3UVVGRlVqdEJRVVpCTEVWQlIwOHNTVUZCVFN3MFEwRkJhMElzVTBGQmJFSXNaVUZCYTBJc1IwRkJUVHRCUVVOdVF5eE5RVUZOTEU5QlFVOHNUMEZCVHl4UlFVRlFMRU5CUVdkQ0xGRkJRVGRDTzBGQlEwRXNVMEZCVHl4dFFrRkJVQ3hEUVVFeVFpeFJRVUV6UWp0QlFVTkJMRTFCUVVrc1UwRkJVeXhIUVVGVUxFbEJRV2RDTEZOQlFWTXNZVUZCTjBJc1JVRkJORU03UVVGRE1VTTdRVUZEUkN4SFFVWkVMRTFCUlU4c1NVRkJTU3hMUVVGTExGVkJRVXdzUTBGQlowSXNVVUZCYUVJc1EwRkJTaXhGUVVFclFqdEJRVU53UXp0QlFVTkVMRWRCUmswc1RVRkZRU3hKUVVGSkxFdEJRVXNzVlVGQlRDeERRVUZuUWl4WFFVRm9RaXhEUVVGS0xFVkJRV3RETzBGQlEzWkRPMEZCUTBRN1FVRkRSaXhEUVZaTk96dEJRVmxRTzBGQlEwOHNTVUZCVFN4clEwRkJZU3hUUVVGaUxGVkJRV0VzUjBGQlRUdEJRVU01UWl4TlFVRk5MRTFCUVUwc1QwRkJUeXhSUVVGUUxFTkJRV2RDTEVsQlFUVkNPMEZCUTBFc1YwRkJVeXhIUVVGVUxFVkJRV01zU1VGQlpDeERRVUZ0UWl4VlFVRkRMRmxCUVVRc1JVRkJhMEk3UVVGRGJrTXNVVUZCVFN4WlFVRlpMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeE5RVUYyUWl4RFFVRnNRanRCUVVOQkxHTkJRVlVzVTBGQlZpeEhRVUZ6UWl4WlFVRjBRanRCUVVOQkxGRkJRVTBzVlVGQlZTeFRRVUZUTEdGQlFWUXNRMEZCZFVJc1QwRkJka0lzUTBGQmFFSTdRVUZEUVN4UlFVRk5MRlZCUVZVc1ZVRkJWU3hoUVVGV0xFTkJRWGRDTEU5QlFYaENMRU5CUVdoQ08wRkJRMEVzVVVGQlRTeFhRVUZYTEZWQlFWVXNiMEpCUVZZc1EwRkJLMElzVDBGQkwwSXNSVUZCZDBNc1EwRkJlRU1zUlVGQk1rTXNWMEZCTlVRN1FVRkRRU3hSUVVGTkxGVkJRVlVzVlVGQlZTeHZRa0ZCVml4RFFVRXJRaXhOUVVFdlFpeEZRVUYxUXl4aFFVRjJReXhGUVVGelJDeFBRVUYwUlR0QlFVTkJMRmxCUVZFc1IwRkJVaXhEUVVGWkxFOUJRVm83UVVGRFFTeFpRVUZSTEZWQlFWSXNRMEZCYlVJc1dVRkJia0lzUTBGQlowTXNUMEZCYUVNc1JVRkJlVU1zVDBGQmVrTTdRVUZEUVN4aFFVRlRMRXRCUVZRc1IwRkJhVUlzVVVGQmFrSTdRVUZEUVN4aFFVRlRMRzlDUVVGVUxFTkJRVGhDTEUxQlFUbENMRVZCUVhORExHRkJRWFJETEVWQlFYRkVMRTlCUVhKRUxFZEJRU3RFTEU5QlFTOUVPMEZCUTBFc2RVSkJRVThzVDBGQlVEdEJRVU5CTzBGQlEwUXNSMEZpUkR0QlFXTkVMRU5CYUVKTk96dEJRV3RDVUR0QlFVTkJMRWxCUVUwc1VVRkJVU3hGUVVGa08wRkJRMEVzVTBGQlV5eFJRVUZVTEVOQlFXdENMRWRCUVd4Q0xFVkJRWFZDTzBGQlEzSkNMRTFCUVVrc1RVRkJUU3hIUVVGT0xFTkJRVW9zUlVGQlowSTdRVUZEWkN4WFFVRlBMRkZCUVZFc1QwRkJVaXhEUVVGblFpeE5RVUZOTEVkQlFVNHNRMEZCYUVJc1EwRkJVRHRCUVVORU8wRkJRMFFzVTBGQlR5eE5RVUZOTEVkQlFVNHNSVUZEU2l4SlFVUkpMRU5CUTBNc1ZVRkJReXhSUVVGRUxFVkJRV003UVVGRGJFSXNVVUZCU1N4VFFVRlRMRVZCUVdJc1JVRkJhVUk3UVVGRFppeFpRVUZOTEVkQlFVNHNTVUZCWVN4VFFVRlRMRWxCUVZRc1JVRkJZanRCUVVOQkxHRkJRVThzVFVGQlRTeEhRVUZPTEVOQlFWQTdRVUZEUkN4TFFVaEVMRTFCUjA4N1FVRkRUQ3hqUVVGUkxFZEJRVklzUTBGQldTdzRRa0ZCV2p0QlFVTkVPMEZCUTBZc1IwRlNTU3hGUVZOS0xFdEJWRWtzUTBGVFJTeFZRVUZETEVkQlFVUTdRVUZCUVN4WFFVRlRMRkZCUVZFc1IwRkJVaXd3UTBGQmJVUXNSMEZCYmtRc1YwRkJORVFzU1VGQlNTeFBRVUZvUlN4RFFVRlVPMEZCUVVFc1IwRlVSaXhEUVVGUU8wRkJWVVE3TzBGQlJVUTdRVUZEUVN4UFFVRlBMR2RDUVVGUUxFTkJRWGRDTEZWQlFYaENMRVZCUVc5RExGVkJRWEJET3pzN096czdPenRCUXpWRVFUdEJRVU5CTEVsQlFVMHNVMEZCVXl4VFFVRlVMRTFCUVZNc1EwRkJReXhEUVVGRU8wRkJRVUVzVTBGQlR5eERRVUZRTzBGQlFVRXNRMEZCWmp0QlFVTkJMRWxCUVUwc1lVRkJZU3hUUVVGaUxGVkJRV0VzUTBGQlF5eERRVUZFTzBGQlFVRXNVMEZCVHl4SlFVRkZMRU5CUVZRN1FVRkJRU3hEUVVGdVFqdEJRVU5CTEVsQlFVMHNZMEZCWXl4VFFVRmtMRmRCUVdNc1EwRkJReXhEUVVGRU8wRkJRVUVzVTBGQlR5eExRVUZITEVsQlFVVXNRMEZCVEN4RFFVRlFPMEZCUVVFc1EwRkJjRUk3UVVGRFFTeEpRVUZOTEdkQ1FVRm5RaXhUUVVGb1FpeGhRVUZuUWl4RFFVRkRMRU5CUVVRN1FVRkJRU3hUUVVGUExFbEJRVVVzUlVGQlJpeEhRVUZSTEVsQlFVVXNRMEZCUml4SFFVRkpMRU5CUVZvc1IwRkJhMElzUTBGQlF5eERRVUZFTEVkQlFVY3NRMEZCUXl4SlFVRkZMRWxCUVVVc1EwRkJUQ3hKUVVGUkxFTkJRWEJETzBGQlFVRXNRMEZCZEVJN1FVRkRRU3hKUVVGTkxHTkJRV01zVTBGQlpDeFhRVUZqTEVOQlFVTXNRMEZCUkR0QlFVRkJMRk5CUVU4c1NVRkJSU3hEUVVGR0xFZEJRVWtzUTBGQldEdEJRVUZCTEVOQlFYQkNPMEZCUTBFc1NVRkJUU3hsUVVGbExGTkJRV1lzV1VGQlpTeERRVUZETEVOQlFVUTdRVUZCUVN4VFFVRlJMRVZCUVVVc1EwRkJTQ3hIUVVGTkxFTkJRVTRzUjBGQlVTeERRVUZTTEVkQlFWVXNRMEZCYWtJN1FVRkJRU3hEUVVGeVFqdEJRVU5CTEVsQlFVMHNhVUpCUVdsQ0xGTkJRV3BDTEdOQlFXbENMRU5CUVVNc1EwRkJSRHRCUVVGQkxGTkJRVThzU1VGQlJTeEZRVUZHTEVkQlFWRXNTVUZCUlN4RFFVRkdMRWRCUVVrc1EwRkJTaXhIUVVGTkxFTkJRV1FzUjBGQmIwSXNRMEZCUXl4SlFVRkZMRU5CUVVnc1MwRkJUeXhKUVVGRkxFTkJRVVlzUjBGQlNTeERRVUZZTEV0QlFXVXNTVUZCUlN4RFFVRkdMRWRCUVVrc1EwRkJia0lzU1VGQmMwSXNRMEZCYWtRN1FVRkJRU3hEUVVGMlFqdEJRVU5CTEVsQlFVMHNZMEZCWXl4VFFVRmtMRmRCUVdNc1EwRkJReXhEUVVGRU8wRkJRVUVzVTBGQlR5eEpRVUZGTEVOQlFVWXNSMEZCU1N4RFFVRktMRWRCUVUwc1EwRkJZanRCUVVGQkxFTkJRWEJDTzBGQlEwRXNTVUZCVFN4bFFVRmxMRk5CUVdZc1dVRkJaU3hEUVVGRExFTkJRVVE3UVVGQlFTeFRRVUZQTEVsQlFVY3NSVUZCUlN4RFFVRklMRWRCUVUwc1EwRkJUaXhIUVVGUkxFTkJRVklzUjBGQlZTeERRVUZ1UWp0QlFVRkJMRU5CUVhKQ08wRkJRMEVzU1VGQlRTeHBRa0ZCYVVJc1UwRkJha0lzWTBGQmFVSXNRMEZCUXl4RFFVRkVPMEZCUVVFc1UwRkJUeXhKUVVGRkxFVkJRVVlzUjBGQlVTeEpRVUZGTEVOQlFVWXNSMEZCU1N4RFFVRktMRWRCUVUwc1EwRkJUaXhIUVVGUkxFTkJRV2hDTEVkQlFYTkNMRWxCUVVVc1NVRkJSeXhGUVVGRkxFTkJRVXdzUjBGQlVTeERRVUZTTEVkQlFWVXNRMEZCVml4SFFVRlpMRU5CUVRORE8wRkJRVUVzUTBGQmRrSTdPMEZCUlVFN1FVRkRUeXhKUVVGTkxHOURRVUZqTEZOQlFXUXNWMEZCWXl4RFFVRkRMRVZCUVVRc1JVRkJlVUk3UVVGQlFTeE5RVUZ3UWl4UlFVRnZRaXgxUlVGQlZDeEpRVUZUT3p0QlFVTnNSQ3hOUVVGTkxGTkJRVk1zUjBGQlJ5eFpRVUZzUWp0QlFVTkJMRTFCUVUwc1VVRkJVU3hMUVVGTExFZEJRVXdzUlVGQlpEdEJRVU5CTEUxQlFVMHNVMEZCVXl4VFFVRlVMRTFCUVZNc1IwRkJUVHRCUVVOdVFpeFJRVUZOTEUxQlFVMHNTMEZCU3l4SFFVRk1MRVZCUVZvN1FVRkRRU3hSUVVGTkxFOUJRVThzUTBGQlF5eE5RVUZOTEV0QlFWQXNTVUZCWjBJc1VVRkJOMEk3UVVGRFF5eFJRVUZOTEZOQlFWTXNZVUZCWVN4SlFVRmlMRU5CUVdZN1FVRkRSQ3hQUVVGSExGTkJRVWdzUjBGQlowSXNWVUZCVlN4SlFVRkpMRTFCUVdRc1EwRkJSQ3hIUVVFd1FpeE5RVUY2UXp0QlFVTkJMRkZCUVVrc1IwRkJSeXhUUVVGSUxFdEJRV2xDTEVOQlFYSkNMRVZCUVhkQ08wRkJRM2hDTERCQ1FVRnpRaXhOUVVGMFFqdEJRVU5FTEVkQlVFUTdRVUZSUVR0QlFVTkVMRU5CV2swN08wRkJZMUE3UVVGRFR5eEpRVUZOTERCQ1FVRlRMRk5CUVZRc1RVRkJVeXhEUVVGRExFVkJRVVFzUlVGQmVVSTdRVUZCUVN4TlFVRndRaXhSUVVGdlFpeDFSVUZCVkN4SlFVRlRPenRCUVVNM1F5eExRVUZITEV0QlFVZ3NRMEZCVXl4UFFVRlVMRWRCUVcxQ0xFTkJRVzVDTzBGQlEwRXNUVUZCVFN4VFFVRlRMRU5CUVdZN1FVRkRRU3hOUVVGTkxGRkJRVkVzUzBGQlN5eEhRVUZNTEVWQlFXUTdRVUZEUVN4TlFVRk5MRTlCUVU4c1UwRkJVQ3hKUVVGUExFZEJRVTA3UVVGRGFrSXNVVUZCVFN4TlFVRk5MRXRCUVVzc1IwRkJUQ3hGUVVGYU8wRkJRMEVzVVVGQlRTeFBRVUZQTEVOQlFVTXNUVUZCVFN4TFFVRlFMRWxCUVdkQ0xGRkJRVGRDTzBGQlEwRXNVVUZCVFN4VFFVRlRMRmxCUVZrc1NVRkJXaXhEUVVGbU8wRkJRMEVzVDBGQlJ5eExRVUZJTEVOQlFWTXNUMEZCVkN4SFFVRnRRaXhOUVVGdVFqdEJRVU5CTEZGQlFVa3NSMEZCUnl4TFFVRklMRU5CUVZNc1QwRkJWQ3hIUVVGdFFpeERRVUYyUWl4RlFVRXdRanRCUVVONFFpeFRRVUZITEV0QlFVZ3NRMEZCVXl4UFFVRlVMRWRCUVcxQ0xFTkJRVzVDTzBGQlEwRTdRVUZEUkR0QlFVTkVMREJDUVVGelFpeEpRVUYwUWp0QlFVTkVMRWRCVmtRN1FVRlhRVHRCUVVORUxFTkJhRUpOT3p0QlFXdENVRHRCUVVOUExFbEJRVTBzTkVKQlFWVXNVMEZCVml4UFFVRlZMRU5CUVVNc1JVRkJSQ3hGUVVGNVFqdEJRVUZCTEUxQlFYQkNMRkZCUVc5Q0xIVkZRVUZVTEVsQlFWTTdPMEZCUXpsRExFdEJRVWNzUzBGQlNDeERRVUZUTEU5QlFWUXNSMEZCYlVJc1EwRkJia0k3UVVGRFFTeE5RVUZOTEZGQlFWRXNTMEZCU3l4SFFVRk1MRVZCUVdRN1FVRkRRU3hOUVVGTkxFOUJRVThzVTBGQlVDeEpRVUZQTEVkQlFVMDdRVUZEYWtJc1VVRkJUU3hOUVVGTkxFdEJRVXNzUjBGQlRDeEZRVUZhTzBGQlEwRXNVVUZCVFN4UFFVRlBMRU5CUVVNc1RVRkJUU3hMUVVGUUxFbEJRV2RDTEZGQlFUZENPMEZCUTBFc1VVRkJUU3hUUVVGVExHRkJRV0VzU1VGQllpeERRVUZtTzBGQlEwRXNUMEZCUnl4TFFVRklMRU5CUVZNc1QwRkJWQ3hIUVVGdFFpeEpRVUZKTEUxQlFYWkNPMEZCUTBFc1VVRkJTU3hIUVVGSExFdEJRVWdzUTBGQlV5eFBRVUZVTEVkQlFXMUNMRU5CUVhaQ0xFVkJRVEJDTzBGQlEzaENMRk5CUVVjc1MwRkJTQ3hEUVVGVExFOUJRVlFzUjBGQmJVSXNRMEZCYmtJN1FVRkRRVHRCUVVORU8wRkJRMFFzTUVKQlFYTkNMRWxCUVhSQ08wRkJRMFFzUjBGV1JEdEJRVmRCTzBGQlEwUXNRMEZtVFRzN1FVRnBRa0VzU1VGQlRTdzRRa0ZCVnl4VFFVRllMRkZCUVZjc1IwRkJUVHRCUVVNMVFpeFZRVUZSTEVkQlFWSXNRMEZCV1N4UlFVRmFPMEZCUTBFc1RVRkJUU3hQUVVGUExGTkJRVk1zWVVGQlZDeERRVUYxUWl4WlFVRjJRaXhEUVVGaU8wRkJRMEVzVFVGQlRTeFRRVUZUTEZOQlFWUXNUVUZCVXl4SFFVRk5PMEZCUTI1Q0xGRkJRVWtzVVVGQlVTeExRVUZMTEZkQlFVd3NTMEZCY1VJc1NVRkJha01zUlVGQmRVTTdRVUZEY2tNc1ZVRkJTU3hQUVVGUExFOUJRVThzVlVGQlVDeEhRVUZ2UWl4UFFVRlBMRmRCUVhSRE8wRkJRMEVzVjBGQlN5eFhRVUZNTEVkQlFXMUNMRXRCUVVzc1kwRkJUQ3hGUVVGdVFqdEJRVU5FTzBGQlEwWXNSMEZNUkR0QlFVMUJMSGRDUVVGelFpeE5RVUYwUWp0QlFVTkVMRU5CVmswN096czdRVU5vUlZBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVOMGIwTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGVFeEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUtHWjFibU4wYVc5dUlHVW9kQ3h1TEhJcGUyWjFibU4wYVc5dUlITW9ieXgxS1h0cFppZ2hibHR2WFNsN2FXWW9JWFJiYjEwcGUzWmhjaUJoUFhSNWNHVnZaaUJ5WlhGMWFYSmxQVDFjSW1aMWJtTjBhVzl1WENJbUpuSmxjWFZwY21VN2FXWW9JWFVtSm1FcGNtVjBkWEp1SUdFb2J5d2hNQ2s3YVdZb2FTbHlaWFIxY200Z2FTaHZMQ0V3S1R0MllYSWdaajF1WlhjZ1JYSnliM0lvWENKRFlXNXViM1FnWm1sdVpDQnRiMlIxYkdVZ0oxd2lLMjhyWENJblhDSXBPM1JvY205M0lHWXVZMjlrWlQxY0lrMVBSRlZNUlY5T1QxUmZSazlWVGtSY0lpeG1mWFpoY2lCc1BXNWJiMTA5ZTJWNGNHOXlkSE02ZTMxOU8zUmJiMTFiTUYwdVkyRnNiQ2hzTG1WNGNHOXlkSE1zWm5WdVkzUnBiMjRvWlNsN2RtRnlJRzQ5ZEZ0dlhWc3hYVnRsWFR0eVpYUjFjbTRnY3lodVAyNDZaU2w5TEd3c2JDNWxlSEJ2Y25SekxHVXNkQ3h1TEhJcGZYSmxkSFZ5YmlCdVcyOWRMbVY0Y0c5eWRITjlkbUZ5SUdrOWRIbHdaVzltSUhKbGNYVnBjbVU5UFZ3aVpuVnVZM1JwYjI1Y0lpWW1jbVZ4ZFdseVpUdG1iM0lvZG1GeUlHODlNRHR2UEhJdWJHVnVaM1JvTzI4ckt5bHpLSEpiYjEwcE8zSmxkSFZ5YmlCemZTa2lMQ0pwYlhCdmNuUWdleUJ6WTNKdmJHeFViMVJ2Y0NCOUlHWnliMjBnSnk0dmRYUnBiSE1uWEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUhKMWJrRmliM1YwVUdGblpTZ3BJSHRjYmx4dUlDQXZMeUJ6WlhRZ2RYQWdZWEp5YjNjZ0t5QnpZM0p2Ykd3Z2RHOGdkRzl3SUdaMWJtTjBhVzl1WEc0Z0lDOHZJRlJQUkU4NklHOXViSGtnYzJodmR5Qmhjbkp2ZHlCcFppQnVaV1ZrWldRZ1cyaGxhV2RvZENBK0lERXdNQ1VnZG1sbGQzQnZjblJkWEc0Z0lHTnZibk4wSUhSdmNFRnljbTkzSUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTG1wekxYQmhaMlZmWDJGeWNtOTNMUzEwYjNBbktWeHVJQ0IwYjNCQmNuSnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSE5qY205c2JGUnZWRzl3S0hSb2FYTXVjR0Z5Wlc1MFRtOWtaU2xjYmlBZ2ZTd2dabUZzYzJVcFhHNTlYRzRpTENKcGJYQnZjblFnZXlCbWFXNWtRWEpsWVNCOUlHWnliMjBnSnk0dmRYUnBiSE1uWEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUhKMWJreGhibVJwYm1kUVlXZGxLQ2tnZTF4dVhHNGdJR1pwYm1SQmNtVmhLQ2xjYmlBZ2QybHVaRzkzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNKbGMybDZaU2NzSUdacGJtUkJjbVZoS1Z4dVhHNTlYRzRpTENKcGJYQnZjblFnZXlCMWNHUmhkR1ZRWVdkbExDQnlkVzVPWlhkR2RXNWpkR2x2Ym5NZ2ZTQm1jbTl0SUNjdUwzTndZU2RjYm1sdGNHOXlkQ0I3SUdacGJtUkJjbVZoSUgwZ1puSnZiU0FuTGk5MWRHbHNjeWRjYmx4dUtHWjFibU4wYVc5dUtDa2dlMXh1WEc0Z0lDOHZJQ0J1WVhacFoyRjBhVzl1SUhObGJHVmpkRzl5YzF4dUlDQmpiMjV6ZENCb1pXRmtaWElnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2RvWldGa1pYSW5LVnh1SUNCamIyNXpkQ0IwY21sbloyVnlUV1Z1ZFNBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1cWN5MTBjbWxuWjJWeUxTMXRaVzUxSnlsY2JpQWdZMjl1YzNRZ2JXVnVkU0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeTVxY3kxdFpXNTFKeWxjYmx4dUlDQXZMeUFnYm1GMmFXZGhkR2x2YmlCdFpYUm9iMlJ6WEc0Z0lHWjFibU4wYVc5dUlIUnZaMmRzWlUxbGJuVW9LU0I3WEc0Z0lDQWdhR1ZoWkdWeUxtTnNZWE56VEdsemRDNTBiMmRuYkdVb0oyMWxiblV0YjNCbGJpY3BYRzRnSUgxY2JpQWdablZ1WTNScGIyNGdZMmhoYm1kbFVHRm5aU2hsZG1WdWRDa2dlMXh1SUNBZ0lHbG1JQ2hsZG1WdWRDNTBZWEpuWlhRZ0ppWWdaWFpsYm5RdWRHRnlaMlYwTG01dlpHVk9ZVzFsSUQwOVBTQW5RU2NwSUh0Y2JpQWdJQ0FnSUdWMlpXNTBMbkJ5WlhabGJuUkVaV1poZFd4MEtDbGNiaUFnSUNBZ0lIUnZaMmRzWlUxbGJuVW9LVnh1SUNBZ0lDQWdhV1lnS0dWMlpXNTBMblJoY21kbGRDNXdZWFJvYm1GdFpTQWhQVDBnZDJsdVpHOTNMbXh2WTJGMGFXOXVMbkJoZEdodVlXMWxLU0I3WEc0Z0lDQWdJQ0FnSUdocGMzUnZjbmt1Y0hWemFGTjBZWFJsS0c1MWJHd3NJRzUxYkd3c0lHVjJaVzUwTG5SaGNtZGxkQzV3WVhSb2JtRnRaU2xjYmlBZ0lDQWdJQ0FnZFhCa1lYUmxVR0ZuWlNncFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5OGdJRzVoZG1sbllYUnBiMjRnWlhabGJuUWdiR2x6ZEdWdVpYSnpJQ3NnY25WdUlHOXVJR2x1YVhScFlXd2diRzloWkZ4dUlDQnlkVzVPWlhkR2RXNWpkR2x2Ym5Nb0tWeHVJQ0IwY21sbloyVnlUV1Z1ZFM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUhSdloyZHNaVTFsYm5VcFhHNGdJRzFsYm5VdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCamFHRnVaMlZRWVdkbEtWeHVYRzU5S1NncFhHNGlMQ0pwYlhCdmNuUWdleUJ6WTNKdmJHeFViMVJ2Y0N3Z1ptRmtaVTkxZEN3Z1ptRmtaVWx1SUgwZ1puSnZiU0FuTGk5MWRHbHNjeWRjYmx4dUx5OGdjSEp2YW1WamRITWdjR0ZuWlNBdElITndaV05wWm1saklHWjFibU4wYVc5dWMxeHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z2NuVnVVSEp2YW1WamRITlFZV2RsS0NrZ2UxeHVYRzRnSUM4dklITmxkQ0IxY0NCaGNuSnZkeUFySUhOamNtOXNiQ0IwYnlCMGIzQWdablZ1WTNScGIyNWNiaUFnTHk4Z1ZFOUVUem9nYjI1c2VTQnphRzkzSUdGeWNtOTNJR2xtSUc1bFpXUmxaQ0JiYUdWcFoyaDBJRDRnTVRBd0pTQjJhV1YzY0c5eWRGMWNiaUFnWTI5dWMzUWdkRzl3UVhKeWIzY2dQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3Vhbk10Y0dGblpWOWZZWEp5YjNjdExYUnZjQ2NwWEc0Z0lIUnZjRUZ5Y205M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2MyTnliMnhzVkc5VWIzQW9kR2hwY3k1d1lYSmxiblJPYjJSbEtWeHVJQ0I5TENCbVlXeHpaU2xjYmx4dUlDQXZMeUFnYkc5dmNDQnZkbVZ5SUdWMlpYSjVJSEJ5YjJwbFkzUXNJR0ZrWkNCbGRtVnVkQ0JzYVhOMFpXNWxjaUIwYnlCbGVIQmhibVFnYVdOdmJpQmlkWFIwYjI1Y2JpQWdZMjl1YzNRZ2NISnZhbVZqZEhNZ1BTQkJjbkpoZVM1bWNtOXRLR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTVxY3kxd2NtOXFaV04wSnlrcFhHNGdJSEJ5YjJwbFkzUnpMbVp2Y2tWaFkyZ29jSEp2YW1WamRDQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ1pYaHdZVzVrU1dOdmJpQTlJSEJ5YjJwbFkzUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuQnliMnBsWTNSZlgyVjRjR0Z1WkVsamIyNG5LVnh1SUNBZ0lHVjRjR0Z1WkVsamIyNHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQmxlSEJoYm1SRVpYUmhhV3h6TENCbVlXeHpaU2xjYmx4dUlDQWdJR052Ym5OMElHTnNiM05sU1dOdmJpQTlJSEJ5YjJwbFkzUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuQnliMnBsWTNSZlgyTnNiM05sU1dOdmJpY3BYRzRnSUNBZ1kyeHZjMlZKWTI5dUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z1kyeHZjMlZFWlhSaGFXeHpMQ0JtWVd4elpTbGNiaUFnZlNsY2JseHVJQ0JtZFc1amRHbHZiaUJqYkc5elpVUmxkR0ZwYkhNb0tTQjdYRzRnSUNBZ1kyOXVjM1FnWkdWMFlXbHNjeUE5SUhSb2FYTXVjR0Z5Wlc1MFRtOWtaVnh1SUNBZ0lHTnZibk4wSUdsamIyNGdQU0JrWlhSaGFXeHpMbkJ5WlhacGIzVnpSV3hsYldWdWRGTnBZbXhwYm1kY2JpQWdJQ0JrWlhSaGFXeHpMbk4wZVd4bExtMWhlRWhsYVdkb2RDQTlJREJjYmlBZ0lDQmtaWFJoYVd4ekxtTnNZWE56VEdsemRDNTBiMmRuYkdVb0ozQnliMnBsWTNSZlgyUmxkR0ZwYkhNdExXVjRjR0Z1WkdWa0p5bGNiaUFnSUNCcFkyOXVMbU5zWVhOelRHbHpkQzUwYjJkbmJHVW9KM0J5YjJwbFkzUmZYMlY0Y0dGdVpFbGpiMjR0TFdWNGNHRnVaR1ZrSnlsY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHVjRjR0Z1WkVSbGRHRnBiSE1vS1NCN1hHNGdJQ0FnZEdocGN5NWpiR0Z6YzB4cGMzUXVkRzluWjJ4bEtDZHdjbTlxWldOMFgxOWxlSEJoYm1SSlkyOXVMUzFsZUhCaGJtUmxaQ2NwWEc0Z0lDQWdZMjl1YzNRZ1pHVjBZV2xzY3lBOUlIUm9hWE11Ym1WNGRFVnNaVzFsYm5SVGFXSnNhVzVuWEc0Z0lDQWdZMjl1YzNRZ2FYTkZlSEJoYm1SbFpDQTlJR1JsZEdGcGJITXVZMnhoYzNOTWFYTjBMbU52Ym5SaGFXNXpLQ2R3Y205cVpXTjBYMTlrWlhSaGFXeHpMUzFsZUhCaGJtUmxaQ2NwWEc0Z0lDQWdaR1YwWVdsc2N5NWpiR0Z6YzB4cGMzUXVkRzluWjJ4bEtDZHdjbTlxWldOMFgxOWtaWFJoYVd4ekxTMWxlSEJoYm1SbFpDY3BYRzRnSUNBZ1pHVjBZV2xzY3k1emRIbHNaUzV0WVhoSVpXbG5hSFFnUFNCcGMwVjRjR0Z1WkdWa0lEOGdNQ0E2SUdBa2UyUmxkR0ZwYkhNdWMyTnliMnhzU0dWcFoyaDBmWEI0WUZ4dUlDQjlYRzVjYm4xY2JpSXNJbWx0Y0c5eWRDQnlkVzVNWVc1a2FXNW5VR0ZuWlNCbWNtOXRJQ2N1TDJ4aGJtUnBibWNuWEc1cGJYQnZjblFnY25WdVFXSnZkWFJRWVdkbElHWnliMjBnSnk0dllXSnZkWFFuWEc1cGJYQnZjblFnY25WdVVISnZhbVZqZEhOUVlXZGxJR1p5YjIwZ0p5NHZjSEp2YW1WamRITW5YRzVwYlhCdmNuUWdleUJtWVdSbFNXNHNJR1pwYm1SQmNtVmhJSDBnWm5KdmJTQW5MaTkxZEdsc2N5ZGNibHh1THk4Z1ptVjBZMmdnY0c5c2VXWnBiR3dnWm05eUlHMXZZbWxzWlNCa1pYWnBZMlZ6WEc1eVpYRjFhWEpsS0NkbGN6WXRjSEp2YldselpTY3BMbkJ2YkhsbWFXeHNLQ2xjYm5KbGNYVnBjbVVvSjJsemIyMXZjbkJvYVdNdFptVjBZMmduS1Z4dVhHNHZMeUJ5ZFc0Z1puVnVZM1JwYjI1eklITndaV05wWm1saklIUnZJSEJoWjJWY2JtVjRjRzl5ZENCamIyNXpkQ0J5ZFc1T1pYZEdkVzVqZEdsdmJuTWdQU0FvS1NBOVBpQjdYRzRnSUdOdmJuTjBJSEJoZEdnZ1BTQjNhVzVrYjNjdWJHOWpZWFJwYjI0dWNHRjBhRzVoYldWY2JpQWdkMmx1Wkc5M0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KM0psYzJsNlpTY3NJR1pwYm1SQmNtVmhLVnh1SUNCcFppQW9jR0YwYUNBOVBUMGdKeThuSUh4OElIQmhkR2dnUFQwOUlDY3ZhVzVrWlhndWFIUnRiQ2NwSUh0Y2JpQWdJQ0J5ZFc1TVlXNWthVzVuVUdGblpTZ3BYRzRnSUgwZ1pXeHpaU0JwWmlBb2NHRjBhQzV6ZEdGeWRITlhhWFJvS0NjdllXSnZkWFFuS1NrZ2UxeHVJQ0FnSUhKMWJrRmliM1YwVUdGblpTZ3BYRzRnSUgwZ1pXeHpaU0JwWmlBb2NHRjBhQzV6ZEdGeWRITlhhWFJvS0NjdmNISnZhbVZqZEhNbktTa2dlMXh1SUNBZ0lISjFibEJ5YjJwbFkzUnpVR0ZuWlNncFhHNGdJSDFjYm4xY2JseHVMeThnZFhCa1lYUmxJQ3NnWm1Ga1pTQnBiaUJ1WlhjZ2NHRm5aU0J2YmlCMWNtd2dZMmhoYm1kbFhHNWxlSEJ2Y25RZ1kyOXVjM1FnZFhCa1lYUmxVR0ZuWlNBOUlDZ3BJRDArSUh0Y2JpQWdZMjl1YzNRZ2RYSnNJRDBnZDJsdVpHOTNMbXh2WTJGMGFXOXVMbWh5WldaY2JpQWdiRzloWkZCaFoyVW9kWEpzS1M1MGFHVnVLQ2h5WlhOd2IyNXpaVlJsZUhRcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCamIyNTBZV2x1WlhJZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Nkb2RHMXNKeWxjYmlBZ0lDQmpiMjUwWVdsdVpYSXVhVzV1WlhKSVZFMU1JRDBnY21WemNHOXVjMlZVWlhoMFhHNGdJQ0FnWTI5dWMzUWdiMnhrVUdGblpTQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXdZV2RsSnlsY2JpQWdJQ0JqYjI1emRDQnVaWGRRWVdkbElEMGdZMjl1ZEdGcGJtVnlMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXdZV2RsSnlsY2JpQWdJQ0JqYjI1emRDQnVaWGRVYVhSc1pTQTlJR052Ym5SaGFXNWxjaTVuWlhSRmJHVnRaVzUwYzBKNVZHRm5UbUZ0WlNnbmRHbDBiR1VuS1Zzd1hTNTBaWGgwUTI5dWRHVnVkRnh1SUNBZ0lHTnZibk4wSUc1bGQwUmxjMk1nUFNCamIyNTBZV2x1WlhJdVoyVjBSV3hsYldWdWRITkNlVlJoWjA1aGJXVW9KMjFsZEdFbktWc25aR1Z6WTNKcGNIUnBiMjRuWFM1amIyNTBaVzUwWEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvYjJ4a1VHRm5aU2xjYmlBZ0lDQnZiR1JRWVdkbExuQmhjbVZ1ZEU1dlpHVXVjbVZ3YkdGalpVTm9hV3hrS0c1bGQxQmhaMlVzSUc5c1pGQmhaMlVwWEc0Z0lDQWdaRzlqZFcxbGJuUXVkR2wwYkdVZ1BTQnVaWGRVYVhSc1pWeHVJQ0FnSUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SelFubFVZV2RPWVcxbEtDZHRaWFJoSnlsYkoyUmxjMk55YVhCMGFXOXVKMTB1WTI5dWRHVnVkQ0E5SUc1bGQwUmxjMk5jYmlBZ0lDQm1ZV1JsU1c0b2JtVjNVR0ZuWlNsY2JpQWdJQ0J5ZFc1T1pYZEdkVzVqZEdsdmJuTW9LVnh1SUNCOUtWeHVmVnh1WEc0dkx5Qm1aWFJqYUNBcklHeHZZV1FnYm1WM0lIVnliQ0FySUdOaFkyaGxJRzVsZHlCamIyNTBaVzUwWEc1amIyNXpkQ0JqWVdOb1pTQTlJSHQ5WEc1bWRXNWpkR2x2YmlCc2IyRmtVR0ZuWlNoMWNtd3BJSHRjYmlBZ2FXWWdLR05oWTJobFczVnliRjBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaWE52YkhabEtHTmhZMmhsVzNWeWJGMHBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHWmxkR05vS0hWeWJDbGNiaUFnSUNBdWRHaGxiaWdvY21WemNHOXVjMlVwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2h5WlhOd2IyNXpaUzV2YXlrZ2UxeHVJQ0FnSUNBZ0lDQmpZV05vWlZ0MWNteGRJRDBnY21WemNHOXVjMlV1ZEdWNGRDZ3BYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV05vWlZ0MWNteGRYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduYm1WMGQyOXlheUJ5WlhOd2IyNXpaU0IzWVhNZ2JtOTBJRzlyTGljcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNsY2JpQWdJQ0F1WTJGMFkyZ29LR1Z5Y2lrZ1BUNGdZMjl1YzI5c1pTNXNiMmNvWUhSb1pYSmxJR2hoY3lCaVpXVnVJR0Z1SUdWeWNtOXlJSEpsY1hWbGMzUnBibWNnS0NSN2RYSnNmU2s2SUNSN1pYSnlMbTFsYzNOaFoyVjlZQ2twWEc1OVhHNWNiaTh2SUhWd1pHRjBaU0J3WVdkbElHRnVlWFJwYldVZ2FHbHpkRzl5ZVNCaGNHa2dhWE1nWTJoaGJtZGxaRnh1ZDJsdVpHOTNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM0J2Y0hOMFlYUmxKeXdnZFhCa1lYUmxVR0ZuWlNsY2JpSXNJaTh2SUhScGJXbHVaeUJtZFc1amRHbHZibk1nV3lCbWNtOXRJR2RwZEdoMVlpQXRMU0JvZEhSd2N6b3ZMMmRwYzNRdVoybDBhSFZpTG1OdmJTOW5jbVV2TVRZMU1ESTVOQ0JkWEc1amIyNXpkQ0JzYVc1bFlYSWdQU0FvZENrZ1BUNGdkRnh1WTI5dWMzUWdaV0Z6WlVsdVVYVmhaQ0E5SUNoMEtTQTlQaUIwS25SY2JtTnZibk4wSUdWaGMyVlBkWFJSZFdGa0lEMGdLSFFwSUQwK0lIUXFLREl0ZENsY2JtTnZibk4wSUdWaGMyVkpiazkxZEZGMVlXUWdQU0FvZENrZ1BUNGdkRHd1TlNBL0lDZ3lLblFxZENrZ09pQW9MVEVyS0RRdE1pcDBLU3AwS1Z4dVkyOXVjM1FnWldGelpVbHVRM1ZpYVdNZ1BTQW9kQ2tnUFQ0Z2RDcDBLblJjYm1OdmJuTjBJR1ZoYzJWUGRYUkRkV0pwWXlBOUlDaDBLU0E5UGlBb0xTMTBLU3AwS25Rck1WeHVZMjl1YzNRZ1pXRnpaVWx1VDNWMFEzVmlhV01nUFNBb2RDa2dQVDRnZER3dU5TQS9JQ2cwS25RcWRDcDBLU0E2SUNnb2RDMHhLU29vTWlwMExUSXBLaWd5S25RdE1pa3JNU2xjYm1OdmJuTjBJR1ZoYzJWSmJsRjFZWEowSUQwZ0tIUXBJRDArSUhRcWRDcDBLblJjYm1OdmJuTjBJR1ZoYzJWUGRYUlJkV0Z5ZENBOUlDaDBLU0E5UGlBeExTZ3RMWFFwS25RcWRDcDBYRzVqYjI1emRDQmxZWE5sU1c1UGRYUlJkV0Z5ZENBOUlDaDBLU0E5UGlCMFBDNDFJRDhnS0RncWRDcDBLblFxZENrZ09pQW9NUzA0S2lndExYUXBLblFxZENwMEtWeHVYRzR2THlCelkzSnZiR3d0ZEc4dGRHOXdJRzltSUdWc1pXMWxiblF1WEc1bGVIQnZjblFnWTI5dWMzUWdjMk55YjJ4c1ZHOVViM0FnUFNBb1pXd3NJR1IxY21GMGFXOXVJRDBnTVRJd01Da2dQVDRnZTF4dUlDQmpiMjV6ZENCaWIzUjBiMjBnUFNCbGJDNXpZM0p2Ykd4SVpXbG5hSFJjYmlBZ1kyOXVjM1FnYzNSaGNuUWdQU0JFWVhSbExtNXZkeWdwWEc0Z0lHTnZibk4wSUhOamNtOXNiQ0E5SUNncElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCdWIzY2dQU0JFWVhSbExtNXZkeWdwWEc0Z0lDQWdZMjl1YzNRZ2RHbHRaU0E5SUNodWIzY2dMU0J6ZEdGeWRDa2dMeUJrZFhKaGRHbHZibHh1SUNBZ0lDQmpiMjV6ZENCbFlYTnBibWNnUFNCbFlYTmxUM1YwVVhWaGNuUW9kR2x0WlNsY2JpQWdJQ0JsYkM1elkzSnZiR3hVYjNBZ1BTQW9aV0Z6YVc1bklDb2dLREFnTFNCaWIzUjBiMjBwS1NBcklHSnZkSFJ2YlZ4dUlDQWdJR2xtSUNobGJDNXpZM0p2Ykd4VWIzQWdQVDA5SURBcElISmxkSFZ5Ymx4dUlDQWdJSEpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNoelkzSnZiR3dwWEc0Z0lIMWNiaUFnYzJOeWIyeHNLQ2xjYm4xY2JseHVMeThnWm1Ga1pTMXBiaUJsYkdWdFpXNTBYRzVsZUhCdmNuUWdZMjl1YzNRZ1ptRmtaVWx1SUQwZ0tHVnNMQ0JrZFhKaGRHbHZiaUE5SURFeU1EQXBJRDArSUh0Y2JpQWdaV3d1YzNSNWJHVXViM0JoWTJsMGVTQTlJREJjYmlBZ1kyOXVjM1FnWW05MGRHOXRJRDBnTVZ4dUlDQmpiMjV6ZENCemRHRnlkQ0E5SUVSaGRHVXVibTkzS0NsY2JpQWdZMjl1YzNRZ1ptRmtaU0E5SUNncElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCdWIzY2dQU0JFWVhSbExtNXZkeWdwWEc0Z0lDQWdZMjl1YzNRZ2RHbHRaU0E5SUNodWIzY2dMU0J6ZEdGeWRDa2dMeUJrZFhKaGRHbHZibHh1SUNBZ0lHTnZibk4wSUdWaGMybHVaeUE5SUdWaGMyVkpibEYxWVhKMEtIUnBiV1VwWEc0Z0lDQWdaV3d1YzNSNWJHVXViM0JoWTJsMGVTQTlJR1ZoYzJsdVoxeHVJQ0FnSUdsbUlDaGxiQzV6ZEhsc1pTNXZjR0ZqYVhSNUlENGdNU2tnZTF4dUlDQWdJQ0FnWld3dWMzUjViR1V1YjNCaFkybDBlU0E5SURGY2JpQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lIMWNiaUFnSUNCeVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVW9abUZrWlNsY2JpQWdmVnh1SUNCbVlXUmxLQ2xjYm4xY2JseHVMeThnWm1Ga1pTMXZkWFFnWld4bGJXVnVkRnh1Wlhod2IzSjBJR052Ym5OMElHWmhaR1ZQZFhRZ1BTQW9aV3dzSUdSMWNtRjBhVzl1SUQwZ01USXdNQ2tnUFQ0Z2UxeHVJQ0JsYkM1emRIbHNaUzV2Y0dGamFYUjVJRDBnTVZ4dUlDQmpiMjV6ZENCemRHRnlkQ0E5SUVSaGRHVXVibTkzS0NsY2JpQWdZMjl1YzNRZ1ptRmtaU0E5SUNncElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCdWIzY2dQU0JFWVhSbExtNXZkeWdwWEc0Z0lDQWdZMjl1YzNRZ2RHbHRaU0E5SUNodWIzY2dMU0J6ZEdGeWRDa2dMeUJrZFhKaGRHbHZibHh1SUNBZ0lHTnZibk4wSUdWaGMybHVaeUE5SUdWaGMyVlBkWFJSZFdGeWRDaDBhVzFsS1Z4dUlDQWdJR1ZzTG5OMGVXeGxMbTl3WVdOcGRIa2dQU0F4SUMwZ1pXRnphVzVuWEc0Z0lDQWdhV1lnS0dWc0xuTjBlV3hsTG05d1lXTnBkSGtnUENBd0tTQjdYRzRnSUNBZ0lDQmxiQzV6ZEhsc1pTNXZjR0ZqYVhSNUlEMGdNRnh1SUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnZlZ4dUlDQWdJSEpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNobVlXUmxLVnh1SUNCOVhHNGdJR1poWkdVb0tWeHVmVnh1WEc1bGVIQnZjblFnWTI5dWMzUWdabWx1WkVGeVpXRWdQU0FvS1NBOVBpQjdYRzRnSUdOdmJuTnZiR1V1Ykc5bktDZGpZV3hzWldRbktWeHVJQ0JqYjI1emRDQmpiMlJsSUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTG1wekxYQnBlR1ZzY3ljcFhHNGdJR052Ym5OMElIQnBlR1ZzY3lBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JwWmlBb1kyOWtaU0FtSmlCamIyUmxMblJsZUhSRGIyNTBaVzUwSUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCc1pYUWdZWEpsWVNBOUlIZHBibVJ2ZHk1cGJtNWxjbGRwWkhSb0lDb2dkMmx1Wkc5M0xtbHVibVZ5U0dWcFoyaDBYRzRnSUNBZ0lDQmpiMlJsTG5SbGVIUkRiMjUwWlc1MElEMGdZWEpsWVM1MGIweHZZMkZzWlZOMGNtbHVaeWdwWEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNod2FYaGxiSE1wWEc1OVhHNGlMQ0l2S2lGY2JpQXFJRUJ2ZG1WeWRtbGxkeUJsY3pZdGNISnZiV2x6WlNBdElHRWdkR2x1ZVNCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCUWNtOXRhWE5sY3k5Qkt5NWNiaUFxSUVCamIzQjVjbWxuYUhRZ1EyOXdlWEpwWjJoMElDaGpLU0F5TURFMElGbGxhSFZrWVNCTFlYUjZMQ0JVYjIwZ1JHRnNaU3dnVTNSbFptRnVJRkJsYm01bGNpQmhibVFnWTI5dWRISnBZblYwYjNKeklDaERiMjUyWlhKemFXOXVJSFJ2SUVWVE5pQkJVRWtnWW5rZ1NtRnJaU0JCY21Ob2FXSmhiR1FwWEc0Z0tpQkFiR2xqWlc1elpTQWdJRXhwWTJWdWMyVmtJSFZ1WkdWeUlFMUpWQ0JzYVdObGJuTmxYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lGTmxaU0JvZEhSd2N6b3ZMM0poZHk1bmFYUm9kV0oxYzJWeVkyOXVkR1Z1ZEM1amIyMHZjM1JsWm1GdWNHVnVibVZ5TDJWek5pMXdjbTl0YVhObEwyMWhjM1JsY2k5TVNVTkZUbE5GWEc0Z0tpQkFkbVZ5YzJsdmJpQWdJRFF1TVM0d1hHNGdLaTljYmx4dUtHWjFibU4wYVc5dUlDaG5iRzlpWVd3c0lHWmhZM1J2Y25rcElIdGNiaUFnSUNCMGVYQmxiMllnWlhod2IzSjBjeUE5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlHMXZaSFZzWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaaFkzUnZjbmtvS1NBNlhHNGdJQ0FnZEhsd1pXOW1JR1JsWm1sdVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQmtaV1pwYm1VdVlXMWtJRDhnWkdWbWFXNWxLR1poWTNSdmNua3BJRHBjYmlBZ0lDQW9aMnh2WW1Gc0xrVlRObEJ5YjIxcGMyVWdQU0JtWVdOMGIzSjVLQ2twTzF4dWZTaDBhR2x6TENBb1puVnVZM1JwYjI0Z0tDa2dleUFuZFhObElITjBjbWxqZENjN1hHNWNibVoxYm1OMGFXOXVJRzlpYW1WamRFOXlSblZ1WTNScGIyNG9lQ2tnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUhnZ1BUMDlJQ2RtZFc1amRHbHZiaWNnZkh3Z2RIbHdaVzltSUhnZ1BUMDlJQ2R2WW1wbFkzUW5JQ1ltSUhnZ0lUMDlJRzUxYkd3N1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdselJuVnVZM1JwYjI0b2VDa2dlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JSGdnUFQwOUlDZG1kVzVqZEdsdmJpYzdYRzU5WEc1Y2JuWmhjaUJmYVhOQmNuSmhlU0E5SUhWdVpHVm1hVzVsWkR0Y2JtbG1JQ2doUVhKeVlYa3VhWE5CY25KaGVTa2dlMXh1SUNCZmFYTkJjbkpoZVNBOUlHWjFibU4wYVc5dUlDaDRLU0I3WEc0Z0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2g0S1NBOVBUMGdKMXR2WW1wbFkzUWdRWEp5WVhsZEp6dGNiaUFnZlR0Y2JuMGdaV3h6WlNCN1hHNGdJRjlwYzBGeWNtRjVJRDBnUVhKeVlYa3VhWE5CY25KaGVUdGNibjFjYmx4dWRtRnlJR2x6UVhKeVlYa2dQU0JmYVhOQmNuSmhlVHRjYmx4dWRtRnlJR3hsYmlBOUlEQTdYRzUyWVhJZ2RtVnlkSGhPWlhoMElEMGdkVzVrWldacGJtVmtPMXh1ZG1GeUlHTjFjM1J2YlZOamFHVmtkV3hsY2tadUlEMGdkVzVrWldacGJtVmtPMXh1WEc1MllYSWdZWE5oY0NBOUlHWjFibU4wYVc5dUlHRnpZWEFvWTJGc2JHSmhZMnNzSUdGeVp5a2dlMXh1SUNCeGRXVjFaVnRzWlc1ZElEMGdZMkZzYkdKaFkyczdYRzRnSUhGMVpYVmxXMnhsYmlBcklERmRJRDBnWVhKbk8xeHVJQ0JzWlc0Z0t6MGdNanRjYmlBZ2FXWWdLR3hsYmlBOVBUMGdNaWtnZTF4dUlDQWdJQzh2SUVsbUlHeGxiaUJwY3lBeUxDQjBhR0YwSUcxbFlXNXpJSFJvWVhRZ2QyVWdibVZsWkNCMGJ5QnpZMmhsWkhWc1pTQmhiaUJoYzNsdVl5Qm1iSFZ6YUM1Y2JpQWdJQ0F2THlCSlppQmhaR1JwZEdsdmJtRnNJR05oYkd4aVlXTnJjeUJoY21VZ2NYVmxkV1ZrSUdKbFptOXlaU0IwYUdVZ2NYVmxkV1VnYVhNZ1pteDFjMmhsWkN3Z2RHaGxlVnh1SUNBZ0lDOHZJSGRwYkd3Z1ltVWdjSEp2WTJWemMyVmtJR0o1SUhSb2FYTWdabXgxYzJnZ2RHaGhkQ0IzWlNCaGNtVWdjMk5vWldSMWJHbHVaeTVjYmlBZ0lDQnBaaUFvWTNWemRHOXRVMk5vWldSMWJHVnlSbTRwSUh0Y2JpQWdJQ0FnSUdOMWMzUnZiVk5qYUdWa2RXeGxja1p1S0dac2RYTm9LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2MyTm9aV1IxYkdWR2JIVnphQ2dwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVHRjYmx4dVpuVnVZM1JwYjI0Z2MyVjBVMk5vWldSMWJHVnlLSE5qYUdWa2RXeGxSbTRwSUh0Y2JpQWdZM1Z6ZEc5dFUyTm9aV1IxYkdWeVJtNGdQU0J6WTJobFpIVnNaVVp1TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ6WlhSQmMyRndLR0Z6WVhCR2Jpa2dlMXh1SUNCaGMyRndJRDBnWVhOaGNFWnVPMXh1ZlZ4dVhHNTJZWElnWW5KdmQzTmxjbGRwYm1SdmR5QTlJSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2QybHVaRzkzSURvZ2RXNWtaV1pwYm1Wa08xeHVkbUZ5SUdKeWIzZHpaWEpIYkc5aVlXd2dQU0JpY205M2MyVnlWMmx1Wkc5M0lIeDhJSHQ5TzF4dWRtRnlJRUp5YjNkelpYSk5kWFJoZEdsdmJrOWljMlZ5ZG1WeUlEMGdZbkp2ZDNObGNrZHNiMkpoYkM1TmRYUmhkR2x2Yms5aWMyVnlkbVZ5SUh4OElHSnliM2R6WlhKSGJHOWlZV3d1VjJWaVMybDBUWFYwWVhScGIyNVBZbk5sY25abGNqdGNiblpoY2lCcGMwNXZaR1VnUFNCMGVYQmxiMllnYzJWc1ppQTlQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdkSGx3Wlc5bUlIQnliMk5sYzNNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlDaDdmU2t1ZEc5VGRISnBibWN1WTJGc2JDaHdjbTlqWlhOektTQTlQVDBnSjF0dlltcGxZM1FnY0hKdlkyVnpjMTBuTzF4dVhHNHZMeUIwWlhOMElHWnZjaUIzWldJZ2QyOXlhMlZ5SUdKMWRDQnViM1FnYVc0Z1NVVXhNRnh1ZG1GeUlHbHpWMjl5YTJWeUlEMGdkSGx3Wlc5bUlGVnBiblE0UTJ4aGJYQmxaRUZ5Y21GNUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQjBlWEJsYjJZZ2FXMXdiM0owVTJOeWFYQjBjeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnZEhsd1pXOW1JRTFsYzNOaFoyVkRhR0Z1Ym1Wc0lDRTlQU0FuZFc1a1pXWnBibVZrSnp0Y2JseHVMeThnYm05a1pWeHVablZ1WTNScGIyNGdkWE5sVG1WNGRGUnBZMnNvS1NCN1hHNGdJQzh2SUc1dlpHVWdkbVZ5YzJsdmJpQXdMakV3TG5nZ1pHbHpjR3hoZVhNZ1lTQmtaWEJ5WldOaGRHbHZiaUIzWVhKdWFXNW5JSGRvWlc0Z2JtVjRkRlJwWTJzZ2FYTWdkWE5sWkNCeVpXTjFjbk5wZG1Wc2VWeHVJQ0F2THlCelpXVWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMk4xYW05cWN5OTNhR1Z1TDJsemMzVmxjeTgwTVRBZ1ptOXlJR1JsZEdGcGJITmNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjSEp2WTJWemN5NXVaWGgwVkdsamF5aG1iSFZ6YUNrN1hHNGdJSDA3WEc1OVhHNWNiaTh2SUhabGNuUjRYRzVtZFc1amRHbHZiaUIxYzJWV1pYSjBlRlJwYldWeUtDa2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlIWmxjblI0VG1WNGRDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ2RtVnlkSGhPWlhoMEtHWnNkWE5vS1R0Y2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhWelpWTmxkRlJwYldWdmRYUW9LVHRjYm4xY2JseHVablZ1WTNScGIyNGdkWE5sVFhWMFlYUnBiMjVQWW5ObGNuWmxjaWdwSUh0Y2JpQWdkbUZ5SUdsMFpYSmhkR2x2Ym5NZ1BTQXdPMXh1SUNCMllYSWdiMkp6WlhKMlpYSWdQU0J1WlhjZ1FuSnZkM05sY2sxMWRHRjBhVzl1VDJKelpYSjJaWElvWm14MWMyZ3BPMXh1SUNCMllYSWdibTlrWlNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlZSbGVIUk9iMlJsS0NjbktUdGNiaUFnYjJKelpYSjJaWEl1YjJKelpYSjJaU2h1YjJSbExDQjdJR05vWVhKaFkzUmxja1JoZEdFNklIUnlkV1VnZlNrN1hHNWNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0J1YjJSbExtUmhkR0VnUFNCcGRHVnlZWFJwYjI1eklEMGdLeXRwZEdWeVlYUnBiMjV6SUNVZ01qdGNiaUFnZlR0Y2JuMWNibHh1THk4Z2QyVmlJSGR2Y210bGNseHVablZ1WTNScGIyNGdkWE5sVFdWemMyRm5aVU5vWVc1dVpXd29LU0I3WEc0Z0lIWmhjaUJqYUdGdWJtVnNJRDBnYm1WM0lFMWxjM05oWjJWRGFHRnVibVZzS0NrN1hHNGdJR05vWVc1dVpXd3VjRzl5ZERFdWIyNXRaWE56WVdkbElEMGdabXgxYzJnN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHTm9ZVzV1Wld3dWNHOXlkREl1Y0c5emRFMWxjM05oWjJVb01DazdYRzRnSUgwN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhWelpWTmxkRlJwYldWdmRYUW9LU0I3WEc0Z0lDOHZJRk4wYjNKbElITmxkRlJwYldWdmRYUWdjbVZtWlhKbGJtTmxJSE52SUdWek5pMXdjbTl0YVhObElIZHBiR3dnWW1VZ2RXNWhabVpsWTNSbFpDQmllVnh1SUNBdkx5QnZkR2hsY2lCamIyUmxJRzF2WkdsbWVXbHVaeUJ6WlhSVWFXMWxiM1YwSUNoc2FXdGxJSE5wYm05dUxuVnpaVVpoYTJWVWFXMWxjbk1vS1NsY2JpQWdkbUZ5SUdkc2IySmhiRk5sZEZScGJXVnZkWFFnUFNCelpYUlVhVzFsYjNWME8xeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQm5iRzlpWVd4VFpYUlVhVzFsYjNWMEtHWnNkWE5vTENBeEtUdGNiaUFnZlR0Y2JuMWNibHh1ZG1GeUlIRjFaWFZsSUQwZ2JtVjNJRUZ5Y21GNUtERXdNREFwTzF4dVpuVnVZM1JwYjI0Z1pteDFjMmdvS1NCN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdWdU95QnBJQ3M5SURJcElIdGNiaUFnSUNCMllYSWdZMkZzYkdKaFkyc2dQU0J4ZFdWMVpWdHBYVHRjYmlBZ0lDQjJZWElnWVhKbklEMGdjWFZsZFdWYmFTQXJJREZkTzF4dVhHNGdJQ0FnWTJGc2JHSmhZMnNvWVhKbktUdGNibHh1SUNBZ0lIRjFaWFZsVzJsZElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lIRjFaWFZsVzJrZ0t5QXhYU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdmVnh1WEc0Z0lHeGxiaUE5SURBN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdGMGRHVnRjSFJXWlhKMGVDZ3BJSHRjYmlBZ2RISjVJSHRjYmlBZ0lDQjJZWElnY2lBOUlISmxjWFZwY21VN1hHNGdJQ0FnZG1GeUlIWmxjblI0SUQwZ2NpZ25kbVZ5ZEhnbktUdGNiaUFnSUNCMlpYSjBlRTVsZUhRZ1BTQjJaWEowZUM1eWRXNVBia3h2YjNBZ2ZId2dkbVZ5ZEhndWNuVnVUMjVEYjI1MFpYaDBPMXh1SUNBZ0lISmxkSFZ5YmlCMWMyVldaWEowZUZScGJXVnlLQ2s3WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RYTmxVMlYwVkdsdFpXOTFkQ2dwTzF4dUlDQjlYRzU5WEc1Y2JuWmhjaUJ6WTJobFpIVnNaVVpzZFhOb0lEMGdkVzVrWldacGJtVmtPMXh1THk4Z1JHVmphV1JsSUhkb1lYUWdZWE41Ym1NZ2JXVjBhRzlrSUhSdklIVnpaU0IwYnlCMGNtbG5aMlZ5YVc1bklIQnliMk5sYzNOcGJtY2diMllnY1hWbGRXVmtJR05oYkd4aVlXTnJjenBjYm1sbUlDaHBjMDV2WkdVcElIdGNiaUFnYzJOb1pXUjFiR1ZHYkhWemFDQTlJSFZ6WlU1bGVIUlVhV05yS0NrN1hHNTlJR1ZzYzJVZ2FXWWdLRUp5YjNkelpYSk5kWFJoZEdsdmJrOWljMlZ5ZG1WeUtTQjdYRzRnSUhOamFHVmtkV3hsUm14MWMyZ2dQU0IxYzJWTmRYUmhkR2x2Yms5aWMyVnlkbVZ5S0NrN1hHNTlJR1ZzYzJVZ2FXWWdLR2x6VjI5eWEyVnlLU0I3WEc0Z0lITmphR1ZrZFd4bFJteDFjMmdnUFNCMWMyVk5aWE56WVdkbFEyaGhibTVsYkNncE8xeHVmU0JsYkhObElHbG1JQ2hpY205M2MyVnlWMmx1Wkc5M0lEMDlQU0IxYm1SbFptbHVaV1FnSmlZZ2RIbHdaVzltSUhKbGNYVnBjbVVnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ2MyTm9aV1IxYkdWR2JIVnphQ0E5SUdGMGRHVnRjSFJXWlhKMGVDZ3BPMXh1ZlNCbGJITmxJSHRjYmlBZ2MyTm9aV1IxYkdWR2JIVnphQ0E5SUhWelpWTmxkRlJwYldWdmRYUW9LVHRjYm4xY2JseHVablZ1WTNScGIyNGdkR2hsYmlodmJrWjFiR1pwYkd4dFpXNTBMQ0J2YmxKbGFtVmpkR2x2YmlrZ2UxeHVJQ0IyWVhJZ1gyRnlaM1Z0Wlc1MGN5QTlJR0Z5WjNWdFpXNTBjenRjYmx4dUlDQjJZWElnY0dGeVpXNTBJRDBnZEdocGN6dGNibHh1SUNCMllYSWdZMmhwYkdRZ1BTQnVaWGNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWh1YjI5d0tUdGNibHh1SUNCcFppQW9ZMmhwYkdSYlVGSlBUVWxUUlY5SlJGMGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUcxaGEyVlFjbTl0YVhObEtHTm9hV3hrS1R0Y2JpQWdmVnh1WEc0Z0lIWmhjaUJmYzNSaGRHVWdQU0J3WVhKbGJuUXVYM04wWVhSbE8xeHVYRzRnSUdsbUlDaGZjM1JoZEdVcElIdGNiaUFnSUNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdkbUZ5SUdOaGJHeGlZV05ySUQwZ1gyRnlaM1Z0Wlc1MGMxdGZjM1JoZEdVZ0xTQXhYVHRjYmlBZ0lDQWdJR0Z6WVhBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVzUyYjJ0bFEyRnNiR0poWTJzb1gzTjBZWFJsTENCamFHbHNaQ3dnWTJGc2JHSmhZMnNzSUhCaGNtVnVkQzVmY21WemRXeDBLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwS0NrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2MzVmljMk55YVdKbEtIQmhjbVZ1ZEN3Z1kyaHBiR1FzSUc5dVJuVnNabWxzYkcxbGJuUXNJRzl1VW1WcVpXTjBhVzl1S1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCamFHbHNaRHRjYm4xY2JseHVMeW9xWEc0Z0lHQlFjbTl0YVhObExuSmxjMjlzZG1WZ0lISmxkSFZ5Ym5NZ1lTQndjbTl0YVhObElIUm9ZWFFnZDJsc2JDQmlaV052YldVZ2NtVnpiMngyWldRZ2QybDBhQ0IwYUdWY2JpQWdjR0Z6YzJWa0lHQjJZV3gxWldBdUlFbDBJR2x6SUhOb2IzSjBhR0Z1WkNCbWIzSWdkR2hsSUdadmJHeHZkMmx1WnpwY2JseHVJQ0JnWUdCcVlYWmhjMk55YVhCMFhHNGdJR3hsZENCd2NtOXRhWE5sSUQwZ2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtYdGNiaUFnSUNCeVpYTnZiSFpsS0RFcE8xeHVJQ0I5S1R0Y2JseHVJQ0J3Y205dGFYTmxMblJvWlc0b1puVnVZM1JwYjI0b2RtRnNkV1VwZTF4dUlDQWdJQzh2SUhaaGJIVmxJRDA5UFNBeFhHNGdJSDBwTzF4dUlDQmdZR0JjYmx4dUlDQkpibk4wWldGa0lHOW1JSGR5YVhScGJtY2dkR2hsSUdGaWIzWmxMQ0I1YjNWeUlHTnZaR1VnYm05M0lITnBiWEJzZVNCaVpXTnZiV1Z6SUhSb1pTQm1iMnhzYjNkcGJtYzZYRzVjYmlBZ1lHQmdhbUYyWVhOamNtbHdkRnh1SUNCc1pYUWdjSEp2YldselpTQTlJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTZ3hLVHRjYmx4dUlDQndjbTl0YVhObExuUm9aVzRvWm5WdVkzUnBiMjRvZG1Gc2RXVXBlMXh1SUNBZ0lDOHZJSFpoYkhWbElEMDlQU0F4WEc0Z0lIMHBPMXh1SUNCZ1lHQmNibHh1SUNCQWJXVjBhRzlrSUhKbGMyOXNkbVZjYmlBZ1FITjBZWFJwWTF4dUlDQkFjR0Z5WVcwZ2UwRnVlWDBnZG1Gc2RXVWdkbUZzZFdVZ2RHaGhkQ0IwYUdVZ2NtVjBkWEp1WldRZ2NISnZiV2x6WlNCM2FXeHNJR0psSUhKbGMyOXNkbVZrSUhkcGRHaGNiaUFnVlhObFpuVnNJR1p2Y2lCMGIyOXNhVzVuTGx4dUlDQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQmhJSEJ5YjIxcGMyVWdkR2hoZENCM2FXeHNJR0psWTI5dFpTQm1kV3htYVd4c1pXUWdkMmwwYUNCMGFHVWdaMmwyWlc1Y2JpQWdZSFpoYkhWbFlGeHVLaTljYm1aMWJtTjBhVzl1SUhKbGMyOXNkbVVvYjJKcVpXTjBLU0I3WEc0Z0lDOHFhbk5vYVc1MElIWmhiR2xrZEdocGN6cDBjblZsSUNvdlhHNGdJSFpoY2lCRGIyNXpkSEoxWTNSdmNpQTlJSFJvYVhNN1hHNWNiaUFnYVdZZ0tHOWlhbVZqZENBbUppQjBlWEJsYjJZZ2IySnFaV04wSUQwOVBTQW5iMkpxWldOMEp5QW1KaUJ2WW1wbFkzUXVZMjl1YzNSeWRXTjBiM0lnUFQwOUlFTnZibk4wY25WamRHOXlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHOWlhbVZqZER0Y2JpQWdmVnh1WEc0Z0lIWmhjaUJ3Y205dGFYTmxJRDBnYm1WM0lFTnZibk4wY25WamRHOXlLRzV2YjNBcE8xeHVJQ0JmY21WemIyeDJaU2h3Y205dGFYTmxMQ0J2WW1wbFkzUXBPMXh1SUNCeVpYUjFjbTRnY0hKdmJXbHpaVHRjYm4xY2JseHVkbUZ5SUZCU1QwMUpVMFZmU1VRZ1BTQk5ZWFJvTG5KaGJtUnZiU2dwTG5SdlUzUnlhVzVuS0RNMktTNXpkV0p6ZEhKcGJtY29NVFlwTzF4dVhHNW1kVzVqZEdsdmJpQnViMjl3S0NrZ2UzMWNibHh1ZG1GeUlGQkZUa1JKVGtjZ1BTQjJiMmxrSURBN1hHNTJZWElnUmxWTVJrbE1URVZFSUQwZ01UdGNiblpoY2lCU1JVcEZRMVJGUkNBOUlESTdYRzVjYm5aaGNpQkhSVlJmVkVoRlRsOUZVbEpQVWlBOUlHNWxkeUJGY25KdmNrOWlhbVZqZENncE8xeHVYRzVtZFc1amRHbHZiaUJ6Wld4bVJuVnNabWxzYkcxbGJuUW9LU0I3WEc0Z0lISmxkSFZ5YmlCdVpYY2dWSGx3WlVWeWNtOXlLRndpV1c5MUlHTmhibTV2ZENCeVpYTnZiSFpsSUdFZ2NISnZiV2x6WlNCM2FYUm9JR2wwYzJWc1psd2lLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZMkZ1Ym05MFVtVjBkWEp1VDNkdUtDa2dlMXh1SUNCeVpYUjFjbTRnYm1WM0lGUjVjR1ZGY25KdmNpZ25RU0J3Y205dGFYTmxjeUJqWVd4c1ltRmpheUJqWVc1dWIzUWdjbVYwZFhKdUlIUm9ZWFFnYzJGdFpTQndjbTl0YVhObExpY3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJVYUdWdUtIQnliMjFwYzJVcElIdGNiaUFnZEhKNUlIdGNiaUFnSUNCeVpYUjFjbTRnY0hKdmJXbHpaUzUwYUdWdU8xeHVJQ0I5SUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1SUNBZ0lFZEZWRjlVU0VWT1gwVlNVazlTTG1WeWNtOXlJRDBnWlhKeWIzSTdYRzRnSUNBZ2NtVjBkWEp1SUVkRlZGOVVTRVZPWDBWU1VrOVNPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhSeWVWUm9aVzRvZEdobGJpd2dkbUZzZFdVc0lHWjFiR1pwYkd4dFpXNTBTR0Z1Wkd4bGNpd2djbVZxWldOMGFXOXVTR0Z1Wkd4bGNpa2dlMXh1SUNCMGNua2dlMXh1SUNBZ0lIUm9aVzR1WTJGc2JDaDJZV3gxWlN3Z1puVnNabWxzYkcxbGJuUklZVzVrYkdWeUxDQnlaV3BsWTNScGIyNUlZVzVrYkdWeUtUdGNiaUFnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJsTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHaGhibVJzWlVadmNtVnBaMjVVYUdWdVlXSnNaU2h3Y205dGFYTmxMQ0IwYUdWdVlXSnNaU3dnZEdobGJpa2dlMXh1SUNCaGMyRndLR1oxYm1OMGFXOXVJQ2h3Y205dGFYTmxLU0I3WEc0Z0lDQWdkbUZ5SUhObFlXeGxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lIWmhjaUJsY25KdmNpQTlJSFJ5ZVZSb1pXNG9kR2hsYml3Z2RHaGxibUZpYkdVc0lHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2FXWWdLSE5sWVd4bFpDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnpaV0ZzWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnYVdZZ0tIUm9aVzVoWW14bElDRTlQU0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0JmY21WemIyeDJaU2h3Y205dGFYTmxMQ0IyWVd4MVpTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQm1kV3htYVd4c0tIQnliMjFwYzJVc0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TENCbWRXNWpkR2x2YmlBb2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNCcFppQW9jMlZoYkdWa0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lITmxZV3hsWkNBOUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUY5eVpXcGxZM1FvY0hKdmJXbHpaU3dnY21WaGMyOXVLVHRjYmlBZ0lDQjlMQ0FuVTJWMGRHeGxPaUFuSUNzZ0tIQnliMjFwYzJVdVgyeGhZbVZzSUh4OElDY2dkVzVyYm05M2JpQndjbTl0YVhObEp5a3BPMXh1WEc0Z0lDQWdhV1lnS0NGelpXRnNaV1FnSmlZZ1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUhObFlXeGxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQmZjbVZxWldOMEtIQnliMjFwYzJVc0lHVnljbTl5S1R0Y2JpQWdJQ0I5WEc0Z0lIMHNJSEJ5YjIxcGMyVXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm9ZVzVrYkdWUGQyNVVhR1Z1WVdKc1pTaHdjbTl0YVhObExDQjBhR1Z1WVdKc1pTa2dlMXh1SUNCcFppQW9kR2hsYm1GaWJHVXVYM04wWVhSbElEMDlQU0JHVlV4R1NVeE1SVVFwSUh0Y2JpQWdJQ0JtZFd4bWFXeHNLSEJ5YjIxcGMyVXNJSFJvWlc1aFlteGxMbDl5WlhOMWJIUXBPMXh1SUNCOUlHVnNjMlVnYVdZZ0tIUm9aVzVoWW14bExsOXpkR0YwWlNBOVBUMGdVa1ZLUlVOVVJVUXBJSHRjYmlBZ0lDQmZjbVZxWldOMEtIQnliMjFwYzJVc0lIUm9aVzVoWW14bExsOXlaWE4xYkhRcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lITjFZbk5qY21saVpTaDBhR1Z1WVdKc1pTd2dkVzVrWldacGJtVmtMQ0JtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmZjbVZ6YjJ4MlpTaHdjbTl0YVhObExDQjJZV3gxWlNrN1hHNGdJQ0FnZlN3Z1puVnVZM1JwYjI0Z0tISmxZWE52YmlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUY5eVpXcGxZM1FvY0hKdmJXbHpaU3dnY21WaGMyOXVLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCb1lXNWtiR1ZOWVhsaVpWUm9aVzVoWW14bEtIQnliMjFwYzJVc0lHMWhlV0psVkdobGJtRmliR1VzSUhSb1pXNGtKQ2tnZTF4dUlDQnBaaUFvYldGNVltVlVhR1Z1WVdKc1pTNWpiMjV6ZEhKMVkzUnZjaUE5UFQwZ2NISnZiV2x6WlM1amIyNXpkSEoxWTNSdmNpQW1KaUIwYUdWdUpDUWdQVDA5SUhSb1pXNGdKaVlnYldGNVltVlVhR1Z1WVdKc1pTNWpiMjV6ZEhKMVkzUnZjaTV5WlhOdmJIWmxJRDA5UFNCeVpYTnZiSFpsS1NCN1hHNGdJQ0FnYUdGdVpHeGxUM2R1VkdobGJtRmliR1VvY0hKdmJXbHpaU3dnYldGNVltVlVhR1Z1WVdKc1pTazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdhV1lnS0hSb1pXNGtKQ0E5UFQwZ1IwVlVYMVJJUlU1ZlJWSlNUMUlwSUh0Y2JpQWdJQ0FnSUY5eVpXcGxZM1FvY0hKdmJXbHpaU3dnUjBWVVgxUklSVTVmUlZKU1QxSXVaWEp5YjNJcE8xeHVJQ0FnSUNBZ1IwVlVYMVJJUlU1ZlJWSlNUMUl1WlhKeWIzSWdQU0J1ZFd4c08xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaGxiaVFrSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJR1oxYkdacGJHd29jSEp2YldselpTd2diV0Y1WW1WVWFHVnVZV0pzWlNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNocGMwWjFibU4wYVc5dUtIUm9aVzRrSkNrcElIdGNiaUFnSUNBZ0lHaGhibVJzWlVadmNtVnBaMjVVYUdWdVlXSnNaU2h3Y205dGFYTmxMQ0J0WVhsaVpWUm9aVzVoWW14bExDQjBhR1Z1SkNRcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JtZFd4bWFXeHNLSEJ5YjIxcGMyVXNJRzFoZVdKbFZHaGxibUZpYkdVcE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZjbVZ6YjJ4MlpTaHdjbTl0YVhObExDQjJZV3gxWlNrZ2UxeHVJQ0JwWmlBb2NISnZiV2x6WlNBOVBUMGdkbUZzZFdVcElIdGNiaUFnSUNCZmNtVnFaV04wS0hCeWIyMXBjMlVzSUhObGJHWkdkV3htYVd4c2JXVnVkQ2dwS1R0Y2JpQWdmU0JsYkhObElHbG1JQ2h2WW1wbFkzUlBja1oxYm1OMGFXOXVLSFpoYkhWbEtTa2dlMXh1SUNBZ0lHaGhibVJzWlUxaGVXSmxWR2hsYm1GaWJHVW9jSEp2YldselpTd2dkbUZzZFdVc0lHZGxkRlJvWlc0b2RtRnNkV1VwS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCbWRXeG1hV3hzS0hCeWIyMXBjMlVzSUhaaGJIVmxLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCd2RXSnNhWE5vVW1WcVpXTjBhVzl1S0hCeWIyMXBjMlVwSUh0Y2JpQWdhV1lnS0hCeWIyMXBjMlV1WDI5dVpYSnliM0lwSUh0Y2JpQWdJQ0J3Y205dGFYTmxMbDl2Ym1WeWNtOXlLSEJ5YjIxcGMyVXVYM0psYzNWc2RDazdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FYTm9LSEJ5YjIxcGMyVXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm1kV3htYVd4c0tIQnliMjFwYzJVc0lIWmhiSFZsS1NCN1hHNGdJR2xtSUNod2NtOXRhWE5sTGw5emRHRjBaU0FoUFQwZ1VFVk9SRWxPUnlrZ2UxeHVJQ0FnSUhKbGRIVnlianRjYmlBZ2ZWeHVYRzRnSUhCeWIyMXBjMlV1WDNKbGMzVnNkQ0E5SUhaaGJIVmxPMXh1SUNCd2NtOXRhWE5sTGw5emRHRjBaU0E5SUVaVlRFWkpURXhGUkR0Y2JseHVJQ0JwWmlBb2NISnZiV2x6WlM1ZmMzVmljMk55YVdKbGNuTXViR1Z1WjNSb0lDRTlQU0F3S1NCN1hHNGdJQ0FnWVhOaGNDaHdkV0pzYVhOb0xDQndjbTl0YVhObEtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJmY21WcVpXTjBLSEJ5YjIxcGMyVXNJSEpsWVhOdmJpa2dlMXh1SUNCcFppQW9jSEp2YldselpTNWZjM1JoZEdVZ0lUMDlJRkJGVGtSSlRrY3BJSHRjYmlBZ0lDQnlaWFIxY200N1hHNGdJSDFjYmlBZ2NISnZiV2x6WlM1ZmMzUmhkR1VnUFNCU1JVcEZRMVJGUkR0Y2JpQWdjSEp2YldselpTNWZjbVZ6ZFd4MElEMGdjbVZoYzI5dU8xeHVYRzRnSUdGellYQW9jSFZpYkdsemFGSmxhbVZqZEdsdmJpd2djSEp2YldselpTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlITjFZbk5qY21saVpTaHdZWEpsYm5Rc0lHTm9hV3hrTENCdmJrWjFiR1pwYkd4dFpXNTBMQ0J2YmxKbGFtVmpkR2x2YmlrZ2UxeHVJQ0IyWVhJZ1gzTjFZbk5qY21saVpYSnpJRDBnY0dGeVpXNTBMbDl6ZFdKelkzSnBZbVZ5Y3p0Y2JpQWdkbUZ5SUd4bGJtZDBhQ0E5SUY5emRXSnpZM0pwWW1WeWN5NXNaVzVuZEdnN1hHNWNiaUFnY0dGeVpXNTBMbDl2Ym1WeWNtOXlJRDBnYm5Wc2JEdGNibHh1SUNCZmMzVmljMk55YVdKbGNuTmJiR1Z1WjNSb1hTQTlJR05vYVd4a08xeHVJQ0JmYzNWaWMyTnlhV0psY25OYmJHVnVaM1JvSUNzZ1JsVk1Sa2xNVEVWRVhTQTlJRzl1Um5Wc1ptbHNiRzFsYm5RN1hHNGdJRjl6ZFdKelkzSnBZbVZ5YzF0c1pXNW5kR2dnS3lCU1JVcEZRMVJGUkYwZ1BTQnZibEpsYW1WamRHbHZianRjYmx4dUlDQnBaaUFvYkdWdVozUm9JRDA5UFNBd0lDWW1JSEJoY21WdWRDNWZjM1JoZEdVcElIdGNiaUFnSUNCaGMyRndLSEIxWW14cGMyZ3NJSEJoY21WdWRDazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnY0hWaWJHbHphQ2h3Y205dGFYTmxLU0I3WEc0Z0lIWmhjaUJ6ZFdKelkzSnBZbVZ5Y3lBOUlIQnliMjFwYzJVdVgzTjFZbk5qY21saVpYSnpPMXh1SUNCMllYSWdjMlYwZEd4bFpDQTlJSEJ5YjIxcGMyVXVYM04wWVhSbE8xeHVYRzRnSUdsbUlDaHpkV0p6WTNKcFltVnljeTVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNibHh1SUNCMllYSWdZMmhwYkdRZ1BTQjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQmpZV3hzWW1GamF5QTlJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQWdJR1JsZEdGcGJDQTlJSEJ5YjIxcGMyVXVYM0psYzNWc2REdGNibHh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElITjFZbk5qY21saVpYSnpMbXhsYm1kMGFEc2dhU0FyUFNBektTQjdYRzRnSUNBZ1kyaHBiR1FnUFNCemRXSnpZM0pwWW1WeWMxdHBYVHRjYmlBZ0lDQmpZV3hzWW1GamF5QTlJSE4xWW5OamNtbGlaWEp6VzJrZ0t5QnpaWFIwYkdWa1hUdGNibHh1SUNBZ0lHbG1JQ2hqYUdsc1pDa2dlMXh1SUNBZ0lDQWdhVzUyYjJ0bFEyRnNiR0poWTJzb2MyVjBkR3hsWkN3Z1kyaHBiR1FzSUdOaGJHeGlZV05yTENCa1pYUmhhV3dwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmpZV3hzWW1GamF5aGtaWFJoYVd3cE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lIQnliMjFwYzJVdVgzTjFZbk5qY21saVpYSnpMbXhsYm1kMGFDQTlJREE3WEc1OVhHNWNibVoxYm1OMGFXOXVJRVZ5Y205eVQySnFaV04wS0NrZ2UxeHVJQ0IwYUdsekxtVnljbTl5SUQwZ2JuVnNiRHRjYm4xY2JseHVkbUZ5SUZSU1dWOURRVlJEU0Y5RlVsSlBVaUE5SUc1bGR5QkZjbkp2Y2s5aWFtVmpkQ2dwTzF4dVhHNW1kVzVqZEdsdmJpQjBjbmxEWVhSamFDaGpZV3hzWW1GamF5d2daR1YwWVdsc0tTQjdYRzRnSUhSeWVTQjdYRzRnSUNBZ2NtVjBkWEp1SUdOaGJHeGlZV05yS0dSbGRHRnBiQ2s3WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQlVVbGxmUTBGVVEwaGZSVkpTVDFJdVpYSnliM0lnUFNCbE8xeHVJQ0FnSUhKbGRIVnliaUJVVWxsZlEwRlVRMGhmUlZKU1QxSTdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYVc1MmIydGxRMkZzYkdKaFkyc29jMlYwZEd4bFpDd2djSEp2YldselpTd2dZMkZzYkdKaFkyc3NJR1JsZEdGcGJDa2dlMXh1SUNCMllYSWdhR0Z6UTJGc2JHSmhZMnNnUFNCcGMwWjFibU4wYVc5dUtHTmhiR3hpWVdOcktTeGNiaUFnSUNBZ0lIWmhiSFZsSUQwZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUNBZ1pYSnliM0lnUFNCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNCemRXTmpaV1ZrWldRZ1BTQjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQm1ZV2xzWldRZ1BTQjFibVJsWm1sdVpXUTdYRzVjYmlBZ2FXWWdLR2hoYzBOaGJHeGlZV05yS1NCN1hHNGdJQ0FnZG1Gc2RXVWdQU0IwY25sRFlYUmphQ2hqWVd4c1ltRmpheXdnWkdWMFlXbHNLVHRjYmx4dUlDQWdJR2xtSUNoMllXeDFaU0E5UFQwZ1ZGSlpYME5CVkVOSVgwVlNVazlTS1NCN1hHNGdJQ0FnSUNCbVlXbHNaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdaWEp5YjNJZ1BTQjJZV3gxWlM1bGNuSnZjanRjYmlBZ0lDQWdJSFpoYkhWbExtVnljbTl5SUQwZ2JuVnNiRHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2MzVmpZMlZsWkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2NISnZiV2x6WlNBOVBUMGdkbUZzZFdVcElIdGNiaUFnSUNBZ0lGOXlaV3BsWTNRb2NISnZiV2x6WlN3Z1kyRnVibTkwVW1WMGRYSnVUM2R1S0NrcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IyWVd4MVpTQTlJR1JsZEdGcGJEdGNiaUFnSUNCemRXTmpaV1ZrWldRZ1BTQjBjblZsTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSEJ5YjIxcGMyVXVYM04wWVhSbElDRTlQU0JRUlU1RVNVNUhLU0I3WEc0Z0lDQWdMeThnYm05dmNGeHVJQ0I5SUdWc2MyVWdhV1lnS0doaGMwTmhiR3hpWVdOcklDWW1JSE4xWTJObFpXUmxaQ2tnZTF4dUlDQWdJQ0FnWDNKbGMyOXNkbVVvY0hKdmJXbHpaU3dnZG1Gc2RXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9abUZwYkdWa0tTQjdYRzRnSUNBZ0lDQmZjbVZxWldOMEtIQnliMjFwYzJVc0lHVnljbTl5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hObGRIUnNaV1FnUFQwOUlFWlZURVpKVEV4RlJDa2dlMXh1SUNBZ0lDQWdablZzWm1sc2JDaHdjbTl0YVhObExDQjJZV3gxWlNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoelpYUjBiR1ZrSUQwOVBTQlNSVXBGUTFSRlJDa2dlMXh1SUNBZ0lDQWdYM0psYW1WamRDaHdjbTl0YVhObExDQjJZV3gxWlNrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1sMGFXRnNhWHBsVUhKdmJXbHpaU2h3Y205dGFYTmxMQ0J5WlhOdmJIWmxjaWtnZTF4dUlDQjBjbmtnZTF4dUlDQWdJSEpsYzI5c2RtVnlLR1oxYm1OMGFXOXVJSEpsYzI5c2RtVlFjbTl0YVhObEtIWmhiSFZsS1NCN1hHNGdJQ0FnSUNCZmNtVnpiMngyWlNod2NtOXRhWE5sTENCMllXeDFaU2s3WEc0Z0lDQWdmU3dnWm5WdVkzUnBiMjRnY21WcVpXTjBVSEp2YldselpTaHlaV0Z6YjI0cElIdGNiaUFnSUNBZ0lGOXlaV3BsWTNRb2NISnZiV2x6WlN3Z2NtVmhjMjl1S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJRjl5WldwbFkzUW9jSEp2YldselpTd2daU2s3WEc0Z0lIMWNibjFjYmx4dWRtRnlJR2xrSUQwZ01EdGNibVoxYm1OMGFXOXVJRzVsZUhSSlpDZ3BJSHRjYmlBZ2NtVjBkWEp1SUdsa0t5czdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHMWhhMlZRY205dGFYTmxLSEJ5YjIxcGMyVXBJSHRjYmlBZ2NISnZiV2x6WlZ0UVVrOU5TVk5GWDBsRVhTQTlJR2xrS3lzN1hHNGdJSEJ5YjIxcGMyVXVYM04wWVhSbElEMGdkVzVrWldacGJtVmtPMXh1SUNCd2NtOXRhWE5sTGw5eVpYTjFiSFFnUFNCMWJtUmxabWx1WldRN1hHNGdJSEJ5YjIxcGMyVXVYM04xWW5OamNtbGlaWEp6SUQwZ1cxMDdYRzU5WEc1Y2JtWjFibU4wYVc5dUlFVnVkVzFsY21GMGIzSW9RMjl1YzNSeWRXTjBiM0lzSUdsdWNIVjBLU0I3WEc0Z0lIUm9hWE11WDJsdWMzUmhibU5sUTI5dWMzUnlkV04wYjNJZ1BTQkRiMjV6ZEhKMVkzUnZjanRjYmlBZ2RHaHBjeTV3Y205dGFYTmxJRDBnYm1WM0lFTnZibk4wY25WamRHOXlLRzV2YjNBcE8xeHVYRzRnSUdsbUlDZ2hkR2hwY3k1d2NtOXRhWE5sVzFCU1QwMUpVMFZmU1VSZEtTQjdYRzRnSUNBZ2JXRnJaVkJ5YjIxcGMyVW9kR2hwY3k1d2NtOXRhWE5sS1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2hwYzBGeWNtRjVLR2x1Y0hWMEtTa2dlMXh1SUNBZ0lIUm9hWE11WDJsdWNIVjBJRDBnYVc1d2RYUTdYRzRnSUNBZ2RHaHBjeTVzWlc1bmRHZ2dQU0JwYm5CMWRDNXNaVzVuZEdnN1hHNGdJQ0FnZEdocGN5NWZjbVZ0WVdsdWFXNW5JRDBnYVc1d2RYUXViR1Z1WjNSb08xeHVYRzRnSUNBZ2RHaHBjeTVmY21WemRXeDBJRDBnYm1WM0lFRnljbUY1S0hSb2FYTXViR1Z1WjNSb0tUdGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnWm5Wc1ptbHNiQ2gwYUdsekxuQnliMjFwYzJVc0lIUm9hWE11WDNKbGMzVnNkQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11YkdWdVozUm9JRDBnZEdocGN5NXNaVzVuZEdnZ2ZId2dNRHRjYmlBZ0lDQWdJSFJvYVhNdVgyVnVkVzFsY21GMFpTZ3BPMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVYM0psYldGcGJtbHVaeUE5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0JtZFd4bWFXeHNLSFJvYVhNdWNISnZiV2x6WlN3Z2RHaHBjeTVmY21WemRXeDBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdYM0psYW1WamRDaDBhR2x6TG5CeWIyMXBjMlVzSUhaaGJHbGtZWFJwYjI1RmNuSnZjaWdwS1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjJZV3hwWkdGMGFXOXVSWEp5YjNJb0tTQjdYRzRnSUhKbGRIVnliaUJ1WlhjZ1JYSnliM0lvSjBGeWNtRjVJRTFsZEdodlpITWdiWFZ6ZENCaVpTQndjbTkyYVdSbFpDQmhiaUJCY25KaGVTY3BPMXh1ZlR0Y2JseHVSVzUxYldWeVlYUnZjaTV3Y205MGIzUjVjR1V1WDJWdWRXMWxjbUYwWlNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2RtRnlJR3hsYm1kMGFDQTlJSFJvYVhNdWJHVnVaM1JvTzF4dUlDQjJZWElnWDJsdWNIVjBJRDBnZEdocGN5NWZhVzV3ZFhRN1hHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJSFJvYVhNdVgzTjBZWFJsSUQwOVBTQlFSVTVFU1U1SElDWW1JR2tnUENCc1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lIUm9hWE11WDJWaFkyaEZiblJ5ZVNoZmFXNXdkWFJiYVYwc0lHa3BPMXh1SUNCOVhHNTlPMXh1WEc1RmJuVnRaWEpoZEc5eUxuQnliM1J2ZEhsd1pTNWZaV0ZqYUVWdWRISjVJRDBnWm5WdVkzUnBiMjRnS0dWdWRISjVMQ0JwS1NCN1hHNGdJSFpoY2lCaklEMGdkR2hwY3k1ZmFXNXpkR0Z1WTJWRGIyNXpkSEoxWTNSdmNqdGNiaUFnZG1GeUlISmxjMjlzZG1Va0pDQTlJR011Y21WemIyeDJaVHRjYmx4dUlDQnBaaUFvY21WemIyeDJaU1FrSUQwOVBTQnlaWE52YkhabEtTQjdYRzRnSUNBZ2RtRnlJRjkwYUdWdUlEMGdaMlYwVkdobGJpaGxiblJ5ZVNrN1hHNWNiaUFnSUNCcFppQW9YM1JvWlc0Z1BUMDlJSFJvWlc0Z0ppWWdaVzUwY25rdVgzTjBZWFJsSUNFOVBTQlFSVTVFU1U1SEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5elpYUjBiR1ZrUVhRb1pXNTBjbmt1WDNOMFlYUmxMQ0JwTENCbGJuUnllUzVmY21WemRXeDBLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQmZkR2hsYmlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnZEdocGN5NWZjbVZ0WVdsdWFXNW5MUzA3WEc0Z0lDQWdJQ0IwYUdsekxsOXlaWE4xYkhSYmFWMGdQU0JsYm5SeWVUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHTWdQVDA5SUZCeWIyMXBjMlVwSUh0Y2JpQWdJQ0FnSUhaaGNpQndjbTl0YVhObElEMGdibVYzSUdNb2JtOXZjQ2s3WEc0Z0lDQWdJQ0JvWVc1a2JHVk5ZWGxpWlZSb1pXNWhZbXhsS0hCeWIyMXBjMlVzSUdWdWRISjVMQ0JmZEdobGJpazdYRzRnSUNBZ0lDQjBhR2x6TGw5M2FXeHNVMlYwZEd4bFFYUW9jSEp2YldselpTd2dhU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11WDNkcGJHeFRaWFIwYkdWQmRDaHVaWGNnWXlobWRXNWpkR2x2YmlBb2NtVnpiMngyWlNRa0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE52YkhabEpDUW9aVzUwY25rcE8xeHVJQ0FnSUNBZ2ZTa3NJR2twTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwYUdsekxsOTNhV3hzVTJWMGRHeGxRWFFvY21WemIyeDJaU1FrS0dWdWRISjVLU3dnYVNrN1hHNGdJSDFjYm4wN1hHNWNia1Z1ZFcxbGNtRjBiM0l1Y0hKdmRHOTBlWEJsTGw5elpYUjBiR1ZrUVhRZ1BTQm1kVzVqZEdsdmJpQW9jM1JoZEdVc0lHa3NJSFpoYkhWbEtTQjdYRzRnSUhaaGNpQndjbTl0YVhObElEMGdkR2hwY3k1d2NtOXRhWE5sTzF4dVhHNGdJR2xtSUNod2NtOXRhWE5sTGw5emRHRjBaU0E5UFQwZ1VFVk9SRWxPUnlrZ2UxeHVJQ0FnSUhSb2FYTXVYM0psYldGcGJtbHVaeTB0TzF4dVhHNGdJQ0FnYVdZZ0tITjBZWFJsSUQwOVBTQlNSVXBGUTFSRlJDa2dlMXh1SUNBZ0lDQWdYM0psYW1WamRDaHdjbTl0YVhObExDQjJZV3gxWlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzSmxjM1ZzZEZ0cFhTQTlJSFpoYkhWbE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHbG1JQ2gwYUdsekxsOXlaVzFoYVc1cGJtY2dQVDA5SURBcElIdGNiaUFnSUNCbWRXeG1hV3hzS0hCeWIyMXBjMlVzSUhSb2FYTXVYM0psYzNWc2RDazdYRzRnSUgxY2JuMDdYRzVjYmtWdWRXMWxjbUYwYjNJdWNISnZkRzkwZVhCbExsOTNhV3hzVTJWMGRHeGxRWFFnUFNCbWRXNWpkR2x2YmlBb2NISnZiV2x6WlN3Z2FTa2dlMXh1SUNCMllYSWdaVzUxYldWeVlYUnZjaUE5SUhSb2FYTTdYRzVjYmlBZ2MzVmljMk55YVdKbEtIQnliMjFwYzJVc0lIVnVaR1ZtYVc1bFpDd2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWdWRXMWxjbUYwYjNJdVgzTmxkSFJzWldSQmRDaEdWVXhHU1V4TVJVUXNJR2tzSUhaaGJIVmxLVHRjYmlBZ2ZTd2dablZ1WTNScGIyNGdLSEpsWVhOdmJpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGJuVnRaWEpoZEc5eUxsOXpaWFIwYkdWa1FYUW9Va1ZLUlVOVVJVUXNJR2tzSUhKbFlYTnZiaWs3WEc0Z0lIMHBPMXh1ZlR0Y2JseHVMeW9xWEc0Z0lHQlFjbTl0YVhObExtRnNiR0FnWVdOalpYQjBjeUJoYmlCaGNuSmhlU0J2WmlCd2NtOXRhWE5sY3l3Z1lXNWtJSEpsZEhWeWJuTWdZU0J1WlhjZ2NISnZiV2x6WlNCM2FHbGphRnh1SUNCcGN5Qm1kV3htYVd4c1pXUWdkMmwwYUNCaGJpQmhjbkpoZVNCdlppQm1kV3htYVd4c2JXVnVkQ0IyWVd4MVpYTWdabTl5SUhSb1pTQndZWE56WldRZ2NISnZiV2x6WlhNc0lHOXlYRzRnSUhKbGFtVmpkR1ZrSUhkcGRHZ2dkR2hsSUhKbFlYTnZiaUJ2WmlCMGFHVWdabWx5YzNRZ2NHRnpjMlZrSUhCeWIyMXBjMlVnZEc4Z1ltVWdjbVZxWldOMFpXUXVJRWwwSUdOaGMzUnpJR0ZzYkZ4dUlDQmxiR1Z0Wlc1MGN5QnZaaUIwYUdVZ2NHRnpjMlZrSUdsMFpYSmhZbXhsSUhSdklIQnliMjFwYzJWeklHRnpJR2wwSUhKMWJuTWdkR2hwY3lCaGJHZHZjbWwwYUcwdVhHNWNiaUFnUlhoaGJYQnNaVHBjYmx4dUlDQmdZR0JxWVhaaGMyTnlhWEIwWEc0Z0lHeGxkQ0J3Y205dGFYTmxNU0E5SUhKbGMyOXNkbVVvTVNrN1hHNGdJR3hsZENCd2NtOXRhWE5sTWlBOUlISmxjMjlzZG1Vb01pazdYRzRnSUd4bGRDQndjbTl0YVhObE15QTlJSEpsYzI5c2RtVW9NeWs3WEc0Z0lHeGxkQ0J3Y205dGFYTmxjeUE5SUZzZ2NISnZiV2x6WlRFc0lIQnliMjFwYzJVeUxDQndjbTl0YVhObE15QmRPMXh1WEc0Z0lGQnliMjFwYzJVdVlXeHNLSEJ5YjIxcGMyVnpLUzUwYUdWdUtHWjFibU4wYVc5dUtHRnljbUY1S1h0Y2JpQWdJQ0F2THlCVWFHVWdZWEp5WVhrZ2FHVnlaU0IzYjNWc1pDQmlaU0JiSURFc0lESXNJRE1nWFR0Y2JpQWdmU2s3WEc0Z0lHQmdZRnh1WEc0Z0lFbG1JR0Z1ZVNCdlppQjBhR1VnWUhCeWIyMXBjMlZ6WUNCbmFYWmxiaUIwYnlCZ1lXeHNZQ0JoY21VZ2NtVnFaV04wWldRc0lIUm9aU0JtYVhKemRDQndjbTl0YVhObFhHNGdJSFJvWVhRZ2FYTWdjbVZxWldOMFpXUWdkMmxzYkNCaVpTQm5hWFpsYmlCaGN5QmhiaUJoY21kMWJXVnVkQ0IwYnlCMGFHVWdjbVYwZFhKdVpXUWdjSEp2YldselpYTW5jMXh1SUNCeVpXcGxZM1JwYjI0Z2FHRnVaR3hsY2k0Z1JtOXlJR1Y0WVcxd2JHVTZYRzVjYmlBZ1JYaGhiWEJzWlRwY2JseHVJQ0JnWUdCcVlYWmhjMk55YVhCMFhHNGdJR3hsZENCd2NtOXRhWE5sTVNBOUlISmxjMjlzZG1Vb01TazdYRzRnSUd4bGRDQndjbTl0YVhObE1pQTlJSEpsYW1WamRDaHVaWGNnUlhKeWIzSW9YQ0l5WENJcEtUdGNiaUFnYkdWMElIQnliMjFwYzJVeklEMGdjbVZxWldOMEtHNWxkeUJGY25KdmNpaGNJak5jSWlrcE8xeHVJQ0JzWlhRZ2NISnZiV2x6WlhNZ1BTQmJJSEJ5YjIxcGMyVXhMQ0J3Y205dGFYTmxNaXdnY0hKdmJXbHpaVE1nWFR0Y2JseHVJQ0JRY205dGFYTmxMbUZzYkNod2NtOXRhWE5sY3lrdWRHaGxiaWhtZFc1amRHbHZiaWhoY25KaGVTbDdYRzRnSUNBZ0x5OGdRMjlrWlNCb1pYSmxJRzVsZG1WeUlISjFibk1nWW1WallYVnpaU0IwYUdWeVpTQmhjbVVnY21WcVpXTjBaV1FnY0hKdmJXbHpaWE1oWEc0Z0lIMHNJR1oxYm1OMGFXOXVLR1Z5Y205eUtTQjdYRzRnSUNBZ0x5OGdaWEp5YjNJdWJXVnpjMkZuWlNBOVBUMGdYQ0l5WENKY2JpQWdmU2s3WEc0Z0lHQmdZRnh1WEc0Z0lFQnRaWFJvYjJRZ1lXeHNYRzRnSUVCemRHRjBhV05jYmlBZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnWlc1MGNtbGxjeUJoY25KaGVTQnZaaUJ3Y205dGFYTmxjMXh1SUNCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYkdGaVpXd2diM0IwYVc5dVlXd2djM1J5YVc1bklHWnZjaUJzWVdKbGJHbHVaeUIwYUdVZ2NISnZiV2x6WlM1Y2JpQWdWWE5sWm5Wc0lHWnZjaUIwYjI5c2FXNW5MbHh1SUNCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNCd2NtOXRhWE5sSUhSb1lYUWdhWE1nWm5Wc1ptbHNiR1ZrSUhkb1pXNGdZV3hzSUdCd2NtOXRhWE5sYzJBZ2FHRjJaU0JpWldWdVhHNGdJR1oxYkdacGJHeGxaQ3dnYjNJZ2NtVnFaV04wWldRZ2FXWWdZVzU1SUc5bUlIUm9aVzBnWW1WamIyMWxJSEpsYW1WamRHVmtMbHh1SUNCQWMzUmhkR2xqWEc0cUwxeHVablZ1WTNScGIyNGdZV3hzS0dWdWRISnBaWE1wSUh0Y2JpQWdjbVYwZFhKdUlHNWxkeUJGYm5WdFpYSmhkRzl5S0hSb2FYTXNJR1Z1ZEhKcFpYTXBMbkJ5YjIxcGMyVTdYRzU5WEc1Y2JpOHFLbHh1SUNCZ1VISnZiV2x6WlM1eVlXTmxZQ0J5WlhSMWNtNXpJR0VnYm1WM0lIQnliMjFwYzJVZ2QyaHBZMmdnYVhNZ2MyVjBkR3hsWkNCcGJpQjBhR1VnYzJGdFpTQjNZWGtnWVhNZ2RHaGxYRzRnSUdacGNuTjBJSEJoYzNObFpDQndjbTl0YVhObElIUnZJSE5sZEhSc1pTNWNibHh1SUNCRmVHRnRjR3hsT2x4dVhHNGdJR0JnWUdwaGRtRnpZM0pwY0hSY2JpQWdiR1YwSUhCeWIyMXBjMlV4SUQwZ2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtYdGNiaUFnSUNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQnlaWE52YkhabEtDZHdjbTl0YVhObElERW5LVHRjYmlBZ0lDQjlMQ0F5TURBcE8xeHVJQ0I5S1R0Y2JseHVJQ0JzWlhRZ2NISnZiV2x6WlRJZ1BTQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBlMXh1SUNBZ0lITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJSEpsYzI5c2RtVW9KM0J5YjIxcGMyVWdNaWNwTzF4dUlDQWdJSDBzSURFd01DazdYRzRnSUgwcE8xeHVYRzRnSUZCeWIyMXBjMlV1Y21GalpTaGJjSEp2YldselpURXNJSEJ5YjIxcGMyVXlYU2t1ZEdobGJpaG1kVzVqZEdsdmJpaHlaWE4xYkhRcGUxeHVJQ0FnSUM4dklISmxjM1ZzZENBOVBUMGdKM0J5YjIxcGMyVWdNaWNnWW1WallYVnpaU0JwZENCM1lYTWdjbVZ6YjJ4MlpXUWdZbVZtYjNKbElIQnliMjFwYzJVeFhHNGdJQ0FnTHk4Z2QyRnpJSEpsYzI5c2RtVmtMbHh1SUNCOUtUdGNiaUFnWUdCZ1hHNWNiaUFnWUZCeWIyMXBjMlV1Y21GalpXQWdhWE1nWkdWMFpYSnRhVzVwYzNScFl5QnBiaUIwYUdGMElHOXViSGtnZEdobElITjBZWFJsSUc5bUlIUm9aU0JtYVhKemRGeHVJQ0J6WlhSMGJHVmtJSEJ5YjIxcGMyVWdiV0YwZEdWeWN5NGdSbTl5SUdWNFlXMXdiR1VzSUdWMlpXNGdhV1lnYjNSb1pYSWdjSEp2YldselpYTWdaMmwyWlc0Z2RHOGdkR2hsWEc0Z0lHQndjbTl0YVhObGMyQWdZWEp5WVhrZ1lYSm5kVzFsYm5RZ1lYSmxJSEpsYzI5c2RtVmtMQ0JpZFhRZ2RHaGxJR1pwY25OMElITmxkSFJzWldRZ2NISnZiV2x6WlNCb1lYTmNiaUFnWW1WamIyMWxJSEpsYW1WamRHVmtJR0psWm05eVpTQjBhR1VnYjNSb1pYSWdjSEp2YldselpYTWdZbVZqWVcxbElHWjFiR1pwYkd4bFpDd2dkR2hsSUhKbGRIVnlibVZrWEc0Z0lIQnliMjFwYzJVZ2QybHNiQ0JpWldOdmJXVWdjbVZxWldOMFpXUTZYRzVjYmlBZ1lHQmdhbUYyWVhOamNtbHdkRnh1SUNCc1pYUWdjSEp2YldselpURWdQU0J1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwZTF4dUlDQWdJSE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUhKbGMyOXNkbVVvSjNCeWIyMXBjMlVnTVNjcE8xeHVJQ0FnSUgwc0lESXdNQ2s3WEc0Z0lIMHBPMXh1WEc0Z0lHeGxkQ0J3Y205dGFYTmxNaUE5SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENsN1hHNGdJQ0FnYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ2NtVnFaV04wS0c1bGR5QkZjbkp2Y2lnbmNISnZiV2x6WlNBeUp5a3BPMXh1SUNBZ0lIMHNJREV3TUNrN1hHNGdJSDBwTzF4dVhHNGdJRkJ5YjIxcGMyVXVjbUZqWlNoYmNISnZiV2x6WlRFc0lIQnliMjFwYzJVeVhTa3VkR2hsYmlobWRXNWpkR2x2YmloeVpYTjFiSFFwZTF4dUlDQWdJQzh2SUVOdlpHVWdhR1Z5WlNCdVpYWmxjaUJ5ZFc1elhHNGdJSDBzSUdaMWJtTjBhVzl1S0hKbFlYTnZiaWw3WEc0Z0lDQWdMeThnY21WaGMyOXVMbTFsYzNOaFoyVWdQVDA5SUNkd2NtOXRhWE5sSURJbklHSmxZMkYxYzJVZ2NISnZiV2x6WlNBeUlHSmxZMkZ0WlNCeVpXcGxZM1JsWkNCaVpXWnZjbVZjYmlBZ0lDQXZMeUJ3Y205dGFYTmxJREVnWW1WallXMWxJR1oxYkdacGJHeGxaRnh1SUNCOUtUdGNiaUFnWUdCZ1hHNWNiaUFnUVc0Z1pYaGhiWEJzWlNCeVpXRnNMWGR2Y214a0lIVnpaU0JqWVhObElHbHpJR2x0Y0d4bGJXVnVkR2x1WnlCMGFXMWxiM1YwY3pwY2JseHVJQ0JnWUdCcVlYWmhjMk55YVhCMFhHNGdJRkJ5YjIxcGMyVXVjbUZqWlNoYllXcGhlQ2duWm05dkxtcHpiMjRuS1N3Z2RHbHRaVzkxZENnMU1EQXdLVjBwWEc0Z0lHQmdZRnh1WEc0Z0lFQnRaWFJvYjJRZ2NtRmpaVnh1SUNCQWMzUmhkR2xqWEc0Z0lFQndZWEpoYlNCN1FYSnlZWGw5SUhCeWIyMXBjMlZ6SUdGeWNtRjVJRzltSUhCeWIyMXBjMlZ6SUhSdklHOWljMlZ5ZG1WY2JpQWdWWE5sWm5Wc0lHWnZjaUIwYjI5c2FXNW5MbHh1SUNCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNCaElIQnliMjFwYzJVZ2QyaHBZMmdnYzJWMGRHeGxjeUJwYmlCMGFHVWdjMkZ0WlNCM1lYa2dZWE1nZEdobElHWnBjbk4wSUhCaGMzTmxaRnh1SUNCd2NtOXRhWE5sSUhSdklITmxkSFJzWlM1Y2Jpb3ZYRzVtZFc1amRHbHZiaUJ5WVdObEtHVnVkSEpwWlhNcElIdGNiaUFnTHlwcWMyaHBiblFnZG1Gc2FXUjBhR2x6T25SeWRXVWdLaTljYmlBZ2RtRnlJRU52Ym5OMGNuVmpkRzl5SUQwZ2RHaHBjenRjYmx4dUlDQnBaaUFvSVdselFYSnlZWGtvWlc1MGNtbGxjeWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVOdmJuTjBjblZqZEc5eUtHWjFibU4wYVc5dUlDaGZMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaV3BsWTNRb2JtVjNJRlI1Y0dWRmNuSnZjaWduV1c5MUlHMTFjM1FnY0dGemN5QmhiaUJoY25KaGVTQjBieUJ5WVdObExpY3BLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVOdmJuTjBjblZqZEc5eUtHWjFibU4wYVc5dUlDaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lIWmhjaUJzWlc1bmRHZ2dQU0JsYm5SeWFXVnpMbXhsYm1kMGFEdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ1EyOXVjM1J5ZFdOMGIzSXVjbVZ6YjJ4MlpTaGxiblJ5YVdWelcybGRLUzUwYUdWdUtISmxjMjlzZG1Vc0lISmxhbVZqZENrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0lHQlFjbTl0YVhObExuSmxhbVZqZEdBZ2NtVjBkWEp1Y3lCaElIQnliMjFwYzJVZ2NtVnFaV04wWldRZ2QybDBhQ0IwYUdVZ2NHRnpjMlZrSUdCeVpXRnpiMjVnTGx4dUlDQkpkQ0JwY3lCemFHOXlkR2hoYm1RZ1ptOXlJSFJvWlNCbWIyeHNiM2RwYm1jNlhHNWNiaUFnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0JzWlhRZ2NISnZiV2x6WlNBOUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDbDdYRzRnSUNBZ2NtVnFaV04wS0c1bGR5QkZjbkp2Y2lnblYwaFBUMUJUSnlrcE8xeHVJQ0I5S1R0Y2JseHVJQ0J3Y205dGFYTmxMblJvWlc0b1puVnVZM1JwYjI0b2RtRnNkV1VwZTF4dUlDQWdJQzh2SUVOdlpHVWdhR1Z5WlNCa2IyVnpiaWQwSUhKMWJpQmlaV05oZFhObElIUm9aU0J3Y205dGFYTmxJR2x6SUhKbGFtVmpkR1ZrSVZ4dUlDQjlMQ0JtZFc1amRHbHZiaWh5WldGemIyNHBlMXh1SUNBZ0lDOHZJSEpsWVhOdmJpNXRaWE56WVdkbElEMDlQU0FuVjBoUFQxQlRKMXh1SUNCOUtUdGNiaUFnWUdCZ1hHNWNiaUFnU1c1emRHVmhaQ0J2WmlCM2NtbDBhVzVuSUhSb1pTQmhZbTkyWlN3Z2VXOTFjaUJqYjJSbElHNXZkeUJ6YVcxd2JIa2dZbVZqYjIxbGN5QjBhR1VnWm05c2JHOTNhVzVuT2x4dVhHNGdJR0JnWUdwaGRtRnpZM0pwY0hSY2JpQWdiR1YwSUhCeWIyMXBjMlVnUFNCUWNtOXRhWE5sTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0lvSjFkSVQwOVFVeWNwS1R0Y2JseHVJQ0J3Y205dGFYTmxMblJvWlc0b1puVnVZM1JwYjI0b2RtRnNkV1VwZTF4dUlDQWdJQzh2SUVOdlpHVWdhR1Z5WlNCa2IyVnpiaWQwSUhKMWJpQmlaV05oZFhObElIUm9aU0J3Y205dGFYTmxJR2x6SUhKbGFtVmpkR1ZrSVZ4dUlDQjlMQ0JtZFc1amRHbHZiaWh5WldGemIyNHBlMXh1SUNBZ0lDOHZJSEpsWVhOdmJpNXRaWE56WVdkbElEMDlQU0FuVjBoUFQxQlRKMXh1SUNCOUtUdGNiaUFnWUdCZ1hHNWNiaUFnUUcxbGRHaHZaQ0J5WldwbFkzUmNiaUFnUUhOMFlYUnBZMXh1SUNCQWNHRnlZVzBnZTBGdWVYMGdjbVZoYzI5dUlIWmhiSFZsSUhSb1lYUWdkR2hsSUhKbGRIVnlibVZrSUhCeWIyMXBjMlVnZDJsc2JDQmlaU0J5WldwbFkzUmxaQ0IzYVhSb0xseHVJQ0JWYzJWbWRXd2dabTl5SUhSdmIyeHBibWN1WEc0Z0lFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlHRWdjSEp2YldselpTQnlaV3BsWTNSbFpDQjNhWFJvSUhSb1pTQm5hWFpsYmlCZ2NtVmhjMjl1WUM1Y2Jpb3ZYRzVtZFc1amRHbHZiaUJ5WldwbFkzUW9jbVZoYzI5dUtTQjdYRzRnSUM4cWFuTm9hVzUwSUhaaGJHbGtkR2hwY3pwMGNuVmxJQ292WEc0Z0lIWmhjaUJEYjI1emRISjFZM1J2Y2lBOUlIUm9hWE03WEc0Z0lIWmhjaUJ3Y205dGFYTmxJRDBnYm1WM0lFTnZibk4wY25WamRHOXlLRzV2YjNBcE8xeHVJQ0JmY21WcVpXTjBLSEJ5YjIxcGMyVXNJSEpsWVhOdmJpazdYRzRnSUhKbGRIVnliaUJ3Y205dGFYTmxPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnVaV1ZrYzFKbGMyOXNkbVZ5S0NrZ2UxeHVJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkWmIzVWdiWFZ6ZENCd1lYTnpJR0VnY21WemIyeDJaWElnWm5WdVkzUnBiMjRnWVhNZ2RHaGxJR1pwY25OMElHRnlaM1Z0Wlc1MElIUnZJSFJvWlNCd2NtOXRhWE5sSUdOdmJuTjBjblZqZEc5eUp5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHNWxaV1J6VG1WM0tDa2dlMXh1SUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lSbUZwYkdWa0lIUnZJR052Ym5OMGNuVmpkQ0FuVUhKdmJXbHpaU2M2SUZCc1pXRnpaU0IxYzJVZ2RHaGxJQ2R1WlhjbklHOXdaWEpoZEc5eUxDQjBhR2x6SUc5aWFtVmpkQ0JqYjI1emRISjFZM1J2Y2lCallXNXViM1FnWW1VZ1kyRnNiR1ZrSUdGeklHRWdablZ1WTNScGIyNHVYQ0lwTzF4dWZWeHVYRzR2S2lwY2JpQWdVSEp2YldselpTQnZZbXBsWTNSeklISmxjSEpsYzJWdWRDQjBhR1VnWlhabGJuUjFZV3dnY21WemRXeDBJRzltSUdGdUlHRnplVzVqYUhKdmJtOTFjeUJ2Y0dWeVlYUnBiMjR1SUZSb1pWeHVJQ0J3Y21sdFlYSjVJSGRoZVNCdlppQnBiblJsY21GamRHbHVaeUIzYVhSb0lHRWdjSEp2YldselpTQnBjeUIwYUhKdmRXZG9JR2wwY3lCZ2RHaGxibUFnYldWMGFHOWtMQ0IzYUdsamFGeHVJQ0J5WldkcGMzUmxjbk1nWTJGc2JHSmhZMnR6SUhSdklISmxZMlZwZG1VZ1pXbDBhR1Z5SUdFZ2NISnZiV2x6WlNkeklHVjJaVzUwZFdGc0lIWmhiSFZsSUc5eUlIUm9aU0J5WldGemIyNWNiaUFnZDJoNUlIUm9aU0J3Y205dGFYTmxJR05oYm01dmRDQmlaU0JtZFd4bWFXeHNaV1F1WEc1Y2JpQWdWR1Z5YldsdWIyeHZaM2xjYmlBZ0xTMHRMUzB0TFMwdExTMWNibHh1SUNBdElHQndjbTl0YVhObFlDQnBjeUJoYmlCdlltcGxZM1FnYjNJZ1puVnVZM1JwYjI0Z2QybDBhQ0JoSUdCMGFHVnVZQ0J0WlhSb2IyUWdkMmh2YzJVZ1ltVm9ZWFpwYjNJZ1kyOXVabTl5YlhNZ2RHOGdkR2hwY3lCemNHVmphV1pwWTJGMGFXOXVMbHh1SUNBdElHQjBhR1Z1WVdKc1pXQWdhWE1nWVc0Z2IySnFaV04wSUc5eUlHWjFibU4wYVc5dUlIUm9ZWFFnWkdWbWFXNWxjeUJoSUdCMGFHVnVZQ0J0WlhSb2IyUXVYRzRnSUMwZ1lIWmhiSFZsWUNCcGN5QmhibmtnYkdWbllXd2dTbUYyWVZOamNtbHdkQ0IyWVd4MVpTQW9hVzVqYkhWa2FXNW5JSFZ1WkdWbWFXNWxaQ3dnWVNCMGFHVnVZV0pzWlN3Z2IzSWdZU0J3Y205dGFYTmxLUzVjYmlBZ0xTQmdaWGhqWlhCMGFXOXVZQ0JwY3lCaElIWmhiSFZsSUhSb1lYUWdhWE1nZEdoeWIzZHVJSFZ6YVc1bklIUm9aU0IwYUhKdmR5QnpkR0YwWlcxbGJuUXVYRzRnSUMwZ1lISmxZWE52Ym1BZ2FYTWdZU0IyWVd4MVpTQjBhR0YwSUdsdVpHbGpZWFJsY3lCM2FIa2dZU0J3Y205dGFYTmxJSGRoY3lCeVpXcGxZM1JsWkM1Y2JpQWdMU0JnYzJWMGRHeGxaR0FnZEdobElHWnBibUZzSUhKbGMzUnBibWNnYzNSaGRHVWdiMllnWVNCd2NtOXRhWE5sTENCbWRXeG1hV3hzWldRZ2IzSWdjbVZxWldOMFpXUXVYRzVjYmlBZ1FTQndjbTl0YVhObElHTmhiaUJpWlNCcGJpQnZibVVnYjJZZ2RHaHlaV1VnYzNSaGRHVnpPaUJ3Wlc1a2FXNW5MQ0JtZFd4bWFXeHNaV1FzSUc5eUlISmxhbVZqZEdWa0xseHVYRzRnSUZCeWIyMXBjMlZ6SUhSb1lYUWdZWEpsSUdaMWJHWnBiR3hsWkNCb1lYWmxJR0VnWm5Wc1ptbHNiRzFsYm5RZ2RtRnNkV1VnWVc1a0lHRnlaU0JwYmlCMGFHVWdablZzWm1sc2JHVmtYRzRnSUhOMFlYUmxMaUFnVUhKdmJXbHpaWE1nZEdoaGRDQmhjbVVnY21WcVpXTjBaV1FnYUdGMlpTQmhJSEpsYW1WamRHbHZiaUJ5WldGemIyNGdZVzVrSUdGeVpTQnBiaUIwYUdWY2JpQWdjbVZxWldOMFpXUWdjM1JoZEdVdUlDQkJJR1oxYkdacGJHeHRaVzUwSUhaaGJIVmxJR2x6SUc1bGRtVnlJR0VnZEdobGJtRmliR1V1WEc1Y2JpQWdVSEp2YldselpYTWdZMkZ1SUdGc2MyOGdZbVVnYzJGcFpDQjBieUFxY21WemIyeDJaU29nWVNCMllXeDFaUzRnSUVsbUlIUm9hWE1nZG1Gc2RXVWdhWE1nWVd4emJ5QmhYRzRnSUhCeWIyMXBjMlVzSUhSb1pXNGdkR2hsSUc5eWFXZHBibUZzSUhCeWIyMXBjMlVuY3lCelpYUjBiR1ZrSUhOMFlYUmxJSGRwYkd3Z2JXRjBZMmdnZEdobElIWmhiSFZsSjNOY2JpQWdjMlYwZEd4bFpDQnpkR0YwWlM0Z0lGTnZJR0VnY0hKdmJXbHpaU0IwYUdGMElDcHlaWE52YkhabGN5b2dZU0J3Y205dGFYTmxJSFJvWVhRZ2NtVnFaV04wY3lCM2FXeHNYRzRnSUdsMGMyVnNaaUJ5WldwbFkzUXNJR0Z1WkNCaElIQnliMjFwYzJVZ2RHaGhkQ0FxY21WemIyeDJaWE1xSUdFZ2NISnZiV2x6WlNCMGFHRjBJR1oxYkdacGJHeHpJSGRwYkd4Y2JpQWdhWFJ6Wld4bUlHWjFiR1pwYkd3dVhHNWNibHh1SUNCQ1lYTnBZeUJWYzJGblpUcGNiaUFnTFMwdExTMHRMUzB0TFMwdFhHNWNiaUFnWUdCZ2FuTmNiaUFnYkdWMElIQnliMjFwYzJVZ1BTQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQXZMeUJ2YmlCemRXTmpaWE56WEc0Z0lDQWdjbVZ6YjJ4MlpTaDJZV3gxWlNrN1hHNWNiaUFnSUNBdkx5QnZiaUJtWVdsc2RYSmxYRzRnSUNBZ2NtVnFaV04wS0hKbFlYTnZiaWs3WEc0Z0lIMHBPMXh1WEc0Z0lIQnliMjFwYzJVdWRHaGxiaWhtZFc1amRHbHZiaWgyWVd4MVpTa2dlMXh1SUNBZ0lDOHZJRzl1SUdaMWJHWnBiR3h0Wlc1MFhHNGdJSDBzSUdaMWJtTjBhVzl1S0hKbFlYTnZiaWtnZTF4dUlDQWdJQzh2SUc5dUlISmxhbVZqZEdsdmJseHVJQ0I5S1R0Y2JpQWdZR0JnWEc1Y2JpQWdRV1IyWVc1alpXUWdWWE5oWjJVNlhHNGdJQzB0TFMwdExTMHRMUzB0TFMwdExWeHVYRzRnSUZCeWIyMXBjMlZ6SUhOb2FXNWxJSGRvWlc0Z1lXSnpkSEpoWTNScGJtY2dZWGRoZVNCaGMzbHVZMmh5YjI1dmRYTWdhVzUwWlhKaFkzUnBiMjV6SUhOMVkyZ2dZWE5jYmlBZ1lGaE5URWgwZEhCU1pYRjFaWE4wWUhNdVhHNWNiaUFnWUdCZ2FuTmNiaUFnWm5WdVkzUnBiMjRnWjJWMFNsTlBUaWgxY213cElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1h0Y2JpQWdJQ0FnSUd4bGRDQjRhSElnUFNCdVpYY2dXRTFNU0hSMGNGSmxjWFZsYzNRb0tUdGNibHh1SUNBZ0lDQWdlR2h5TG05d1pXNG9KMGRGVkNjc0lIVnliQ2s3WEc0Z0lDQWdJQ0I0YUhJdWIyNXlaV0ZrZVhOMFlYUmxZMmhoYm1kbElEMGdhR0Z1Wkd4bGNqdGNiaUFnSUNBZ0lIaG9jaTV5WlhOd2IyNXpaVlI1Y0dVZ1BTQW5hbk52YmljN1hHNGdJQ0FnSUNCNGFISXVjMlYwVW1WeGRXVnpkRWhsWVdSbGNpZ25RV05qWlhCMEp5d2dKMkZ3Y0d4cFkyRjBhVzl1TDJwemIyNG5LVHRjYmlBZ0lDQWdJSGhvY2k1elpXNWtLQ2s3WEc1Y2JpQWdJQ0FnSUdaMWJtTjBhVzl1SUdoaGJtUnNaWElvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuSmxZV1I1VTNSaGRHVWdQVDA5SUhSb2FYTXVSRTlPUlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbk4wWVhSMWN5QTlQVDBnTWpBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hSb2FYTXVjbVZ6Y0c5dWMyVXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb2JtVjNJRVZ5Y205eUtDZG5aWFJLVTA5T09pQmdKeUFySUhWeWJDQXJJQ2RnSUdaaGFXeGxaQ0IzYVhSb0lITjBZWFIxY3pvZ1d5Y2dLeUIwYUdsekxuTjBZWFIxY3lBcklDZGRKeWtwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdkbGRFcFRUMDRvSnk5d2IzTjBjeTVxYzI5dUp5a3VkR2hsYmlobWRXNWpkR2x2YmlocWMyOXVLU0I3WEc0Z0lDQWdMeThnYjI0Z1puVnNabWxzYkcxbGJuUmNiaUFnZlN3Z1puVnVZM1JwYjI0b2NtVmhjMjl1S1NCN1hHNGdJQ0FnTHk4Z2IyNGdjbVZxWldOMGFXOXVYRzRnSUgwcE8xeHVJQ0JnWUdCY2JseHVJQ0JWYm14cGEyVWdZMkZzYkdKaFkydHpMQ0J3Y205dGFYTmxjeUJoY21VZ1ozSmxZWFFnWTI5dGNHOXpZV0pzWlNCd2NtbHRhWFJwZG1WekxseHVYRzRnSUdCZ1lHcHpYRzRnSUZCeWIyMXBjMlV1WVd4c0tGdGNiaUFnSUNCblpYUktVMDlPS0NjdmNHOXpkSE1uS1N4Y2JpQWdJQ0JuWlhSS1UwOU9LQ2N2WTI5dGJXVnVkSE1uS1Z4dUlDQmRLUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsY3lsN1hHNGdJQ0FnZG1Gc2RXVnpXekJkSUM4dklEMCtJSEJ2YzNSelNsTlBUbHh1SUNBZ0lIWmhiSFZsYzFzeFhTQXZMeUE5UGlCamIyMXRaVzUwYzBwVFQwNWNibHh1SUNBZ0lISmxkSFZ5YmlCMllXeDFaWE03WEc0Z0lIMHBPMXh1SUNCZ1lHQmNibHh1SUNCQVkyeGhjM01nVUhKdmJXbHpaVnh1SUNCQWNHRnlZVzBnZTJaMWJtTjBhVzl1ZlNCeVpYTnZiSFpsY2x4dUlDQlZjMlZtZFd3Z1ptOXlJSFJ2YjJ4cGJtY3VYRzRnSUVCamIyNXpkSEoxWTNSdmNseHVLaTljYm1aMWJtTjBhVzl1SUZCeWIyMXBjMlVvY21WemIyeDJaWElwSUh0Y2JpQWdkR2hwYzF0UVVrOU5TVk5GWDBsRVhTQTlJRzVsZUhSSlpDZ3BPMXh1SUNCMGFHbHpMbDl5WlhOMWJIUWdQU0IwYUdsekxsOXpkR0YwWlNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnZEdocGN5NWZjM1ZpYzJOeWFXSmxjbk1nUFNCYlhUdGNibHh1SUNCcFppQW9ibTl2Y0NBaFBUMGdjbVZ6YjJ4MlpYSXBJSHRjYmlBZ0lDQjBlWEJsYjJZZ2NtVnpiMngyWlhJZ0lUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ2JtVmxaSE5TWlhOdmJIWmxjaWdwTzF4dUlDQWdJSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQlFjbTl0YVhObElEOGdhVzVwZEdsaGJHbDZaVkJ5YjIxcGMyVW9kR2hwY3l3Z2NtVnpiMngyWlhJcElEb2dibVZsWkhOT1pYY29LVHRjYmlBZ2ZWeHVmVnh1WEc1UWNtOXRhWE5sTG1Gc2JDQTlJR0ZzYkR0Y2JsQnliMjFwYzJVdWNtRmpaU0E5SUhKaFkyVTdYRzVRY205dGFYTmxMbkpsYzI5c2RtVWdQU0J5WlhOdmJIWmxPMXh1VUhKdmJXbHpaUzV5WldwbFkzUWdQU0J5WldwbFkzUTdYRzVRY205dGFYTmxMbDl6WlhSVFkyaGxaSFZzWlhJZ1BTQnpaWFJUWTJobFpIVnNaWEk3WEc1UWNtOXRhWE5sTGw5elpYUkJjMkZ3SUQwZ2MyVjBRWE5oY0R0Y2JsQnliMjFwYzJVdVgyRnpZWEFnUFNCaGMyRndPMXh1WEc1UWNtOXRhWE5sTG5CeWIzUnZkSGx3WlNBOUlIdGNiaUFnWTI5dWMzUnlkV04wYjNJNklGQnliMjFwYzJVc1hHNWNiaUFnTHlvcVhHNGdJQ0FnVkdobElIQnlhVzFoY25rZ2QyRjVJRzltSUdsdWRHVnlZV04wYVc1bklIZHBkR2dnWVNCd2NtOXRhWE5sSUdseklIUm9jbTkxWjJnZ2FYUnpJR0IwYUdWdVlDQnRaWFJvYjJRc1hHNGdJQ0FnZDJocFkyZ2djbVZuYVhOMFpYSnpJR05oYkd4aVlXTnJjeUIwYnlCeVpXTmxhWFpsSUdWcGRHaGxjaUJoSUhCeWIyMXBjMlVuY3lCbGRtVnVkSFZoYkNCMllXeDFaU0J2Y2lCMGFHVmNiaUFnSUNCeVpXRnpiMjRnZDJoNUlIUm9aU0J3Y205dGFYTmxJR05oYm01dmRDQmlaU0JtZFd4bWFXeHNaV1F1WEc0Z0lGeHVJQ0FnSUdCZ1lHcHpYRzRnSUNBZ1ptbHVaRlZ6WlhJb0tTNTBhR1Z1S0daMWJtTjBhVzl1S0hWelpYSXBlMXh1SUNBZ0lDQWdMeThnZFhObGNpQnBjeUJoZG1GcGJHRmliR1ZjYmlBZ0lDQjlMQ0JtZFc1amRHbHZiaWh5WldGemIyNHBlMXh1SUNBZ0lDQWdMeThnZFhObGNpQnBjeUIxYm1GMllXbHNZV0pzWlN3Z1lXNWtJSGx2ZFNCaGNtVWdaMmwyWlc0Z2RHaGxJSEpsWVhOdmJpQjNhSGxjYmlBZ0lDQjlLVHRjYmlBZ0lDQmdZR0JjYmlBZ1hHNGdJQ0FnUTJoaGFXNXBibWRjYmlBZ0lDQXRMUzB0TFMwdExWeHVJQ0JjYmlBZ0lDQlVhR1VnY21WMGRYSnVJSFpoYkhWbElHOW1JR0IwYUdWdVlDQnBjeUJwZEhObGJHWWdZU0J3Y205dGFYTmxMaUFnVkdocGN5QnpaV052Ym1Rc0lDZGtiM2R1YzNSeVpXRnRKMXh1SUNBZ0lIQnliMjFwYzJVZ2FYTWdjbVZ6YjJ4MlpXUWdkMmwwYUNCMGFHVWdjbVYwZFhKdUlIWmhiSFZsSUc5bUlIUm9aU0JtYVhKemRDQndjbTl0YVhObEozTWdablZzWm1sc2JHMWxiblJjYmlBZ0lDQnZjaUJ5WldwbFkzUnBiMjRnYUdGdVpHeGxjaXdnYjNJZ2NtVnFaV04wWldRZ2FXWWdkR2hsSUdoaGJtUnNaWElnZEdoeWIzZHpJR0Z1SUdWNFkyVndkR2x2Ymk1Y2JpQWdYRzRnSUNBZ1lHQmdhbk5jYmlBZ0lDQm1hVzVrVlhObGNpZ3BMblJvWlc0b1puVnVZM1JwYjI0Z0tIVnpaWElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIxYzJWeUxtNWhiV1U3WEc0Z0lDQWdmU3dnWm5WdVkzUnBiMjRnS0hKbFlYTnZiaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQ2RrWldaaGRXeDBJRzVoYldVbk8xeHVJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRnS0hWelpYSk9ZVzFsS1NCN1hHNGdJQ0FnSUNBdkx5QkpaaUJnWm1sdVpGVnpaWEpnSUdaMWJHWnBiR3hsWkN3Z1lIVnpaWEpPWVcxbFlDQjNhV3hzSUdKbElIUm9aU0IxYzJWeUozTWdibUZ0WlN3Z2IzUm9aWEozYVhObElHbDBYRzRnSUNBZ0lDQXZMeUIzYVd4c0lHSmxJR0FuWkdWbVlYVnNkQ0J1WVcxbEoyQmNiaUFnSUNCOUtUdGNiaUFnWEc0Z0lDQWdabWx1WkZWelpYSW9LUzUwYUdWdUtHWjFibU4wYVc5dUlDaDFjMlZ5S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBadmRXNWtJSFZ6WlhJc0lHSjFkQ0J6ZEdsc2JDQjFibWhoY0hCNUp5azdYRzRnSUNBZ2ZTd2dablZ1WTNScGIyNGdLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGdabWx1WkZWelpYSmdJSEpsYW1WamRHVmtJR0Z1WkNCM1pTZHlaU0IxYm1oaGNIQjVKeWs3WEc0Z0lDQWdmU2t1ZEdobGJpaG1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDOHZJRzVsZG1WeUlISmxZV05vWldSY2JpQWdJQ0I5TENCbWRXNWpkR2x2YmlBb2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNBdkx5QnBaaUJnWm1sdVpGVnpaWEpnSUdaMWJHWnBiR3hsWkN3Z1lISmxZWE52Ym1BZ2QybHNiQ0JpWlNBblJtOTFibVFnZFhObGNpd2dZblYwSUhOMGFXeHNJSFZ1YUdGd2NIa25MbHh1SUNBZ0lDQWdMeThnU1dZZ1lHWnBibVJWYzJWeVlDQnlaV3BsWTNSbFpDd2dZSEpsWVhOdmJtQWdkMmxzYkNCaVpTQW5ZR1pwYm1SVmMyVnlZQ0J5WldwbFkzUmxaQ0JoYm1RZ2QyVW5jbVVnZFc1b1lYQndlU2N1WEc0Z0lDQWdmU2s3WEc0Z0lDQWdZR0JnWEc0Z0lDQWdTV1lnZEdobElHUnZkMjV6ZEhKbFlXMGdjSEp2YldselpTQmtiMlZ6SUc1dmRDQnpjR1ZqYVdaNUlHRWdjbVZxWldOMGFXOXVJR2hoYm1Sc1pYSXNJSEpsYW1WamRHbHZiaUJ5WldGemIyNXpJSGRwYkd3Z1ltVWdjSEp2Y0dGbllYUmxaQ0JtZFhKMGFHVnlJR1J2ZDI1emRISmxZVzB1WEc0Z0lGeHVJQ0FnSUdCZ1lHcHpYRzRnSUNBZ1ptbHVaRlZ6WlhJb0tTNTBhR1Z1S0daMWJtTjBhVzl1SUNoMWMyVnlLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnVUdWa1lXZHZaMmxqWVd4RmVHTmxjSFJwYjI0b0oxVndjM1J5WldGdElHVnljbTl5SnlrN1hHNGdJQ0FnZlNrdWRHaGxiaWhtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQzh2SUc1bGRtVnlJSEpsWVdOb1pXUmNiaUFnSUNCOUtTNTBhR1Z1S0daMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnTHk4Z2JtVjJaWElnY21WaFkyaGxaRnh1SUNBZ0lIMHNJR1oxYm1OMGFXOXVJQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJQzh2SUZSb1pTQmdVR1ZrWjJGbmIyTnBZV3hGZUdObGNIUnBiMjVnSUdseklIQnliM0JoWjJGMFpXUWdZV3hzSUhSb1pTQjNZWGtnWkc5M2JpQjBieUJvWlhKbFhHNGdJQ0FnZlNrN1hHNGdJQ0FnWUdCZ1hHNGdJRnh1SUNBZ0lFRnpjMmx0YVd4aGRHbHZibHh1SUNBZ0lDMHRMUzB0TFMwdExTMHRMVnh1SUNCY2JpQWdJQ0JUYjIxbGRHbHRaWE1nZEdobElIWmhiSFZsSUhsdmRTQjNZVzUwSUhSdklIQnliM0JoWjJGMFpTQjBieUJoSUdSdmQyNXpkSEpsWVcwZ2NISnZiV2x6WlNCallXNGdiMjVzZVNCaVpWeHVJQ0FnSUhKbGRISnBaWFpsWkNCaGMzbHVZMmh5YjI1dmRYTnNlUzRnVkdocGN5QmpZVzRnWW1VZ1lXTm9hV1YyWldRZ1lua2djbVYwZFhKdWFXNW5JR0VnY0hKdmJXbHpaU0JwYmlCMGFHVmNiaUFnSUNCbWRXeG1hV3hzYldWdWRDQnZjaUJ5WldwbFkzUnBiMjRnYUdGdVpHeGxjaTRnVkdobElHUnZkMjV6ZEhKbFlXMGdjSEp2YldselpTQjNhV3hzSUhSb1pXNGdZbVVnY0dWdVpHbHVaMXh1SUNBZ0lIVnVkR2xzSUhSb1pTQnlaWFIxY201bFpDQndjbTl0YVhObElHbHpJSE5sZEhSc1pXUXVJRlJvYVhNZ2FYTWdZMkZzYkdWa0lDcGhjM05wYldsc1lYUnBiMjRxTGx4dUlDQmNiaUFnSUNCZ1lHQnFjMXh1SUNBZ0lHWnBibVJWYzJWeUtDa3VkR2hsYmlobWRXNWpkR2x2YmlBb2RYTmxjaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1pwYm1SRGIyMXRaVzUwYzBKNVFYVjBhRzl5S0hWelpYSXBPMXh1SUNBZ0lIMHBMblJvWlc0b1puVnVZM1JwYjI0Z0tHTnZiVzFsYm5SektTQjdYRzRnSUNBZ0lDQXZMeUJVYUdVZ2RYTmxjaWR6SUdOdmJXMWxiblJ6SUdGeVpTQnViM2NnWVhaaGFXeGhZbXhsWEc0Z0lDQWdmU2s3WEc0Z0lDQWdZR0JnWEc0Z0lGeHVJQ0FnSUVsbUlIUm9aU0JoYzNOcGJXeHBZWFJsWkNCd2NtOXRhWE5sSUhKbGFtVmpkSE1zSUhSb1pXNGdkR2hsSUdSdmQyNXpkSEpsWVcwZ2NISnZiV2x6WlNCM2FXeHNJR0ZzYzI4Z2NtVnFaV04wTGx4dUlDQmNiaUFnSUNCZ1lHQnFjMXh1SUNBZ0lHWnBibVJWYzJWeUtDa3VkR2hsYmlobWRXNWpkR2x2YmlBb2RYTmxjaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1pwYm1SRGIyMXRaVzUwYzBKNVFYVjBhRzl5S0hWelpYSXBPMXh1SUNBZ0lIMHBMblJvWlc0b1puVnVZM1JwYjI0Z0tHTnZiVzFsYm5SektTQjdYRzRnSUNBZ0lDQXZMeUJKWmlCZ1ptbHVaRU52YlcxbGJuUnpRbmxCZFhSb2IzSmdJR1oxYkdacGJHeHpMQ0IzWlNkc2JDQm9ZWFpsSUhSb1pTQjJZV3gxWlNCb1pYSmxYRzRnSUNBZ2ZTd2dablZ1WTNScGIyNGdLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdMeThnU1dZZ1lHWnBibVJEYjIxdFpXNTBjMEo1UVhWMGFHOXlZQ0J5WldwbFkzUnpMQ0IzWlNkc2JDQm9ZWFpsSUhSb1pTQnlaV0Z6YjI0Z2FHVnlaVnh1SUNBZ0lIMHBPMXh1SUNBZ0lHQmdZRnh1SUNCY2JpQWdJQ0JUYVcxd2JHVWdSWGhoYlhCc1pWeHVJQ0FnSUMwdExTMHRMUzB0TFMwdExTMHRYRzRnSUZ4dUlDQWdJRk41Ym1Ob2NtOXViM1Z6SUVWNFlXMXdiR1ZjYmlBZ1hHNGdJQ0FnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0FnSUd4bGRDQnlaWE4xYkhRN1hHNGdJRnh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0J5WlhOMWJIUWdQU0JtYVc1a1VtVnpkV3gwS0NrN1hHNGdJQ0FnSUNBdkx5QnpkV05qWlhOelhHNGdJQ0FnZlNCallYUmphQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJQzh2SUdaaGFXeDFjbVZjYmlBZ0lDQjlYRzRnSUNBZ1lHQmdYRzRnSUZ4dUlDQWdJRVZ5Y21KaFkyc2dSWGhoYlhCc1pWeHVJQ0JjYmlBZ0lDQmdZR0JxYzF4dUlDQWdJR1pwYm1SU1pYTjFiSFFvWm5WdVkzUnBiMjRvY21WemRXeDBMQ0JsY25JcGUxeHVJQ0FnSUNBZ2FXWWdLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJtWVdsc2RYSmxYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJ6ZFdOalpYTnpYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUNBZ1lHQmdYRzRnSUZ4dUlDQWdJRkJ5YjIxcGMyVWdSWGhoYlhCc1pUdGNiaUFnWEc0Z0lDQWdZR0JnYW1GMllYTmpjbWx3ZEZ4dUlDQWdJR1pwYm1SU1pYTjFiSFFvS1M1MGFHVnVLR1oxYm1OMGFXOXVLSEpsYzNWc2RDbDdYRzRnSUNBZ0lDQXZMeUJ6ZFdOalpYTnpYRzRnSUNBZ2ZTd2dablZ1WTNScGIyNG9jbVZoYzI5dUtYdGNiaUFnSUNBZ0lDOHZJR1poYVd4MWNtVmNiaUFnSUNCOUtUdGNiaUFnSUNCZ1lHQmNiaUFnWEc0Z0lDQWdRV1IyWVc1alpXUWdSWGhoYlhCc1pWeHVJQ0FnSUMwdExTMHRMUzB0TFMwdExTMHRYRzRnSUZ4dUlDQWdJRk41Ym1Ob2NtOXViM1Z6SUVWNFlXMXdiR1ZjYmlBZ1hHNGdJQ0FnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0FnSUd4bGRDQmhkWFJvYjNJc0lHSnZiMnR6TzF4dUlDQmNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdZWFYwYUc5eUlEMGdabWx1WkVGMWRHaHZjaWdwTzF4dUlDQWdJQ0FnWW05dmEzTWdJRDBnWm1sdVpFSnZiMnR6UW5sQmRYUm9iM0lvWVhWMGFHOXlLVHRjYmlBZ0lDQWdJQzh2SUhOMVkyTmxjM05jYmlBZ0lDQjlJR05oZEdOb0tISmxZWE52YmlrZ2UxeHVJQ0FnSUNBZ0x5OGdabUZwYkhWeVpWeHVJQ0FnSUgxY2JpQWdJQ0JnWUdCY2JpQWdYRzRnSUNBZ1JYSnlZbUZqYXlCRmVHRnRjR3hsWEc0Z0lGeHVJQ0FnSUdCZ1lHcHpYRzRnSUZ4dUlDQWdJR1oxYm1OMGFXOXVJR1p2ZFc1a1FtOXZhM01vWW05dmEzTXBJSHRjYmlBZ1hHNGdJQ0FnZlZ4dUlDQmNiaUFnSUNCbWRXNWpkR2x2YmlCbVlXbHNkWEpsS0hKbFlYTnZiaWtnZTF4dUlDQmNiaUFnSUNCOVhHNGdJRnh1SUNBZ0lHWnBibVJCZFhSb2IzSW9ablZ1WTNScGIyNG9ZWFYwYUc5eUxDQmxjbklwZTF4dUlDQWdJQ0FnYVdZZ0tHVnljaWtnZTF4dUlDQWdJQ0FnSUNCbVlXbHNkWEpsS0dWeWNpazdYRzRnSUNBZ0lDQWdJQzh2SUdaaGFXeDFjbVZjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdabWx1WkVKdmIyOXJjMEo1UVhWMGFHOXlLR0YxZEdodmNpd2dablZ1WTNScGIyNG9ZbTl2YTNNc0lHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm1ZV2xzZFhKbEtHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2ZFc1a1FtOXZhM01vWW05dmEzTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0tISmxZWE52YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhhV3gxY21Vb2NtVmhjMjl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0tHVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdabUZwYkhWeVpTaGxjbklwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJSE4xWTJObGMzTmNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCZ1lHQmNiaUFnWEc0Z0lDQWdVSEp2YldselpTQkZlR0Z0Y0d4bE8xeHVJQ0JjYmlBZ0lDQmdZR0JxWVhaaGMyTnlhWEIwWEc0Z0lDQWdabWx1WkVGMWRHaHZjaWdwTGx4dUlDQWdJQ0FnZEdobGJpaG1hVzVrUW05dmEzTkNlVUYxZEdodmNpa3VYRzRnSUNBZ0lDQjBhR1Z1S0daMWJtTjBhVzl1S0dKdmIydHpLWHRjYmlBZ0lDQWdJQ0FnTHk4Z1ptOTFibVFnWW05dmEzTmNiaUFnSUNCOUtTNWpZWFJqYUNobWRXNWpkR2x2YmloeVpXRnpiMjRwZTF4dUlDQWdJQ0FnTHk4Z2MyOXRaWFJvYVc1bklIZGxiblFnZDNKdmJtZGNiaUFnSUNCOUtUdGNiaUFnSUNCZ1lHQmNiaUFnWEc0Z0lDQWdRRzFsZEdodlpDQjBhR1Z1WEc0Z0lDQWdRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdiMjVHZFd4bWFXeHNaV1JjYmlBZ0lDQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQnZibEpsYW1WamRHVmtYRzRnSUNBZ1ZYTmxablZzSUdadmNpQjBiMjlzYVc1bkxseHVJQ0FnSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5WEc0Z0lDb3ZYRzRnSUhSb1pXNDZJSFJvWlc0c1hHNWNiaUFnTHlvcVhHNGdJQ0FnWUdOaGRHTm9ZQ0JwY3lCemFXMXdiSGtnYzNWbllYSWdabTl5SUdCMGFHVnVLSFZ1WkdWbWFXNWxaQ3dnYjI1U1pXcGxZM1JwYjI0cFlDQjNhR2xqYUNCdFlXdGxjeUJwZENCMGFHVWdjMkZ0WlZ4dUlDQWdJR0Z6SUhSb1pTQmpZWFJqYUNCaWJHOWpheUJ2WmlCaElIUnllUzlqWVhSamFDQnpkR0YwWlcxbGJuUXVYRzRnSUZ4dUlDQWdJR0JnWUdwelhHNGdJQ0FnWm5WdVkzUnBiMjRnWm1sdVpFRjFkR2h2Y2lncGUxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkamIzVnNaRzRuZENCbWFXNWtJSFJvWVhRZ1lYVjBhRzl5SnlrN1hHNGdJQ0FnZlZ4dUlDQmNiaUFnSUNBdkx5QnplVzVqYUhKdmJtOTFjMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0JtYVc1a1FYVjBhRzl5S0NrN1hHNGdJQ0FnZlNCallYUmphQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJQzh2SUhOdmJXVjBhR2x1WnlCM1pXNTBJSGR5YjI1blhHNGdJQ0FnZlZ4dUlDQmNiaUFnSUNBdkx5QmhjM2x1WXlCM2FYUm9JSEJ5YjIxcGMyVnpYRzRnSUNBZ1ptbHVaRUYxZEdodmNpZ3BMbU5oZEdOb0tHWjFibU4wYVc5dUtISmxZWE52YmlsN1hHNGdJQ0FnSUNBdkx5QnpiMjFsZEdocGJtY2dkMlZ1ZENCM2NtOXVaMXh1SUNBZ0lIMHBPMXh1SUNBZ0lHQmdZRnh1SUNCY2JpQWdJQ0JBYldWMGFHOWtJR05oZEdOb1hHNGdJQ0FnUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnYjI1U1pXcGxZM1JwYjI1Y2JpQWdJQ0JWYzJWbWRXd2dabTl5SUhSdmIyeHBibWN1WEc0Z0lDQWdRSEpsZEhWeWJpQjdVSEp2YldselpYMWNiaUFnS2k5Y2JpQWdKMk5oZEdOb0p6b2dablZ1WTNScGIyNGdYMk5oZEdOb0tHOXVVbVZxWldOMGFXOXVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZEdobGJpaHVkV3hzTENCdmJsSmxhbVZqZEdsdmJpazdYRzRnSUgxY2JuMDdYRzVjYm1aMWJtTjBhVzl1SUhCdmJIbG1hV3hzS0NrZ2UxeHVJQ0FnSUhaaGNpQnNiMk5oYkNBOUlIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaMnh2WW1Gc0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQnNiMk5oYkNBOUlHZHNiMkpoYkR0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJ6Wld4bUlDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQnNiMk5oYkNBOUlITmxiR1k3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WTJGc0lEMGdSblZ1WTNScGIyNG9KM0psZEhWeWJpQjBhR2x6Snlrb0tUdGNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHdiMng1Wm1sc2JDQm1ZV2xzWldRZ1ltVmpZWFZ6WlNCbmJHOWlZV3dnYjJKcVpXTjBJR2x6SUhWdVlYWmhhV3hoWW14bElHbHVJSFJvYVhNZ1pXNTJhWEp2Ym0xbGJuUW5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCUUlEMGdiRzlqWVd3dVVISnZiV2x6WlR0Y2JseHVJQ0FnSUdsbUlDaFFLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQndjbTl0YVhObFZHOVRkSEpwYm1jZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZiV2x6WlZSdlUzUnlhVzVuSUQwZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLRkF1Y21WemIyeDJaU2dwS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjMmxzWlc1MGJIa2dhV2R1YjNKbFpGeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnliMjFwYzJWVWIxTjBjbWx1WnlBOVBUMGdKMXR2WW1wbFkzUWdVSEp2YldselpWMG5JQ1ltSUNGUUxtTmhjM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHeHZZMkZzTGxCeWIyMXBjMlVnUFNCUWNtOXRhWE5sTzF4dWZWeHVYRzR2THlCVGRISmhibWRsSUdOdmJYQmhkQzR1WEc1UWNtOXRhWE5sTG5CdmJIbG1hV3hzSUQwZ2NHOXNlV1pwYkd3N1hHNVFjbTl0YVhObExsQnliMjFwYzJVZ1BTQlFjbTl0YVhObE8xeHVYRzV5WlhSMWNtNGdVSEp2YldselpUdGNibHh1ZlNrcEtUdGNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdWek5pMXdjbTl0YVhObExtMWhjRnh1SWl3aUx5OGdkR2hsSUhkb1lYUjNaeTFtWlhSamFDQndiMng1Wm1sc2JDQnBibk4wWVd4c2N5QjBhR1VnWm1WMFkyZ29LU0JtZFc1amRHbHZibHh1THk4Z2IyNGdkR2hsSUdkc2IySmhiQ0J2WW1wbFkzUWdLSGRwYm1SdmR5QnZjaUJ6Wld4bUtWeHVMeTljYmk4dklGSmxkSFZ5YmlCMGFHRjBJR0Z6SUhSb1pTQmxlSEJ2Y25RZ1ptOXlJSFZ6WlNCcGJpQlhaV0p3WVdOckxDQkNjbTkzYzJWeWFXWjVJR1YwWXk1Y2JuSmxjWFZwY21Vb0ozZG9ZWFIzWnkxbVpYUmphQ2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCelpXeG1MbVpsZEdOb0xtSnBibVFvYzJWc1ppazdYRzRpTENJdkx5QnphR2x0SUdadmNpQjFjMmx1WnlCd2NtOWpaWE56SUdsdUlHSnliM2R6WlhKY2JuWmhjaUJ3Y205alpYTnpJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3ZlR0Y2JseHVMeThnWTJGamFHVmtJR1p5YjIwZ2QyaGhkR1YyWlhJZ1oyeHZZbUZzSUdseklIQnlaWE5sYm5RZ2MyOGdkR2hoZENCMFpYTjBJSEoxYm01bGNuTWdkR2hoZENCemRIVmlJR2wwWEc0dkx5QmtiMjRuZENCaWNtVmhheUIwYUdsdVozTXVJQ0JDZFhRZ2QyVWdibVZsWkNCMGJ5QjNjbUZ3SUdsMElHbHVJR0VnZEhKNUlHTmhkR05vSUdsdUlHTmhjMlVnYVhRZ2FYTmNiaTh2SUhkeVlYQndaV1FnYVc0Z2MzUnlhV04wSUcxdlpHVWdZMjlrWlNCM2FHbGphQ0JrYjJWemJpZDBJR1JsWm1sdVpTQmhibmtnWjJ4dlltRnNjeTRnSUVsMEozTWdhVzV6YVdSbElHRmNiaTh2SUdaMWJtTjBhVzl1SUdKbFkyRjFjMlVnZEhKNUwyTmhkR05vWlhNZ1pHVnZjSFJwYldsNlpTQnBiaUJqWlhKMFlXbHVJR1Z1WjJsdVpYTXVYRzVjYm5aaGNpQmpZV05vWldSVFpYUlVhVzFsYjNWME8xeHVkbUZ5SUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZER0Y2JseHVablZ1WTNScGIyNGdaR1ZtWVhWc2RGTmxkRlJwYlc5MWRDZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozTmxkRlJwYldWdmRYUWdhR0Z6SUc1dmRDQmlaV1Z1SUdSbFptbHVaV1FuS1R0Y2JuMWNibVoxYm1OMGFXOXVJR1JsWm1GMWJIUkRiR1ZoY2xScGJXVnZkWFFnS0NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduWTJ4bFlYSlVhVzFsYjNWMElHaGhjeUJ1YjNRZ1ltVmxiaUJrWldacGJtVmtKeWs3WEc1OVhHNG9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMlYwVkdsdFpXOTFkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwZ1pHVm1ZWFZzZEZObGRGUnBiVzkxZER0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlJR1JsWm1GMWJIUlRaWFJVYVcxdmRYUTdYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWTJ4bFlYSlVhVzFsYjNWMElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFnUFNCamJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BTQmtaV1poZFd4MFEyeGxZWEpVYVcxbGIzVjBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BTQmtaV1poZFd4MFEyeGxZWEpVYVcxbGIzVjBPMXh1SUNBZ0lIMWNibjBnS0NrcFhHNW1kVzVqZEdsdmJpQnlkVzVVYVcxbGIzVjBLR1oxYmlrZ2UxeHVJQ0FnSUdsbUlDaGpZV05vWldSVFpYUlVhVzFsYjNWMElEMDlQU0J6WlhSVWFXMWxiM1YwS1NCN1hHNGdJQ0FnSUNBZ0lDOHZibTl5YldGc0lHVnVkbWx5YjIxbGJuUnpJR2x1SUhOaGJtVWdjMmwwZFdGMGFXOXVjMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlYwVkdsdFpXOTFkQ2htZFc0c0lEQXBPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QnBaaUJ6WlhSVWFXMWxiM1YwSUhkaGMyNG5kQ0JoZG1GcGJHRmliR1VnWW5WMElIZGhjeUJzWVhSMFpYSWdaR1ZtYVc1bFpGeHVJQ0FnSUdsbUlDZ29ZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlQVDBnWkdWbVlYVnNkRk5sZEZScGJXOTFkQ0I4ZkNBaFkyRmphR1ZrVTJWMFZHbHRaVzkxZENrZ0ppWWdjMlYwVkdsdFpXOTFkQ2tnZTF4dUlDQWdJQ0FnSUNCallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwZ2MyVjBWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxkRlJwYldWdmRYUW9ablZ1TENBd0tUdGNiaUFnSUNCOVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdMeThnZDJobGJpQjNhR1Z1SUhOdmJXVmliMlI1SUdoaGN5QnpZM0psZDJWa0lIZHBkR2dnYzJWMFZHbHRaVzkxZENCaWRYUWdibThnU1M1RkxpQnRZV1JrYm1WemMxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrVTJWMFZHbHRaVzkxZENobWRXNHNJREFwTzF4dUlDQWdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhhR1Z1SUhkbElHRnlaU0JwYmlCSkxrVXVJR0oxZENCMGFHVWdjMk55YVhCMElHaGhjeUJpWldWdUlHVjJZV3hsWkNCemJ5QkpMa1V1SUdSdlpYTnVKM1FnZEhKMWMzUWdkR2hsSUdkc2IySmhiQ0J2WW1wbFkzUWdkMmhsYmlCallXeHNaV1FnYm05eWJXRnNiSGxjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JUWlhSVWFXMWxiM1YwTG1OaGJHd29iblZzYkN3Z1puVnVMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmhiV1VnWVhNZ1lXSnZkbVVnWW5WMElIZG9aVzRnYVhRbmN5QmhJSFpsY25OcGIyNGdiMllnU1M1RkxpQjBhR0YwSUcxMWMzUWdhR0YyWlNCMGFHVWdaMnh2WW1Gc0lHOWlhbVZqZENCbWIzSWdKM1JvYVhNbkxDQm9iM0JtZFd4c2VTQnZkWElnWTI5dWRHVjRkQ0JqYjNKeVpXTjBJRzkwYUdWeWQybHpaU0JwZENCM2FXeHNJSFJvY205M0lHRWdaMnh2WW1Gc0lHVnljbTl5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrVTJWMFZHbHRaVzkxZEM1allXeHNLSFJvYVhNc0lHWjFiaXdnTUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNibHh1ZlZ4dVpuVnVZM1JwYjI0Z2NuVnVRMnhsWVhKVWFXMWxiM1YwS0cxaGNtdGxjaWtnZTF4dUlDQWdJR2xtSUNoallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BUMDlJR05zWldGeVZHbHRaVzkxZENrZ2UxeHVJQ0FnSUNBZ0lDQXZMMjV2Y20xaGJDQmxiblpwY205dFpXNTBjeUJwYmlCellXNWxJSE5wZEhWaGRHbHZibk5jYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05zWldGeVZHbHRaVzkxZENodFlYSnJaWElwTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJwWmlCamJHVmhjbFJwYldWdmRYUWdkMkZ6YmlkMElHRjJZV2xzWVdKc1pTQmlkWFFnZDJGeklHeGhkSFJsY2lCa1pXWnBibVZrWEc0Z0lDQWdhV1lnS0NoallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BUMDlJR1JsWm1GMWJIUkRiR1ZoY2xScGJXVnZkWFFnZkh3Z0lXTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDa2dKaVlnWTJ4bFlYSlVhVzFsYjNWMEtTQjdYRzRnSUNBZ0lDQWdJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ0E5SUdOc1pXRnlWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTnNaV0Z5VkdsdFpXOTFkQ2h0WVhKclpYSXBPMXh1SUNBZ0lIMWNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0F2THlCM2FHVnVJSGRvWlc0Z2MyOXRaV0p2WkhrZ2FHRnpJSE5qY21WM1pXUWdkMmwwYUNCelpYUlVhVzFsYjNWMElHSjFkQ0J1YnlCSkxrVXVJRzFoWkdSdVpYTnpYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUW9iV0Z5YTJWeUtUdGNiaUFnSUNCOUlHTmhkR05vSUNobEtYdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZkb1pXNGdkMlVnWVhKbElHbHVJRWt1UlM0Z1luVjBJSFJvWlNCelkzSnBjSFFnYUdGeklHSmxaVzRnWlhaaGJHVmtJSE52SUVrdVJTNGdaRzlsYzI0bmRDQWdkSEoxYzNRZ2RHaGxJR2RzYjJKaGJDQnZZbXBsWTNRZ2QyaGxiaUJqWVd4c1pXUWdibTl5YldGc2JIbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFF1WTJGc2JDaHVkV3hzTENCdFlYSnJaWElwTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmhiV1VnWVhNZ1lXSnZkbVVnWW5WMElIZG9aVzRnYVhRbmN5QmhJSFpsY25OcGIyNGdiMllnU1M1RkxpQjBhR0YwSUcxMWMzUWdhR0YyWlNCMGFHVWdaMnh2WW1Gc0lHOWlhbVZqZENCbWIzSWdKM1JvYVhNbkxDQm9iM0JtZFd4c2VTQnZkWElnWTI5dWRHVjRkQ0JqYjNKeVpXTjBJRzkwYUdWeWQybHpaU0JwZENCM2FXeHNJSFJvY205M0lHRWdaMnh2WW1Gc0lHVnljbTl5TGx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVTI5dFpTQjJaWEp6YVc5dWN5QnZaaUJKTGtVdUlHaGhkbVVnWkdsbVptVnlaVzUwSUhKMWJHVnpJR1p2Y2lCamJHVmhjbFJwYldWdmRYUWdkbk1nYzJWMFZHbHRaVzkxZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDNWpZV3hzS0hSb2FYTXNJRzFoY210bGNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmx4dVhHNTlYRzUyWVhJZ2NYVmxkV1VnUFNCYlhUdGNiblpoY2lCa2NtRnBibWx1WnlBOUlHWmhiSE5sTzF4dWRtRnlJR04xY25KbGJuUlJkV1YxWlR0Y2JuWmhjaUJ4ZFdWMVpVbHVaR1Y0SUQwZ0xURTdYRzVjYm1aMWJtTjBhVzl1SUdOc1pXRnVWWEJPWlhoMFZHbGpheWdwSUh0Y2JpQWdJQ0JwWmlBb0lXUnlZV2x1YVc1bklIeDhJQ0ZqZFhKeVpXNTBVWFZsZFdVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0JrY21GcGJtbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBVWFZsZFdVdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lIRjFaWFZsSUQwZ1kzVnljbVZ1ZEZGMVpYVmxMbU52Ym1OaGRDaHhkV1YxWlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnY1hWbGRXVkpibVJsZUNBOUlDMHhPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9jWFZsZFdVdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lHUnlZV2x1VVhWbGRXVW9LVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUnlZV2x1VVhWbGRXVW9LU0I3WEc0Z0lDQWdhV1lnS0dSeVlXbHVhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUhScGJXVnZkWFFnUFNCeWRXNVVhVzFsYjNWMEtHTnNaV0Z1VlhCT1pYaDBWR2xqYXlrN1hHNGdJQ0FnWkhKaGFXNXBibWNnUFNCMGNuVmxPMXh1WEc0Z0lDQWdkbUZ5SUd4bGJpQTlJSEYxWlhWbExteGxibWQwYUR0Y2JpQWdJQ0IzYUdsc1pTaHNaVzRwSUh0Y2JpQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZGMVpYVmxJRDBnY1hWbGRXVTdYRzRnSUNBZ0lDQWdJSEYxWlhWbElEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2dySzNGMVpYVmxTVzVrWlhnZ1BDQnNaVzRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamRYSnlaVzUwVVhWbGRXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBVWFZsZFdWYmNYVmxkV1ZKYm1SbGVGMHVjblZ1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NYVmxkV1ZKYm1SbGVDQTlJQzB4TzF4dUlDQWdJQ0FnSUNCc1pXNGdQU0J4ZFdWMVpTNXNaVzVuZEdnN1hHNGdJQ0FnZlZ4dUlDQWdJR04xY25KbGJuUlJkV1YxWlNBOUlHNTFiR3c3WEc0Z0lDQWdaSEpoYVc1cGJtY2dQU0JtWVd4elpUdGNiaUFnSUNCeWRXNURiR1ZoY2xScGJXVnZkWFFvZEdsdFpXOTFkQ2s3WEc1OVhHNWNibkJ5YjJObGMzTXVibVY0ZEZScFkyc2dQU0JtZFc1amRHbHZiaUFvWm5WdUtTQjdYRzRnSUNBZ2RtRnlJR0Z5WjNNZ1BTQnVaWGNnUVhKeVlYa29ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQXRJREVwTzF4dUlDQWdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01Ta2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Uc2dhU0E4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSm5jMXRwSUMwZ01WMGdQU0JoY21kMWJXVnVkSE5iYVYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY1hWbGRXVXVjSFZ6YUNodVpYY2dTWFJsYlNobWRXNHNJR0Z5WjNNcEtUdGNiaUFnSUNCcFppQW9jWFZsZFdVdWJHVnVaM1JvSUQwOVBTQXhJQ1ltSUNGa2NtRnBibWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQnlkVzVVYVcxbGIzVjBLR1J5WVdsdVVYVmxkV1VwTzF4dUlDQWdJSDFjYm4wN1hHNWNiaTh2SUhZNElHeHBhMlZ6SUhCeVpXUnBZM1JwWW14bElHOWlhbVZqZEhOY2JtWjFibU4wYVc5dUlFbDBaVzBvWm5WdUxDQmhjbkpoZVNrZ2UxeHVJQ0FnSUhSb2FYTXVablZ1SUQwZ1puVnVPMXh1SUNBZ0lIUm9hWE11WVhKeVlYa2dQU0JoY25KaGVUdGNibjFjYmtsMFpXMHVjSEp2ZEc5MGVYQmxMbkoxYmlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjBhR2x6TG1aMWJpNWhjSEJzZVNodWRXeHNMQ0IwYUdsekxtRnljbUY1S1R0Y2JuMDdYRzV3Y205alpYTnpMblJwZEd4bElEMGdKMkp5YjNkelpYSW5PMXh1Y0hKdlkyVnpjeTVpY205M2MyVnlJRDBnZEhKMVpUdGNibkJ5YjJObGMzTXVaVzUySUQwZ2UzMDdYRzV3Y205alpYTnpMbUZ5WjNZZ1BTQmJYVHRjYm5CeWIyTmxjM011ZG1WeWMybHZiaUE5SUNjbk95QXZMeUJsYlhCMGVTQnpkSEpwYm1jZ2RHOGdZWFp2YVdRZ2NtVm5aWGh3SUdsemMzVmxjMXh1Y0hKdlkyVnpjeTUyWlhKemFXOXVjeUE5SUh0OU8xeHVYRzVtZFc1amRHbHZiaUJ1YjI5d0tDa2dlMzFjYmx4dWNISnZZMlZ6Y3k1dmJpQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxtRmtaRXhwYzNSbGJtVnlJRDBnYm05dmNEdGNibkJ5YjJObGMzTXViMjVqWlNBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG05bVppQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxuSmxiVzkyWlV4cGMzUmxibVZ5SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011Y21WdGIzWmxRV3hzVEdsemRHVnVaWEp6SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011WlcxcGRDQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxuQnlaWEJsYm1STWFYTjBaVzVsY2lBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG5CeVpYQmxibVJQYm1ObFRHbHpkR1Z1WlhJZ1BTQnViMjl3TzF4dVhHNXdjbTlqWlhOekxteHBjM1JsYm1WeWN5QTlJR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdJSEpsZEhWeWJpQmJYU0I5WEc1Y2JuQnliMk5sYzNNdVltbHVaR2x1WnlBOUlHWjFibU4wYVc5dUlDaHVZVzFsS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R3Y205alpYTnpMbUpwYm1ScGJtY2dhWE1nYm05MElITjFjSEJ2Y25SbFpDY3BPMXh1ZlR0Y2JseHVjSEp2WTJWemN5NWpkMlFnUFNCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQW5MeWNnZlR0Y2JuQnliMk5sYzNNdVkyaGthWElnUFNCbWRXNWpkR2x2YmlBb1pHbHlLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHdjbTlqWlhOekxtTm9aR2x5SUdseklHNXZkQ0J6ZFhCd2IzSjBaV1FuS1R0Y2JuMDdYRzV3Y205alpYTnpMblZ0WVhOcklEMGdablZ1WTNScGIyNG9LU0I3SUhKbGRIVnliaUF3T3lCOU8xeHVJaXdpS0daMWJtTjBhVzl1S0hObGJHWXBJSHRjYmlBZ0ozVnpaU0J6ZEhKcFkzUW5PMXh1WEc0Z0lHbG1JQ2h6Wld4bUxtWmxkR05vS1NCN1hHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JseHVJQ0IyWVhJZ2MzVndjRzl5ZENBOUlIdGNiaUFnSUNCelpXRnlZMmhRWVhKaGJYTTZJQ2RWVWt4VFpXRnlZMmhRWVhKaGJYTW5JR2x1SUhObGJHWXNYRzRnSUNBZ2FYUmxjbUZpYkdVNklDZFRlVzFpYjJ3bklHbHVJSE5sYkdZZ0ppWWdKMmwwWlhKaGRHOXlKeUJwYmlCVGVXMWliMndzWEc0Z0lDQWdZbXh2WWpvZ0owWnBiR1ZTWldGa1pYSW5JR2x1SUhObGJHWWdKaVlnSjBKc2IySW5JR2x1SUhObGJHWWdKaVlnS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnYm1WM0lFSnNiMklvS1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpWeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNobEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwS0Nrc1hHNGdJQ0FnWm05eWJVUmhkR0U2SUNkR2IzSnRSR0YwWVNjZ2FXNGdjMlZzWml4Y2JpQWdJQ0JoY25KaGVVSjFabVpsY2pvZ0owRnljbUY1UW5WbVptVnlKeUJwYmlCelpXeG1YRzRnSUgxY2JseHVJQ0JwWmlBb2MzVndjRzl5ZEM1aGNuSmhlVUoxWm1abGNpa2dlMXh1SUNBZ0lIWmhjaUIyYVdWM1EyeGhjM05sY3lBOUlGdGNiaUFnSUNBZ0lDZGJiMkpxWldOMElFbHVkRGhCY25KaGVWMG5MRnh1SUNBZ0lDQWdKMXR2WW1wbFkzUWdWV2x1ZERoQmNuSmhlVjBuTEZ4dUlDQWdJQ0FnSjF0dlltcGxZM1FnVldsdWREaERiR0Z0Y0dWa1FYSnlZWGxkSnl4Y2JpQWdJQ0FnSUNkYmIySnFaV04wSUVsdWRERTJRWEp5WVhsZEp5eGNiaUFnSUNBZ0lDZGJiMkpxWldOMElGVnBiblF4TmtGeWNtRjVYU2NzWEc0Z0lDQWdJQ0FuVzI5aWFtVmpkQ0JKYm5Rek1rRnljbUY1WFNjc1hHNGdJQ0FnSUNBblcyOWlhbVZqZENCVmFXNTBNekpCY25KaGVWMG5MRnh1SUNBZ0lDQWdKMXR2WW1wbFkzUWdSbXh2WVhRek1rRnljbUY1WFNjc1hHNGdJQ0FnSUNBblcyOWlhbVZqZENCR2JHOWhkRFkwUVhKeVlYbGRKMXh1SUNBZ0lGMWNibHh1SUNBZ0lIWmhjaUJwYzBSaGRHRldhV1YzSUQwZ1puVnVZM1JwYjI0b2IySnFLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiMkpxSUNZbUlFUmhkR0ZXYVdWM0xuQnliM1J2ZEhsd1pTNXBjMUJ5YjNSdmRIbHdaVTltS0c5aWFpbGNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdhWE5CY25KaGVVSjFabVpsY2xacFpYY2dQU0JCY25KaGVVSjFabVpsY2k1cGMxWnBaWGNnZkh3Z1puVnVZM1JwYjI0b2IySnFLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiMkpxSUNZbUlIWnBaWGREYkdGemMyVnpMbWx1WkdWNFQyWW9UMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWpZV3hzS0c5aWFpa3BJRDRnTFRGY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCdWIzSnRZV3hwZW1WT1lXMWxLRzVoYldVcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHNWhiV1VnSVQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQnVZVzFsSUQwZ1UzUnlhVzVuS0c1aGJXVXBYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDZ3ZXMTVoTFhvd0xUbGNYQzBqSkNVbUp5b3JMbHhjWGw5Z2ZINWRMMmt1ZEdWemRDaHVZVzFsS1NrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25TVzUyWVd4cFpDQmphR0Z5WVdOMFpYSWdhVzRnYUdWaFpHVnlJR1pwWld4a0lHNWhiV1VuS1Z4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JtRnRaUzUwYjB4dmQyVnlRMkZ6WlNncFhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQnViM0p0WVd4cGVtVldZV3gxWlNoMllXeDFaU2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnZG1Gc2RXVWdJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCMllXeDFaU0E5SUZOMGNtbHVaeWgyWVd4MVpTbGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbFhHNGdJSDFjYmx4dUlDQXZMeUJDZFdsc1pDQmhJR1JsYzNSeWRXTjBhWFpsSUdsMFpYSmhkRzl5SUdadmNpQjBhR1VnZG1Gc2RXVWdiR2x6ZEZ4dUlDQm1kVzVqZEdsdmJpQnBkR1Z5WVhSdmNrWnZjaWhwZEdWdGN5a2dlMXh1SUNBZ0lIWmhjaUJwZEdWeVlYUnZjaUE5SUh0Y2JpQWdJQ0FnSUc1bGVIUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdkbUZzZFdVZ1BTQnBkR1Z0Y3k1emFHbG1kQ2dwWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3Wkc5dVpUb2dkbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ3dnZG1Gc2RXVTZJSFpoYkhWbGZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHpkWEJ3YjNKMExtbDBaWEpoWW14bEtTQjdYRzRnSUNBZ0lDQnBkR1Z5WVhSdmNsdFRlVzFpYjJ3dWFYUmxjbUYwYjNKZElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJwZEdWeVlYUnZjbHh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCcGRHVnlZWFJ2Y2x4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z1NHVmhaR1Z5Y3lob1pXRmtaWEp6S1NCN1hHNGdJQ0FnZEdocGN5NXRZWEFnUFNCN2ZWeHVYRzRnSUNBZ2FXWWdLR2hsWVdSbGNuTWdhVzV6ZEdGdVkyVnZaaUJJWldGa1pYSnpLU0I3WEc0Z0lDQWdJQ0JvWldGa1pYSnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9kbUZzZFdVc0lHNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoY0hCbGJtUW9ibUZ0WlN3Z2RtRnNkV1VwWEc0Z0lDQWdJQ0I5TENCMGFHbHpLVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNob1pXRmtaWEp6S1NrZ2UxeHVJQ0FnSUNBZ2FHVmhaR1Z5Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dobFlXUmxjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbUZ3Y0dWdVpDaG9aV0ZrWlhKYk1GMHNJR2hsWVdSbGNsc3hYU2xjYmlBZ0lDQWdJSDBzSUhSb2FYTXBYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaG9aV0ZrWlhKektTQjdYRzRnSUNBZ0lDQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aG9aV0ZrWlhKektTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoY0hCbGJtUW9ibUZ0WlN3Z2FHVmhaR1Z5YzF0dVlXMWxYU2xjYmlBZ0lDQWdJSDBzSUhSb2FYTXBYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdTR1ZoWkdWeWN5NXdjbTkwYjNSNWNHVXVZWEJ3Wlc1a0lEMGdablZ1WTNScGIyNG9ibUZ0WlN3Z2RtRnNkV1VwSUh0Y2JpQWdJQ0J1WVcxbElEMGdibTl5YldGc2FYcGxUbUZ0WlNodVlXMWxLVnh1SUNBZ0lIWmhiSFZsSUQwZ2JtOXliV0ZzYVhwbFZtRnNkV1VvZG1Gc2RXVXBYRzRnSUNBZ2RtRnlJRzlzWkZaaGJIVmxJRDBnZEdocGN5NXRZWEJiYm1GdFpWMWNiaUFnSUNCMGFHbHpMbTFoY0Z0dVlXMWxYU0E5SUc5c1pGWmhiSFZsSUQ4Z2IyeGtWbUZzZFdVckp5d25LM1poYkhWbElEb2dkbUZzZFdWY2JpQWdmVnh1WEc0Z0lFaGxZV1JsY25NdWNISnZkRzkwZVhCbFd5ZGtaV3hsZEdVblhTQTlJR1oxYm1OMGFXOXVLRzVoYldVcElIdGNiaUFnSUNCa1pXeGxkR1VnZEdocGN5NXRZWEJiYm05eWJXRnNhWHBsVG1GdFpTaHVZVzFsS1YxY2JpQWdmVnh1WEc0Z0lFaGxZV1JsY25NdWNISnZkRzkwZVhCbExtZGxkQ0E5SUdaMWJtTjBhVzl1S0c1aGJXVXBJSHRjYmlBZ0lDQnVZVzFsSUQwZ2JtOXliV0ZzYVhwbFRtRnRaU2h1WVcxbEtWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtaGhjeWh1WVcxbEtTQS9JSFJvYVhNdWJXRndXMjVoYldWZElEb2diblZzYkZ4dUlDQjlYRzVjYmlBZ1NHVmhaR1Z5Y3k1d2NtOTBiM1I1Y0dVdWFHRnpJRDBnWm5WdVkzUnBiMjRvYm1GdFpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTFoY0M1b1lYTlBkMjVRY205d1pYSjBlU2h1YjNKdFlXeHBlbVZPWVcxbEtHNWhiV1VwS1Z4dUlDQjlYRzVjYmlBZ1NHVmhaR1Z5Y3k1d2NtOTBiM1I1Y0dVdWMyVjBJRDBnWm5WdVkzUnBiMjRvYm1GdFpTd2dkbUZzZFdVcElIdGNiaUFnSUNCMGFHbHpMbTFoY0Z0dWIzSnRZV3hwZW1WT1lXMWxLRzVoYldVcFhTQTlJRzV2Y20xaGJHbDZaVlpoYkhWbEtIWmhiSFZsS1Z4dUlDQjlYRzVjYmlBZ1NHVmhaR1Z5Y3k1d2NtOTBiM1I1Y0dVdVptOXlSV0ZqYUNBOUlHWjFibU4wYVc5dUtHTmhiR3hpWVdOckxDQjBhR2x6UVhKbktTQjdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2JtRnRaU0JwYmlCMGFHbHpMbTFoY0NrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWJXRndMbWhoYzA5M2JsQnliM0JsY25SNUtHNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lHTmhiR3hpWVdOckxtTmhiR3dvZEdocGMwRnlaeXdnZEdocGN5NXRZWEJiYm1GdFpWMHNJRzVoYldVc0lIUm9hWE1wWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnU0dWaFpHVnljeTV3Y205MGIzUjVjR1V1YTJWNWN5QTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSFpoY2lCcGRHVnRjeUE5SUZ0ZFhHNGdJQ0FnZEdocGN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUtIWmhiSFZsTENCdVlXMWxLU0I3SUdsMFpXMXpMbkIxYzJnb2JtRnRaU2tnZlNsY2JpQWdJQ0J5WlhSMWNtNGdhWFJsY21GMGIzSkdiM0lvYVhSbGJYTXBYRzRnSUgxY2JseHVJQ0JJWldGa1pYSnpMbkJ5YjNSdmRIbHdaUzUyWVd4MVpYTWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ2FYUmxiWE1nUFNCYlhWeHVJQ0FnSUhSb2FYTXVabTl5UldGamFDaG1kVzVqZEdsdmJpaDJZV3gxWlNrZ2V5QnBkR1Z0Y3k1d2RYTm9LSFpoYkhWbEtTQjlLVnh1SUNBZ0lISmxkSFZ5YmlCcGRHVnlZWFJ2Y2tadmNpaHBkR1Z0Y3lsY2JpQWdmVnh1WEc0Z0lFaGxZV1JsY25NdWNISnZkRzkwZVhCbExtVnVkSEpwWlhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQjJZWElnYVhSbGJYTWdQU0JiWFZ4dUlDQWdJSFJvYVhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloMllXeDFaU3dnYm1GdFpTa2dleUJwZEdWdGN5NXdkWE5vS0Z0dVlXMWxMQ0IyWVd4MVpWMHBJSDBwWEc0Z0lDQWdjbVYwZFhKdUlHbDBaWEpoZEc5eVJtOXlLR2wwWlcxektWeHVJQ0I5WEc1Y2JpQWdhV1lnS0hOMWNIQnZjblF1YVhSbGNtRmliR1VwSUh0Y2JpQWdJQ0JJWldGa1pYSnpMbkJ5YjNSdmRIbHdaVnRUZVcxaWIyd3VhWFJsY21GMGIzSmRJRDBnU0dWaFpHVnljeTV3Y205MGIzUjVjR1V1Wlc1MGNtbGxjMXh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnWTI5dWMzVnRaV1FvWW05a2VTa2dlMXh1SUNBZ0lHbG1JQ2hpYjJSNUxtSnZaSGxWYzJWa0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpXcGxZM1FvYm1WM0lGUjVjR1ZGY25KdmNpZ25RV3h5WldGa2VTQnlaV0ZrSnlrcFhHNGdJQ0FnZlZ4dUlDQWdJR0p2WkhrdVltOWtlVlZ6WldRZ1BTQjBjblZsWEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCbWFXeGxVbVZoWkdWeVVtVmhaSGtvY21WaFpHVnlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1SUNBZ0lDQWdjbVZoWkdWeUxtOXViRzloWkNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEpsWVdSbGNpNXlaWE4xYkhRcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpXRmtaWEl1YjI1bGNuSnZjaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb2NtVmhaR1Z5TG1WeWNtOXlLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBYRzRnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUJ5WldGa1FteHZZa0Z6UVhKeVlYbENkV1ptWlhJb1lteHZZaWtnZTF4dUlDQWdJSFpoY2lCeVpXRmtaWElnUFNCdVpYY2dSbWxzWlZKbFlXUmxjaWdwWEc0Z0lDQWdkbUZ5SUhCeWIyMXBjMlVnUFNCbWFXeGxVbVZoWkdWeVVtVmhaSGtvY21WaFpHVnlLVnh1SUNBZ0lISmxZV1JsY2k1eVpXRmtRWE5CY25KaGVVSjFabVpsY2loaWJHOWlLVnh1SUNBZ0lISmxkSFZ5YmlCd2NtOXRhWE5sWEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCeVpXRmtRbXh2WWtGelZHVjRkQ2hpYkc5aUtTQjdYRzRnSUNBZ2RtRnlJSEpsWVdSbGNpQTlJRzVsZHlCR2FXeGxVbVZoWkdWeUtDbGNiaUFnSUNCMllYSWdjSEp2YldselpTQTlJR1pwYkdWU1pXRmtaWEpTWldGa2VTaHlaV0ZrWlhJcFhHNGdJQ0FnY21WaFpHVnlMbkpsWVdSQmMxUmxlSFFvWW14dllpbGNiaUFnSUNCeVpYUjFjbTRnY0hKdmJXbHpaVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnY21WaFpFRnljbUY1UW5WbVptVnlRWE5VWlhoMEtHSjFaaWtnZTF4dUlDQWdJSFpoY2lCMmFXVjNJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29ZblZtS1Z4dUlDQWdJSFpoY2lCamFHRnljeUE5SUc1bGR5QkJjbkpoZVNoMmFXVjNMbXhsYm1kMGFDbGNibHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dkbWxsZHk1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdZMmhoY25OYmFWMGdQU0JUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0hacFpYZGJhVjBwWEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCamFHRnljeTVxYjJsdUtDY25LVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnWW5WbVptVnlRMnh2Ym1Vb1luVm1LU0I3WEc0Z0lDQWdhV1lnS0dKMVppNXpiR2xqWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdKMVppNXpiR2xqWlNnd0tWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IyWVhJZ2RtbGxkeUE5SUc1bGR5QlZhVzUwT0VGeWNtRjVLR0oxWmk1aWVYUmxUR1Z1WjNSb0tWeHVJQ0FnSUNBZ2RtbGxkeTV6WlhRb2JtVjNJRlZwYm5RNFFYSnlZWGtvWW5WbUtTbGNiaUFnSUNBZ0lISmxkSFZ5YmlCMmFXVjNMbUoxWm1abGNseHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlFSnZaSGtvS1NCN1hHNGdJQ0FnZEdocGN5NWliMlI1VlhObFpDQTlJR1poYkhObFhHNWNiaUFnSUNCMGFHbHpMbDlwYm1sMFFtOWtlU0E5SUdaMWJtTjBhVzl1S0dKdlpIa3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVgySnZaSGxKYm1sMElEMGdZbTlrZVZ4dUlDQWdJQ0FnYVdZZ0tDRmliMlI1S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJKdlpIbFVaWGgwSUQwZ0p5ZGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHSnZaSGtnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgySnZaSGxVWlhoMElEMGdZbTlrZVZ4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoemRYQndiM0owTG1Kc2IySWdKaVlnUW14dllpNXdjbTkwYjNSNWNHVXVhWE5RY205MGIzUjVjR1ZQWmloaWIyUjVLU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlpYjJSNVFteHZZaUE5SUdKdlpIbGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jM1Z3Y0c5eWRDNW1iM0p0UkdGMFlTQW1KaUJHYjNKdFJHRjBZUzV3Y205MGIzUjVjR1V1YVhOUWNtOTBiM1I1Y0dWUFppaGliMlI1S1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aWIyUjVSbTl5YlVSaGRHRWdQU0JpYjJSNVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tITjFjSEJ2Y25RdWMyVmhjbU5vVUdGeVlXMXpJQ1ltSUZWU1RGTmxZWEpqYUZCaGNtRnRjeTV3Y205MGIzUjVjR1V1YVhOUWNtOTBiM1I1Y0dWUFppaGliMlI1S1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aWIyUjVWR1Y0ZENBOUlHSnZaSGt1ZEc5VGRISnBibWNvS1Z4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoemRYQndiM0owTG1GeWNtRjVRblZtWm1WeUlDWW1JSE4xY0hCdmNuUXVZbXh2WWlBbUppQnBjMFJoZEdGV2FXVjNLR0p2WkhrcEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgySnZaSGxCY25KaGVVSjFabVpsY2lBOUlHSjFabVpsY2tOc2IyNWxLR0p2WkhrdVluVm1abVZ5S1Z4dUlDQWdJQ0FnSUNBdkx5QkpSU0F4TUMweE1TQmpZVzRuZENCb1lXNWtiR1VnWVNCRVlYUmhWbWxsZHlCaWIyUjVMbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWliMlI1U1c1cGRDQTlJRzVsZHlCQ2JHOWlLRnQwYUdsekxsOWliMlI1UVhKeVlYbENkV1ptWlhKZEtWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpkWEJ3YjNKMExtRnljbUY1UW5WbVptVnlJQ1ltSUNoQmNuSmhlVUoxWm1abGNpNXdjbTkwYjNSNWNHVXVhWE5RY205MGIzUjVjR1ZQWmloaWIyUjVLU0I4ZkNCcGMwRnljbUY1UW5WbVptVnlWbWxsZHloaWIyUjVLU2twSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWW05a2VVRnljbUY1UW5WbVptVnlJRDBnWW5WbVptVnlRMnh2Ym1Vb1ltOWtlU2xjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25kVzV6ZFhCd2IzSjBaV1FnUW05a2VVbHVhWFFnZEhsd1pTY3BYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTVvWldGa1pYSnpMbWRsZENnblkyOXVkR1Z1ZEMxMGVYQmxKeWtwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmliMlI1SUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR1ZoWkdWeWN5NXpaWFFvSjJOdmJuUmxiblF0ZEhsd1pTY3NJQ2QwWlhoMEwzQnNZV2x1TzJOb1lYSnpaWFE5VlZSR0xUZ25LVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVYMkp2WkhsQ2JHOWlJQ1ltSUhSb2FYTXVYMkp2WkhsQ2JHOWlMblI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtaGxZV1JsY25NdWMyVjBLQ2RqYjI1MFpXNTBMWFI1Y0dVbkxDQjBhR2x6TGw5aWIyUjVRbXh2WWk1MGVYQmxLVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hOMWNIQnZjblF1YzJWaGNtTm9VR0Z5WVcxeklDWW1JRlZTVEZObFlYSmphRkJoY21GdGN5NXdjbTkwYjNSNWNHVXVhWE5RY205MGIzUjVjR1ZQWmloaWIyUjVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YUdWaFpHVnljeTV6WlhRb0oyTnZiblJsYm5RdGRIbHdaU2NzSUNkaGNIQnNhV05oZEdsdmJpOTRMWGQzZHkxbWIzSnRMWFZ5YkdWdVkyOWtaV1E3WTJoaGNuTmxkRDFWVkVZdE9DY3BYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYzNWd2NHOXlkQzVpYkc5aUtTQjdYRzRnSUNBZ0lDQjBhR2x6TG1Kc2IySWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEpsYW1WamRHVmtJRDBnWTI5dWMzVnRaV1FvZEdocGN5bGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGFtVmpkR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxhbVZqZEdWa1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWW05a2VVSnNiMklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0hSb2FYTXVYMkp2WkhsQ2JHOWlLVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVYMkp2WkhsQmNuSmhlVUoxWm1abGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9ibVYzSUVKc2IySW9XM1JvYVhNdVgySnZaSGxCY25KaGVVSjFabVpsY2wwcEtWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFJvYVhNdVgySnZaSGxHYjNKdFJHRjBZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblkyOTFiR1FnYm05MElISmxZV1FnUm05eWJVUmhkR0VnWW05a2VTQmhjeUJpYkc5aUp5bGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaWE52YkhabEtHNWxkeUJDYkc5aUtGdDBhR2x6TGw5aWIyUjVWR1Y0ZEYwcEtWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJvYVhNdVlYSnlZWGxDZFdabVpYSWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgySnZaSGxCY25KaGVVSjFabVpsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMjV6ZFcxbFpDaDBhR2x6S1NCOGZDQlFjbTl0YVhObExuSmxjMjlzZG1Vb2RHaHBjeTVmWW05a2VVRnljbUY1UW5WbVptVnlLVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtSnNiMklvS1M1MGFHVnVLSEpsWVdSQ2JHOWlRWE5CY25KaGVVSjFabVpsY2lsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVkR1Y0ZENBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhKbGFtVmpkR1ZrSUQwZ1kyOXVjM1Z0WldRb2RHaHBjeWxjYmlBZ0lDQWdJR2xtSUNoeVpXcGxZM1JsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnFaV04wWldSY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgySnZaSGxDYkc5aUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaV0ZrUW14dllrRnpWR1Y0ZENoMGFHbHpMbDlpYjJSNVFteHZZaWxjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEdocGN5NWZZbTlrZVVGeWNtRjVRblZtWm1WeUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb2NtVmhaRUZ5Y21GNVFuVm1abVZ5UVhOVVpYaDBLSFJvYVhNdVgySnZaSGxCY25KaGVVSjFabVpsY2lrcFhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11WDJKdlpIbEdiM0p0UkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMk52ZFd4a0lHNXZkQ0J5WldGa0lFWnZjbTFFWVhSaElHSnZaSGtnWVhNZ2RHVjRkQ2NwWEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaWE52YkhabEtIUm9hWE11WDJKdlpIbFVaWGgwS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoemRYQndiM0owTG1admNtMUVZWFJoS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbVp2Y20xRVlYUmhJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblJsZUhRb0tTNTBhR1Z1S0dSbFkyOWtaU2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG1wemIyNGdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuUmxlSFFvS1M1MGFHVnVLRXBUVDA0dWNHRnljMlVwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE5jYmlBZ2ZWeHVYRzRnSUM4dklFaFVWRkFnYldWMGFHOWtjeUIzYUc5elpTQmpZWEJwZEdGc2FYcGhkR2x2YmlCemFHOTFiR1FnWW1VZ2JtOXliV0ZzYVhwbFpGeHVJQ0IyWVhJZ2JXVjBhRzlrY3lBOUlGc25SRVZNUlZSRkp5d2dKMGRGVkNjc0lDZElSVUZFSnl3Z0owOVFWRWxQVGxNbkxDQW5VRTlUVkNjc0lDZFFWVlFuWFZ4dVhHNGdJR1oxYm1OMGFXOXVJRzV2Y20xaGJHbDZaVTFsZEdodlpDaHRaWFJvYjJRcElIdGNiaUFnSUNCMllYSWdkWEJqWVhObFpDQTlJRzFsZEdodlpDNTBiMVZ3Y0dWeVEyRnpaU2dwWEc0Z0lDQWdjbVYwZFhKdUlDaHRaWFJvYjJSekxtbHVaR1Y0VDJZb2RYQmpZWE5sWkNrZ1BpQXRNU2tnUHlCMWNHTmhjMlZrSURvZ2JXVjBhRzlrWEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCU1pYRjFaWE4wS0dsdWNIVjBMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdiM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTWdmSHdnZTMxY2JpQWdJQ0IyWVhJZ1ltOWtlU0E5SUc5d2RHbHZibk11WW05a2VWeHVYRzRnSUNBZ2FXWWdLR2x1Y0hWMElHbHVjM1JoYm1ObGIyWWdVbVZ4ZFdWemRDa2dlMXh1SUNBZ0lDQWdhV1lnS0dsdWNIVjBMbUp2WkhsVmMyVmtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owRnNjbVZoWkhrZ2NtVmhaQ2NwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IwYUdsekxuVnliQ0E5SUdsdWNIVjBMblZ5YkZ4dUlDQWdJQ0FnZEdocGN5NWpjbVZrWlc1MGFXRnNjeUE5SUdsdWNIVjBMbU55WldSbGJuUnBZV3h6WEc0Z0lDQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NdWFHVmhaR1Z5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1obFlXUmxjbk1nUFNCdVpYY2dTR1ZoWkdWeWN5aHBibkIxZEM1b1pXRmtaWEp6S1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZEdocGN5NXRaWFJvYjJRZ1BTQnBibkIxZEM1dFpYUm9iMlJjYmlBZ0lDQWdJSFJvYVhNdWJXOWtaU0E5SUdsdWNIVjBMbTF2WkdWY2JpQWdJQ0FnSUdsbUlDZ2hZbTlrZVNBbUppQnBibkIxZEM1ZlltOWtlVWx1YVhRZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQmliMlI1SUQwZ2FXNXdkWFF1WDJKdlpIbEpibWwwWEc0Z0lDQWdJQ0FnSUdsdWNIVjBMbUp2WkhsVmMyVmtJRDBnZEhKMVpWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxuVnliQ0E5SUZOMGNtbHVaeWhwYm5CMWRDbGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbU55WldSbGJuUnBZV3h6SUQwZ2IzQjBhVzl1Y3k1amNtVmtaVzUwYVdGc2N5QjhmQ0IwYUdsekxtTnlaV1JsYm5ScFlXeHpJSHg4SUNkdmJXbDBKMXh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbWhsWVdSbGNuTWdmSHdnSVhSb2FYTXVhR1ZoWkdWeWN5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1b1pXRmtaWEp6SUQwZ2JtVjNJRWhsWVdSbGNuTW9iM0IwYVc5dWN5NW9aV0ZrWlhKektWeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtMWxkR2h2WkNBOUlHNXZjbTFoYkdsNlpVMWxkR2h2WkNodmNIUnBiMjV6TG0xbGRHaHZaQ0I4ZkNCMGFHbHpMbTFsZEdodlpDQjhmQ0FuUjBWVUp5bGNiaUFnSUNCMGFHbHpMbTF2WkdVZ1BTQnZjSFJwYjI1ekxtMXZaR1VnZkh3Z2RHaHBjeTV0YjJSbElIeDhJRzUxYkd4Y2JpQWdJQ0IwYUdsekxuSmxabVZ5Y21WeUlEMGdiblZzYkZ4dVhHNGdJQ0FnYVdZZ0tDaDBhR2x6TG0xbGRHaHZaQ0E5UFQwZ0owZEZWQ2NnZkh3Z2RHaHBjeTV0WlhSb2IyUWdQVDA5SUNkSVJVRkVKeWtnSmlZZ1ltOWtlU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblFtOWtlU0J1YjNRZ1lXeHNiM2RsWkNCbWIzSWdSMFZVSUc5eUlFaEZRVVFnY21WeGRXVnpkSE1uS1Z4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TGw5cGJtbDBRbTlrZVNoaWIyUjVLVnh1SUNCOVhHNWNiaUFnVW1WeGRXVnpkQzV3Y205MGIzUjVjR1V1WTJ4dmJtVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZKbGNYVmxjM1FvZEdocGN5d2dleUJpYjJSNU9pQjBhR2x6TGw5aWIyUjVTVzVwZENCOUtWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdaR1ZqYjJSbEtHSnZaSGtwSUh0Y2JpQWdJQ0IyWVhJZ1ptOXliU0E5SUc1bGR5QkdiM0p0UkdGMFlTZ3BYRzRnSUNBZ1ltOWtlUzUwY21sdEtDa3VjM0JzYVhRb0p5WW5LUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR0o1ZEdWektTQjdYRzRnSUNBZ0lDQnBaaUFvWW5sMFpYTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlITndiR2wwSUQwZ1lubDBaWE11YzNCc2FYUW9KejBuS1Z4dUlDQWdJQ0FnSUNCMllYSWdibUZ0WlNBOUlITndiR2wwTG5Ob2FXWjBLQ2t1Y21Wd2JHRmpaU2d2WEZ3ckwyY3NJQ2NnSnlsY2JpQWdJQ0FnSUNBZ2RtRnlJSFpoYkhWbElEMGdjM0JzYVhRdWFtOXBiaWduUFNjcExuSmxjR3hoWTJVb0wxeGNLeTluTENBbklDY3BYRzRnSUNBZ0lDQWdJR1p2Y20wdVlYQndaVzVrS0dSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENodVlXMWxLU3dnWkdWamIyUmxWVkpKUTI5dGNHOXVaVzUwS0haaGJIVmxLU2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVnh1SUNBZ0lISmxkSFZ5YmlCbWIzSnRYRzRnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUJ3WVhKelpVaGxZV1JsY25Nb2NtRjNTR1ZoWkdWeWN5a2dlMXh1SUNBZ0lIWmhjaUJvWldGa1pYSnpJRDBnYm1WM0lFaGxZV1JsY25Nb0tWeHVJQ0FnSUhKaGQwaGxZV1JsY25NdWMzQnNhWFFvTDF4Y2NqOWNYRzR2S1M1bWIzSkZZV05vS0daMWJtTjBhVzl1S0d4cGJtVXBJSHRjYmlBZ0lDQWdJSFpoY2lCd1lYSjBjeUE5SUd4cGJtVXVjM0JzYVhRb0p6b25LVnh1SUNBZ0lDQWdkbUZ5SUd0bGVTQTlJSEJoY25SekxuTm9hV1owS0NrdWRISnBiU2dwWEc0Z0lDQWdJQ0JwWmlBb2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjJZV3gxWlNBOUlIQmhjblJ6TG1wdmFXNG9Kem9uS1M1MGNtbHRLQ2xjYmlBZ0lDQWdJQ0FnYUdWaFpHVnljeTVoY0hCbGJtUW9hMlY1TENCMllXeDFaU2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVnh1SUNBZ0lISmxkSFZ5YmlCb1pXRmtaWEp6WEc0Z0lIMWNibHh1SUNCQ2IyUjVMbU5oYkd3b1VtVnhkV1Z6ZEM1d2NtOTBiM1I1Y0dVcFhHNWNiaUFnWm5WdVkzUnBiMjRnVW1WemNHOXVjMlVvWW05a2VVbHVhWFFzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lHOXdkR2x2Ym5NZ1BTQjdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ2RrWldaaGRXeDBKMXh1SUNBZ0lIUm9hWE11YzNSaGRIVnpJRDBnSjNOMFlYUjFjeWNnYVc0Z2IzQjBhVzl1Y3lBL0lHOXdkR2x2Ym5NdWMzUmhkSFZ6SURvZ01qQXdYRzRnSUNBZ2RHaHBjeTV2YXlBOUlIUm9hWE11YzNSaGRIVnpJRDQ5SURJd01DQW1KaUIwYUdsekxuTjBZWFIxY3lBOElETXdNRnh1SUNBZ0lIUm9hWE11YzNSaGRIVnpWR1Y0ZENBOUlDZHpkR0YwZFhOVVpYaDBKeUJwYmlCdmNIUnBiMjV6SUQ4Z2IzQjBhVzl1Y3k1emRHRjBkWE5VWlhoMElEb2dKMDlMSjF4dUlDQWdJSFJvYVhNdWFHVmhaR1Z5Y3lBOUlHNWxkeUJJWldGa1pYSnpLRzl3ZEdsdmJuTXVhR1ZoWkdWeWN5bGNiaUFnSUNCMGFHbHpMblZ5YkNBOUlHOXdkR2x2Ym5NdWRYSnNJSHg4SUNjblhHNGdJQ0FnZEdocGN5NWZhVzVwZEVKdlpIa29ZbTlrZVVsdWFYUXBYRzRnSUgxY2JseHVJQ0JDYjJSNUxtTmhiR3dvVW1WemNHOXVjMlV1Y0hKdmRHOTBlWEJsS1Z4dVhHNGdJRkpsYzNCdmJuTmxMbkJ5YjNSdmRIbHdaUzVqYkc5dVpTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVW1WemNHOXVjMlVvZEdocGN5NWZZbTlrZVVsdWFYUXNJSHRjYmlBZ0lDQWdJSE4wWVhSMWN6b2dkR2hwY3k1emRHRjBkWE1zWEc0Z0lDQWdJQ0J6ZEdGMGRYTlVaWGgwT2lCMGFHbHpMbk4wWVhSMWMxUmxlSFFzWEc0Z0lDQWdJQ0JvWldGa1pYSnpPaUJ1WlhjZ1NHVmhaR1Z5Y3loMGFHbHpMbWhsWVdSbGNuTXBMRnh1SUNBZ0lDQWdkWEpzT2lCMGFHbHpMblZ5YkZ4dUlDQWdJSDBwWEc0Z0lIMWNibHh1SUNCU1pYTndiMjV6WlM1bGNuSnZjaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhaaGNpQnlaWE53YjI1elpTQTlJRzVsZHlCU1pYTndiMjV6WlNodWRXeHNMQ0I3YzNSaGRIVnpPaUF3TENCemRHRjBkWE5VWlhoME9pQW5KMzBwWEc0Z0lDQWdjbVZ6Y0c5dWMyVXVkSGx3WlNBOUlDZGxjbkp2Y2lkY2JpQWdJQ0J5WlhSMWNtNGdjbVZ6Y0c5dWMyVmNiaUFnZlZ4dVhHNGdJSFpoY2lCeVpXUnBjbVZqZEZOMFlYUjFjMlZ6SUQwZ1d6TXdNU3dnTXpBeUxDQXpNRE1zSURNd055d2dNekE0WFZ4dVhHNGdJRkpsYzNCdmJuTmxMbkpsWkdseVpXTjBJRDBnWm5WdVkzUnBiMjRvZFhKc0xDQnpkR0YwZFhNcElIdGNiaUFnSUNCcFppQW9jbVZrYVhKbFkzUlRkR0YwZFhObGN5NXBibVJsZUU5bUtITjBZWFIxY3lrZ1BUMDlJQzB4S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25TVzUyWVd4cFpDQnpkR0YwZFhNZ1kyOWtaU2NwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJTWlhOd2IyNXpaU2h1ZFd4c0xDQjdjM1JoZEhWek9pQnpkR0YwZFhNc0lHaGxZV1JsY25NNklIdHNiMk5oZEdsdmJqb2dkWEpzZlgwcFhHNGdJSDFjYmx4dUlDQnpaV3htTGtobFlXUmxjbk1nUFNCSVpXRmtaWEp6WEc0Z0lITmxiR1l1VW1WeGRXVnpkQ0E5SUZKbGNYVmxjM1JjYmlBZ2MyVnNaaTVTWlhOd2IyNXpaU0E5SUZKbGMzQnZibk5sWEc1Y2JpQWdjMlZzWmk1bVpYUmphQ0E5SUdaMWJtTjBhVzl1S0dsdWNIVjBMQ0JwYm1sMEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEpsY1hWbGMzUWdQU0J1WlhjZ1VtVnhkV1Z6ZENocGJuQjFkQ3dnYVc1cGRDbGNiaUFnSUNBZ0lIWmhjaUI0YUhJZ1BTQnVaWGNnV0UxTVNIUjBjRkpsY1hWbGMzUW9LVnh1WEc0Z0lDQWdJQ0I0YUhJdWIyNXNiMkZrSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdmNIUnBiMjV6SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJSE4wWVhSMWN6b2dlR2h5TG5OMFlYUjFjeXhjYmlBZ0lDQWdJQ0FnSUNCemRHRjBkWE5VWlhoME9pQjRhSEl1YzNSaGRIVnpWR1Y0ZEN4Y2JpQWdJQ0FnSUNBZ0lDQm9aV0ZrWlhKek9pQndZWEp6WlVobFlXUmxjbk1vZUdoeUxtZGxkRUZzYkZKbGMzQnZibk5sU0dWaFpHVnljeWdwSUh4OElDY25LVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUc5d2RHbHZibk11ZFhKc0lEMGdKM0psYzNCdmJuTmxWVkpNSnlCcGJpQjRhSElnUHlCNGFISXVjbVZ6Y0c5dWMyVlZVa3dnT2lCdmNIUnBiMjV6TG1obFlXUmxjbk11WjJWMEtDZFlMVkpsY1hWbGMzUXRWVkpNSnlsY2JpQWdJQ0FnSUNBZ2RtRnlJR0p2WkhrZ1BTQW5jbVZ6Y0c5dWMyVW5JR2x1SUhob2NpQS9JSGhvY2k1eVpYTndiMjV6WlNBNklIaG9jaTV5WlhOd2IyNXpaVlJsZUhSY2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNodVpYY2dVbVZ6Y0c5dWMyVW9ZbTlrZVN3Z2IzQjBhVzl1Y3lrcFhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIaG9jaTV2Ym1WeWNtOXlJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxhbVZqZENodVpYY2dWSGx3WlVWeWNtOXlLQ2RPWlhSM2IzSnJJSEpsY1hWbGMzUWdabUZwYkdWa0p5a3BYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSGhvY2k1dmJuUnBiV1Z2ZFhRZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLRzVsZHlCVWVYQmxSWEp5YjNJb0owNWxkSGR2Y21zZ2NtVnhkV1Z6ZENCbVlXbHNaV1FuS1NsY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2VHaHlMbTl3Wlc0b2NtVnhkV1Z6ZEM1dFpYUm9iMlFzSUhKbGNYVmxjM1F1ZFhKc0xDQjBjblZsS1Z4dVhHNGdJQ0FnSUNCcFppQW9jbVZ4ZFdWemRDNWpjbVZrWlc1MGFXRnNjeUE5UFQwZ0oybHVZMngxWkdVbktTQjdYRzRnSUNBZ0lDQWdJSGhvY2k1M2FYUm9RM0psWkdWdWRHbGhiSE1nUFNCMGNuVmxYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNnbmNtVnpjRzl1YzJWVWVYQmxKeUJwYmlCNGFISWdKaVlnYzNWd2NHOXlkQzVpYkc5aUtTQjdYRzRnSUNBZ0lDQWdJSGhvY2k1eVpYTndiMjV6WlZSNWNHVWdQU0FuWW14dllpZGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVZ4ZFdWemRDNW9aV0ZrWlhKekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RtRnNkV1VzSUc1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnZUdoeUxuTmxkRkpsY1hWbGMzUklaV0ZrWlhJb2JtRnRaU3dnZG1Gc2RXVXBYRzRnSUNBZ0lDQjlLVnh1WEc0Z0lDQWdJQ0I0YUhJdWMyVnVaQ2gwZVhCbGIyWWdjbVZ4ZFdWemRDNWZZbTlrZVVsdWFYUWdQVDA5SUNkMWJtUmxabWx1WldRbklEOGdiblZzYkNBNklISmxjWFZsYzNRdVgySnZaSGxKYm1sMEtWeHVJQ0FnSUgwcFhHNGdJSDFjYmlBZ2MyVnNaaTVtWlhSamFDNXdiMng1Wm1sc2JDQTlJSFJ5ZFdWY2JuMHBLSFI1Y0dWdlppQnpaV3htSUNFOVBTQW5kVzVrWldacGJtVmtKeUEvSUhObGJHWWdPaUIwYUdsektUdGNiaUpkZlE9PVxuIl19
