!function t(e,r,n){function o(s,a){if(!r[s]){if(!e[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var f=r[s]={exports:{}};e[s][0].call(f.exports,function(t){var r=e[s][1][t];return o(r?r:t)},f,f.exports,t,e,r,n)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(t,e,r){"use strict";function n(){!function(){var t=document.querySelector(".js-top__arrow");t.addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)})}()}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],2:[function(t,e,r){"use strict";function n(){!function(){var t=function(){var t=document.querySelector(".js-pixels"),e=function(){if(t&&null!==t.textContent){var e=window.innerWidth*window.innerHeight;t.textContent=e.toLocaleString()}};requestAnimationFrame(e)};t(),window.addEventListener("resize",t)}()}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n},{}],3:[function(t,e,r){"use strict";var n=t("./spa");!function(){function t(){r.classList.toggle("menu-open")}function e(e){console.log(e),e.target&&"A"===e.target.nodeName&&(e.preventDefault(),t(),e.target.pathname!==window.location.pathname&&(history.pushState(null,null,e.target.pathname),(0,n.updatePage)()))}var r=document.querySelector("header"),o=document.querySelector(".js-trigger--menu"),i=document.querySelector(".js-menu");(0,n.runNewFunctions)(),o.addEventListener("click",t,!1),i.addEventListener("click",e,!1)}()},{"./spa":5}],4:[function(t,e,r){"use strict";function n(){function t(){var t=this.parentNode,e=t.previousElementSibling;t.style.maxHeight=0,t.classList.toggle("project__details--expanded"),e.classList.toggle("project__expandIcon--expanded")}function e(){this.classList.toggle("project__expandIcon--expanded");var t=this.nextElementSibling,e=t.classList.contains("project__details--expanded");t.classList.toggle("project__details--expanded"),t.style.maxHeight=e?0:t.scrollHeight+"px"}var r=document.querySelector(".js-page__arrow--top");r.addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)},!1);var n=document.querySelectorAll(".js-project");n.forEach(function(t){var r=t.querySelector(".project__expandIcon");r.addEventListener("click",e,!1)}),n.forEach(function(e){var r=e.querySelector(".project__closeIcon");r.addEventListener("click",t,!1)})}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],5:[function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function o(t){return p[t]?Promise.resolve(p[t]):fetch(t).then(function(e){return e.ok?(p[t]=e.text(),p[t]):void console.log("network response was not ok.")}).catch(function(e){return console.log("there has been an error requesting ("+t+"): "+e.message)})}Object.defineProperty(r,"__esModule",{value:!0}),r.updatePage=r.runNewFunctions=void 0;var i=t("./landing"),s=n(i),a=t("./about"),u=n(a),c=t("./projects"),f=n(c),l=t("./utils");t("es6-promise").polyfill(),t("isomorphic-fetch");var h=r.runNewFunctions=function(){var t=window.location.pathname;"/"===t||"/index.html"===t?(0,s.default)():t.startsWith("/about")?(0,u.default)():t.startsWith("/projects")?(0,f.default)():console.log("fix me")},d=r.updatePage=function(){var t=window.location.href;o(t).then(function(t){var e=document.createElement("html");e.innerHTML=t;var r=document.querySelector(".page"),n=e.querySelector(".page"),o=e.getElementsByTagName("title")[0].textContent,i=e.getElementsByTagName("meta").description.content;r.parentNode.replaceChild(n,r),document.title=o,document.getElementsByTagName("meta").description.content=i,(0,l.fadeIn)(n),h()})},p={};window.addEventListener("popstate",d)},{"./about":1,"./landing":2,"./projects":4,"./utils":6,"es6-promise":7,"isomorphic-fetch":8}],6:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(t){return t*t*t*t},o=function(t){return 1- --t*t*t*t};r.scrollToTop=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:600,r=t.scrollHeight,n=Date.now(),i=function i(){var s=Date.now(),a=(s-n)/e,u=o(a);t.scrollTop=u*(0-r)+r,0!==t.scrollTop&&requestAnimationFrame(i)};i()},r.fadeIn=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1600;t.style.opacity=0;var r=Date.now(),o=function o(){var i=Date.now(),s=(i-r)/e,a=n(s);return t.style.opacity=a,t.style.opacity>1?void(t.style.opacity=1):void requestAnimationFrame(o)};o()},r.fadeOut=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1600;t.style.opacity=1;var r=Date.now(),n=function n(){var i=Date.now(),s=(i-r)/e,a=o(s);return t.style.opacity=1-a,t.style.opacity<0?void(t.style.opacity=0):void requestAnimationFrame(n)};n()}},{}],7:[function(t,e,r){(function(n,o){!function(t,n){"object"==typeof r&&"undefined"!=typeof e?e.exports=n():"function"==typeof define&&define.amd?define(n):t.ES6Promise=n()}(this,function(){"use strict";function e(t){return"function"==typeof t||"object"==typeof t&&null!==t}function r(t){return"function"==typeof t}function i(t){X=t}function s(t){J=t}function a(){return function(){return n.nextTick(h)}}function u(){return"undefined"!=typeof V?function(){V(h)}:l()}function c(){var t=0,e=new Z(h),r=document.createTextNode("");return e.observe(r,{characterData:!0}),function(){r.data=t=++t%2}}function f(){var t=new MessageChannel;return t.port1.onmessage=h,function(){return t.port2.postMessage(0)}}function l(){var t=setTimeout;return function(){return t(h,1)}}function h(){for(var t=0;t<K;t+=2){var e=rt[t],r=rt[t+1];e(r),rt[t]=void 0,rt[t+1]=void 0}K=0}function d(){try{var e=t,r=e("vertx");return V=r.runOnLoop||r.runOnContext,u()}catch(t){return l()}}function p(t,e){var r=arguments,n=this,o=new this.constructor(v);void 0===o[ot]&&F(o);var i=n._state;return i?!function(){var t=r[i-1];J(function(){return q(i,o,t,n._result)})}():S(n,o,t,e),o}function y(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var r=new e(v);return E(r,t),r}function v(){}function m(){return new TypeError("You cannot resolve a promise with itself")}function b(){return new TypeError("A promises callback cannot return that same promise.")}function w(t){try{return t.then}catch(t){return ut.error=t,ut}}function _(t,e,r,n){try{t.call(e,r,n)}catch(t){return t}}function g(t,e,r){J(function(t){var n=!1,o=_(r,e,function(r){n||(n=!0,e!==r?E(t,r):j(t,r))},function(e){n||(n=!0,P(t,e))},"Settle: "+(t._label||" unknown promise"));!n&&o&&(n=!0,P(t,o))},t)}function T(t,e){e._state===st?j(t,e._result):e._state===at?P(t,e._result):S(e,void 0,function(e){return E(t,e)},function(e){return P(t,e)})}function A(t,e,n){e.constructor===t.constructor&&n===p&&e.constructor.resolve===y?T(t,e):n===ut?P(t,ut.error):void 0===n?j(t,e):r(n)?g(t,e,n):j(t,e)}function E(t,r){t===r?P(t,m()):e(r)?A(t,r,w(r)):j(t,r)}function x(t){t._onerror&&t._onerror(t._result),B(t)}function j(t,e){t._state===it&&(t._result=e,t._state=st,0!==t._subscribers.length&&J(B,t))}function P(t,e){t._state===it&&(t._state=at,t._result=e,J(x,t))}function S(t,e,r,n){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+st]=r,o[i+at]=n,0===i&&t._state&&J(B,t)}function B(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var n=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)n=e[s],o=e[s+r],n?q(r,n,o,i):o(i);t._subscribers.length=0}}function O(){this.error=null}function L(t,e){try{return t(e)}catch(t){return ct.error=t,ct}}function q(t,e,n,o){var i=r(n),s=void 0,a=void 0,u=void 0,c=void 0;if(i){if(s=L(n,o),s===ct?(c=!0,a=s.error,s=null):u=!0,e===s)return void P(e,b())}else s=o,u=!0;e._state!==it||(i&&u?E(e,s):c?P(e,a):t===st?j(e,s):t===at&&P(e,s))}function D(t,e){try{e(function(e){E(t,e)},function(e){P(t,e)})}catch(e){P(t,e)}}function U(){return ft++}function F(t){t[ot]=ft++,t._state=void 0,t._result=void 0,t._subscribers=[]}function I(t,e){this._instanceConstructor=t,this.promise=new t(v),this.promise[ot]||F(this.promise),z(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?j(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&j(this.promise,this._result))):P(this.promise,C())}function C(){return new Error("Array Methods must be provided an Array")}function N(t){return new I(this,t).promise}function k(t){var e=this;return new e(z(t)?function(r,n){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(r,n)}:function(t,e){return e(new TypeError("You must pass an array to race."))})}function R(t){var e=this,r=new e(v);return P(r,t),r}function M(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function H(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function G(t){this[ot]=U(),this._result=this._state=void 0,this._subscribers=[],v!==t&&("function"!=typeof t&&M(),this instanceof G?D(this,t):H())}function W(){var t=void 0;if("undefined"!=typeof o)t=o;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===r&&!e.cast)return}t.Promise=G}var Y=void 0;Y=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var z=Y,K=0,V=void 0,X=void 0,J=function(t,e){rt[K]=t,rt[K+1]=e,K+=2,2===K&&(X?X(h):nt())},$="undefined"!=typeof window?window:void 0,Q=$||{},Z=Q.MutationObserver||Q.WebKitMutationObserver,tt="undefined"==typeof self&&"undefined"!=typeof n&&"[object process]"==={}.toString.call(n),et="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,rt=new Array(1e3),nt=void 0;nt=tt?a():Z?c():et?f():void 0===$&&"function"==typeof t?d():l();var ot=Math.random().toString(36).substring(16),it=void 0,st=1,at=2,ut=new O,ct=new O,ft=0;return I.prototype._enumerate=function(){for(var t=this.length,e=this._input,r=0;this._state===it&&r<t;r++)this._eachEntry(e[r],r)},I.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===y){var o=w(t);if(o===p&&t._state!==it)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(r===G){var i=new r(v);A(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new r(function(e){return e(t)}),e)}else this._willSettleAt(n(t),e)},I.prototype._settledAt=function(t,e,r){var n=this.promise;n._state===it&&(this._remaining--,t===at?P(n,r):this._result[e]=r),0===this._remaining&&j(n,this._result)},I.prototype._willSettleAt=function(t,e){var r=this;S(t,void 0,function(t){return r._settledAt(st,e,t)},function(t){return r._settledAt(at,e,t)})},G.all=N,G.race=k,G.resolve=y,G.reject=R,G._setScheduler=i,G._setAsap=s,G._asap=J,G.prototype={constructor:G,then:p,catch:function(t){return this.then(null,t)}},G.polyfill=W,G.Promise=G,G})}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:9}],8:[function(t,e,r){t("whatwg-fetch"),e.exports=self.fetch.bind(self)},{"whatwg-fetch":10}],9:[function(t,e,r){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(t){if(l===setTimeout)return setTimeout(t,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(t,0);try{return l(t,0)}catch(e){try{return l.call(null,t,0)}catch(e){return l.call(this,t,0)}}}function s(t){if(h===clearTimeout)return clearTimeout(t);if((h===o||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(t);try{return h(t)}catch(e){try{return h.call(null,t)}catch(e){return h.call(this,t)}}}function a(){v&&p&&(v=!1,p.length?y=p.concat(y):m=-1,y.length&&u())}function u(){if(!v){var t=i(a);v=!0;for(var e=y.length;e;){for(p=y,y=[];++m<e;)p&&p[m].run();m=-1,e=y.length}p=null,v=!1,s(t)}}function c(t,e){this.fun=t,this.array=e}function f(){}var l,h,d=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(t){l=n}try{h="function"==typeof clearTimeout?clearTimeout:o}catch(t){h=o}}();var p,y=[],v=!1,m=-1;d.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];y.push(new c(t,e)),1!==y.length||v||i(u)},c.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=f,d.addListener=f,d.once=f,d.off=f,d.removeListener=f,d.removeAllListeners=f,d.emit=f,d.binding=function(t){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(t){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},{}],10:[function(t,e,r){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function r(t){return"string"!=typeof t&&(t=String(t)),t}function n(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return m.iterable&&(e[Symbol.iterator]=function(){return e}),e}function o(t){this.map={},t instanceof o?t.forEach(function(t,e){this.append(e,t)},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function i(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function s(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function a(t){var e=new FileReader,r=s(e);return e.readAsArrayBuffer(t),r}function u(t){var e=new FileReader,r=s(e);return e.readAsText(t),r}function c(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}function f(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function l(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(m.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(m.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(m.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(m.arrayBuffer&&m.blob&&w(t))this._bodyArrayBuffer=f(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!m.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!_(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=f(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):m.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},m.blob&&(this.blob=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?i(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(a)}),this.text=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return u(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(c(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},m.formData&&(this.formData=function(){return this.text().then(p)}),this.json=function(){return this.text().then(JSON.parse)},this}function h(t){var e=t.toUpperCase();return g.indexOf(e)>-1?e:t}function d(t,e){e=e||{};var r=e.body;if("string"==typeof t)this.url=t;else{if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new o(t.headers)),this.method=t.method,this.mode=t.mode,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new o(e.headers)),this.method=h(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function p(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}}),e}function y(t){var e=new o;return t.split("\r\n").forEach(function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}}),e}function v(t,e){e||(e={}),this.type="default",this.status="status"in e?e.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new o(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var m={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(m.arrayBuffer)var b=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],w=function(t){return t&&DataView.prototype.isPrototypeOf(t)},_=ArrayBuffer.isView||function(t){return t&&b.indexOf(Object.prototype.toString.call(t))>-1};o.prototype.append=function(t,n){t=e(t),n=r(n);var o=this.map[t];this.map[t]=o?o+","+n:n},o.prototype.delete=function(t){delete this.map[e(t)]},o.prototype.get=function(t){return t=e(t),this.has(t)?this.map[t]:null},o.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},o.prototype.set=function(t,n){this.map[e(t)]=r(n)},o.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},o.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),n(t)},o.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),n(t)},o.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),n(t)},m.iterable&&(o.prototype[Symbol.iterator]=o.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];d.prototype.clone=function(){return new d(this,{body:this._bodyInit})},l.call(d.prototype),l.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new o(this.headers),url:this.url})},v.error=function(){var t=new v(null,{status:0,statusText:""});return t.type="error",t};var T=[301,302,303,307,308];v.redirect=function(t,e){if(T.indexOf(e)===-1)throw new RangeError("Invalid status code");return new v(null,{status:e,headers:{location:t}})},t.Headers=o,t.Request=d,t.Response=v,t.fetch=function(t,e){return new Promise(function(r,n){var o=new d(t,e),i=new XMLHttpRequest;i.onload=function(){var t={status:i.status,statusText:i.statusText,headers:y(i.getAllResponseHeaders()||"")};t.url="responseURL"in i?i.responseURL:t.headers.get("X-Request-URL");var e="response"in i?i.response:i.responseText;r(new v(e,t))},i.onerror=function(){n(new TypeError("Network request failed"))},i.ontimeout=function(){n(new TypeError("Network request failed"))},i.open(o.method,o.url,!0),"include"===o.credentials&&(i.withCredentials=!0),"responseType"in i&&m.blob&&(i.responseType="blob"),o.headers.forEach(function(t,e){i.setRequestHeader(e,t)}),i.send("undefined"==typeof o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},{}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
