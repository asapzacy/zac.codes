!function t(e,r,n){function o(s,a){if(!r[s]){if(!e[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var f=r[s]={exports:{}};e[s][0].call(f.exports,function(t){var r=e[s][1][t];return o(r||t)},f,f.exports,t,e,r,n)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(t,e,r){"use strict";function n(){document.querySelector(".js-page__arrow--top").addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)},!1)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],2:[function(t,e,r){"use strict";function n(){(0,o.findArea)(),window.addEventListener("resize",o.findArea)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],3:[function(t,e,r){"use strict";var n=t("./spa");t("./utils");!function(){var t=document.querySelector("header"),e=document.querySelector(".js-trigger--menu"),r=document.querySelector(".js-menu"),o=(document.querySelector(".page"),function(){t.classList.contains("menu-open")?t.classList.remove("menu-open"):t.classList.add("menu-open")}),i=function(t){t.target&&"A"===t.target.nodeName&&(t.preventDefault(),o(),t.target.pathname!==window.location.pathname&&(history.pushState(null,null,t.target.pathname),(0,n.updatePage)()))};(0,n.runNewFunctions)(),e.addEventListener("click",o),r.addEventListener("click",i)}()},{"./spa":5,"./utils":6}],4:[function(t,e,r){"use strict";function n(){function t(){var t=this.parentNode,e=t.previousElementSibling;t.style.maxHeight=0,t.classList.toggle("project__details--expanded"),e.classList.toggle("project__expandIcon--expanded")}function e(){this.classList.toggle("project__expandIcon--expanded");var t=this.nextElementSibling,e=t.classList.contains("project__details--expanded");t.classList.toggle("project__details--expanded"),t.style.maxHeight=e?0:t.scrollHeight+"px"}document.querySelector(".js-page__arrow--top").addEventListener("click",function(){(0,o.scrollToTop)(this.parentNode)}),Array.from(document.querySelectorAll(".js-project")).forEach(function(r){r.querySelector(".project__expandIcon").addEventListener("click",e),r.querySelector(".project__closeIcon").addEventListener("click",t)})}Object.defineProperty(r,"__esModule",{value:!0}),r.default=n;var o=t("./utils")},{"./utils":6}],5:[function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function o(t){return l[t]?Promise.resolve(l[t]):fetch(t).then(function(e){if(e.ok)return l[t]=e.text(),l[t];console.log("network response was not ok.")}).catch(function(e){return console.log("there has been an error requesting ("+t+"): "+e.message)})}Object.defineProperty(r,"__esModule",{value:!0}),r.updatePage=r.runNewFunctions=void 0;var i=n(t("./landing")),s=n(t("./about")),a=n(t("./projects")),u=t("./utils");t("es6-promise").polyfill(),t("isomorphic-fetch");var c=r.runNewFunctions=function(){var t=window.location.pathname;window.removeEventListener("resize",u.findArea),"/"===t||"/index.html"===t?(0,i.default)():t.startsWith("/about")?(0,s.default)():t.startsWith("/projects")&&(0,a.default)()},f=r.updatePage=function(){o(window.location.href).then(function(t){var e=document.createElement("html");e.innerHTML=t;var r=document.querySelector(".page"),n=e.querySelector(".page"),o=e.getElementsByTagName("title")[0].textContent,i=e.getElementsByTagName("meta").description.content;console.log(r),r.parentNode.replaceChild(n,r),document.title=o,document.getElementsByTagName("meta").description.content=i,(0,u.fadeIn)(n),c()})},l={};window.addEventListener("popstate",f)},{"./about":1,"./landing":2,"./projects":4,"./utils":6,"es6-promise":7,"isomorphic-fetch":8}],6:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(t){return t*t*t*t},o=function(t){return 1- --t*t*t*t};r.scrollToTop=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200,r=t.scrollHeight,n=Date.now();!function i(){var s=Date.now(),a=o((s-n)/e);t.scrollTop=a*(0-r)+r,0!==t.scrollTop&&requestAnimationFrame(i)}()},r.fadeIn=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200;t.style.opacity=0;var r=Date.now();!function o(){var i=Date.now(),s=n((i-r)/e);t.style.opacity=s,t.style.opacity>.995?t.style.opacity=1:requestAnimationFrame(o)}()},r.fadeOut=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1200;t.style.opacity=1;var r=Date.now();!function n(){var i=Date.now(),s=o(1-(i-r)/e);t.style.opacity=s,t.style.opacity<.005?t.style.opacity=0:requestAnimationFrame(n)}()},r.findArea=function(){var t=document.querySelector(".js-pixels"),e=function(){if(t&&null!==t.textContent){var e=window.innerWidth*window.innerHeight;t.textContent=e.toLocaleString()}};requestAnimationFrame(e)}},{}],7:[function(t,e,r){(function(n,o){!function(t,n){"object"==typeof r&&void 0!==e?e.exports=n():"function"==typeof define&&define.amd?define(n):t.ES6Promise=n()}(this,function(){"use strict";function e(t){return"function"==typeof t||"object"==typeof t&&null!==t}function r(t){return"function"==typeof t}function i(t){z=t}function s(t){Y=t}function a(){return void 0!==W?function(){W(c)}:u()}function u(){var t=setTimeout;return function(){return t(c,1)}}function c(){for(var t=0;t<G;t+=2)(0,Q[t])(Q[t+1]),Q[t]=void 0,Q[t+1]=void 0;G=0}function f(t,e){var r=arguments,n=this,o=new this.constructor(h);void 0===o[tt]&&O(o);var i=n._state;return i?function(){var t=r[i-1];Y(function(){return P(i,o,t,n._result)})}():E(n,o,t,e),o}function l(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var r=new e(h);return _(r,t),r}function h(){}function d(){return new TypeError("You cannot resolve a promise with itself")}function p(){return new TypeError("A promises callback cannot return that same promise.")}function y(t){try{return t.then}catch(t){return ot.error=t,ot}}function m(t,e,r,n){try{t.call(e,r,n)}catch(t){return t}}function v(t,e,r){Y(function(t){var n=!1,o=m(r,e,function(r){n||(n=!0,e!==r?_(t,r):T(t,r))},function(e){n||(n=!0,A(t,e))},"Settle: "+(t._label||" unknown promise"));!n&&o&&(n=!0,A(t,o))},t)}function b(t,e){e._state===rt?T(t,e._result):e._state===nt?A(t,e._result):E(e,void 0,function(e){return _(t,e)},function(e){return A(t,e)})}function w(t,e,n){e.constructor===t.constructor&&n===f&&e.constructor.resolve===l?b(t,e):n===ot?(A(t,ot.error),ot.error=null):void 0===n?T(t,e):r(n)?v(t,e,n):T(t,e)}function _(t,r){t===r?A(t,d()):e(r)?w(t,r,y(r)):T(t,r)}function g(t){t._onerror&&t._onerror(t._result),x(t)}function T(t,e){t._state===et&&(t._result=e,t._state=rt,0!==t._subscribers.length&&Y(x,t))}function A(t,e){t._state===et&&(t._state=nt,t._result=e,Y(g,t))}function E(t,e,r,n){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+rt]=r,o[i+nt]=n,0===i&&t._state&&Y(x,t)}function x(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var n=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)n=e[s],o=e[s+r],n?P(r,n,o,i):o(i);t._subscribers.length=0}}function j(){this.error=null}function S(t,e){try{return t(e)}catch(t){return it.error=t,it}}function P(t,e,n,o){var i=r(n),s=void 0,a=void 0,u=void 0,c=void 0;if(i){if(s=S(n,o),s===it?(c=!0,a=s.error,s.error=null):u=!0,e===s)return void A(e,p())}else s=o,u=!0;e._state!==et||(i&&u?_(e,s):c?A(e,a):t===rt?T(e,s):t===nt&&A(e,s))}function B(t,e){try{e(function(e){_(t,e)},function(e){A(t,e)})}catch(e){A(t,e)}}function L(){return st++}function O(t){t[tt]=st++,t._state=void 0,t._result=void 0,t._subscribers=[]}function q(t,e){this._instanceConstructor=t,this.promise=new t(h),this.promise[tt]||O(this.promise),H(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?T(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&T(this.promise,this._result))):A(this.promise,D())}function D(){return new Error("Array Methods must be provided an Array")}function U(t){return new q(this,t).promise}function F(t){var e=this;return new e(H(t)?function(r,n){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(r,n)}:function(t,e){return e(new TypeError("You must pass an array to race."))})}function I(t){var e=new this(h);return A(e,t),e}function C(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function N(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function k(t){this[tt]=L(),this._result=this._state=void 0,this._subscribers=[],h!==t&&("function"!=typeof t&&C(),this instanceof k?B(this,t):N())}function R(){var t=void 0;if(void 0!==o)t=o;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===r&&!e.cast)return}t.Promise=k}var M=void 0,H=M=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},G=0,W=void 0,z=void 0,Y=function(t,e){Q[G]=t,Q[G+1]=e,2===(G+=2)&&(z?z(c):Z())},K="undefined"!=typeof window?window:void 0,V=K||{},X=V.MutationObserver||V.WebKitMutationObserver,J="undefined"==typeof self&&void 0!==n&&"[object process]"==={}.toString.call(n),$="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,Q=new Array(1e3),Z=void 0;Z=J?function(){return function(){return n.nextTick(c)}}():X?function(){var t=0,e=new X(c),r=document.createTextNode("");return e.observe(r,{characterData:!0}),function(){r.data=t=++t%2}}():$?function(){var t=new MessageChannel;return t.port1.onmessage=c,function(){return t.port2.postMessage(0)}}():void 0===K&&"function"==typeof t?function(){try{var e=t("vertx");return W=e.runOnLoop||e.runOnContext,a()}catch(t){return u()}}():u();var tt=Math.random().toString(36).substring(16),et=void 0,rt=1,nt=2,ot=new j,it=new j,st=0;return q.prototype._enumerate=function(){for(var t=this.length,e=this._input,r=0;this._state===et&&r<t;r++)this._eachEntry(e[r],r)},q.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===l){var o=y(t);if(o===f&&t._state!==et)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(r===k){var i=new r(h);w(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new r(function(e){return e(t)}),e)}else this._willSettleAt(n(t),e)},q.prototype._settledAt=function(t,e,r){var n=this.promise;n._state===et&&(this._remaining--,t===nt?A(n,r):this._result[e]=r),0===this._remaining&&T(n,this._result)},q.prototype._willSettleAt=function(t,e){var r=this;E(t,void 0,function(t){return r._settledAt(rt,e,t)},function(t){return r._settledAt(nt,e,t)})},k.all=U,k.race=F,k.resolve=l,k.reject=I,k._setScheduler=i,k._setAsap=s,k._asap=Y,k.prototype={constructor:k,then:f,catch:function(t){return this.then(null,t)}},k.polyfill=R,k.Promise=k,k})}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:9}],8:[function(t,e,r){t("whatwg-fetch"),e.exports=self.fetch.bind(self)},{"whatwg-fetch":10}],9:[function(t,e,r){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(t){if(l===setTimeout)return setTimeout(t,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(t,0);try{return l(t,0)}catch(e){try{return l.call(null,t,0)}catch(e){return l.call(this,t,0)}}}function s(t){if(h===clearTimeout)return clearTimeout(t);if((h===o||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(t);try{return h(t)}catch(e){try{return h.call(null,t)}catch(e){return h.call(this,t)}}}function a(){m&&p&&(m=!1,p.length?y=p.concat(y):v=-1,y.length&&u())}function u(){if(!m){var t=i(a);m=!0;for(var e=y.length;e;){for(p=y,y=[];++v<e;)p&&p[v].run();v=-1,e=y.length}p=null,m=!1,s(t)}}function c(t,e){this.fun=t,this.array=e}function f(){}var l,h,d=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(t){l=n}try{h="function"==typeof clearTimeout?clearTimeout:o}catch(t){h=o}}();var p,y=[],m=!1,v=-1;d.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];y.push(new c(t,e)),1!==y.length||m||i(u)},c.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=f,d.addListener=f,d.once=f,d.off=f,d.removeListener=f,d.removeAllListeners=f,d.emit=f,d.prependListener=f,d.prependOnceListener=f,d.listeners=function(t){return[]},d.binding=function(t){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(t){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},{}],10:[function(t,e,r){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function r(t){return"string"!=typeof t&&(t=String(t)),t}function n(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return v.iterable&&(e[Symbol.iterator]=function(){return e}),e}function o(t){this.map={},t instanceof o?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function i(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function s(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function a(t){var e=new FileReader,r=s(e);return e.readAsArrayBuffer(t),r}function u(t){var e=new FileReader,r=s(e);return e.readAsText(t),r}function c(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}function f(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function l(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(v.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(v.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(v.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(v.arrayBuffer&&v.blob&&w(t))this._bodyArrayBuffer=f(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!v.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!_(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=f(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):v.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},v.blob&&(this.blob=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?i(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(a)}),this.text=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return u(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(c(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},v.formData&&(this.formData=function(){return this.text().then(p)}),this.json=function(){return this.text().then(JSON.parse)},this}function h(t){var e=t.toUpperCase();return g.indexOf(e)>-1?e:t}function d(t,e){var r=(e=e||{}).body;if(t instanceof d){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new o(t.headers)),this.method=t.method,this.mode=t.mode,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new o(e.headers)),this.method=h(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function p(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}}),e}function y(t){var e=new o;return t.split(/\r?\n/).forEach(function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}}),e}function m(t,e){e||(e={}),this.type="default",this.status="status"in e?e.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new o(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var v={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(v.arrayBuffer)var b=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],w=function(t){return t&&DataView.prototype.isPrototypeOf(t)},_=ArrayBuffer.isView||function(t){return t&&b.indexOf(Object.prototype.toString.call(t))>-1};o.prototype.append=function(t,n){t=e(t),n=r(n);var o=this.map[t];this.map[t]=o?o+","+n:n},o.prototype.delete=function(t){delete this.map[e(t)]},o.prototype.get=function(t){return t=e(t),this.has(t)?this.map[t]:null},o.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},o.prototype.set=function(t,n){this.map[e(t)]=r(n)},o.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},o.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),n(t)},o.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),n(t)},o.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),n(t)},v.iterable&&(o.prototype[Symbol.iterator]=o.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];d.prototype.clone=function(){return new d(this,{body:this._bodyInit})},l.call(d.prototype),l.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new o(this.headers),url:this.url})},m.error=function(){var t=new m(null,{status:0,statusText:""});return t.type="error",t};var T=[301,302,303,307,308];m.redirect=function(t,e){if(-1===T.indexOf(e))throw new RangeError("Invalid status code");return new m(null,{status:e,headers:{location:t}})},t.Headers=o,t.Request=d,t.Response=m,t.fetch=function(t,e){return new Promise(function(r,n){var o=new d(t,e),i=new XMLHttpRequest;i.onload=function(){var t={status:i.status,statusText:i.statusText,headers:y(i.getAllResponseHeaders()||"")};t.url="responseURL"in i?i.responseURL:t.headers.get("X-Request-URL");var e="response"in i?i.response:i.responseText;r(new m(e,t))},i.onerror=function(){n(new TypeError("Network request failed"))},i.ontimeout=function(){n(new TypeError("Network request failed"))},i.open(o.method,o.url,!0),"include"===o.credentials&&(i.withCredentials=!0),"responseType"in i&&v.blob&&(i.responseType="blob"),o.headers.forEach(function(t,e){i.setRequestHeader(e,t)}),i.send(void 0===o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},{}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwicnVuQWJvdXRQYWdlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl91dGlscyIsInNjcm9sbFRvVG9wIiwidGhpcyIsInBhcmVudE5vZGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZGVmYXVsdCIsIi4vdXRpbHMiLCIyIiwicnVuTGFuZGluZ1BhZ2UiLCJmaW5kQXJlYSIsIndpbmRvdyIsIjMiLCJfc3BhIiwiaGVhZGVyIiwidHJpZ2dlck1lbnUiLCJtZW51IiwidG9nZ2xlTWVudSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicmVtb3ZlIiwiYWRkIiwiY2hhbmdlUGFnZSIsInRhcmdldCIsIm5vZGVOYW1lIiwicHJldmVudERlZmF1bHQiLCJwYXRobmFtZSIsImxvY2F0aW9uIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInVwZGF0ZVBhZ2UiLCJydW5OZXdGdW5jdGlvbnMiLCIuL3NwYSIsIjQiLCJydW5Qcm9qZWN0c1BhZ2UiLCJjbG9zZURldGFpbHMiLCJkZXRhaWxzIiwiaWNvbiIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJzdHlsZSIsIm1heEhlaWdodCIsInRvZ2dsZSIsImV4cGFuZERldGFpbHMiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJpc0V4cGFuZGVkIiwic2Nyb2xsSGVpZ2h0IiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJwcm9qZWN0IiwiNSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwibG9hZFBhZ2UiLCJ1cmwiLCJjYWNoZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsInRleHQiLCJjb25zb2xlIiwibG9nIiwiY2F0Y2giLCJlcnIiLCJtZXNzYWdlIiwidW5kZWZpbmVkIiwiX2xhbmRpbmcyIiwiX2Fib3V0MiIsIl9wcm9qZWN0czIiLCJwb2x5ZmlsbCIsInBhdGgiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3RhcnRzV2l0aCIsImhyZWYiLCJyZXNwb25zZVRleHQiLCJjb250YWluZXIiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwib2xkUGFnZSIsIm5ld1BhZ2UiLCJuZXdUaXRsZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGV4dENvbnRlbnQiLCJuZXdEZXNjIiwiY29udGVudCIsInJlcGxhY2VDaGlsZCIsInRpdGxlIiwiZmFkZUluIiwiLi9hYm91dCIsIi4vbGFuZGluZyIsIi4vcHJvamVjdHMiLCJlczYtcHJvbWlzZSIsImlzb21vcnBoaWMtZmV0Y2giLCI2IiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlbCIsImR1cmF0aW9uIiwiYXJndW1lbnRzIiwiYm90dG9tIiwic3RhcnQiLCJEYXRlIiwibm93Iiwic2Nyb2xsIiwiZWFzaW5nIiwic2Nyb2xsVG9wIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib3BhY2l0eSIsImZhZGUiLCJmYWRlT3V0IiwicGl4ZWxzIiwiYXJlYSIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInRvTG9jYWxlU3RyaW5nIiwiNyIsInByb2Nlc3MiLCJnbG9iYWwiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwiRVM2UHJvbWlzZSIsIm9iamVjdE9yRnVuY3Rpb24iLCJ4IiwiaXNGdW5jdGlvbiIsInNldFNjaGVkdWxlciIsInNjaGVkdWxlRm4iLCJjdXN0b21TY2hlZHVsZXJGbiIsInNldEFzYXAiLCJhc2FwRm4iLCJhc2FwIiwidXNlVmVydHhUaW1lciIsInZlcnR4TmV4dCIsImZsdXNoIiwidXNlU2V0VGltZW91dCIsImdsb2JhbFNldFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibGVuIiwiY2FsbGJhY2siLCJxdWV1ZSIsIm9uRnVsZmlsbG1lbnQiLCJvblJlamVjdGlvbiIsIl9hcmd1bWVudHMiLCJwYXJlbnQiLCJjaGlsZCIsImNvbnN0cnVjdG9yIiwibm9vcCIsIlBST01JU0VfSUQiLCJtYWtlUHJvbWlzZSIsIl9zdGF0ZSIsImludm9rZUNhbGxiYWNrIiwiX3Jlc3VsdCIsInN1YnNjcmliZSIsIm9iamVjdCIsIkNvbnN0cnVjdG9yIiwicHJvbWlzZSIsIl9yZXNvbHZlIiwic2VsZkZ1bGZpbGxtZW50IiwiVHlwZUVycm9yIiwiY2Fubm90UmV0dXJuT3duIiwiZ2V0VGhlbiIsImVycm9yIiwiR0VUX1RIRU5fRVJST1IiLCJ0cnlUaGVuIiwiZnVsZmlsbG1lbnRIYW5kbGVyIiwicmVqZWN0aW9uSGFuZGxlciIsImhhbmRsZUZvcmVpZ25UaGVuYWJsZSIsInRoZW5hYmxlIiwic2VhbGVkIiwiZnVsZmlsbCIsInJlYXNvbiIsIl9yZWplY3QiLCJfbGFiZWwiLCJoYW5kbGVPd25UaGVuYWJsZSIsIkZVTEZJTExFRCIsIlJFSkVDVEVEIiwiaGFuZGxlTWF5YmVUaGVuYWJsZSIsIm1heWJlVGhlbmFibGUiLCJ0aGVuJCQiLCJwdWJsaXNoUmVqZWN0aW9uIiwiX29uZXJyb3IiLCJwdWJsaXNoIiwiUEVORElORyIsIl9zdWJzY3JpYmVycyIsInN1YnNjcmliZXJzIiwic2V0dGxlZCIsImRldGFpbCIsIkVycm9yT2JqZWN0IiwidHJ5Q2F0Y2giLCJUUllfQ0FUQ0hfRVJST1IiLCJoYXNDYWxsYmFjayIsInN1Y2NlZWRlZCIsImZhaWxlZCIsImluaXRpYWxpemVQcm9taXNlIiwicmVzb2x2ZXIiLCJuZXh0SWQiLCJpZCIsIkVudW1lcmF0b3IiLCJpbnB1dCIsIl9pbnN0YW5jZUNvbnN0cnVjdG9yIiwiaXNBcnJheSIsIl9pbnB1dCIsIl9yZW1haW5pbmciLCJfZW51bWVyYXRlIiwidmFsaWRhdGlvbkVycm9yIiwiYWxsIiwiZW50cmllcyIsInJhY2UiLCJyZWplY3QiLCJfIiwibmVlZHNSZXNvbHZlciIsIm5lZWRzTmV3IiwibG9jYWwiLCJzZWxmIiwiRnVuY3Rpb24iLCJQIiwicHJvbWlzZVRvU3RyaW5nIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYXN0IiwiX2lzQXJyYXkiLCJhcmciLCJzY2hlZHVsZUZsdXNoIiwiYnJvd3NlcldpbmRvdyIsImJyb3dzZXJHbG9iYWwiLCJCcm93c2VyTXV0YXRpb25PYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiaXNOb2RlIiwiaXNXb3JrZXIiLCJVaW50OENsYW1wZWRBcnJheSIsImltcG9ydFNjcmlwdHMiLCJNZXNzYWdlQ2hhbm5lbCIsIm5leHRUaWNrIiwiaXRlcmF0aW9ucyIsIm9ic2VydmVyIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJkYXRhIiwiY2hhbm5lbCIsInBvcnQxIiwib25tZXNzYWdlIiwicG9ydDIiLCJwb3N0TWVzc2FnZSIsInZlcnR4IiwicnVuT25Mb29wIiwicnVuT25Db250ZXh0IiwiTWF0aCIsInJhbmRvbSIsInN1YnN0cmluZyIsIl9lYWNoRW50cnkiLCJlbnRyeSIsImMiLCJyZXNvbHZlJCQiLCJfdGhlbiIsIl9zZXR0bGVkQXQiLCJfd2lsbFNldHRsZUF0Iiwic3RhdGUiLCJlbnVtZXJhdG9yIiwiX3NldFNjaGVkdWxlciIsIl9zZXRBc2FwIiwiX2FzYXAiLCJfcHJvY2VzcyIsIjgiLCJiaW5kIiwid2hhdHdnLWZldGNoIiwiOSIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNhY2hlZFNldFRpbWVvdXQiLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsImNvbmNhdCIsInF1ZXVlSW5kZXgiLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIkl0ZW0iLCJhcnJheSIsImFyZ3MiLCJwdXNoIiwiYXBwbHkiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsIm5hbWUiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIjEwIiwibm9ybWFsaXplTmFtZSIsIlN0cmluZyIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZVZhbHVlIiwiaXRlcmF0b3JGb3IiLCJpdGVtcyIsIml0ZXJhdG9yIiwibmV4dCIsInNoaWZ0IiwiZG9uZSIsInN1cHBvcnQiLCJpdGVyYWJsZSIsIlN5bWJvbCIsIkhlYWRlcnMiLCJoZWFkZXJzIiwibWFwIiwiYXBwZW5kIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImNvbnN1bWVkIiwiYm9keSIsImJvZHlVc2VkIiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwib25sb2FkIiwicmVzdWx0Iiwib25lcnJvciIsInJlYWRCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJGaWxlUmVhZGVyIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJyZWFkQmxvYkFzVGV4dCIsInJlYWRBc1RleHQiLCJyZWFkQXJyYXlCdWZmZXJBc1RleHQiLCJidWYiLCJ2aWV3IiwiVWludDhBcnJheSIsImNoYXJzIiwiZnJvbUNoYXJDb2RlIiwiam9pbiIsImJ1ZmZlckNsb25lIiwic2xpY2UiLCJieXRlTGVuZ3RoIiwic2V0IiwiYnVmZmVyIiwiQm9keSIsIl9pbml0Qm9keSIsIl9ib2R5SW5pdCIsIl9ib2R5VGV4dCIsIkJsb2IiLCJpc1Byb3RvdHlwZU9mIiwiX2JvZHlCbG9iIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsIl9ib2R5Rm9ybURhdGEiLCJzZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJhcnJheUJ1ZmZlciIsImlzRGF0YVZpZXciLCJfYm9keUFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyVmlldyIsImdldCIsInR5cGUiLCJyZWplY3RlZCIsImRlY29kZSIsImpzb24iLCJKU09OIiwicGFyc2UiLCJub3JtYWxpemVNZXRob2QiLCJtZXRob2QiLCJ1cGNhc2VkIiwidG9VcHBlckNhc2UiLCJtZXRob2RzIiwiaW5kZXhPZiIsIlJlcXVlc3QiLCJvcHRpb25zIiwiY3JlZGVudGlhbHMiLCJtb2RlIiwicmVmZXJyZXIiLCJmb3JtIiwidHJpbSIsInNwbGl0IiwiYnl0ZXMiLCJyZXBsYWNlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VIZWFkZXJzIiwicmF3SGVhZGVycyIsImxpbmUiLCJwYXJ0cyIsImtleSIsIlJlc3BvbnNlIiwiYm9keUluaXQiLCJzdGF0dXMiLCJzdGF0dXNUZXh0Iiwidmlld0NsYXNzZXMiLCJEYXRhVmlldyIsImlzVmlldyIsIm9sZFZhbHVlIiwiaGFzIiwiaGFzT3duUHJvcGVydHkiLCJ0aGlzQXJnIiwia2V5cyIsInZhbHVlcyIsImNsb25lIiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiUmFuZ2VFcnJvciIsImluaXQiLCJyZXF1ZXN0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVVSTCIsIm9udGltZW91dCIsIm9wZW4iLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXNwb25zZVR5cGUiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBVUEsRUFBRUMsRUFBRUMsRUFBRUMsR0FBRyxTQUFTQyxFQUFFQyxFQUFFQyxHQUFHLElBQUlKLEVBQUVHLEdBQUcsQ0FBQyxJQUFJSixFQUFFSSxHQUFHLENBQUMsSUFBSUUsRUFBa0IsbUJBQVRD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SytLLFFBQVVBLEVBQ2YvSyxFQUFLK0wsU0FBV0EsRUFFaEIvTCxFQUFLOUosTUFBUSxTQUFTK0ksRUFBTytOLEdBQzNCLE9BQU8sSUFBSWhYLFFBQVEsU0FBU0MsRUFBUzBKLEdBQ25DLElBQUlzTixFQUFVLElBQUlsQyxFQUFROUwsRUFBTytOLEdBQzdCRSxFQUFNLElBQUlDLGVBRWRELEVBQUl0RixPQUFTLFdBQ1gsSUFBSW9ELEdBQ0ZpQixPQUFRaUIsRUFBSWpCLE9BQ1pDLFdBQVlnQixFQUFJaEIsV0FDaEIvRSxRQUFTdUUsRUFBYXdCLEVBQUlFLHlCQUEyQixLQUV2RHBDLEVBQVFsVixJQUFNLGdCQUFpQm9YLEVBQU1BLEVBQUlHLFlBQWNyQyxFQUFRN0QsUUFBUStDLElBQUksaUJBQzNFLElBQUkxQyxFQUFPLGFBQWMwRixFQUFNQSxFQUFJOVcsU0FBVzhXLEVBQUk3VixhQUNsRHBCLEVBQVEsSUFBSThWLEVBQVN2RSxFQUFNd0QsS0FHN0JrQyxFQUFJcEYsUUFBVSxXQUNabkksRUFBTyxJQUFJbEQsVUFBVSw0QkFHdkJ5USxFQUFJSSxVQUFZLFdBQ2QzTixFQUFPLElBQUlsRCxVQUFVLDRCQUd2QnlRLEVBQUlLLEtBQUtOLEVBQVF2QyxPQUFRdUMsRUFBUW5YLEtBQUssR0FFVixZQUF4Qm1YLEVBQVFoQyxjQUNWaUMsRUFBSU0saUJBQWtCLEdBR3BCLGlCQUFrQk4sR0FBT25HLEVBQVFpQixPQUNuQ2tGLEVBQUlPLGFBQWUsUUFHckJSLEVBQVE5RixRQUFRNVIsUUFBUSxTQUFTNUMsRUFBT2tULEdBQ3RDcUgsRUFBSVEsaUJBQWlCN0gsRUFBTWxULEtBRzdCdWEsRUFBSVMsVUFBa0MsSUFBdEJWLEVBQVE5RCxVQUE0QixLQUFPOEQsRUFBUTlELGNBR3ZFbkosRUFBSzlKLE1BQU1jLFVBQVcsSUFDTCxvQkFBVGdKLEtBQXVCQSxLQUFPek4sZ0JBRTdCIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBydW5BYm91dFBhZ2U7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIHJ1bkFib3V0UGFnZSgpIHtcblxuICAvLyBzZXQgdXAgYXJyb3cgKyBzY3JvbGwgdG8gdG9wIGZ1bmN0aW9uXG4gIC8vIFRPRE86IG9ubHkgc2hvdyBhcnJvdyBpZiBuZWVkZWQgW2hlaWdodCA+IDEwMCUgdmlld3BvcnRdXG4gIHZhciB0b3BBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1wYWdlX19hcnJvdy0tdG9wJyk7XG4gIHRvcEFycm93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICgwLCBfdXRpbHMuc2Nyb2xsVG9Ub3ApKHRoaXMucGFyZW50Tm9kZSk7XG4gIH0sIGZhbHNlKTtcbn1cblxufSx7XCIuL3V0aWxzXCI6Nn1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcnVuTGFuZGluZ1BhZ2U7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIHJ1bkxhbmRpbmdQYWdlKCkge1xuXG4gICgwLCBfdXRpbHMuZmluZEFyZWEpKCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBfdXRpbHMuZmluZEFyZWEpO1xufVxuXG59LHtcIi4vdXRpbHNcIjo2fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfc3BhID0gcmVxdWlyZSgnLi9zcGEnKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuKGZ1bmN0aW9uICgpIHtcblxuICAvLyAgRE9NIGVsZW1lbnRzXG4gIHZhciBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkZXInKTtcbiAgdmFyIHRyaWdnZXJNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRyaWdnZXItLW1lbnUnKTtcbiAgdmFyIG1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbWVudScpO1xuICB2YXIgcGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdlJ1xuXG4gIC8vICBmdW5jdGlvbnNcbiAgKTt2YXIgdG9nZ2xlTWVudSA9IGZ1bmN0aW9uIHRvZ2dsZU1lbnUoKSB7XG4gICAgaWYgKGhlYWRlci5jbGFzc0xpc3QuY29udGFpbnMoJ21lbnUtb3BlbicpKSB7XG4gICAgICBoZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnbWVudS1vcGVuJ1xuICAgICAgLy8gZmFkZUluKHBhZ2UpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZCgnbWVudS1vcGVuJ1xuICAgICAgLy8gZmFkZU91dChwYWdlLDEwKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNoYW5nZVBhZ2UgPSBmdW5jdGlvbiBjaGFuZ2VQYWdlKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgJiYgZS50YXJnZXQubm9kZU5hbWUgPT09ICdBJykge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdG9nZ2xlTWVudSgpO1xuICAgICAgaWYgKGUudGFyZ2V0LnBhdGhuYW1lICE9PSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgZS50YXJnZXQucGF0aG5hbWUpO1xuICAgICAgICAoMCwgX3NwYS51cGRhdGVQYWdlKSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAoMCwgX3NwYS5ydW5OZXdGdW5jdGlvbnMpKCk7XG4gIHRyaWdnZXJNZW51LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlTWVudSk7XG4gIG1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjaGFuZ2VQYWdlKTtcbn0pKCk7XG5cbn0se1wiLi9zcGFcIjo1LFwiLi91dGlsc1wiOjZ9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJ1blByb2plY3RzUGFnZTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuLy8gcHJvamVjdHMgcGFnZSAtIHNwZWNpZmljIGZ1bmN0aW9uc1xuZnVuY3Rpb24gcnVuUHJvamVjdHNQYWdlKCkge1xuXG4gIC8vIHNldCB1cCBhcnJvdyArIHNjcm9sbCB0byB0b3AgZnVuY3Rpb25cbiAgLy8gVE9ETzogb25seSBzaG93IGFycm93IGlmIG5lZWRlZCBbaGVpZ2h0ID4gMTAwJSB2aWV3cG9ydF1cbiAgdmFyIHRvcEFycm93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXBhZ2VfX2Fycm93LS10b3AnKTtcbiAgdG9wQXJyb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgKDAsIF91dGlscy5zY3JvbGxUb1RvcCkodGhpcy5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIC8vICBsb29wIG92ZXIgZXZlcnkgcHJvamVjdCwgYWRkIGV2ZW50IGxpc3RlbmVyIHRvIGV4cGFuZCBpY29uIGJ1dHRvblxuICApO3ZhciBwcm9qZWN0cyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXByb2plY3QnKSk7XG4gIHByb2plY3RzLmZvckVhY2goZnVuY3Rpb24gKHByb2plY3QpIHtcbiAgICB2YXIgZXhwYW5kSWNvbiA9IHByb2plY3QucXVlcnlTZWxlY3RvcignLnByb2plY3RfX2V4cGFuZEljb24nKTtcbiAgICBleHBhbmRJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXhwYW5kRGV0YWlscyk7XG5cbiAgICB2YXIgY2xvc2VJY29uID0gcHJvamVjdC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdF9fY2xvc2VJY29uJyk7XG4gICAgY2xvc2VJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xvc2VEZXRhaWxzKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gY2xvc2VEZXRhaWxzKCkge1xuICAgIHZhciBkZXRhaWxzID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIHZhciBpY29uID0gZGV0YWlscy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgIGRldGFpbHMuc3R5bGUubWF4SGVpZ2h0ID0gMDtcbiAgICBkZXRhaWxzLmNsYXNzTGlzdC50b2dnbGUoJ3Byb2plY3RfX2RldGFpbHMtLWV4cGFuZGVkJyk7XG4gICAgaWNvbi5jbGFzc0xpc3QudG9nZ2xlKCdwcm9qZWN0X19leHBhbmRJY29uLS1leHBhbmRlZCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwYW5kRGV0YWlscygpIHtcbiAgICB0aGlzLmNsYXNzTGlzdC50b2dnbGUoJ3Byb2plY3RfX2V4cGFuZEljb24tLWV4cGFuZGVkJyk7XG4gICAgdmFyIGRldGFpbHMgPSB0aGlzLm5leHRFbGVtZW50U2libGluZztcbiAgICB2YXIgaXNFeHBhbmRlZCA9IGRldGFpbHMuY2xhc3NMaXN0LmNvbnRhaW5zKCdwcm9qZWN0X19kZXRhaWxzLS1leHBhbmRlZCcpO1xuICAgIGRldGFpbHMuY2xhc3NMaXN0LnRvZ2dsZSgncHJvamVjdF9fZGV0YWlscy0tZXhwYW5kZWQnKTtcbiAgICBkZXRhaWxzLnN0eWxlLm1heEhlaWdodCA9IGlzRXhwYW5kZWQgPyAwIDogZGV0YWlscy5zY3JvbGxIZWlnaHQgKyAncHgnO1xuICB9XG59XG5cbn0se1wiLi91dGlsc1wiOjZ9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudXBkYXRlUGFnZSA9IGV4cG9ydHMucnVuTmV3RnVuY3Rpb25zID0gdW5kZWZpbmVkO1xuXG52YXIgX2xhbmRpbmcgPSByZXF1aXJlKCcuL2xhbmRpbmcnKTtcblxudmFyIF9sYW5kaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xhbmRpbmcpO1xuXG52YXIgX2Fib3V0ID0gcmVxdWlyZSgnLi9hYm91dCcpO1xuXG52YXIgX2Fib3V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fib3V0KTtcblxudmFyIF9wcm9qZWN0cyA9IHJlcXVpcmUoJy4vcHJvamVjdHMnKTtcblxudmFyIF9wcm9qZWN0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9qZWN0cyk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGZldGNoIHBvbHlmaWxsIGZvciBtb2JpbGUgZGV2aWNlc1xucmVxdWlyZSgnZXM2LXByb21pc2UnKS5wb2x5ZmlsbCgpO1xucmVxdWlyZSgnaXNvbW9ycGhpYy1mZXRjaCdcblxuLy8gcnVuIGZ1bmN0aW9ucyBzcGVjaWZpYyB0byBwYWdlXG4pO3ZhciBydW5OZXdGdW5jdGlvbnMgPSBleHBvcnRzLnJ1bk5ld0Z1bmN0aW9ucyA9IGZ1bmN0aW9uIHJ1bk5ld0Z1bmN0aW9ucygpIHtcbiAgdmFyIHBhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBfdXRpbHMuZmluZEFyZWEpO1xuICBpZiAocGF0aCA9PT0gJy8nIHx8IHBhdGggPT09ICcvaW5kZXguaHRtbCcpIHtcbiAgICAoMCwgX2xhbmRpbmcyLmRlZmF1bHQpKCk7XG4gIH0gZWxzZSBpZiAocGF0aC5zdGFydHNXaXRoKCcvYWJvdXQnKSkge1xuICAgICgwLCBfYWJvdXQyLmRlZmF1bHQpKCk7XG4gIH0gZWxzZSBpZiAocGF0aC5zdGFydHNXaXRoKCcvcHJvamVjdHMnKSkge1xuICAgICgwLCBfcHJvamVjdHMyLmRlZmF1bHQpKCk7XG4gIH1cbn07XG5cbi8vIHVwZGF0ZSArIGZhZGUgaW4gbmV3IHBhZ2Ugb24gdXJsIGNoYW5nZVxudmFyIHVwZGF0ZVBhZ2UgPSBleHBvcnRzLnVwZGF0ZVBhZ2UgPSBmdW5jdGlvbiB1cGRhdGVQYWdlKCkge1xuICB2YXIgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIGxvYWRQYWdlKHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2VUZXh0KSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2h0bWwnKTtcbiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gcmVzcG9uc2VUZXh0O1xuICAgIHZhciBvbGRQYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2UnKTtcbiAgICB2YXIgbmV3UGFnZSA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcucGFnZScpO1xuICAgIHZhciBuZXdUaXRsZSA9IGNvbnRhaW5lci5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGl0bGUnKVswXS50ZXh0Q29udGVudDtcbiAgICB2YXIgbmV3RGVzYyA9IGNvbnRhaW5lci5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWV0YScpWydkZXNjcmlwdGlvbiddLmNvbnRlbnQ7XG4gICAgY29uc29sZS5sb2cob2xkUGFnZSk7XG4gICAgb2xkUGFnZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdQYWdlLCBvbGRQYWdlKTtcbiAgICBkb2N1bWVudC50aXRsZSA9IG5ld1RpdGxlO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdtZXRhJylbJ2Rlc2NyaXB0aW9uJ10uY29udGVudCA9IG5ld0Rlc2M7XG4gICAgKDAsIF91dGlscy5mYWRlSW4pKG5ld1BhZ2UpO1xuICAgIHJ1bk5ld0Z1bmN0aW9ucygpO1xuICB9KTtcbn07XG5cbi8vIGZldGNoICsgbG9hZCBuZXcgdXJsICsgY2FjaGUgbmV3IGNvbnRlbnRcbnZhciBjYWNoZSA9IHt9O1xuZnVuY3Rpb24gbG9hZFBhZ2UodXJsKSB7XG4gIGlmIChjYWNoZVt1cmxdKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjYWNoZVt1cmxdKTtcbiAgfVxuICByZXR1cm4gZmV0Y2godXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgY2FjaGVbdXJsXSA9IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIHJldHVybiBjYWNoZVt1cmxdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnbmV0d29yayByZXNwb25zZSB3YXMgbm90IG9rLicpO1xuICAgIH1cbiAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgIHJldHVybiBjb25zb2xlLmxvZygndGhlcmUgaGFzIGJlZW4gYW4gZXJyb3IgcmVxdWVzdGluZyAoJyArIHVybCArICcpOiAnICsgZXJyLm1lc3NhZ2UpO1xuICB9KTtcbn1cblxuLy8gdXBkYXRlIHBhZ2UgYW55dGltZSBoaXN0b3J5IGFwaSBpcyBjaGFuZ2VkXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB1cGRhdGVQYWdlKTtcblxufSx7XCIuL2Fib3V0XCI6MSxcIi4vbGFuZGluZ1wiOjIsXCIuL3Byb2plY3RzXCI6NCxcIi4vdXRpbHNcIjo2LFwiZXM2LXByb21pc2VcIjo3LFwiaXNvbW9ycGhpYy1mZXRjaFwiOjh9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbi8vIHRpbWluZyBmdW5jdGlvbnMgWyBmcm9tIGdpdGh1YiAtLSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9ncmUvMTY1MDI5NCBdXG52YXIgbGluZWFyID0gZnVuY3Rpb24gbGluZWFyKHQpIHtcbiAgcmV0dXJuIHQ7XG59O1xudmFyIGVhc2VJblF1YWQgPSBmdW5jdGlvbiBlYXNlSW5RdWFkKHQpIHtcbiAgcmV0dXJuIHQgKiB0O1xufTtcbnZhciBlYXNlT3V0UXVhZCA9IGZ1bmN0aW9uIGVhc2VPdXRRdWFkKHQpIHtcbiAgcmV0dXJuIHQgKiAoMiAtIHQpO1xufTtcbnZhciBlYXNlSW5PdXRRdWFkID0gZnVuY3Rpb24gZWFzZUluT3V0UXVhZCh0KSB7XG4gIHJldHVybiB0IDwgLjUgPyAyICogdCAqIHQgOiAtMSArICg0IC0gMiAqIHQpICogdDtcbn07XG52YXIgZWFzZUluQ3ViaWMgPSBmdW5jdGlvbiBlYXNlSW5DdWJpYyh0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59O1xudmFyIGVhc2VPdXRDdWJpYyA9IGZ1bmN0aW9uIGVhc2VPdXRDdWJpYyh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59O1xudmFyIGVhc2VJbk91dEN1YmljID0gZnVuY3Rpb24gZWFzZUluT3V0Q3ViaWModCkge1xuICByZXR1cm4gdCA8IC41ID8gNCAqIHQgKiB0ICogdCA6ICh0IC0gMSkgKiAoMiAqIHQgLSAyKSAqICgyICogdCAtIDIpICsgMTtcbn07XG52YXIgZWFzZUluUXVhcnQgPSBmdW5jdGlvbiBlYXNlSW5RdWFydCh0KSB7XG4gIHJldHVybiB0ICogdCAqIHQgKiB0O1xufTtcbnZhciBlYXNlT3V0UXVhcnQgPSBmdW5jdGlvbiBlYXNlT3V0UXVhcnQodCkge1xuICByZXR1cm4gMSAtIC0tdCAqIHQgKiB0ICogdDtcbn07XG52YXIgZWFzZUluT3V0UXVhcnQgPSBmdW5jdGlvbiBlYXNlSW5PdXRRdWFydCh0KSB7XG4gIHJldHVybiB0IDwgLjUgPyA4ICogdCAqIHQgKiB0ICogdCA6IDEgLSA4ICogLS10ICogdCAqIHQgKiB0O1xufTtcblxuLy8gc2Nyb2xsLXRvLXRvcCBvZiBlbGVtZW50LlxudmFyIHNjcm9sbFRvVG9wID0gZXhwb3J0cy5zY3JvbGxUb1RvcCA9IGZ1bmN0aW9uIHNjcm9sbFRvVG9wKGVsKSB7XG4gIHZhciBkdXJhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTIwMDtcblxuICB2YXIgYm90dG9tID0gZWwuc2Nyb2xsSGVpZ2h0O1xuICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpO1xuICB2YXIgc2Nyb2xsID0gZnVuY3Rpb24gc2Nyb2xsKCkge1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIHZhciB0aW1lID0gKG5vdyAtIHN0YXJ0KSAvIGR1cmF0aW9uO1xuICAgIHZhciBlYXNpbmcgPSBlYXNlT3V0UXVhcnQodGltZSk7XG4gICAgZWwuc2Nyb2xsVG9wID0gZWFzaW5nICogKDAgLSBib3R0b20pICsgYm90dG9tO1xuICAgIGlmIChlbC5zY3JvbGxUb3AgPT09IDApIHJldHVybjtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc2Nyb2xsKTtcbiAgfTtcbiAgc2Nyb2xsKCk7XG59O1xuXG4vLyBmYWRlLWluIGVsZW1lbnRcbnZhciBmYWRlSW4gPSBleHBvcnRzLmZhZGVJbiA9IGZ1bmN0aW9uIGZhZGVJbihlbCkge1xuICB2YXIgZHVyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDEyMDA7XG5cbiAgZWwuc3R5bGUub3BhY2l0eSA9IDA7XG4gIHZhciBib3R0b20gPSAxO1xuICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpO1xuICB2YXIgZmFkZSA9IGZ1bmN0aW9uIGZhZGUoKSB7XG4gICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgdmFyIHRpbWUgPSAobm93IC0gc3RhcnQpIC8gZHVyYXRpb247XG4gICAgdmFyIGVhc2luZyA9IGVhc2VJblF1YXJ0KHRpbWUpO1xuICAgIGVsLnN0eWxlLm9wYWNpdHkgPSBlYXNpbmc7XG4gICAgaWYgKGVsLnN0eWxlLm9wYWNpdHkgPiAwLjk5NSkge1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmYWRlKTtcbiAgfTtcbiAgZmFkZSgpO1xufTtcblxuLy8gZmFkZS1vdXQgZWxlbWVudFxudmFyIGZhZGVPdXQgPSBleHBvcnRzLmZhZGVPdXQgPSBmdW5jdGlvbiBmYWRlT3V0KGVsKSB7XG4gIHZhciBkdXJhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTIwMDtcblxuICBlbC5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgdmFyIGZhZGUgPSBmdW5jdGlvbiBmYWRlKCkge1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIHZhciB0aW1lID0gMSAtIChub3cgLSBzdGFydCkgLyBkdXJhdGlvbjtcbiAgICB2YXIgZWFzaW5nID0gZWFzZU91dFF1YXJ0KHRpbWUpO1xuICAgIGVsLnN0eWxlLm9wYWNpdHkgPSBlYXNpbmc7XG4gICAgaWYgKGVsLnN0eWxlLm9wYWNpdHkgPCAwLjAwNSkge1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmYWRlKTtcbiAgfTtcbiAgZmFkZSgpO1xufTtcblxudmFyIGZpbmRBcmVhID0gZXhwb3J0cy5maW5kQXJlYSA9IGZ1bmN0aW9uIGZpbmRBcmVhKCkge1xuICB2YXIgY29kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1waXhlbHMnKTtcbiAgdmFyIHBpeGVscyA9IGZ1bmN0aW9uIHBpeGVscygpIHtcbiAgICBpZiAoY29kZSAmJiBjb2RlLnRleHRDb250ZW50ICE9PSBudWxsKSB7XG4gICAgICB2YXIgYXJlYSA9IHdpbmRvdy5pbm5lcldpZHRoICogd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgY29kZS50ZXh0Q29udGVudCA9IGFyZWEudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9XG4gIH07XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShwaXhlbHMpO1xufTtcblxufSx7fV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXtcbi8qIVxuICogQG92ZXJ2aWV3IGVzNi1wcm9taXNlIC0gYSB0aW55IGltcGxlbWVudGF0aW9uIG9mIFByb21pc2VzL0ErLlxuICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTQgWWVodWRhIEthdHosIFRvbSBEYWxlLCBTdGVmYW4gUGVubmVyIGFuZCBjb250cmlidXRvcnMgKENvbnZlcnNpb24gdG8gRVM2IEFQSSBieSBKYWtlIEFyY2hpYmFsZClcbiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zdGVmYW5wZW5uZXIvZXM2LXByb21pc2UvbWFzdGVyL0xJQ0VOU0VcbiAqIEB2ZXJzaW9uICAgNC4xLjBcbiAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuRVM2UHJvbWlzZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb2JqZWN0T3JGdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxudmFyIF9pc0FycmF5ID0gdW5kZWZpbmVkO1xuaWYgKCFBcnJheS5pc0FycmF5KSB7XG4gIF9pc0FycmF5ID0gZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xufSBlbHNlIHtcbiAgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xufVxuXG52YXIgaXNBcnJheSA9IF9pc0FycmF5O1xuXG52YXIgbGVuID0gMDtcbnZhciB2ZXJ0eE5leHQgPSB1bmRlZmluZWQ7XG52YXIgY3VzdG9tU2NoZWR1bGVyRm4gPSB1bmRlZmluZWQ7XG5cbnZhciBhc2FwID0gZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgYXJnKSB7XG4gIHF1ZXVlW2xlbl0gPSBjYWxsYmFjaztcbiAgcXVldWVbbGVuICsgMV0gPSBhcmc7XG4gIGxlbiArPSAyO1xuICBpZiAobGVuID09PSAyKSB7XG4gICAgLy8gSWYgbGVuIGlzIDIsIHRoYXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHNjaGVkdWxlIGFuIGFzeW5jIGZsdXNoLlxuICAgIC8vIElmIGFkZGl0aW9uYWwgY2FsbGJhY2tzIGFyZSBxdWV1ZWQgYmVmb3JlIHRoZSBxdWV1ZSBpcyBmbHVzaGVkLCB0aGV5XG4gICAgLy8gd2lsbCBiZSBwcm9jZXNzZWQgYnkgdGhpcyBmbHVzaCB0aGF0IHdlIGFyZSBzY2hlZHVsaW5nLlxuICAgIGlmIChjdXN0b21TY2hlZHVsZXJGbikge1xuICAgICAgY3VzdG9tU2NoZWR1bGVyRm4oZmx1c2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZUZsdXNoKCk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTY2hlZHVsZXIoc2NoZWR1bGVGbikge1xuICBjdXN0b21TY2hlZHVsZXJGbiA9IHNjaGVkdWxlRm47XG59XG5cbmZ1bmN0aW9uIHNldEFzYXAoYXNhcEZuKSB7XG4gIGFzYXAgPSBhc2FwRm47XG59XG5cbnZhciBicm93c2VyV2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB1bmRlZmluZWQ7XG52YXIgYnJvd3Nlckdsb2JhbCA9IGJyb3dzZXJXaW5kb3cgfHwge307XG52YXIgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSBicm93c2VyR2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgYnJvd3Nlckdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGlzTm9kZSA9IHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHt9KS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG5cbi8vIHRlc3QgZm9yIHdlYiB3b3JrZXIgYnV0IG5vdCBpbiBJRTEwXG52YXIgaXNXb3JrZXIgPSB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbXBvcnRTY3JpcHRzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnO1xuXG4vLyBub2RlXG5mdW5jdGlvbiB1c2VOZXh0VGljaygpIHtcbiAgLy8gbm9kZSB2ZXJzaW9uIDAuMTAueCBkaXNwbGF5cyBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgd2hlbiBuZXh0VGljayBpcyB1c2VkIHJlY3Vyc2l2ZWx5XG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY3Vqb2pzL3doZW4vaXNzdWVzLzQxMCBmb3IgZGV0YWlsc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgfTtcbn1cblxuLy8gdmVydHhcbmZ1bmN0aW9uIHVzZVZlcnR4VGltZXIoKSB7XG4gIGlmICh0eXBlb2YgdmVydHhOZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2ZXJ0eE5leHQoZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB1c2VNdXRhdGlvbk9ic2VydmVyKCkge1xuICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBCcm93c2VyTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7XG4gIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICBvYnNlcnZlci5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIG5vZGUuZGF0YSA9IGl0ZXJhdGlvbnMgPSArK2l0ZXJhdGlvbnMgJSAyO1xuICB9O1xufVxuXG4vLyB3ZWIgd29ya2VyXG5mdW5jdGlvbiB1c2VNZXNzYWdlQ2hhbm5lbCgpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlU2V0VGltZW91dCgpIHtcbiAgLy8gU3RvcmUgc2V0VGltZW91dCByZWZlcmVuY2Ugc28gZXM2LXByb21pc2Ugd2lsbCBiZSB1bmFmZmVjdGVkIGJ5XG4gIC8vIG90aGVyIGNvZGUgbW9kaWZ5aW5nIHNldFRpbWVvdXQgKGxpa2Ugc2lub24udXNlRmFrZVRpbWVycygpKVxuICB2YXIgZ2xvYmFsU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdsb2JhbFNldFRpbWVvdXQoZmx1c2gsIDEpO1xuICB9O1xufVxuXG52YXIgcXVldWUgPSBuZXcgQXJyYXkoMTAwMCk7XG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHZhciBjYWxsYmFjayA9IHF1ZXVlW2ldO1xuICAgIHZhciBhcmcgPSBxdWV1ZVtpICsgMV07XG5cbiAgICBjYWxsYmFjayhhcmcpO1xuXG4gICAgcXVldWVbaV0gPSB1bmRlZmluZWQ7XG4gICAgcXVldWVbaSArIDFdID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gYXR0ZW1wdFZlcnR4KCkge1xuICB0cnkge1xuICAgIHZhciByID0gcmVxdWlyZTtcbiAgICB2YXIgdmVydHggPSByKCd2ZXJ0eCcpO1xuICAgIHZlcnR4TmV4dCA9IHZlcnR4LnJ1bk9uTG9vcCB8fCB2ZXJ0eC5ydW5PbkNvbnRleHQ7XG4gICAgcmV0dXJuIHVzZVZlcnR4VGltZXIoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG4gIH1cbn1cblxudmFyIHNjaGVkdWxlRmx1c2ggPSB1bmRlZmluZWQ7XG4vLyBEZWNpZGUgd2hhdCBhc3luYyBtZXRob2QgdG8gdXNlIHRvIHRyaWdnZXJpbmcgcHJvY2Vzc2luZyBvZiBxdWV1ZWQgY2FsbGJhY2tzOlxuaWYgKGlzTm9kZSkge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTmV4dFRpY2soKTtcbn0gZWxzZSBpZiAoQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU11dGF0aW9uT2JzZXJ2ZXIoKTtcbn0gZWxzZSBpZiAoaXNXb3JrZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU1lc3NhZ2VDaGFubmVsKCk7XG59IGVsc2UgaWYgKGJyb3dzZXJXaW5kb3cgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICBzY2hlZHVsZUZsdXNoID0gYXR0ZW1wdFZlcnR4KCk7XG59IGVsc2Uge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB0aGVuKG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gIHZhciBfYXJndW1lbnRzID0gYXJndW1lbnRzO1xuXG4gIHZhciBwYXJlbnQgPSB0aGlzO1xuXG4gIHZhciBjaGlsZCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGlmIChjaGlsZFtQUk9NSVNFX0lEXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWFrZVByb21pc2UoY2hpbGQpO1xuICB9XG5cbiAgdmFyIF9zdGF0ZSA9IHBhcmVudC5fc3RhdGU7XG5cbiAgaWYgKF9zdGF0ZSkge1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBfYXJndW1lbnRzW19zdGF0ZSAtIDFdO1xuICAgICAgYXNhcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2VDYWxsYmFjayhfc3RhdGUsIGNoaWxkLCBjYWxsYmFjaywgcGFyZW50Ll9yZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfSkoKTtcbiAgfSBlbHNlIHtcbiAgICBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkO1xufVxuXG4vKipcbiAgYFByb21pc2UucmVzb2x2ZWAgcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSByZXNvbHZlZCB3aXRoIHRoZVxuICBwYXNzZWQgYHZhbHVlYC4gSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlc29sdmUoMSk7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gdmFsdWUgPT09IDFcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKDEpO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gdmFsdWUgPT09IDFcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgcmVzb2x2ZVxuICBAc3RhdGljXG4gIEBwYXJhbSB7QW55fSB2YWx1ZSB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aFxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIGZ1bGZpbGxlZCB3aXRoIHRoZSBnaXZlblxuICBgdmFsdWVgXG4qL1xuZnVuY3Rpb24gcmVzb2x2ZShvYmplY3QpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICBpZiAob2JqZWN0ICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdC5jb25zdHJ1Y3RvciA9PT0gQ29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG4gIF9yZXNvbHZlKHByb21pc2UsIG9iamVjdCk7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgUFJPTUlTRV9JRCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygxNik7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgUEVORElORyA9IHZvaWQgMDtcbnZhciBGVUxGSUxMRUQgPSAxO1xudmFyIFJFSkVDVEVEID0gMjtcblxudmFyIEdFVF9USEVOX0VSUk9SID0gbmV3IEVycm9yT2JqZWN0KCk7XG5cbmZ1bmN0aW9uIHNlbGZGdWxmaWxsbWVudCgpIHtcbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgY2Fubm90IHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXRzZWxmXCIpO1xufVxuXG5mdW5jdGlvbiBjYW5ub3RSZXR1cm5Pd24oKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKCdBIHByb21pc2VzIGNhbGxiYWNrIGNhbm5vdCByZXR1cm4gdGhhdCBzYW1lIHByb21pc2UuJyk7XG59XG5cbmZ1bmN0aW9uIGdldFRoZW4ocHJvbWlzZSkge1xuICB0cnkge1xuICAgIHJldHVybiBwcm9taXNlLnRoZW47XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgR0VUX1RIRU5fRVJST1IuZXJyb3IgPSBlcnJvcjtcbiAgICByZXR1cm4gR0VUX1RIRU5fRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ5VGhlbih0aGVuLCB2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKSB7XG4gIHRyeSB7XG4gICAgdGhlbi5jYWxsKHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlLCB0aGVuKSB7XG4gIGFzYXAoZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICB2YXIgc2VhbGVkID0gZmFsc2U7XG4gICAgdmFyIGVycm9yID0gdHJ5VGhlbih0aGVuLCB0aGVuYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoc2VhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICBpZiAodGhlbmFibGUgIT09IHZhbHVlKSB7XG4gICAgICAgIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcblxuICAgICAgX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0sICdTZXR0bGU6ICcgKyAocHJvbWlzZS5fbGFiZWwgfHwgJyB1bmtub3duIHByb21pc2UnKSk7XG5cbiAgICBpZiAoIXNlYWxlZCAmJiBlcnJvcikge1xuICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgIH1cbiAgfSwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlKSB7XG4gIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IEZVTEZJTExFRCkge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gIH0gZWxzZSBpZiAodGhlbmFibGUuX3N0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgIF9yZWplY3QocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHRoZW5hYmxlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZXR1cm4gX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkKSB7XG4gIGlmIChtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yID09PSBwcm9taXNlLmNvbnN0cnVjdG9yICYmIHRoZW4kJCA9PT0gdGhlbiAmJiBtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yLnJlc29sdmUgPT09IHJlc29sdmUpIHtcbiAgICBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodGhlbiQkID09PSBHRVRfVEhFTl9FUlJPUikge1xuICAgICAgX3JlamVjdChwcm9taXNlLCBHRVRfVEhFTl9FUlJPUi5lcnJvcik7XG4gICAgICBHRVRfVEhFTl9FUlJPUi5lcnJvciA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0aGVuJCQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odGhlbiQkKSkge1xuICAgICAgaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKSB7XG4gIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgIF9yZWplY3QocHJvbWlzZSwgc2VsZkZ1bGZpbGxtZW50KCkpO1xuICB9IGVsc2UgaWYgKG9iamVjdE9yRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCB2YWx1ZSwgZ2V0VGhlbih2YWx1ZSkpO1xuICB9IGVsc2Uge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2hSZWplY3Rpb24ocHJvbWlzZSkge1xuICBpZiAocHJvbWlzZS5fb25lcnJvcikge1xuICAgIHByb21pc2UuX29uZXJyb3IocHJvbWlzZS5fcmVzdWx0KTtcbiAgfVxuXG4gIHB1Ymxpc2gocHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJvbWlzZS5fcmVzdWx0ID0gdmFsdWU7XG4gIHByb21pc2UuX3N0YXRlID0gRlVMRklMTEVEO1xuXG4gIGlmIChwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggIT09IDApIHtcbiAgICBhc2FwKHB1Ymxpc2gsIHByb21pc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKSB7XG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIHJldHVybjtcbiAgfVxuICBwcm9taXNlLl9zdGF0ZSA9IFJFSkVDVEVEO1xuICBwcm9taXNlLl9yZXN1bHQgPSByZWFzb247XG5cbiAgYXNhcChwdWJsaXNoUmVqZWN0aW9uLCBwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gIHZhciBfc3Vic2NyaWJlcnMgPSBwYXJlbnQuX3N1YnNjcmliZXJzO1xuICB2YXIgbGVuZ3RoID0gX3N1YnNjcmliZXJzLmxlbmd0aDtcblxuICBwYXJlbnQuX29uZXJyb3IgPSBudWxsO1xuXG4gIF9zdWJzY3JpYmVyc1tsZW5ndGhdID0gY2hpbGQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBGVUxGSUxMRURdID0gb25GdWxmaWxsbWVudDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIFJFSkVDVEVEXSA9IG9uUmVqZWN0aW9uO1xuXG4gIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkge1xuICAgIGFzYXAocHVibGlzaCwgcGFyZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoKHByb21pc2UpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gIHZhciBzZXR0bGVkID0gcHJvbWlzZS5fc3RhdGU7XG5cbiAgaWYgKHN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGlsZCA9IHVuZGVmaW5lZCxcbiAgICAgIGNhbGxiYWNrID0gdW5kZWZpbmVkLFxuICAgICAgZGV0YWlsID0gcHJvbWlzZS5fcmVzdWx0O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBjaGlsZCA9IHN1YnNjcmliZXJzW2ldO1xuICAgIGNhbGxiYWNrID0gc3Vic2NyaWJlcnNbaSArIHNldHRsZWRdO1xuXG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBjaGlsZCwgY2FsbGJhY2ssIGRldGFpbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgfVxuICB9XG5cbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbn1cblxuZnVuY3Rpb24gRXJyb3JPYmplY3QoKSB7XG4gIHRoaXMuZXJyb3IgPSBudWxsO1xufVxuXG52YXIgVFJZX0NBVENIX0VSUk9SID0gbmV3IEVycm9yT2JqZWN0KCk7XG5cbmZ1bmN0aW9uIHRyeUNhdGNoKGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gY2FsbGJhY2soZGV0YWlsKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIFRSWV9DQVRDSF9FUlJPUi5lcnJvciA9IGU7XG4gICAgcmV0dXJuIFRSWV9DQVRDSF9FUlJPUjtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBwcm9taXNlLCBjYWxsYmFjaywgZGV0YWlsKSB7XG4gIHZhciBoYXNDYWxsYmFjayA9IGlzRnVuY3Rpb24oY2FsbGJhY2spLFxuICAgICAgdmFsdWUgPSB1bmRlZmluZWQsXG4gICAgICBlcnJvciA9IHVuZGVmaW5lZCxcbiAgICAgIHN1Y2NlZWRlZCA9IHVuZGVmaW5lZCxcbiAgICAgIGZhaWxlZCA9IHVuZGVmaW5lZDtcblxuICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICB2YWx1ZSA9IHRyeUNhdGNoKGNhbGxiYWNrLCBkZXRhaWwpO1xuXG4gICAgaWYgKHZhbHVlID09PSBUUllfQ0FUQ0hfRVJST1IpIHtcbiAgICAgIGZhaWxlZCA9IHRydWU7XG4gICAgICBlcnJvciA9IHZhbHVlLmVycm9yO1xuICAgICAgdmFsdWUuZXJyb3IgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCBjYW5ub3RSZXR1cm5Pd24oKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gZGV0YWlsO1xuICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gIH1cblxuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICAvLyBub29wXG4gIH0gZWxzZSBpZiAoaGFzQ2FsbGJhY2sgJiYgc3VjY2VlZGVkKSB7XG4gICAgICBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChmYWlsZWQpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gRlVMRklMTEVEKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IFJFSkVDVEVEKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVQcm9taXNlKHByb21pc2UsIHJlc29sdmVyKSB7XG4gIHRyeSB7XG4gICAgcmVzb2x2ZXIoZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UodmFsdWUpIHtcbiAgICAgIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiByZWplY3RQcm9taXNlKHJlYXNvbikge1xuICAgICAgX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgX3JlamVjdChwcm9taXNlLCBlKTtcbiAgfVxufVxuXG52YXIgaWQgPSAwO1xuZnVuY3Rpb24gbmV4dElkKCkge1xuICByZXR1cm4gaWQrKztcbn1cblxuZnVuY3Rpb24gbWFrZVByb21pc2UocHJvbWlzZSkge1xuICBwcm9taXNlW1BST01JU0VfSURdID0gaWQrKztcbiAgcHJvbWlzZS5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMgPSBbXTtcbn1cblxuZnVuY3Rpb24gRW51bWVyYXRvcihDb25zdHJ1Y3RvciwgaW5wdXQpIHtcbiAgdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICB0aGlzLnByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG5cbiAgaWYgKCF0aGlzLnByb21pc2VbUFJPTUlTRV9JRF0pIHtcbiAgICBtYWtlUHJvbWlzZSh0aGlzLnByb21pc2UpO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLmxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgICB0aGlzLl9yZW1haW5pbmcgPSBpbnB1dC5sZW5ndGg7XG5cbiAgICB0aGlzLl9yZXN1bHQgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLmxlbmd0aCB8fCAwO1xuICAgICAgdGhpcy5fZW51bWVyYXRlKCk7XG4gICAgICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBfcmVqZWN0KHRoaXMucHJvbWlzZSwgdmFsaWRhdGlvbkVycm9yKCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRpb25FcnJvcigpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcignQXJyYXkgTWV0aG9kcyBtdXN0IGJlIHByb3ZpZGVkIGFuIEFycmF5Jyk7XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fZW51bWVyYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gIHZhciBfaW5wdXQgPSB0aGlzLl9pbnB1dDtcblxuICBmb3IgKHZhciBpID0gMDsgdGhpcy5fc3RhdGUgPT09IFBFTkRJTkcgJiYgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5fZWFjaEVudHJ5KF9pbnB1dFtpXSwgaSk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9lYWNoRW50cnkgPSBmdW5jdGlvbiAoZW50cnksIGkpIHtcbiAgdmFyIGMgPSB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yO1xuICB2YXIgcmVzb2x2ZSQkID0gYy5yZXNvbHZlO1xuXG4gIGlmIChyZXNvbHZlJCQgPT09IHJlc29sdmUpIHtcbiAgICB2YXIgX3RoZW4gPSBnZXRUaGVuKGVudHJ5KTtcblxuICAgIGlmIChfdGhlbiA9PT0gdGhlbiAmJiBlbnRyeS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICAgIHRoaXMuX3NldHRsZWRBdChlbnRyeS5fc3RhdGUsIGksIGVudHJ5Ll9yZXN1bHQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9yZW1haW5pbmctLTtcbiAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IGVudHJ5O1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gUHJvbWlzZSkge1xuICAgICAgdmFyIHByb21pc2UgPSBuZXcgYyhub29wKTtcbiAgICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgZW50cnksIF90aGVuKTtcbiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChwcm9taXNlLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KG5ldyBjKGZ1bmN0aW9uIChyZXNvbHZlJCQpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUkJChlbnRyeSk7XG4gICAgICB9KSwgaSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX3dpbGxTZXR0bGVBdChyZXNvbHZlJCQoZW50cnkpLCBpKTtcbiAgfVxufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX3NldHRsZWRBdCA9IGZ1bmN0aW9uIChzdGF0ZSwgaSwgdmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG5cbiAgaWYgKHByb21pc2UuX3N0YXRlID09PSBQRU5ESU5HKSB7XG4gICAgdGhpcy5fcmVtYWluaW5nLS07XG5cbiAgICBpZiAoc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVzdWx0W2ldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgfVxufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX3dpbGxTZXR0bGVBdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBpKSB7XG4gIHZhciBlbnVtZXJhdG9yID0gdGhpcztcblxuICBzdWJzY3JpYmUocHJvbWlzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KEZVTEZJTExFRCwgaSwgdmFsdWUpO1xuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChSRUpFQ1RFRCwgaSwgcmVhc29uKTtcbiAgfSk7XG59O1xuXG4vKipcbiAgYFByb21pc2UuYWxsYCBhY2NlcHRzIGFuIGFycmF5IG9mIHByb21pc2VzLCBhbmQgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoXG4gIGlzIGZ1bGZpbGxlZCB3aXRoIGFuIGFycmF5IG9mIGZ1bGZpbGxtZW50IHZhbHVlcyBmb3IgdGhlIHBhc3NlZCBwcm9taXNlcywgb3JcbiAgcmVqZWN0ZWQgd2l0aCB0aGUgcmVhc29uIG9mIHRoZSBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBiZSByZWplY3RlZC4gSXQgY2FzdHMgYWxsXG4gIGVsZW1lbnRzIG9mIHRoZSBwYXNzZWQgaXRlcmFibGUgdG8gcHJvbWlzZXMgYXMgaXQgcnVucyB0aGlzIGFsZ29yaXRobS5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gcmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gcmVzb2x2ZSgyKTtcbiAgbGV0IHByb21pc2UzID0gcmVzb2x2ZSgzKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIFRoZSBhcnJheSBoZXJlIHdvdWxkIGJlIFsgMSwgMiwgMyBdO1xuICB9KTtcbiAgYGBgXG5cbiAgSWYgYW55IG9mIHRoZSBgcHJvbWlzZXNgIGdpdmVuIHRvIGBhbGxgIGFyZSByZWplY3RlZCwgdGhlIGZpcnN0IHByb21pc2VcbiAgdGhhdCBpcyByZWplY3RlZCB3aWxsIGJlIGdpdmVuIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSByZXR1cm5lZCBwcm9taXNlcydzXG4gIHJlamVjdGlvbiBoYW5kbGVyLiBGb3IgZXhhbXBsZTpcblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gcmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gcmVqZWN0KG5ldyBFcnJvcihcIjJcIikpO1xuICBsZXQgcHJvbWlzZTMgPSByZWplY3QobmV3IEVycm9yKFwiM1wiKSk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVucyBiZWNhdXNlIHRoZXJlIGFyZSByZWplY3RlZCBwcm9taXNlcyFcbiAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAvLyBlcnJvci5tZXNzYWdlID09PSBcIjJcIlxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCBhbGxcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FycmF5fSBlbnRyaWVzIGFycmF5IG9mIHByb21pc2VzXG4gIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGxhYmVsaW5nIHRoZSBwcm9taXNlLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2hlbiBhbGwgYHByb21pc2VzYCBoYXZlIGJlZW5cbiAgZnVsZmlsbGVkLCBvciByZWplY3RlZCBpZiBhbnkgb2YgdGhlbSBiZWNvbWUgcmVqZWN0ZWQuXG4gIEBzdGF0aWNcbiovXG5mdW5jdGlvbiBhbGwoZW50cmllcykge1xuICByZXR1cm4gbmV3IEVudW1lcmF0b3IodGhpcywgZW50cmllcykucHJvbWlzZTtcbn1cblxuLyoqXG4gIGBQcm9taXNlLnJhY2VgIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaCBpcyBzZXR0bGVkIGluIHRoZSBzYW1lIHdheSBhcyB0aGVcbiAgZmlyc3QgcGFzc2VkIHByb21pc2UgdG8gc2V0dGxlLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMScpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuXG4gIGxldCBwcm9taXNlMiA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAyJyk7XG4gICAgfSwgMTAwKTtcbiAgfSk7XG5cbiAgUHJvbWlzZS5yYWNlKFtwcm9taXNlMSwgcHJvbWlzZTJdKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgLy8gcmVzdWx0ID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIGl0IHdhcyByZXNvbHZlZCBiZWZvcmUgcHJvbWlzZTFcbiAgICAvLyB3YXMgcmVzb2x2ZWQuXG4gIH0pO1xuICBgYGBcblxuICBgUHJvbWlzZS5yYWNlYCBpcyBkZXRlcm1pbmlzdGljIGluIHRoYXQgb25seSB0aGUgc3RhdGUgb2YgdGhlIGZpcnN0XG4gIHNldHRsZWQgcHJvbWlzZSBtYXR0ZXJzLiBGb3IgZXhhbXBsZSwgZXZlbiBpZiBvdGhlciBwcm9taXNlcyBnaXZlbiB0byB0aGVcbiAgYHByb21pc2VzYCBhcnJheSBhcmd1bWVudCBhcmUgcmVzb2x2ZWQsIGJ1dCB0aGUgZmlyc3Qgc2V0dGxlZCBwcm9taXNlIGhhc1xuICBiZWNvbWUgcmVqZWN0ZWQgYmVmb3JlIHRoZSBvdGhlciBwcm9taXNlcyBiZWNhbWUgZnVsZmlsbGVkLCB0aGUgcmV0dXJuZWRcbiAgcHJvbWlzZSB3aWxsIGJlY29tZSByZWplY3RlZDpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdwcm9taXNlIDInKSk7XG4gICAgfSwgMTAwKTtcbiAgfSk7XG5cbiAgUHJvbWlzZS5yYWNlKFtwcm9taXNlMSwgcHJvbWlzZTJdKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnNcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ3Byb21pc2UgMicgYmVjYXVzZSBwcm9taXNlIDIgYmVjYW1lIHJlamVjdGVkIGJlZm9yZVxuICAgIC8vIHByb21pc2UgMSBiZWNhbWUgZnVsZmlsbGVkXG4gIH0pO1xuICBgYGBcblxuICBBbiBleGFtcGxlIHJlYWwtd29ybGQgdXNlIGNhc2UgaXMgaW1wbGVtZW50aW5nIHRpbWVvdXRzOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgUHJvbWlzZS5yYWNlKFthamF4KCdmb28uanNvbicpLCB0aW1lb3V0KDUwMDApXSlcbiAgYGBgXG5cbiAgQG1ldGhvZCByYWNlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBcnJheX0gcHJvbWlzZXMgYXJyYXkgb2YgcHJvbWlzZXMgdG8gb2JzZXJ2ZVxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB3aGljaCBzZXR0bGVzIGluIHRoZSBzYW1lIHdheSBhcyB0aGUgZmlyc3QgcGFzc2VkXG4gIHByb21pc2UgdG8gc2V0dGxlLlxuKi9cbmZ1bmN0aW9uIHJhY2UoZW50cmllcykge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gIGlmICghaXNBcnJheShlbnRyaWVzKSkge1xuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gKF8sIHJlamVjdCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGFuIGFycmF5IHRvIHJhY2UuJykpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGVudHJpZXMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBDb25zdHJ1Y3Rvci5yZXNvbHZlKGVudHJpZXNbaV0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAgYFByb21pc2UucmVqZWN0YCByZXR1cm5zIGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBwYXNzZWQgYHJlYXNvbmAuXG4gIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICByZWplY3QobmV3IEVycm9yKCdXSE9PUFMnKSk7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdXSE9PUFMnXG4gIH0pO1xuICBgYGBcblxuICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdXSE9PUFMnXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlamVjdFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QW55fSByZWFzb24gdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIHdpdGguXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIGdpdmVuIGByZWFzb25gLlxuKi9cbmZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG4gIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIG5lZWRzUmVzb2x2ZXIoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYSByZXNvbHZlciBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHByb21pc2UgY29uc3RydWN0b3InKTtcbn1cblxuZnVuY3Rpb24gbmVlZHNOZXcoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdQcm9taXNlJzogUGxlYXNlIHVzZSB0aGUgJ25ldycgb3BlcmF0b3IsIHRoaXMgb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG59XG5cbi8qKlxuICBQcm9taXNlIG9iamVjdHMgcmVwcmVzZW50IHRoZSBldmVudHVhbCByZXN1bHQgb2YgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbi4gVGhlXG4gIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsIHdoaWNoXG4gIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlIHJlYXNvblxuICB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cblxuICBUZXJtaW5vbG9neVxuICAtLS0tLS0tLS0tLVxuXG4gIC0gYHByb21pc2VgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB3aXRoIGEgYHRoZW5gIG1ldGhvZCB3aG9zZSBiZWhhdmlvciBjb25mb3JtcyB0byB0aGlzIHNwZWNpZmljYXRpb24uXG4gIC0gYHRoZW5hYmxlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gdGhhdCBkZWZpbmVzIGEgYHRoZW5gIG1ldGhvZC5cbiAgLSBgdmFsdWVgIGlzIGFueSBsZWdhbCBKYXZhU2NyaXB0IHZhbHVlIChpbmNsdWRpbmcgdW5kZWZpbmVkLCBhIHRoZW5hYmxlLCBvciBhIHByb21pc2UpLlxuICAtIGBleGNlcHRpb25gIGlzIGEgdmFsdWUgdGhhdCBpcyB0aHJvd24gdXNpbmcgdGhlIHRocm93IHN0YXRlbWVudC5cbiAgLSBgcmVhc29uYCBpcyBhIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoeSBhIHByb21pc2Ugd2FzIHJlamVjdGVkLlxuICAtIGBzZXR0bGVkYCB0aGUgZmluYWwgcmVzdGluZyBzdGF0ZSBvZiBhIHByb21pc2UsIGZ1bGZpbGxlZCBvciByZWplY3RlZC5cblxuICBBIHByb21pc2UgY2FuIGJlIGluIG9uZSBvZiB0aHJlZSBzdGF0ZXM6IHBlbmRpbmcsIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQuXG5cbiAgUHJvbWlzZXMgdGhhdCBhcmUgZnVsZmlsbGVkIGhhdmUgYSBmdWxmaWxsbWVudCB2YWx1ZSBhbmQgYXJlIGluIHRoZSBmdWxmaWxsZWRcbiAgc3RhdGUuICBQcm9taXNlcyB0aGF0IGFyZSByZWplY3RlZCBoYXZlIGEgcmVqZWN0aW9uIHJlYXNvbiBhbmQgYXJlIGluIHRoZVxuICByZWplY3RlZCBzdGF0ZS4gIEEgZnVsZmlsbG1lbnQgdmFsdWUgaXMgbmV2ZXIgYSB0aGVuYWJsZS5cblxuICBQcm9taXNlcyBjYW4gYWxzbyBiZSBzYWlkIHRvICpyZXNvbHZlKiBhIHZhbHVlLiAgSWYgdGhpcyB2YWx1ZSBpcyBhbHNvIGFcbiAgcHJvbWlzZSwgdGhlbiB0aGUgb3JpZ2luYWwgcHJvbWlzZSdzIHNldHRsZWQgc3RhdGUgd2lsbCBtYXRjaCB0aGUgdmFsdWUnc1xuICBzZXR0bGVkIHN0YXRlLiAgU28gYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCByZWplY3RzIHdpbGxcbiAgaXRzZWxmIHJlamVjdCwgYW5kIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgd2lsbFxuICBpdHNlbGYgZnVsZmlsbC5cblxuXG4gIEJhc2ljIFVzYWdlOlxuICAtLS0tLS0tLS0tLS1cblxuICBgYGBqc1xuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIC8vIG9uIHN1Y2Nlc3NcbiAgICByZXNvbHZlKHZhbHVlKTtcblxuICAgIC8vIG9uIGZhaWx1cmVcbiAgICByZWplY3QocmVhc29uKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBBZHZhbmNlZCBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tLS0tXG5cbiAgUHJvbWlzZXMgc2hpbmUgd2hlbiBhYnN0cmFjdGluZyBhd2F5IGFzeW5jaHJvbm91cyBpbnRlcmFjdGlvbnMgc3VjaCBhc1xuICBgWE1MSHR0cFJlcXVlc3Rgcy5cblxuICBgYGBqc1xuICBmdW5jdGlvbiBnZXRKU09OKHVybCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBoYW5kbGVyO1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgeGhyLnNlbmQoKTtcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gdGhpcy5ET05FKSB7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2dldEpTT046IGAnICsgdXJsICsgJ2AgZmFpbGVkIHdpdGggc3RhdHVzOiBbJyArIHRoaXMuc3RhdHVzICsgJ10nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0SlNPTignL3Bvc3RzLmpzb24nKS50aGVuKGZ1bmN0aW9uKGpzb24pIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIFVubGlrZSBjYWxsYmFja3MsIHByb21pc2VzIGFyZSBncmVhdCBjb21wb3NhYmxlIHByaW1pdGl2ZXMuXG5cbiAgYGBganNcbiAgUHJvbWlzZS5hbGwoW1xuICAgIGdldEpTT04oJy9wb3N0cycpLFxuICAgIGdldEpTT04oJy9jb21tZW50cycpXG4gIF0pLnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcbiAgICB2YWx1ZXNbMF0gLy8gPT4gcG9zdHNKU09OXG4gICAgdmFsdWVzWzFdIC8vID0+IGNvbW1lbnRzSlNPTlxuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSk7XG4gIGBgYFxuXG4gIEBjbGFzcyBQcm9taXNlXG4gIEBwYXJhbSB7ZnVuY3Rpb259IHJlc29sdmVyXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQGNvbnN0cnVjdG9yXG4qL1xuZnVuY3Rpb24gUHJvbWlzZShyZXNvbHZlcikge1xuICB0aGlzW1BST01JU0VfSURdID0gbmV4dElkKCk7XG4gIHRoaXMuX3Jlc3VsdCA9IHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkO1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuXG4gIGlmIChub29wICE9PSByZXNvbHZlcikge1xuICAgIHR5cGVvZiByZXNvbHZlciAhPT0gJ2Z1bmN0aW9uJyAmJiBuZWVkc1Jlc29sdmVyKCk7XG4gICAgdGhpcyBpbnN0YW5jZW9mIFByb21pc2UgPyBpbml0aWFsaXplUHJvbWlzZSh0aGlzLCByZXNvbHZlcikgOiBuZWVkc05ldygpO1xuICB9XG59XG5cblByb21pc2UuYWxsID0gYWxsO1xuUHJvbWlzZS5yYWNlID0gcmFjZTtcblByb21pc2UucmVzb2x2ZSA9IHJlc29sdmU7XG5Qcm9taXNlLnJlamVjdCA9IHJlamVjdDtcblByb21pc2UuX3NldFNjaGVkdWxlciA9IHNldFNjaGVkdWxlcjtcblByb21pc2UuX3NldEFzYXAgPSBzZXRBc2FwO1xuUHJvbWlzZS5fYXNhcCA9IGFzYXA7XG5cblByb21pc2UucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUHJvbWlzZSxcblxuICAvKipcbiAgICBUaGUgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCxcbiAgICB3aGljaCByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZVxuICAgIHJlYXNvbiB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24odXNlcil7XG4gICAgICAvLyB1c2VyIGlzIGF2YWlsYWJsZVxuICAgIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyB1c2VyIGlzIHVuYXZhaWxhYmxlLCBhbmQgeW91IGFyZSBnaXZlbiB0aGUgcmVhc29uIHdoeVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBDaGFpbmluZ1xuICAgIC0tLS0tLS0tXG4gIFxuICAgIFRoZSByZXR1cm4gdmFsdWUgb2YgYHRoZW5gIGlzIGl0c2VsZiBhIHByb21pc2UuICBUaGlzIHNlY29uZCwgJ2Rvd25zdHJlYW0nXG4gICAgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZpcnN0IHByb21pc2UncyBmdWxmaWxsbWVudFxuICAgIG9yIHJlamVjdGlvbiBoYW5kbGVyLCBvciByZWplY3RlZCBpZiB0aGUgaGFuZGxlciB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIHVzZXIubmFtZTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZXR1cm4gJ2RlZmF1bHQgbmFtZSc7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodXNlck5hbWUpIHtcbiAgICAgIC8vIElmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgdXNlck5hbWVgIHdpbGwgYmUgdGhlIHVzZXIncyBuYW1lLCBvdGhlcndpc2UgaXRcbiAgICAgIC8vIHdpbGwgYmUgYCdkZWZhdWx0IG5hbWUnYFxuICAgIH0pO1xuICBcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknKTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BmaW5kVXNlcmAgcmVqZWN0ZWQgYW5kIHdlJ3JlIHVuaGFwcHknKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIGlmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgcmVhc29uYCB3aWxsIGJlICdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScuXG4gICAgICAvLyBJZiBgZmluZFVzZXJgIHJlamVjdGVkLCBgcmVhc29uYCB3aWxsIGJlICdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jy5cbiAgICB9KTtcbiAgICBgYGBcbiAgICBJZiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIGRvZXMgbm90IHNwZWNpZnkgYSByZWplY3Rpb24gaGFuZGxlciwgcmVqZWN0aW9uIHJlYXNvbnMgd2lsbCBiZSBwcm9wYWdhdGVkIGZ1cnRoZXIgZG93bnN0cmVhbS5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBQZWRhZ29naWNhbEV4Y2VwdGlvbignVXBzdHJlYW0gZXJyb3InKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gVGhlIGBQZWRnYWdvY2lhbEV4Y2VwdGlvbmAgaXMgcHJvcGFnYXRlZCBhbGwgdGhlIHdheSBkb3duIHRvIGhlcmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQXNzaW1pbGF0aW9uXG4gICAgLS0tLS0tLS0tLS0tXG4gIFxuICAgIFNvbWV0aW1lcyB0aGUgdmFsdWUgeW91IHdhbnQgdG8gcHJvcGFnYXRlIHRvIGEgZG93bnN0cmVhbSBwcm9taXNlIGNhbiBvbmx5IGJlXG4gICAgcmV0cmlldmVkIGFzeW5jaHJvbm91c2x5LiBUaGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXR1cm5pbmcgYSBwcm9taXNlIGluIHRoZVxuICAgIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBoYW5kbGVyLiBUaGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgdGhlbiBiZSBwZW5kaW5nXG4gICAgdW50aWwgdGhlIHJldHVybmVkIHByb21pc2UgaXMgc2V0dGxlZC4gVGhpcyBpcyBjYWxsZWQgKmFzc2ltaWxhdGlvbiouXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAgIC8vIFRoZSB1c2VyJ3MgY29tbWVudHMgYXJlIG5vdyBhdmFpbGFibGVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgSWYgdGhlIGFzc2ltbGlhdGVkIHByb21pc2UgcmVqZWN0cywgdGhlbiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgYWxzbyByZWplY3QuXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgZnVsZmlsbHMsIHdlJ2xsIGhhdmUgdGhlIHZhbHVlIGhlcmVcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIHJlamVjdHMsIHdlJ2xsIGhhdmUgdGhlIHJlYXNvbiBoZXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFNpbXBsZSBFeGFtcGxlXG4gICAgLS0tLS0tLS0tLS0tLS1cbiAgXG4gICAgU3luY2hyb25vdXMgRXhhbXBsZVxuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgbGV0IHJlc3VsdDtcbiAgXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZpbmRSZXN1bHQoKTtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgRXJyYmFjayBFeGFtcGxlXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFJlc3VsdChmdW5jdGlvbihyZXN1bHQsIGVycil7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH1cbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgUHJvbWlzZSBFeGFtcGxlO1xuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgZmluZFJlc3VsdCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBBZHZhbmNlZCBFeGFtcGxlXG4gICAgLS0tLS0tLS0tLS0tLS1cbiAgXG4gICAgU3luY2hyb25vdXMgRXhhbXBsZVxuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgbGV0IGF1dGhvciwgYm9va3M7XG4gIFxuICAgIHRyeSB7XG4gICAgICBhdXRob3IgPSBmaW5kQXV0aG9yKCk7XG4gICAgICBib29rcyAgPSBmaW5kQm9va3NCeUF1dGhvcihhdXRob3IpO1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfVxuICAgIGBgYFxuICBcbiAgICBFcnJiYWNrIEV4YW1wbGVcbiAgXG4gICAgYGBganNcbiAgXG4gICAgZnVuY3Rpb24gZm91bmRCb29rcyhib29rcykge1xuICBcbiAgICB9XG4gIFxuICAgIGZ1bmN0aW9uIGZhaWx1cmUocmVhc29uKSB7XG4gIFxuICAgIH1cbiAgXG4gICAgZmluZEF1dGhvcihmdW5jdGlvbihhdXRob3IsIGVycil7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmaW5kQm9vb2tzQnlBdXRob3IoYXV0aG9yLCBmdW5jdGlvbihib29rcywgZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm91bmRCb29rcyhib29rcyk7XG4gICAgICAgICAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgZmFpbHVyZShyZWFzb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBQcm9taXNlIEV4YW1wbGU7XG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBmaW5kQXV0aG9yKCkuXG4gICAgICB0aGVuKGZpbmRCb29rc0J5QXV0aG9yKS5cbiAgICAgIHRoZW4oZnVuY3Rpb24oYm9va3Mpe1xuICAgICAgICAvLyBmb3VuZCBib29rc1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIHRoZW5cbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZ1bGZpbGxlZFxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0ZWRcbiAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgdGhlbjogdGhlbixcblxuICAvKipcbiAgICBgY2F0Y2hgIGlzIHNpbXBseSBzdWdhciBmb3IgYHRoZW4odW5kZWZpbmVkLCBvblJlamVjdGlvbilgIHdoaWNoIG1ha2VzIGl0IHRoZSBzYW1lXG4gICAgYXMgdGhlIGNhdGNoIGJsb2NrIG9mIGEgdHJ5L2NhdGNoIHN0YXRlbWVudC5cbiAgXG4gICAgYGBganNcbiAgICBmdW5jdGlvbiBmaW5kQXV0aG9yKCl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkbid0IGZpbmQgdGhhdCBhdXRob3InKTtcbiAgICB9XG4gIFxuICAgIC8vIHN5bmNocm9ub3VzXG4gICAgdHJ5IHtcbiAgICAgIGZpbmRBdXRob3IoKTtcbiAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9XG4gIFxuICAgIC8vIGFzeW5jIHdpdGggcHJvbWlzZXNcbiAgICBmaW5kQXV0aG9yKCkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEBtZXRob2QgY2F0Y2hcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGlvblxuICAgIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuICAnY2F0Y2gnOiBmdW5jdGlvbiBfY2F0Y2gob25SZWplY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0aW9uKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gICAgdmFyIGxvY2FsID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGxvY2FsID0gZ2xvYmFsO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGxvY2FsID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9jYWwgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvbHlmaWxsIGZhaWxlZCBiZWNhdXNlIGdsb2JhbCBvYmplY3QgaXMgdW5hdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFAgPSBsb2NhbC5Qcm9taXNlO1xuXG4gICAgaWYgKFApIHtcbiAgICAgICAgdmFyIHByb21pc2VUb1N0cmluZyA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcm9taXNlVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUC5yZXNvbHZlKCkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBzaWxlbnRseSBpZ25vcmVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvbWlzZVRvU3RyaW5nID09PSAnW29iamVjdCBQcm9taXNlXScgJiYgIVAuY2FzdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9jYWwuUHJvbWlzZSA9IFByb21pc2U7XG59XG5cbi8vIFN0cmFuZ2UgY29tcGF0Li5cblByb21pc2UucG9seWZpbGwgPSBwb2x5ZmlsbDtcblByb21pc2UuUHJvbWlzZSA9IFByb21pc2U7XG5cbnJldHVybiBQcm9taXNlO1xuXG59KSkpO1xuXG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se1wiX3Byb2Nlc3NcIjo5fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyB0aGUgd2hhdHdnLWZldGNoIHBvbHlmaWxsIGluc3RhbGxzIHRoZSBmZXRjaCgpIGZ1bmN0aW9uXG4vLyBvbiB0aGUgZ2xvYmFsIG9iamVjdCAod2luZG93IG9yIHNlbGYpXG4vL1xuLy8gUmV0dXJuIHRoYXQgYXMgdGhlIGV4cG9ydCBmb3IgdXNlIGluIFdlYnBhY2ssIEJyb3dzZXJpZnkgZXRjLlxucmVxdWlyZSgnd2hhdHdnLWZldGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHNlbGYuZmV0Y2guYmluZChzZWxmKTtcblxufSx7XCJ3aGF0d2ctZmV0Y2hcIjoxMH1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxufSx7fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uKHNlbGYpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmIChzZWxmLmZldGNoKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3VwcG9ydCA9IHtcbiAgICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXG4gICAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gICAgYmxvYjogJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiYgJ0Jsb2InIGluIHNlbGYgJiYgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gICAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG4gIH1cblxuICBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICAgIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICAgIF1cblxuICAgIHZhciBpc0RhdGFWaWV3ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbiAgICB9XG5cbiAgICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPSBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHZpZXdDbGFzc2VzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpID4gLTFcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLlxcXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICAvLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuICBmdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpdGVyYXRvclxuICB9XG5cbiAgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgdGhpcy5tYXAgPSB7fVxuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgICB9LCB0aGlzKVxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gICAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUrJywnK3ZhbHVlIDogdmFsdWVcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICAgIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgICAgaWYgKHRoaXMubWFwLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IGl0ZW1zLnB1c2gobmFtZSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkgeyBpdGVtcy5wdXNoKHZhbHVlKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICAgIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gICAgfVxuICAgIGJvZHkuYm9keVVzZWQgPSB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgICB9XG4gICAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICAgIHJldHVybiBwcm9taXNlXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICAgIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gICAgfVxuICAgIHJldHVybiBjaGFycy5qb2luKCcnKVxuICB9XG5cbiAgZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gICAgaWYgKGJ1Zi5zbGljZSkge1xuICAgICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKVxuICAgICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIEJvZHkoKSB7XG4gICAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgICAgaWYgKCFib2R5KSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgICAvLyBJRSAxMC0xMSBjYW4ndCBoYW5kbGUgYSBEYXRhVmlldyBib2R5LlxuICAgICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgQm9keUluaXQgdHlwZScpXG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKVxuICAgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHJldHVybiBjb25zdW1lZCh0aGlzKSB8fCBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxuICB2YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgcmV0dXJuIChtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSkgPyB1cGNhc2VkIDogbWV0aG9kXG4gIH1cblxuICBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgICB9XG4gICAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgICAgfVxuICAgICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVybCA9IFN0cmluZyhpbnB1dClcbiAgICB9XG5cbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdvbWl0J1xuICAgIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gICAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICAgIH1cbiAgICB0aGlzLl9pbml0Qm9keShib2R5KVxuICB9XG5cbiAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywgeyBib2R5OiB0aGlzLl9ib2R5SW5pdCB9KVxuICB9XG5cbiAgZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gICAgYm9keS50cmltKCkuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBmb3JtXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAgIHJhd0hlYWRlcnMuc3BsaXQoL1xccj9cXG4vKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBoZWFkZXJzXG4gIH1cblxuICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbiAgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7fVxuICAgIH1cblxuICAgIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICAgIHRoaXMuc3RhdHVzID0gJ3N0YXR1cycgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzIDogMjAwXG4gICAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICAgIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJ1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gICAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG4gIH1cblxuICBCb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG4gIFJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgICAgdXJsOiB0aGlzLnVybFxuICAgIH0pXG4gIH1cblxuICBSZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gICAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxuXG4gIHZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG4gIFJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG4gIH1cblxuICBzZWxmLkhlYWRlcnMgPSBIZWFkZXJzXG4gIHNlbGYuUmVxdWVzdCA9IFJlcXVlc3RcbiAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlXG5cbiAgc2VsZi5mZXRjaCA9IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMudXJsID0gJ3Jlc3BvbnNlVVJMJyBpbiB4aHIgPyB4aHIucmVzcG9uc2VVUkwgOiBvcHRpb25zLmhlYWRlcnMuZ2V0KCdYLVJlcXVlc3QtVVJMJylcbiAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKVxuXG4gICAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgICB9KVxuXG4gICAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICAgIH0pXG4gIH1cbiAgc2VsZi5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzKTtcblxufSx7fV19LHt9LFszXSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0poY0hBdmFuTXZZV0p2ZFhRdWFuTWlMQ0poY0hBdmFuTXZiR0Z1WkdsdVp5NXFjeUlzSW1Gd2NDOXFjeTl0WVdsdUxtcHpJaXdpWVhCd0wycHpMM0J5YjJwbFkzUnpMbXB6SWl3aVlYQndMMnB6TDNOd1lTNXFjeUlzSW1Gd2NDOXFjeTkxZEdsc2N5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWxjell0Y0hKdmJXbHpaUzlrYVhOMEwyVnpOaTF3Y205dGFYTmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMmx6YjIxdmNuQm9hV010Wm1WMFkyZ3ZabVYwWTJndGJuQnRMV0p5YjNkelpYSnBabmt1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12Y0hKdlkyVnpjeTlpY205M2MyVnlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMM2RvWVhSM1p5MW1aWFJqYUM5bVpYUmphQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUczdPenM3TzJ0Q1EwVjNRaXhaT3p0QlFVWjRRanM3UVVGRlpTeFRRVUZUTEZsQlFWUXNSMEZCZDBJN08wRkJSWEpETzBGQlEwRTdRVUZEUVN4TlFVRk5MRmRCUVZjc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEhOQ1FVRjJRaXhEUVVGcVFqdEJRVU5CTEZkQlFWTXNaMEpCUVZRc1EwRkJNRUlzVDBGQk1VSXNSVUZCYlVNc1dVRkJWenRCUVVNMVF5dzBRa0ZCV1N4TFFVRkxMRlZCUVdwQ08wRkJRMFFzUjBGR1JDeEZRVVZITEV0QlJrZzdRVUZIUkRzN096czdPenM3YTBKRFVuVkNMR003TzBGQlJuaENPenRCUVVWbExGTkJRVk1zWTBGQlZDeEhRVUV3UWpzN1FVRkZka003UVVGRFFTeFRRVUZQTEdkQ1FVRlFMRU5CUVhkQ0xGRkJRWGhDTzBGQlJVUTdPenM3TzBGRFVFUTdPMEZCUTBFN08wRkJSVUVzUTBGQlF5eFpRVUZOT3p0QlFVVk1PMEZCUTBFc1RVRkJUU3hUUVVGVExGTkJRVk1zWVVGQlZDeERRVUYxUWl4UlFVRjJRaXhEUVVGbU8wRkJRMEVzVFVGQlRTeGpRVUZqTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXh0UWtGQmRrSXNRMEZCY0VJN1FVRkRRU3hOUVVGTkxFOUJRVThzVTBGQlV5eGhRVUZVTEVOQlFYVkNMRlZCUVhaQ0xFTkJRV0k3UVVGRFFTeE5RVUZOTEU5QlFVOHNVMEZCVXl4aFFVRlVMRU5CUVhWQ096dEJRVVZ3UXp0QlFVWmhMRWRCUVdJc1EwRkhRU3hKUVVGTkxHRkJRV0VzVTBGQllpeFZRVUZoTEVkQlFVMDdRVUZEZGtJc1VVRkJTU3hQUVVGUExGTkJRVkFzUTBGQmFVSXNVVUZCYWtJc1EwRkJNRUlzVjBGQk1VSXNRMEZCU2l4RlFVRTBRenRCUVVNeFF5eGhRVUZQTEZOQlFWQXNRMEZCYVVJc1RVRkJha0lzUTBGQmQwSTdRVUZEZUVJN1FVRkVRVHRCUVVWRUxFdEJTRVFzVFVGSFR6dEJRVU5NTEdGQlFVOHNVMEZCVUN4RFFVRnBRaXhIUVVGcVFpeERRVUZ4UWp0QlFVTnlRanRCUVVSQk8wRkJSVVE3UVVGRFJpeEhRVkpFT3p0QlFWVkJMRTFCUVUwc1lVRkJZU3hUUVVGaUxGVkJRV0VzUTBGQlF5eERRVUZFTEVWQlFVODdRVUZEZUVJc1VVRkJTU3hGUVVGRkxFMUJRVVlzU1VGQldTeEZRVUZGTEUxQlFVWXNRMEZCVXl4UlFVRlVMRXRCUVhOQ0xFZEJRWFJETEVWQlFUSkRPMEZCUTNwRExGRkJRVVVzWTBGQlJqdEJRVU5CTzBGQlEwRXNWVUZCU1N4RlFVRkZMRTFCUVVZc1EwRkJVeXhSUVVGVUxFdEJRWE5DTEU5QlFVOHNVVUZCVUN4RFFVRm5RaXhSUVVFeFF5eEZRVUZ2UkR0QlFVTnNSQ3huUWtGQlVTeFRRVUZTTEVOQlFXdENMRWxCUVd4Q0xFVkJRWGRDTEVsQlFYaENMRVZCUVRoQ0xFVkJRVVVzVFVGQlJpeERRVUZUTEZGQlFYWkRPMEZCUTBFN1FVRkRSRHRCUVVOR08wRkJRMFlzUjBGVVJEczdRVUZYUVR0QlFVTkJMR05CUVZrc1owSkJRVm9zUTBGQk5rSXNUMEZCTjBJc1JVRkJjME1zVlVGQmRFTTdRVUZEUVN4UFFVRkxMR2RDUVVGTUxFTkJRWE5DTEU5QlFYUkNMRVZCUVN0Q0xGVkJRUzlDTzBGQlJVUXNRMEZzUTBRN096czdPenM3TzJ0Q1EwRjNRaXhsT3p0QlFVaDRRanM3UVVGRlFUdEJRVU5sTEZOQlFWTXNaVUZCVkN4SFFVRXlRanM3UVVGRmVFTTdRVUZEUVR0QlFVTkJMRTFCUVUwc1YwRkJWeXhUUVVGVExHRkJRVlFzUTBGQmRVSXNjMEpCUVhaQ0xFTkJRV3BDTzBGQlEwRXNWMEZCVXl4blFrRkJWQ3hEUVVFd1FpeFBRVUV4UWl4RlFVRnRReXhaUVVGWE8wRkJRelZETERSQ1FVRlpMRXRCUVVzc1ZVRkJha0k3UVVGRFJEczdRVUZGUkR0QlFVcEJMRWxCUzBFc1NVRkJUU3hYUVVGWExFMUJRVTBzU1VGQlRpeERRVUZYTEZOQlFWTXNaMEpCUVZRc1EwRkJNRUlzWVVGQk1VSXNRMEZCV0N4RFFVRnFRanRCUVVOQkxGZEJRVk1zVDBGQlZDeERRVUZwUWl4dFFrRkJWenRCUVVNeFFpeFJRVUZOTEdGQlFXRXNVVUZCVVN4aFFVRlNMRU5CUVhOQ0xITkNRVUYwUWl4RFFVRnVRanRCUVVOQkxHVkJRVmNzWjBKQlFWZ3NRMEZCTkVJc1QwRkJOVUlzUlVGQmNVTXNZVUZCY2tNN08wRkJSVUVzVVVGQlRTeFpRVUZaTEZGQlFWRXNZVUZCVWl4RFFVRnpRaXh4UWtGQmRFSXNRMEZCYkVJN1FVRkRRU3hqUVVGVkxHZENRVUZXTEVOQlFUSkNMRTlCUVROQ0xFVkJRVzlETEZsQlFYQkRPMEZCUTBRc1IwRk9SRHM3UVVGUlFTeFhRVUZUTEZsQlFWUXNSMEZCZDBJN1FVRkRkRUlzVVVGQlRTeFZRVUZWTEV0QlFVc3NWVUZCY2tJN1FVRkRRU3hSUVVGTkxFOUJRVThzVVVGQlVTeHpRa0ZCY2tJN1FVRkRRU3haUVVGUkxFdEJRVklzUTBGQll5eFRRVUZrTEVkQlFUQkNMRU5CUVRGQ08wRkJRMEVzV1VGQlVTeFRRVUZTTEVOQlFXdENMRTFCUVd4Q0xFTkJRWGxDTERSQ1FVRjZRanRCUVVOQkxGTkJRVXNzVTBGQlRDeERRVUZsTEUxQlFXWXNRMEZCYzBJc0swSkJRWFJDTzBGQlEwUTdPMEZCUlVRc1YwRkJVeXhoUVVGVUxFZEJRWGxDTzBGQlEzWkNMRk5CUVVzc1UwRkJUQ3hEUVVGbExFMUJRV1lzUTBGQmMwSXNLMEpCUVhSQ08wRkJRMEVzVVVGQlRTeFZRVUZWTEV0QlFVc3NhMEpCUVhKQ08wRkJRMEVzVVVGQlRTeGhRVUZoTEZGQlFWRXNVMEZCVWl4RFFVRnJRaXhSUVVGc1FpeERRVUV5UWl3MFFrRkJNMElzUTBGQmJrSTdRVUZEUVN4WlFVRlJMRk5CUVZJc1EwRkJhMElzVFVGQmJFSXNRMEZCZVVJc05FSkJRWHBDTzBGQlEwRXNXVUZCVVN4TFFVRlNMRU5CUVdNc1UwRkJaQ3hIUVVFd1FpeGhRVUZoTEVOQlFXSXNSMEZCYjBJc1VVRkJVU3haUVVFMVFpeFBRVUV4UWp0QlFVTkVPMEZCUlVZN096czdPenM3T3pzN1FVTjBRMFE3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRlFUdEJRVU5CTEZGQlFWRXNZVUZCVWl4RlFVRjFRaXhSUVVGMlFqdEJRVU5CTEZGQlFWRTdPMEZCUlZJN1FVRkdRU3hGUVVkUExFbEJRVTBzTkVOQlFXdENMRk5CUVd4Q0xHVkJRV3RDTEVkQlFVMDdRVUZEYmtNc1RVRkJUU3hQUVVGUExFOUJRVThzVVVGQlVDeERRVUZuUWl4UlFVRTNRanRCUVVOQkxGTkJRVThzYlVKQlFWQXNRMEZCTWtJc1VVRkJNMEk3UVVGRFFTeE5RVUZKTEZOQlFWTXNSMEZCVkN4SlFVRm5RaXhUUVVGVExHRkJRVGRDTEVWQlFUUkRPMEZCUXpGRE8wRkJRMFFzUjBGR1JDeE5RVVZQTEVsQlFVa3NTMEZCU3l4VlFVRk1MRU5CUVdkQ0xGRkJRV2hDTEVOQlFVb3NSVUZCSzBJN1FVRkRjRU03UVVGRFJDeEhRVVpOTEUxQlJVRXNTVUZCU1N4TFFVRkxMRlZCUVV3c1EwRkJaMElzVjBGQmFFSXNRMEZCU2l4RlFVRnJRenRCUVVOMlF6dEJRVU5FTzBGQlEwWXNRMEZXVFRzN1FVRlpVRHRCUVVOUExFbEJRVTBzYTBOQlFXRXNVMEZCWWl4VlFVRmhMRWRCUVUwN1FVRkRPVUlzVFVGQlRTeE5RVUZOTEU5QlFVOHNVVUZCVUN4RFFVRm5RaXhKUVVFMVFqdEJRVU5CTEZkQlFWTXNSMEZCVkN4RlFVRmpMRWxCUVdRc1EwRkJiVUlzVlVGQlF5eFpRVUZFTEVWQlFXdENPMEZCUTI1RExGRkJRVTBzV1VGQldTeFRRVUZUTEdGQlFWUXNRMEZCZFVJc1RVRkJka0lzUTBGQmJFSTdRVUZEUVN4alFVRlZMRk5CUVZZc1IwRkJjMElzV1VGQmRFSTdRVUZEUVN4UlFVRk5MRlZCUVZVc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEU5QlFYWkNMRU5CUVdoQ08wRkJRMEVzVVVGQlRTeFZRVUZWTEZWQlFWVXNZVUZCVml4RFFVRjNRaXhQUVVGNFFpeERRVUZvUWp0QlFVTkJMRkZCUVUwc1YwRkJWeXhWUVVGVkxHOUNRVUZXTEVOQlFTdENMRTlCUVM5Q0xFVkJRWGRETEVOQlFYaERMRVZCUVRKRExGZEJRVFZFTzBGQlEwRXNVVUZCVFN4VlFVRlZMRlZCUVZVc2IwSkJRVllzUTBGQkswSXNUVUZCTDBJc1JVRkJkVU1zWVVGQmRrTXNSVUZCYzBRc1QwRkJkRVU3UVVGRFFTeFpRVUZSTEVkQlFWSXNRMEZCV1N4UFFVRmFPMEZCUTBFc1dVRkJVU3hWUVVGU0xFTkJRVzFDTEZsQlFXNUNMRU5CUVdkRExFOUJRV2hETEVWQlFYbERMRTlCUVhwRE8wRkJRMEVzWVVGQlV5eExRVUZVTEVkQlFXbENMRkZCUVdwQ08wRkJRMEVzWVVGQlV5eHZRa0ZCVkN4RFFVRTRRaXhOUVVFNVFpeEZRVUZ6UXl4aFFVRjBReXhGUVVGeFJDeFBRVUZ5UkN4SFFVRXJSQ3hQUVVFdlJEdEJRVU5CTEhWQ1FVRlBMRTlCUVZBN1FVRkRRVHRCUVVORUxFZEJZa1E3UVVGalJDeERRV2hDVFRzN1FVRnJRbEE3UVVGRFFTeEpRVUZOTEZGQlFWRXNSVUZCWkR0QlFVTkJMRk5CUVZNc1VVRkJWQ3hEUVVGclFpeEhRVUZzUWl4RlFVRjFRanRCUVVOeVFpeE5RVUZKTEUxQlFVMHNSMEZCVGl4RFFVRktMRVZCUVdkQ08wRkJRMlFzVjBGQlR5eFJRVUZSTEU5QlFWSXNRMEZCWjBJc1RVRkJUU3hIUVVGT0xFTkJRV2hDTEVOQlFWQTdRVUZEUkR0QlFVTkVMRk5CUVU4c1RVRkJUU3hIUVVGT0xFVkJRMG9zU1VGRVNTeERRVU5ETEZWQlFVTXNVVUZCUkN4RlFVRmpPMEZCUTJ4Q0xGRkJRVWtzVTBGQlV5eEZRVUZpTEVWQlFXbENPMEZCUTJZc1dVRkJUU3hIUVVGT0xFbEJRV0VzVTBGQlV5eEpRVUZVTEVWQlFXSTdRVUZEUVN4aFFVRlBMRTFCUVUwc1IwRkJUaXhEUVVGUU8wRkJRMFFzUzBGSVJDeE5RVWRQTzBGQlEwd3NZMEZCVVN4SFFVRlNMRU5CUVZrc09FSkJRVm83UVVGRFJEdEJRVU5HTEVkQlVra3NSVUZUU2l4TFFWUkpMRU5CVTBVc1ZVRkJReXhIUVVGRU8wRkJRVUVzVjBGQlV5eFJRVUZSTEVkQlFWSXNNRU5CUVcxRUxFZEJRVzVFTEZkQlFUUkVMRWxCUVVrc1QwRkJhRVVzUTBGQlZEdEJRVUZCTEVkQlZFWXNRMEZCVUR0QlFWVkVPenRCUVVWRU8wRkJRMEVzVDBGQlR5eG5Ra0ZCVUN4RFFVRjNRaXhWUVVGNFFpeEZRVUZ2UXl4VlFVRndRenM3T3pzN096czdRVU0xUkVFN1FVRkRRU3hKUVVGTkxGTkJRVk1zVTBGQlZDeE5RVUZUTEVOQlFVTXNRMEZCUkR0QlFVRkJMRk5CUVU4c1EwRkJVRHRCUVVGQkxFTkJRV1k3UVVGRFFTeEpRVUZOTEdGQlFXRXNVMEZCWWl4VlFVRmhMRU5CUVVNc1EwRkJSRHRCUVVGQkxGTkJRVThzU1VGQlJTeERRVUZVTzBGQlFVRXNRMEZCYmtJN1FVRkRRU3hKUVVGTkxHTkJRV01zVTBGQlpDeFhRVUZqTEVOQlFVTXNRMEZCUkR0QlFVRkJMRk5CUVU4c1MwRkJSeXhKUVVGRkxFTkJRVXdzUTBGQlVEdEJRVUZCTEVOQlFYQkNPMEZCUTBFc1NVRkJUU3huUWtGQlowSXNVMEZCYUVJc1lVRkJaMElzUTBGQlF5eERRVUZFTzBGQlFVRXNVMEZCVHl4SlFVRkZMRVZCUVVZc1IwRkJVU3hKUVVGRkxFTkJRVVlzUjBGQlNTeERRVUZhTEVkQlFXdENMRU5CUVVNc1EwRkJSQ3hIUVVGSExFTkJRVU1zU1VGQlJTeEpRVUZGTEVOQlFVd3NTVUZCVVN4RFFVRndRenRCUVVGQkxFTkJRWFJDTzBGQlEwRXNTVUZCVFN4alFVRmpMRk5CUVdRc1YwRkJZeXhEUVVGRExFTkJRVVE3UVVGQlFTeFRRVUZQTEVsQlFVVXNRMEZCUml4SFFVRkpMRU5CUVZnN1FVRkJRU3hEUVVGd1FqdEJRVU5CTEVsQlFVMHNaVUZCWlN4VFFVRm1MRmxCUVdVc1EwRkJReXhEUVVGRU8wRkJRVUVzVTBGQlVTeEZRVUZGTEVOQlFVZ3NSMEZCVFN4RFFVRk9MRWRCUVZFc1EwRkJVaXhIUVVGVkxFTkJRV3BDTzBGQlFVRXNRMEZCY2tJN1FVRkRRU3hKUVVGTkxHbENRVUZwUWl4VFFVRnFRaXhqUVVGcFFpeERRVUZETEVOQlFVUTdRVUZCUVN4VFFVRlBMRWxCUVVVc1JVRkJSaXhIUVVGUkxFbEJRVVVzUTBGQlJpeEhRVUZKTEVOQlFVb3NSMEZCVFN4RFFVRmtMRWRCUVc5Q0xFTkJRVU1zU1VGQlJTeERRVUZJTEV0QlFVOHNTVUZCUlN4RFFVRkdMRWRCUVVrc1EwRkJXQ3hMUVVGbExFbEJRVVVzUTBGQlJpeEhRVUZKTEVOQlFXNUNMRWxCUVhOQ0xFTkJRV3BFTzBGQlFVRXNRMEZCZGtJN1FVRkRRU3hKUVVGTkxHTkJRV01zVTBGQlpDeFhRVUZqTEVOQlFVTXNRMEZCUkR0QlFVRkJMRk5CUVU4c1NVRkJSU3hEUVVGR0xFZEJRVWtzUTBGQlNpeEhRVUZOTEVOQlFXSTdRVUZCUVN4RFFVRndRanRCUVVOQkxFbEJRVTBzWlVGQlpTeFRRVUZtTEZsQlFXVXNRMEZCUXl4RFFVRkVPMEZCUVVFc1UwRkJUeXhKUVVGSExFVkJRVVVzUTBGQlNDeEhRVUZOTEVOQlFVNHNSMEZCVVN4RFFVRlNMRWRCUVZVc1EwRkJia0k3UVVGQlFTeERRVUZ5UWp0QlFVTkJMRWxCUVUwc2FVSkJRV2xDTEZOQlFXcENMR05CUVdsQ0xFTkJRVU1zUTBGQlJEdEJRVUZCTEZOQlFVOHNTVUZCUlN4RlFVRkdMRWRCUVZFc1NVRkJSU3hEUVVGR0xFZEJRVWtzUTBGQlNpeEhRVUZOTEVOQlFVNHNSMEZCVVN4RFFVRm9RaXhIUVVGelFpeEpRVUZGTEVsQlFVY3NSVUZCUlN4RFFVRk1MRWRCUVZFc1EwRkJVaXhIUVVGVkxFTkJRVllzUjBGQldTeERRVUV6UXp0QlFVRkJMRU5CUVhaQ096dEJRVVZCTzBGQlEwOHNTVUZCVFN4dlEwRkJZeXhUUVVGa0xGZEJRV01zUTBGQlF5eEZRVUZFTEVWQlFYbENPMEZCUVVFc1RVRkJjRUlzVVVGQmIwSXNkVVZCUVZRc1NVRkJVenM3UVVGRGJFUXNUVUZCVFN4VFFVRlRMRWRCUVVjc1dVRkJiRUk3UVVGRFFTeE5RVUZOTEZGQlFWRXNTMEZCU3l4SFFVRk1MRVZCUVdRN1FVRkRRU3hOUVVGTkxGTkJRVk1zVTBGQlZDeE5RVUZUTEVkQlFVMDdRVUZEYmtJc1VVRkJUU3hOUVVGTkxFdEJRVXNzUjBGQlRDeEZRVUZhTzBGQlEwRXNVVUZCVFN4UFFVRlBMRU5CUVVNc1RVRkJUU3hMUVVGUUxFbEJRV2RDTEZGQlFUZENPMEZCUTBNc1VVRkJUU3hUUVVGVExHRkJRV0VzU1VGQllpeERRVUZtTzBGQlEwUXNUMEZCUnl4VFFVRklMRWRCUVdkQ0xGVkJRVlVzU1VGQlNTeE5RVUZrTEVOQlFVUXNSMEZCTUVJc1RVRkJla003UVVGRFFTeFJRVUZKTEVkQlFVY3NVMEZCU0N4TFFVRnBRaXhEUVVGeVFpeEZRVUYzUWp0QlFVTjRRaXd3UWtGQmMwSXNUVUZCZEVJN1FVRkRSQ3hIUVZCRU8wRkJVVUU3UVVGRFJDeERRVnBOT3p0QlFXTlFPMEZCUTA4c1NVRkJUU3d3UWtGQlV5eFRRVUZVTEUxQlFWTXNRMEZCUXl4RlFVRkVMRVZCUVhsQ08wRkJRVUVzVFVGQmNFSXNVVUZCYjBJc2RVVkJRVlFzU1VGQlV6czdRVUZETjBNc1MwRkJSeXhMUVVGSUxFTkJRVk1zVDBGQlZDeEhRVUZ0UWl4RFFVRnVRanRCUVVOQkxFMUJRVTBzVTBGQlV5eERRVUZtTzBGQlEwRXNUVUZCVFN4UlFVRlJMRXRCUVVzc1IwRkJUQ3hGUVVGa08wRkJRMEVzVFVGQlRTeFBRVUZQTEZOQlFWQXNTVUZCVHl4SFFVRk5PMEZCUTJwQ0xGRkJRVTBzVFVGQlRTeExRVUZMTEVkQlFVd3NSVUZCV2p0QlFVTkJMRkZCUVUwc1QwRkJUeXhEUVVGRExFMUJRVTBzUzBGQlVDeEpRVUZuUWl4UlFVRTNRanRCUVVOQkxGRkJRVTBzVTBGQlV5eFpRVUZaTEVsQlFWb3NRMEZCWmp0QlFVTkJMRTlCUVVjc1MwRkJTQ3hEUVVGVExFOUJRVlFzUjBGQmJVSXNUVUZCYmtJN1FVRkRRU3hSUVVGSkxFZEJRVWNzUzBGQlNDeERRVUZUTEU5QlFWUXNSMEZCYlVJc1MwRkJka0lzUlVGQk9FSTdRVUZETlVJc1UwRkJSeXhMUVVGSUxFTkJRVk1zVDBGQlZDeEhRVUZ0UWl4RFFVRnVRanRCUVVOQk8wRkJRMFE3UVVGRFJDd3dRa0ZCYzBJc1NVRkJkRUk3UVVGRFJDeEhRVlpFTzBGQlYwRTdRVUZEUkN4RFFXaENUVHM3UVVGclFsQTdRVUZEVHl4SlFVRk5MRFJDUVVGVkxGTkJRVllzVDBGQlZTeERRVUZETEVWQlFVUXNSVUZCZVVJN1FVRkJRU3hOUVVGd1FpeFJRVUZ2UWl4MVJVRkJWQ3hKUVVGVE96dEJRVU01UXl4TFFVRkhMRXRCUVVnc1EwRkJVeXhQUVVGVUxFZEJRVzFDTEVOQlFXNUNPMEZCUTBFc1RVRkJUU3hSUVVGUkxFdEJRVXNzUjBGQlRDeEZRVUZrTzBGQlEwRXNUVUZCVFN4UFFVRlBMRk5CUVZBc1NVRkJUeXhIUVVGTk8wRkJRMnBDTEZGQlFVMHNUVUZCVFN4TFFVRkxMRWRCUVV3c1JVRkJXanRCUVVOQkxGRkJRVTBzVDBGQlR5eEpRVUZMTEVOQlFVTXNUVUZCVFN4TFFVRlFMRWxCUVdkQ0xGRkJRV3hETzBGQlEwRXNVVUZCVFN4VFFVRlRMR0ZCUVdFc1NVRkJZaXhEUVVGbU8wRkJRMEVzVDBGQlJ5eExRVUZJTEVOQlFWTXNUMEZCVkN4SFFVRnRRaXhOUVVGdVFqdEJRVU5CTEZGQlFVa3NSMEZCUnl4TFFVRklMRU5CUVZNc1QwRkJWQ3hIUVVGdFFpeExRVUYyUWl4RlFVRTRRanRCUVVNMVFpeFRRVUZITEV0QlFVZ3NRMEZCVXl4UFFVRlVMRWRCUVcxQ0xFTkJRVzVDTzBGQlEwRTdRVUZEUkR0QlFVTkVMREJDUVVGelFpeEpRVUYwUWp0QlFVTkVMRWRCVmtRN1FVRlhRVHRCUVVORUxFTkJaazA3TzBGQmFVSkJMRWxCUVUwc09FSkJRVmNzVTBGQldDeFJRVUZYTEVkQlFVMDdRVUZETlVJc1RVRkJUU3hQUVVGUExGTkJRVk1zWVVGQlZDeERRVUYxUWl4WlFVRjJRaXhEUVVGaU8wRkJRMEVzVFVGQlRTeFRRVUZUTEZOQlFWUXNUVUZCVXl4SFFVRk5PMEZCUTI1Q0xGRkJRVWtzVVVGQlVTeExRVUZMTEZkQlFVd3NTMEZCY1VJc1NVRkJha01zUlVGQmRVTTdRVUZEY2tNc1ZVRkJTU3hQUVVGUExFOUJRVThzVlVGQlVDeEhRVUZ2UWl4UFFVRlBMRmRCUVhSRE8wRkJRMEVzVjBGQlN5eFhRVUZNTEVkQlFXMUNMRXRCUVVzc1kwRkJUQ3hGUVVGdVFqdEJRVU5FTzBGQlEwWXNSMEZNUkR0QlFVMUJMSGRDUVVGelFpeE5RVUYwUWp0QlFVTkVMRU5CVkUwN096czdRVU5vUlZBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVOMGIwTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGVFeEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUtHWjFibU4wYVc5dUlHVW9kQ3h1TEhJcGUyWjFibU4wYVc5dUlITW9ieXgxS1h0cFppZ2hibHR2WFNsN2FXWW9JWFJiYjEwcGUzWmhjaUJoUFhSNWNHVnZaaUJ5WlhGMWFYSmxQVDFjSW1aMWJtTjBhVzl1WENJbUpuSmxjWFZwY21VN2FXWW9JWFVtSm1FcGNtVjBkWEp1SUdFb2J5d2hNQ2s3YVdZb2FTbHlaWFIxY200Z2FTaHZMQ0V3S1R0MllYSWdaajF1WlhjZ1JYSnliM0lvWENKRFlXNXViM1FnWm1sdVpDQnRiMlIxYkdVZ0oxd2lLMjhyWENJblhDSXBPM1JvY205M0lHWXVZMjlrWlQxY0lrMVBSRlZNUlY5T1QxUmZSazlWVGtSY0lpeG1mWFpoY2lCc1BXNWJiMTA5ZTJWNGNHOXlkSE02ZTMxOU8zUmJiMTFiTUYwdVkyRnNiQ2hzTG1WNGNHOXlkSE1zWm5WdVkzUnBiMjRvWlNsN2RtRnlJRzQ5ZEZ0dlhWc3hYVnRsWFR0eVpYUjFjbTRnY3lodVAyNDZaU2w5TEd3c2JDNWxlSEJ2Y25SekxHVXNkQ3h1TEhJcGZYSmxkSFZ5YmlCdVcyOWRMbVY0Y0c5eWRITjlkbUZ5SUdrOWRIbHdaVzltSUhKbGNYVnBjbVU5UFZ3aVpuVnVZM1JwYjI1Y0lpWW1jbVZ4ZFdseVpUdG1iM0lvZG1GeUlHODlNRHR2UEhJdWJHVnVaM1JvTzI4ckt5bHpLSEpiYjEwcE8zSmxkSFZ5YmlCemZTa2lMQ0pwYlhCdmNuUWdleUJ6WTNKdmJHeFViMVJ2Y0NCOUlHWnliMjBnSnk0dmRYUnBiSE1uWEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUhKMWJrRmliM1YwVUdGblpTZ3BJSHRjYmx4dUlDQXZMeUJ6WlhRZ2RYQWdZWEp5YjNjZ0t5QnpZM0p2Ykd3Z2RHOGdkRzl3SUdaMWJtTjBhVzl1WEc0Z0lDOHZJRlJQUkU4NklHOXViSGtnYzJodmR5Qmhjbkp2ZHlCcFppQnVaV1ZrWldRZ1cyaGxhV2RvZENBK0lERXdNQ1VnZG1sbGQzQnZjblJkWEc0Z0lHTnZibk4wSUhSdmNFRnljbTkzSUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTG1wekxYQmhaMlZmWDJGeWNtOTNMUzEwYjNBbktWeHVJQ0IwYjNCQmNuSnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSE5qY205c2JGUnZWRzl3S0hSb2FYTXVjR0Z5Wlc1MFRtOWtaU2xjYmlBZ2ZTd2dabUZzYzJVcFhHNTlYRzRpTENKcGJYQnZjblFnZXlCbWFXNWtRWEpsWVNCOUlHWnliMjBnSnk0dmRYUnBiSE1uWEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUhKMWJreGhibVJwYm1kUVlXZGxLQ2tnZTF4dVhHNGdJR1pwYm1SQmNtVmhLQ2xjYmlBZ2QybHVaRzkzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNKbGMybDZaU2NzSUdacGJtUkJjbVZoS1Z4dVhHNTlYRzRpTENKcGJYQnZjblFnZXlCMWNHUmhkR1ZRWVdkbExDQnlkVzVPWlhkR2RXNWpkR2x2Ym5NZ2ZTQm1jbTl0SUNjdUwzTndZU2RjYm1sdGNHOXlkQ0I3SUdacGJtUkJjbVZoTENCbVlXUmxTVzRzSUdaaFpHVlBkWFFnZlNCbWNtOXRJQ2N1TDNWMGFXeHpKMXh1WEc0b0tDa2dQVDRnZTF4dVhHNGdJQzh2SUNCRVQwMGdaV3hsYldWdWRITmNiaUFnWTI5dWMzUWdhR1ZoWkdWeUlEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbmFHVmhaR1Z5SnlsY2JpQWdZMjl1YzNRZ2RISnBaMmRsY2sxbGJuVWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3Vhbk10ZEhKcFoyZGxjaTB0YldWdWRTY3BYRzRnSUdOdmJuTjBJRzFsYm5VZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWFuTXRiV1Z1ZFNjcFhHNGdJR052Ym5OMElIQmhaMlVnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1Y0dGblpTY3BYRzVjYmlBZ0x5OGdJR1oxYm1OMGFXOXVjMXh1SUNCamIyNXpkQ0IwYjJkbmJHVk5aVzUxSUQwZ0tDa2dQVDRnZTF4dUlDQWdJR2xtSUNob1pXRmtaWEl1WTJ4aGMzTk1hWE4wTG1OdmJuUmhhVzV6S0NkdFpXNTFMVzl3Wlc0bktTa2dlMXh1SUNBZ0lDQWdhR1ZoWkdWeUxtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0oyMWxiblV0YjNCbGJpY3BYRzRnSUNBZ0lDQXZMeUJtWVdSbFNXNG9jR0ZuWlNsY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdhR1ZoWkdWeUxtTnNZWE56VEdsemRDNWhaR1FvSjIxbGJuVXRiM0JsYmljcFhHNGdJQ0FnSUNBdkx5Qm1ZV1JsVDNWMEtIQmhaMlVzTVRBcFhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnWTJoaGJtZGxVR0ZuWlNBOUlDaGxLU0E5UGlCN1hHNGdJQ0FnYVdZZ0tHVXVkR0Z5WjJWMElDWW1JR1V1ZEdGeVoyVjBMbTV2WkdWT1lXMWxJRDA5UFNBblFTY3BJSHRjYmlBZ0lDQWdJR1V1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVnh1SUNBZ0lDQWdkRzluWjJ4bFRXVnVkU2dwWEc0Z0lDQWdJQ0JwWmlBb1pTNTBZWEpuWlhRdWNHRjBhRzVoYldVZ0lUMDlJSGRwYm1SdmR5NXNiMk5oZEdsdmJpNXdZWFJvYm1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0JvYVhOMGIzSjVMbkIxYzJoVGRHRjBaU2h1ZFd4c0xDQnVkV3hzTENCbExuUmhjbWRsZEM1d1lYUm9ibUZ0WlNsY2JpQWdJQ0FnSUNBZ2RYQmtZWFJsVUdGblpTZ3BYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjblZ1VG1WM1JuVnVZM1JwYjI1ektDbGNiaUFnZEhKcFoyZGxjazFsYm5VdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCMGIyZG5iR1ZOWlc1MUtWeHVJQ0J0Wlc1MUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z1kyaGhibWRsVUdGblpTbGNibHh1ZlNrb0tWeHVJaXdpYVcxd2IzSjBJSHNnYzJOeWIyeHNWRzlVYjNBc0lHWmhaR1ZQZFhRc0lHWmhaR1ZKYmlCOUlHWnliMjBnSnk0dmRYUnBiSE1uWEc1Y2JpOHZJSEJ5YjJwbFkzUnpJSEJoWjJVZ0xTQnpjR1ZqYVdacFl5Qm1kVzVqZEdsdmJuTmNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlISjFibEJ5YjJwbFkzUnpVR0ZuWlNncElIdGNibHh1SUNBdkx5QnpaWFFnZFhBZ1lYSnliM2NnS3lCelkzSnZiR3dnZEc4Z2RHOXdJR1oxYm1OMGFXOXVYRzRnSUM4dklGUlBSRTg2SUc5dWJIa2djMmh2ZHlCaGNuSnZkeUJwWmlCdVpXVmtaV1FnVzJobGFXZG9kQ0ErSURFd01DVWdkbWxsZDNCdmNuUmRYRzRnSUdOdmJuTjBJSFJ2Y0VGeWNtOTNJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbXB6TFhCaFoyVmZYMkZ5Y205M0xTMTBiM0FuS1Z4dUlDQjBiM0JCY25KdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lITmpjbTlzYkZSdlZHOXdLSFJvYVhNdWNHRnlaVzUwVG05a1pTbGNiaUFnZlNsY2JseHVJQ0F2THlBZ2JHOXZjQ0J2ZG1WeUlHVjJaWEo1SUhCeWIycGxZM1FzSUdGa1pDQmxkbVZ1ZENCc2FYTjBaVzVsY2lCMGJ5QmxlSEJoYm1RZ2FXTnZiaUJpZFhSMGIyNWNiaUFnWTI5dWMzUWdjSEp2YW1WamRITWdQU0JCY25KaGVTNW1jbTl0S0dSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnk1cWN5MXdjbTlxWldOMEp5a3BYRzRnSUhCeWIycGxZM1J6TG1admNrVmhZMmdvY0hKdmFtVmpkQ0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdaWGh3WVc1a1NXTnZiaUE5SUhCeWIycGxZM1F1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbkJ5YjJwbFkzUmZYMlY0Y0dGdVpFbGpiMjRuS1Z4dUlDQWdJR1Y0Y0dGdVpFbGpiMjR1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0JsZUhCaGJtUkVaWFJoYVd4ektWeHVYRzRnSUNBZ1kyOXVjM1FnWTJ4dmMyVkpZMjl1SUQwZ2NISnZhbVZqZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1Y0hKdmFtVmpkRjlmWTJ4dmMyVkpZMjl1SnlsY2JpQWdJQ0JqYkc5elpVbGpiMjR1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0JqYkc5elpVUmxkR0ZwYkhNcFhHNGdJSDBwWEc1Y2JpQWdablZ1WTNScGIyNGdZMnh2YzJWRVpYUmhhV3h6S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJR1JsZEdGcGJITWdQU0IwYUdsekxuQmhjbVZ1ZEU1dlpHVmNiaUFnSUNCamIyNXpkQ0JwWTI5dUlEMGdaR1YwWVdsc2N5NXdjbVYyYVc5MWMwVnNaVzFsYm5SVGFXSnNhVzVuWEc0Z0lDQWdaR1YwWVdsc2N5NXpkSGxzWlM1dFlYaElaV2xuYUhRZ1BTQXdYRzRnSUNBZ1pHVjBZV2xzY3k1amJHRnpjMHhwYzNRdWRHOW5aMnhsS0Nkd2NtOXFaV04wWDE5a1pYUmhhV3h6TFMxbGVIQmhibVJsWkNjcFhHNGdJQ0FnYVdOdmJpNWpiR0Z6YzB4cGMzUXVkRzluWjJ4bEtDZHdjbTlxWldOMFgxOWxlSEJoYm1SSlkyOXVMUzFsZUhCaGJtUmxaQ2NwWEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCbGVIQmhibVJFWlhSaGFXeHpLQ2tnZTF4dUlDQWdJSFJvYVhNdVkyeGhjM05NYVhOMExuUnZaMmRzWlNnbmNISnZhbVZqZEY5ZlpYaHdZVzVrU1dOdmJpMHRaWGh3WVc1a1pXUW5LVnh1SUNBZ0lHTnZibk4wSUdSbGRHRnBiSE1nUFNCMGFHbHpMbTVsZUhSRmJHVnRaVzUwVTJsaWJHbHVaMXh1SUNBZ0lHTnZibk4wSUdselJYaHdZVzVrWldRZ1BTQmtaWFJoYVd4ekxtTnNZWE56VEdsemRDNWpiMjUwWVdsdWN5Z25jSEp2YW1WamRGOWZaR1YwWVdsc2N5MHRaWGh3WVc1a1pXUW5LVnh1SUNBZ0lHUmxkR0ZwYkhNdVkyeGhjM05NYVhOMExuUnZaMmRzWlNnbmNISnZhbVZqZEY5ZlpHVjBZV2xzY3kwdFpYaHdZVzVrWldRbktWeHVJQ0FnSUdSbGRHRnBiSE11YzNSNWJHVXViV0Y0U0dWcFoyaDBJRDBnYVhORmVIQmhibVJsWkNBL0lEQWdPaUJnSkh0a1pYUmhhV3h6TG5OamNtOXNiRWhsYVdkb2RIMXdlR0JjYmlBZ2ZWeHVYRzU5WEc0aUxDSnBiWEJ2Y25RZ2NuVnVUR0Z1WkdsdVoxQmhaMlVnWm5KdmJTQW5MaTlzWVc1a2FXNW5KMXh1YVcxd2IzSjBJSEoxYmtGaWIzVjBVR0ZuWlNCbWNtOXRJQ2N1TDJGaWIzVjBKMXh1YVcxd2IzSjBJSEoxYmxCeWIycGxZM1J6VUdGblpTQm1jbTl0SUNjdUwzQnliMnBsWTNSekoxeHVhVzF3YjNKMElIc2dabUZrWlVsdUxDQm1hVzVrUVhKbFlTQjlJR1p5YjIwZ0p5NHZkWFJwYkhNblhHNWNiaTh2SUdabGRHTm9JSEJ2YkhsbWFXeHNJR1p2Y2lCdGIySnBiR1VnWkdWMmFXTmxjMXh1Y21WeGRXbHlaU2duWlhNMkxYQnliMjFwYzJVbktTNXdiMng1Wm1sc2JDZ3BYRzV5WlhGMWFYSmxLQ2RwYzI5dGIzSndhR2xqTFdabGRHTm9KeWxjYmx4dUx5OGdjblZ1SUdaMWJtTjBhVzl1Y3lCemNHVmphV1pwWXlCMGJ5QndZV2RsWEc1bGVIQnZjblFnWTI5dWMzUWdjblZ1VG1WM1JuVnVZM1JwYjI1eklEMGdLQ2tnUFQ0Z2UxeHVJQ0JqYjI1emRDQndZWFJvSUQwZ2QybHVaRzkzTG14dlkyRjBhVzl1TG5CaGRHaHVZVzFsWEc0Z0lIZHBibVJ2ZHk1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZHlaWE5wZW1VbkxDQm1hVzVrUVhKbFlTbGNiaUFnYVdZZ0tIQmhkR2dnUFQwOUlDY3ZKeUI4ZkNCd1lYUm9JRDA5UFNBbkwybHVaR1Y0TG1oMGJXd25LU0I3WEc0Z0lDQWdjblZ1VEdGdVpHbHVaMUJoWjJVb0tWeHVJQ0I5SUdWc2MyVWdhV1lnS0hCaGRHZ3VjM1JoY25SelYybDBhQ2duTDJGaWIzVjBKeWtwSUh0Y2JpQWdJQ0J5ZFc1QlltOTFkRkJoWjJVb0tWeHVJQ0I5SUdWc2MyVWdhV1lnS0hCaGRHZ3VjM1JoY25SelYybDBhQ2duTDNCeWIycGxZM1J6SnlrcElIdGNiaUFnSUNCeWRXNVFjbTlxWldOMGMxQmhaMlVvS1Z4dUlDQjlYRzU5WEc1Y2JpOHZJSFZ3WkdGMFpTQXJJR1poWkdVZ2FXNGdibVYzSUhCaFoyVWdiMjRnZFhKc0lHTm9ZVzVuWlZ4dVpYaHdiM0owSUdOdmJuTjBJSFZ3WkdGMFpWQmhaMlVnUFNBb0tTQTlQaUI3WEc0Z0lHTnZibk4wSUhWeWJDQTlJSGRwYm1SdmR5NXNiMk5oZEdsdmJpNW9jbVZtWEc0Z0lHeHZZV1JRWVdkbEtIVnliQ2t1ZEdobGJpZ29jbVZ6Y0c5dWMyVlVaWGgwS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnWTI5dWRHRnBibVZ5SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duYUhSdGJDY3BYRzRnSUNBZ1kyOXVkR0ZwYm1WeUxtbHVibVZ5U0ZSTlRDQTlJSEpsYzNCdmJuTmxWR1Y0ZEZ4dUlDQWdJR052Ym5OMElHOXNaRkJoWjJVZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWNHRm5aU2NwWEc0Z0lDQWdZMjl1YzNRZ2JtVjNVR0ZuWlNBOUlHTnZiblJoYVc1bGNpNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWNHRm5aU2NwWEc0Z0lDQWdZMjl1YzNRZ2JtVjNWR2wwYkdVZ1BTQmpiMjUwWVdsdVpYSXVaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VvSjNScGRHeGxKeWxiTUYwdWRHVjRkRU52Ym5SbGJuUmNiaUFnSUNCamIyNXpkQ0J1WlhkRVpYTmpJRDBnWTI5dWRHRnBibVZ5TG1kbGRFVnNaVzFsYm5SelFubFVZV2RPWVcxbEtDZHRaWFJoSnlsYkoyUmxjMk55YVhCMGFXOXVKMTB1WTI5dWRHVnVkRnh1SUNBZ0lHTnZibk52YkdVdWJHOW5LRzlzWkZCaFoyVXBYRzRnSUNBZ2IyeGtVR0ZuWlM1d1lYSmxiblJPYjJSbExuSmxjR3hoWTJWRGFHbHNaQ2h1WlhkUVlXZGxMQ0J2YkdSUVlXZGxLVnh1SUNBZ0lHUnZZM1Z0Wlc1MExuUnBkR3hsSUQwZ2JtVjNWR2wwYkdWY2JpQWdJQ0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwYzBKNVZHRm5UbUZ0WlNnbmJXVjBZU2NwV3lka1pYTmpjbWx3ZEdsdmJpZGRMbU52Ym5SbGJuUWdQU0J1WlhkRVpYTmpYRzRnSUNBZ1ptRmtaVWx1S0c1bGQxQmhaMlVwWEc0Z0lDQWdjblZ1VG1WM1JuVnVZM1JwYjI1ektDbGNiaUFnZlNsY2JuMWNibHh1THk4Z1ptVjBZMmdnS3lCc2IyRmtJRzVsZHlCMWNtd2dLeUJqWVdOb1pTQnVaWGNnWTI5dWRHVnVkRnh1WTI5dWMzUWdZMkZqYUdVZ1BTQjdmVnh1Wm5WdVkzUnBiMjRnYkc5aFpGQmhaMlVvZFhKc0tTQjdYRzRnSUdsbUlDaGpZV05vWlZ0MWNteGRLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnpiMngyWlNoallXTm9aVnQxY214ZEtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbVpYUmphQ2gxY213cFhHNGdJQ0FnTG5Sb1pXNG9LSEpsYzNCdmJuTmxLU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9jbVZ6Y0c5dWMyVXViMnNwSUh0Y2JpQWdJQ0FnSUNBZ1kyRmphR1ZiZFhKc1hTQTlJSEpsYzNCdmJuTmxMblJsZUhRb0tWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZiZFhKc1hWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMjVsZEhkdmNtc2djbVZ6Y0c5dWMyVWdkMkZ6SUc1dmRDQnZheTRuS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwWEc0Z0lDQWdMbU5oZEdOb0tDaGxjbklwSUQwK0lHTnZibk52YkdVdWJHOW5LR0IwYUdWeVpTQm9ZWE1nWW1WbGJpQmhiaUJsY25KdmNpQnlaWEYxWlhOMGFXNW5JQ2drZTNWeWJIMHBPaUFrZTJWeWNpNXRaWE56WVdkbGZXQXBLVnh1ZlZ4dVhHNHZMeUIxY0dSaGRHVWdjR0ZuWlNCaGJubDBhVzFsSUdocGMzUnZjbmtnWVhCcElHbHpJR05vWVc1blpXUmNibmRwYm1SdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHdiM0J6ZEdGMFpTY3NJSFZ3WkdGMFpWQmhaMlVwWEc0aUxDSXZMeUIwYVcxcGJtY2dablZ1WTNScGIyNXpJRnNnWm5KdmJTQm5hWFJvZFdJZ0xTMGdhSFIwY0hNNkx5OW5hWE4wTG1kcGRHaDFZaTVqYjIwdlozSmxMekUyTlRBeU9UUWdYVnh1WTI5dWMzUWdiR2x1WldGeUlEMGdLSFFwSUQwK0lIUmNibU52Ym5OMElHVmhjMlZKYmxGMVlXUWdQU0FvZENrZ1BUNGdkQ3AwWEc1amIyNXpkQ0JsWVhObFQzVjBVWFZoWkNBOUlDaDBLU0E5UGlCMEtpZ3lMWFFwWEc1amIyNXpkQ0JsWVhObFNXNVBkWFJSZFdGa0lEMGdLSFFwSUQwK0lIUThMalVnUHlBb01pcDBLblFwSURvZ0tDMHhLeWcwTFRJcWRDa3FkQ2xjYm1OdmJuTjBJR1ZoYzJWSmJrTjFZbWxqSUQwZ0tIUXBJRDArSUhRcWRDcDBYRzVqYjI1emRDQmxZWE5sVDNWMFEzVmlhV01nUFNBb2RDa2dQVDRnS0MwdGRDa3FkQ3AwS3pGY2JtTnZibk4wSUdWaGMyVkpiazkxZEVOMVltbGpJRDBnS0hRcElEMCtJSFE4TGpVZ1B5QW9OQ3AwS25RcWRDa2dPaUFvS0hRdE1Ta3FLRElxZEMweUtTb29NaXAwTFRJcEt6RXBYRzVqYjI1emRDQmxZWE5sU1c1UmRXRnlkQ0E5SUNoMEtTQTlQaUIwS25RcWRDcDBYRzVqYjI1emRDQmxZWE5sVDNWMFVYVmhjblFnUFNBb2RDa2dQVDRnTVMwb0xTMTBLU3AwS25RcWRGeHVZMjl1YzNRZ1pXRnpaVWx1VDNWMFVYVmhjblFnUFNBb2RDa2dQVDRnZER3dU5TQS9JQ2c0S25RcWRDcDBLblFwSURvZ0tERXRPQ29vTFMxMEtTcDBLblFxZENsY2JseHVMeThnYzJOeWIyeHNMWFJ2TFhSdmNDQnZaaUJsYkdWdFpXNTBMbHh1Wlhod2IzSjBJR052Ym5OMElITmpjbTlzYkZSdlZHOXdJRDBnS0dWc0xDQmtkWEpoZEdsdmJpQTlJREV5TURBcElEMCtJSHRjYmlBZ1kyOXVjM1FnWW05MGRHOXRJRDBnWld3dWMyTnliMnhzU0dWcFoyaDBYRzRnSUdOdmJuTjBJSE4wWVhKMElEMGdSR0YwWlM1dWIzY29LVnh1SUNCamIyNXpkQ0J6WTNKdmJHd2dQU0FvS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnYm05M0lEMGdSR0YwWlM1dWIzY29LVnh1SUNBZ0lHTnZibk4wSUhScGJXVWdQU0FvYm05M0lDMGdjM1JoY25RcElDOGdaSFZ5WVhScGIyNWNiaUFnSUNBZ1kyOXVjM1FnWldGemFXNW5JRDBnWldGelpVOTFkRkYxWVhKMEtIUnBiV1VwWEc0Z0lDQWdaV3d1YzJOeWIyeHNWRzl3SUQwZ0tHVmhjMmx1WnlBcUlDZ3dJQzBnWW05MGRHOXRLU2tnS3lCaWIzUjBiMjFjYmlBZ0lDQnBaaUFvWld3dWMyTnliMnhzVkc5d0lEMDlQU0F3S1NCeVpYUjFjbTVjYmlBZ0lDQnlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VvYzJOeWIyeHNLVnh1SUNCOVhHNGdJSE5qY205c2JDZ3BYRzU5WEc1Y2JpOHZJR1poWkdVdGFXNGdaV3hsYldWdWRGeHVaWGh3YjNKMElHTnZibk4wSUdaaFpHVkpiaUE5SUNobGJDd2daSFZ5WVhScGIyNGdQU0F4TWpBd0tTQTlQaUI3WEc0Z0lHVnNMbk4wZVd4bExtOXdZV05wZEhrZ1BTQXdYRzRnSUdOdmJuTjBJR0p2ZEhSdmJTQTlJREZjYmlBZ1kyOXVjM1FnYzNSaGNuUWdQU0JFWVhSbExtNXZkeWdwWEc0Z0lHTnZibk4wSUdaaFpHVWdQU0FvS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnYm05M0lEMGdSR0YwWlM1dWIzY29LVnh1SUNBZ0lHTnZibk4wSUhScGJXVWdQU0FvYm05M0lDMGdjM1JoY25RcElDOGdaSFZ5WVhScGIyNWNiaUFnSUNCamIyNXpkQ0JsWVhOcGJtY2dQU0JsWVhObFNXNVJkV0Z5ZENoMGFXMWxLVnh1SUNBZ0lHVnNMbk4wZVd4bExtOXdZV05wZEhrZ1BTQmxZWE5wYm1kY2JpQWdJQ0JwWmlBb1pXd3VjM1I1YkdVdWIzQmhZMmwwZVNBK0lEQXVPVGsxS1NCN1hHNGdJQ0FnSUNCbGJDNXpkSGxzWlM1dmNHRmphWFI1SUQwZ01WeHVJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdmVnh1SUNBZ0lISmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaU2htWVdSbEtWeHVJQ0I5WEc0Z0lHWmhaR1VvS1Z4dWZWeHVYRzR2THlCbVlXUmxMVzkxZENCbGJHVnRaVzUwWEc1bGVIQnZjblFnWTI5dWMzUWdabUZrWlU5MWRDQTlJQ2hsYkN3Z1pIVnlZWFJwYjI0Z1BTQXhNakF3S1NBOVBpQjdYRzRnSUdWc0xuTjBlV3hsTG05d1lXTnBkSGtnUFNBeFhHNGdJR052Ym5OMElITjBZWEowSUQwZ1JHRjBaUzV1YjNjb0tWeHVJQ0JqYjI1emRDQm1ZV1JsSUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHNXZkeUE5SUVSaGRHVXVibTkzS0NsY2JpQWdJQ0JqYjI1emRDQjBhVzFsSUQwZ01TQXRJQ2dvYm05M0lDMGdjM1JoY25RcElDOGdaSFZ5WVhScGIyNHBYRzRnSUNBZ1kyOXVjM1FnWldGemFXNW5JRDBnWldGelpVOTFkRkYxWVhKMEtIUnBiV1VwWEc0Z0lDQWdaV3d1YzNSNWJHVXViM0JoWTJsMGVTQTlJR1ZoYzJsdVoxeHVJQ0FnSUdsbUlDaGxiQzV6ZEhsc1pTNXZjR0ZqYVhSNUlEd2dNQzR3TURVcElIdGNiaUFnSUNBZ0lHVnNMbk4wZVd4bExtOXdZV05wZEhrZ1BTQXdYRzRnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0I5WEc0Z0lDQWdjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsS0daaFpHVXBYRzRnSUgxY2JpQWdabUZrWlNncFhHNTlYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQm1hVzVrUVhKbFlTQTlJQ2dwSUQwK0lIdGNiaUFnWTI5dWMzUWdZMjlrWlNBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1cWN5MXdhWGhsYkhNbktWeHVJQ0JqYjI1emRDQndhWGhsYkhNZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnYVdZZ0tHTnZaR1VnSmlZZ1kyOWtaUzUwWlhoMFEyOXVkR1Z1ZENBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ2JHVjBJR0Z5WldFZ1BTQjNhVzVrYjNjdWFXNXVaWEpYYVdSMGFDQXFJSGRwYm1SdmR5NXBibTVsY2tobGFXZG9kRnh1SUNBZ0lDQWdZMjlrWlM1MFpYaDBRMjl1ZEdWdWRDQTlJR0Z5WldFdWRHOU1iMk5oYkdWVGRISnBibWNvS1Z4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVb2NHbDRaV3h6S1Z4dWZWeHVJaXdpTHlvaFhHNGdLaUJBYjNabGNuWnBaWGNnWlhNMkxYQnliMjFwYzJVZ0xTQmhJSFJwYm5rZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnYjJZZ1VISnZiV2x6WlhNdlFTc3VYRzRnS2lCQVkyOXdlWEpwWjJoMElFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE5DQlpaV2gxWkdFZ1MyRjBlaXdnVkc5dElFUmhiR1VzSUZOMFpXWmhiaUJRWlc1dVpYSWdZVzVrSUdOdmJuUnlhV0oxZEc5eWN5QW9RMjl1ZG1WeWMybHZiaUIwYnlCRlV6WWdRVkJKSUdKNUlFcGhhMlVnUVhKamFHbGlZV3hrS1Z4dUlDb2dRR3hwWTJWdWMyVWdJQ0JNYVdObGJuTmxaQ0IxYm1SbGNpQk5TVlFnYkdsalpXNXpaVnh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQlRaV1VnYUhSMGNITTZMeTl5WVhjdVoybDBhSFZpZFhObGNtTnZiblJsYm5RdVkyOXRMM04wWldaaGJuQmxibTVsY2k5bGN6WXRjSEp2YldselpTOXRZWE4wWlhJdlRFbERSVTVUUlZ4dUlDb2dRSFpsY25OcGIyNGdJQ0EwTGpFdU1GeHVJQ292WEc1Y2JpaG1kVzVqZEdsdmJpQW9aMnh2WW1Gc0xDQm1ZV04wYjNKNUtTQjdYRzRnSUNBZ2RIbHdaVzltSUdWNGNHOXlkSE1nUFQwOUlDZHZZbXBsWTNRbklDWW1JSFI1Y0dWdlppQnRiMlIxYkdVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbVlXTjBiM0o1S0NrZ09seHVJQ0FnSUhSNWNHVnZaaUJrWldacGJtVWdQVDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdaR1ZtYVc1bExtRnRaQ0EvSUdSbFptbHVaU2htWVdOMGIzSjVLU0E2WEc0Z0lDQWdLR2RzYjJKaGJDNUZVelpRY205dGFYTmxJRDBnWm1GamRHOXllU2dwS1R0Y2JuMG9kR2hwY3l3Z0tHWjFibU4wYVc5dUlDZ3BJSHNnSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVtZFc1amRHbHZiaUJ2WW1wbFkzUlBja1oxYm1OMGFXOXVLSGdwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCNElEMDlQU0FuWm5WdVkzUnBiMjRuSUh4OElIUjVjR1Z2WmlCNElEMDlQU0FuYjJKcVpXTjBKeUFtSmlCNElDRTlQU0J1ZFd4c08xeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMwWjFibU4wYVc5dUtIZ3BJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUI0SUQwOVBTQW5ablZ1WTNScGIyNG5PMXh1ZlZ4dVhHNTJZWElnWDJselFYSnlZWGtnUFNCMWJtUmxabWx1WldRN1hHNXBaaUFvSVVGeWNtRjVMbWx6UVhKeVlYa3BJSHRjYmlBZ1gybHpRWEp5WVhrZ1BTQm1kVzVqZEdsdmJpQW9lQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQlBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvZUNrZ1BUMDlJQ2RiYjJKcVpXTjBJRUZ5Y21GNVhTYzdYRzRnSUgwN1hHNTlJR1ZzYzJVZ2UxeHVJQ0JmYVhOQmNuSmhlU0E5SUVGeWNtRjVMbWx6UVhKeVlYazdYRzU5WEc1Y2JuWmhjaUJwYzBGeWNtRjVJRDBnWDJselFYSnlZWGs3WEc1Y2JuWmhjaUJzWlc0Z1BTQXdPMXh1ZG1GeUlIWmxjblI0VG1WNGRDQTlJSFZ1WkdWbWFXNWxaRHRjYm5aaGNpQmpkWE4wYjIxVFkyaGxaSFZzWlhKR2JpQTlJSFZ1WkdWbWFXNWxaRHRjYmx4dWRtRnlJR0Z6WVhBZ1BTQm1kVzVqZEdsdmJpQmhjMkZ3S0dOaGJHeGlZV05yTENCaGNtY3BJSHRjYmlBZ2NYVmxkV1ZiYkdWdVhTQTlJR05oYkd4aVlXTnJPMXh1SUNCeGRXVjFaVnRzWlc0Z0t5QXhYU0E5SUdGeVp6dGNiaUFnYkdWdUlDczlJREk3WEc0Z0lHbG1JQ2hzWlc0Z1BUMDlJRElwSUh0Y2JpQWdJQ0F2THlCSlppQnNaVzRnYVhNZ01pd2dkR2hoZENCdFpXRnVjeUIwYUdGMElIZGxJRzVsWldRZ2RHOGdjMk5vWldSMWJHVWdZVzRnWVhONWJtTWdabXgxYzJndVhHNGdJQ0FnTHk4Z1NXWWdZV1JrYVhScGIyNWhiQ0JqWVd4c1ltRmphM01nWVhKbElIRjFaWFZsWkNCaVpXWnZjbVVnZEdobElIRjFaWFZsSUdseklHWnNkWE5vWldRc0lIUm9aWGxjYmlBZ0lDQXZMeUIzYVd4c0lHSmxJSEJ5YjJObGMzTmxaQ0JpZVNCMGFHbHpJR1pzZFhOb0lIUm9ZWFFnZDJVZ1lYSmxJSE5qYUdWa2RXeHBibWN1WEc0Z0lDQWdhV1lnS0dOMWMzUnZiVk5qYUdWa2RXeGxja1p1S1NCN1hHNGdJQ0FnSUNCamRYTjBiMjFUWTJobFpIVnNaWEpHYmlobWJIVnphQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lITmphR1ZrZFd4bFJteDFjMmdvS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JtWjFibU4wYVc5dUlITmxkRk5qYUdWa2RXeGxjaWh6WTJobFpIVnNaVVp1S1NCN1hHNGdJR04xYzNSdmJWTmphR1ZrZFd4bGNrWnVJRDBnYzJOb1pXUjFiR1ZHYmp0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYzJWMFFYTmhjQ2hoYzJGd1JtNHBJSHRjYmlBZ1lYTmhjQ0E5SUdGellYQkdianRjYm4xY2JseHVkbUZ5SUdKeWIzZHpaWEpYYVc1a2IzY2dQU0IwZVhCbGIyWWdkMmx1Wkc5M0lDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lIZHBibVJ2ZHlBNklIVnVaR1ZtYVc1bFpEdGNiblpoY2lCaWNtOTNjMlZ5UjJ4dlltRnNJRDBnWW5KdmQzTmxjbGRwYm1SdmR5QjhmQ0I3ZlR0Y2JuWmhjaUJDY205M2MyVnlUWFYwWVhScGIyNVBZbk5sY25abGNpQTlJR0p5YjNkelpYSkhiRzlpWVd3dVRYVjBZWFJwYjI1UFluTmxjblpsY2lCOGZDQmljbTkzYzJWeVIyeHZZbUZzTGxkbFlrdHBkRTExZEdGMGFXOXVUMkp6WlhKMlpYSTdYRzUyWVhJZ2FYTk9iMlJsSUQwZ2RIbHdaVzltSUhObGJHWWdQVDA5SUNkMWJtUmxabWx1WldRbklDWW1JSFI1Y0dWdlppQndjbTlqWlhOeklDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQW9lMzBwTG5SdlUzUnlhVzVuTG1OaGJHd29jSEp2WTJWemN5a2dQVDA5SUNkYmIySnFaV04wSUhCeWIyTmxjM05kSnp0Y2JseHVMeThnZEdWemRDQm1iM0lnZDJWaUlIZHZjbXRsY2lCaWRYUWdibTkwSUdsdUlFbEZNVEJjYm5aaGNpQnBjMWR2Y210bGNpQTlJSFI1Y0dWdlppQlZhVzUwT0VOc1lXMXdaV1JCY25KaGVTQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdkSGx3Wlc5bUlHbHRjRzl5ZEZOamNtbHdkSE1nSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUhSNWNHVnZaaUJOWlhOellXZGxRMmhoYm01bGJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjN1hHNWNiaTh2SUc1dlpHVmNibVoxYm1OMGFXOXVJSFZ6WlU1bGVIUlVhV05yS0NrZ2UxeHVJQ0F2THlCdWIyUmxJSFpsY25OcGIyNGdNQzR4TUM1NElHUnBjM0JzWVhseklHRWdaR1Z3Y21WallYUnBiMjRnZDJGeWJtbHVaeUIzYUdWdUlHNWxlSFJVYVdOcklHbHpJSFZ6WldRZ2NtVmpkWEp6YVhabGJIbGNiaUFnTHk4Z2MyVmxJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlqZFdwdmFuTXZkMmhsYmk5cGMzTjFaWE12TkRFd0lHWnZjaUJrWlhSaGFXeHpYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29abXgxYzJncE8xeHVJQ0I5TzF4dWZWeHVYRzR2THlCMlpYSjBlRnh1Wm5WdVkzUnBiMjRnZFhObFZtVnlkSGhVYVcxbGNpZ3BJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQjJaWEowZUU1bGVIUWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lIWmxjblI0VG1WNGRDaG1iSFZ6YUNrN1hHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCMWMyVlRaWFJVYVcxbGIzVjBLQ2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJSFZ6WlUxMWRHRjBhVzl1VDJKelpYSjJaWElvS1NCN1hHNGdJSFpoY2lCcGRHVnlZWFJwYjI1eklEMGdNRHRjYmlBZ2RtRnlJRzlpYzJWeWRtVnlJRDBnYm1WM0lFSnliM2R6WlhKTmRYUmhkR2x2Yms5aWMyVnlkbVZ5S0dac2RYTm9LVHRjYmlBZ2RtRnlJRzV2WkdVZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWVVpYaDBUbTlrWlNnbkp5azdYRzRnSUc5aWMyVnlkbVZ5TG05aWMyVnlkbVVvYm05a1pTd2dleUJqYUdGeVlXTjBaWEpFWVhSaE9pQjBjblZsSUgwcE8xeHVYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnYm05a1pTNWtZWFJoSUQwZ2FYUmxjbUYwYVc5dWN5QTlJQ3NyYVhSbGNtRjBhVzl1Y3lBbElESTdYRzRnSUgwN1hHNTlYRzVjYmk4dklIZGxZaUIzYjNKclpYSmNibVoxYm1OMGFXOXVJSFZ6WlUxbGMzTmhaMlZEYUdGdWJtVnNLQ2tnZTF4dUlDQjJZWElnWTJoaGJtNWxiQ0E5SUc1bGR5Qk5aWE56WVdkbFEyaGhibTVsYkNncE8xeHVJQ0JqYUdGdWJtVnNMbkJ2Y25ReExtOXViV1Z6YzJGblpTQTlJR1pzZFhOb08xeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmphR0Z1Ym1Wc0xuQnZjblF5TG5CdmMzUk5aWE56WVdkbEtEQXBPMXh1SUNCOU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCMWMyVlRaWFJVYVcxbGIzVjBLQ2tnZTF4dUlDQXZMeUJUZEc5eVpTQnpaWFJVYVcxbGIzVjBJSEpsWm1WeVpXNWpaU0J6YnlCbGN6WXRjSEp2YldselpTQjNhV3hzSUdKbElIVnVZV1ptWldOMFpXUWdZbmxjYmlBZ0x5OGdiM1JvWlhJZ1kyOWtaU0J0YjJScFpubHBibWNnYzJWMFZHbHRaVzkxZENBb2JHbHJaU0J6YVc1dmJpNTFjMlZHWVd0bFZHbHRaWEp6S0NrcFhHNGdJSFpoY2lCbmJHOWlZV3hUWlhSVWFXMWxiM1YwSUQwZ2MyVjBWR2x0Wlc5MWREdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaMnh2WW1Gc1UyVjBWR2x0Wlc5MWRDaG1iSFZ6YUN3Z01TazdYRzRnSUgwN1hHNTlYRzVjYm5aaGNpQnhkV1YxWlNBOUlHNWxkeUJCY25KaGVTZ3hNREF3S1R0Y2JtWjFibU4wYVc5dUlHWnNkWE5vS0NrZ2UxeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJqc2dhU0FyUFNBeUtTQjdYRzRnSUNBZ2RtRnlJR05oYkd4aVlXTnJJRDBnY1hWbGRXVmJhVjA3WEc0Z0lDQWdkbUZ5SUdGeVp5QTlJSEYxWlhWbFcya2dLeUF4WFR0Y2JseHVJQ0FnSUdOaGJHeGlZV05yS0dGeVp5azdYRzVjYmlBZ0lDQnhkV1YxWlZ0cFhTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQnhkV1YxWlZ0cElDc2dNVjBnUFNCMWJtUmxabWx1WldRN1hHNGdJSDFjYmx4dUlDQnNaVzRnUFNBd08xeHVmVnh1WEc1bWRXNWpkR2x2YmlCaGRIUmxiWEIwVm1WeWRIZ29LU0I3WEc0Z0lIUnllU0I3WEc0Z0lDQWdkbUZ5SUhJZ1BTQnlaWEYxYVhKbE8xeHVJQ0FnSUhaaGNpQjJaWEowZUNBOUlISW9KM1psY25SNEp5azdYRzRnSUNBZ2RtVnlkSGhPWlhoMElEMGdkbVZ5ZEhndWNuVnVUMjVNYjI5d0lIeDhJSFpsY25SNExuSjFiazl1UTI5dWRHVjRkRHRjYmlBZ0lDQnlaWFIxY200Z2RYTmxWbVZ5ZEhoVWFXMWxjaWdwTzF4dUlDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIVnpaVk5sZEZScGJXVnZkWFFvS1R0Y2JpQWdmVnh1ZlZ4dVhHNTJZWElnYzJOb1pXUjFiR1ZHYkhWemFDQTlJSFZ1WkdWbWFXNWxaRHRjYmk4dklFUmxZMmxrWlNCM2FHRjBJR0Z6ZVc1aklHMWxkR2h2WkNCMGJ5QjFjMlVnZEc4Z2RISnBaMmRsY21sdVp5QndjbTlqWlhOemFXNW5JRzltSUhGMVpYVmxaQ0JqWVd4c1ltRmphM002WEc1cFppQW9hWE5PYjJSbEtTQjdYRzRnSUhOamFHVmtkV3hsUm14MWMyZ2dQU0IxYzJWT1pYaDBWR2xqYXlncE8xeHVmU0JsYkhObElHbG1JQ2hDY205M2MyVnlUWFYwWVhScGIyNVBZbk5sY25abGNpa2dlMXh1SUNCelkyaGxaSFZzWlVac2RYTm9JRDBnZFhObFRYVjBZWFJwYjI1UFluTmxjblpsY2lncE8xeHVmU0JsYkhObElHbG1JQ2hwYzFkdmNtdGxjaWtnZTF4dUlDQnpZMmhsWkhWc1pVWnNkWE5vSUQwZ2RYTmxUV1Z6YzJGblpVTm9ZVzV1Wld3b0tUdGNibjBnWld4elpTQnBaaUFvWW5KdmQzTmxjbGRwYm1SdmR5QTlQVDBnZFc1a1pXWnBibVZrSUNZbUlIUjVjR1Z2WmlCeVpYRjFhWEpsSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lITmphR1ZrZFd4bFJteDFjMmdnUFNCaGRIUmxiWEIwVm1WeWRIZ29LVHRjYm4wZ1pXeHpaU0I3WEc0Z0lITmphR1ZrZFd4bFJteDFjMmdnUFNCMWMyVlRaWFJVYVcxbGIzVjBLQ2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJSFJvWlc0b2IyNUdkV3htYVd4c2JXVnVkQ3dnYjI1U1pXcGxZM1JwYjI0cElIdGNiaUFnZG1GeUlGOWhjbWQxYldWdWRITWdQU0JoY21kMWJXVnVkSE03WEc1Y2JpQWdkbUZ5SUhCaGNtVnVkQ0E5SUhSb2FYTTdYRzVjYmlBZ2RtRnlJR05vYVd4a0lEMGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lvYm05dmNDazdYRzVjYmlBZ2FXWWdLR05vYVd4a1cxQlNUMDFKVTBWZlNVUmRJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNCdFlXdGxVSEp2YldselpTaGphR2xzWkNrN1hHNGdJSDFjYmx4dUlDQjJZWElnWDNOMFlYUmxJRDBnY0dGeVpXNTBMbDl6ZEdGMFpUdGNibHh1SUNCcFppQW9YM04wWVhSbEtTQjdYRzRnSUNBZ0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCallXeHNZbUZqYXlBOUlGOWhjbWQxYldWdWRITmJYM04wWVhSbElDMGdNVjA3WEc0Z0lDQWdJQ0JoYzJGd0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2x1ZG05clpVTmhiR3hpWVdOcktGOXpkR0YwWlN3Z1kyaHBiR1FzSUdOaGJHeGlZV05yTENCd1lYSmxiblF1WDNKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1NncE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lITjFZbk5qY21saVpTaHdZWEpsYm5Rc0lHTm9hV3hrTENCdmJrWjFiR1pwYkd4dFpXNTBMQ0J2YmxKbGFtVmpkR2x2YmlrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1kyaHBiR1E3WEc1OVhHNWNiaThxS2x4dUlDQmdVSEp2YldselpTNXlaWE52YkhabFlDQnlaWFIxY201eklHRWdjSEp2YldselpTQjBhR0YwSUhkcGJHd2dZbVZqYjIxbElISmxjMjlzZG1Wa0lIZHBkR2dnZEdobFhHNGdJSEJoYzNObFpDQmdkbUZzZFdWZ0xpQkpkQ0JwY3lCemFHOXlkR2hoYm1RZ1ptOXlJSFJvWlNCbWIyeHNiM2RwYm1jNlhHNWNiaUFnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0JzWlhRZ2NISnZiV2x6WlNBOUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDbDdYRzRnSUNBZ2NtVnpiMngyWlNneEtUdGNiaUFnZlNrN1hHNWNiaUFnY0hKdmJXbHpaUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsS1h0Y2JpQWdJQ0F2THlCMllXeDFaU0E5UFQwZ01WeHVJQ0I5S1R0Y2JpQWdZR0JnWEc1Y2JpQWdTVzV6ZEdWaFpDQnZaaUIzY21sMGFXNW5JSFJvWlNCaFltOTJaU3dnZVc5MWNpQmpiMlJsSUc1dmR5QnphVzF3YkhrZ1ltVmpiMjFsY3lCMGFHVWdabTlzYkc5M2FXNW5PbHh1WEc0Z0lHQmdZR3BoZG1GelkzSnBjSFJjYmlBZ2JHVjBJSEJ5YjIxcGMyVWdQU0JRY205dGFYTmxMbkpsYzI5c2RtVW9NU2s3WEc1Y2JpQWdjSEp2YldselpTNTBhR1Z1S0daMWJtTjBhVzl1S0haaGJIVmxLWHRjYmlBZ0lDQXZMeUIyWVd4MVpTQTlQVDBnTVZ4dUlDQjlLVHRjYmlBZ1lHQmdYRzVjYmlBZ1FHMWxkR2h2WkNCeVpYTnZiSFpsWEc0Z0lFQnpkR0YwYVdOY2JpQWdRSEJoY21GdElIdEJibmw5SUhaaGJIVmxJSFpoYkhWbElIUm9ZWFFnZEdobElISmxkSFZ5Ym1Wa0lIQnliMjFwYzJVZ2QybHNiQ0JpWlNCeVpYTnZiSFpsWkNCM2FYUm9YRzRnSUZWelpXWjFiQ0JtYjNJZ2RHOXZiR2x1Wnk1Y2JpQWdRSEpsZEhWeWJpQjdVSEp2YldselpYMGdZU0J3Y205dGFYTmxJSFJvWVhRZ2QybHNiQ0JpWldOdmJXVWdablZzWm1sc2JHVmtJSGRwZEdnZ2RHaGxJR2RwZG1WdVhHNGdJR0IyWVd4MVpXQmNiaW92WEc1bWRXNWpkR2x2YmlCeVpYTnZiSFpsS0c5aWFtVmpkQ2tnZTF4dUlDQXZLbXB6YUdsdWRDQjJZV3hwWkhSb2FYTTZkSEoxWlNBcUwxeHVJQ0IyWVhJZ1EyOXVjM1J5ZFdOMGIzSWdQU0IwYUdsek8xeHVYRzRnSUdsbUlDaHZZbXBsWTNRZ0ppWWdkSGx3Wlc5bUlHOWlhbVZqZENBOVBUMGdKMjlpYW1WamRDY2dKaVlnYjJKcVpXTjBMbU52Ym5OMGNuVmpkRzl5SUQwOVBTQkRiMjV6ZEhKMVkzUnZjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQnZZbXBsWTNRN1hHNGdJSDFjYmx4dUlDQjJZWElnY0hKdmJXbHpaU0E5SUc1bGR5QkRiMjV6ZEhKMVkzUnZjaWh1YjI5d0tUdGNiaUFnWDNKbGMyOXNkbVVvY0hKdmJXbHpaU3dnYjJKcVpXTjBLVHRjYmlBZ2NtVjBkWEp1SUhCeWIyMXBjMlU3WEc1OVhHNWNiblpoY2lCUVVrOU5TVk5GWDBsRUlEMGdUV0YwYUM1eVlXNWtiMjBvS1M1MGIxTjBjbWx1Wnlnek5pa3VjM1ZpYzNSeWFXNW5LREUyS1R0Y2JseHVablZ1WTNScGIyNGdibTl2Y0NncElIdDlYRzVjYm5aaGNpQlFSVTVFU1U1SElEMGdkbTlwWkNBd08xeHVkbUZ5SUVaVlRFWkpURXhGUkNBOUlERTdYRzUyWVhJZ1VrVktSVU5VUlVRZ1BTQXlPMXh1WEc1MllYSWdSMFZVWDFSSVJVNWZSVkpTVDFJZ1BTQnVaWGNnUlhKeWIzSlBZbXBsWTNRb0tUdGNibHh1Wm5WdVkzUnBiMjRnYzJWc1prWjFiR1pwYkd4dFpXNTBLQ2tnZTF4dUlDQnlaWFIxY200Z2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWxsdmRTQmpZVzV1YjNRZ2NtVnpiMngyWlNCaElIQnliMjFwYzJVZ2QybDBhQ0JwZEhObGJHWmNJaWs3WEc1OVhHNWNibVoxYm1OMGFXOXVJR05oYm01dmRGSmxkSFZ5Yms5M2JpZ3BJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QlVlWEJsUlhKeWIzSW9KMEVnY0hKdmJXbHpaWE1nWTJGc2JHSmhZMnNnWTJGdWJtOTBJSEpsZEhWeWJpQjBhR0YwSUhOaGJXVWdjSEp2YldselpTNG5LVHRjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwVkdobGJpaHdjbTl0YVhObEtTQjdYRzRnSUhSeWVTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCeWIyMXBjMlV1ZEdobGJqdGNiaUFnZlNCallYUmphQ0FvWlhKeWIzSXBJSHRjYmlBZ0lDQkhSVlJmVkVoRlRsOUZVbEpQVWk1bGNuSnZjaUE5SUdWeWNtOXlPMXh1SUNBZ0lISmxkSFZ5YmlCSFJWUmZWRWhGVGw5RlVsSlBVanRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCMGNubFVhR1Z1S0hSb1pXNHNJSFpoYkhWbExDQm1kV3htYVd4c2JXVnVkRWhoYm1Sc1pYSXNJSEpsYW1WamRHbHZia2hoYm1Sc1pYSXBJSHRjYmlBZ2RISjVJSHRjYmlBZ0lDQjBhR1Z1TG1OaGJHd29kbUZzZFdVc0lHWjFiR1pwYkd4dFpXNTBTR0Z1Wkd4bGNpd2djbVZxWldOMGFXOXVTR0Z1Wkd4bGNpazdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCeVpYUjFjbTRnWlR0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm9ZVzVrYkdWR2IzSmxhV2R1VkdobGJtRmliR1VvY0hKdmJXbHpaU3dnZEdobGJtRmliR1VzSUhSb1pXNHBJSHRjYmlBZ1lYTmhjQ2htZFc1amRHbHZiaUFvY0hKdmJXbHpaU2tnZTF4dUlDQWdJSFpoY2lCelpXRnNaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQjJZWElnWlhKeWIzSWdQU0IwY25sVWFHVnVLSFJvWlc0c0lIUm9aVzVoWW14bExDQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lHbG1JQ2h6WldGc1pXUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjMlZoYkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUdsbUlDaDBhR1Z1WVdKc1pTQWhQVDBnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnWDNKbGMyOXNkbVVvY0hKdmJXbHpaU3dnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdablZzWm1sc2JDaHdjbTl0YVhObExDQjJZV3gxWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN3Z1puVnVZM1JwYjI0Z0tISmxZWE52YmlrZ2UxeHVJQ0FnSUNBZ2FXWWdLSE5sWVd4bFpDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnpaV0ZzWldRZ1BTQjBjblZsTzF4dVhHNGdJQ0FnSUNCZmNtVnFaV04wS0hCeWIyMXBjMlVzSUhKbFlYTnZiaWs3WEc0Z0lDQWdmU3dnSjFObGRIUnNaVG9nSnlBcklDaHdjbTl0YVhObExsOXNZV0psYkNCOGZDQW5JSFZ1YTI1dmQyNGdjSEp2YldselpTY3BLVHRjYmx4dUlDQWdJR2xtSUNnaGMyVmhiR1ZrSUNZbUlHVnljbTl5S1NCN1hHNGdJQ0FnSUNCelpXRnNaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdYM0psYW1WamRDaHdjbTl0YVhObExDQmxjbkp2Y2lrN1hHNGdJQ0FnZlZ4dUlDQjlMQ0J3Y205dGFYTmxLVHRjYm4xY2JseHVablZ1WTNScGIyNGdhR0Z1Wkd4bFQzZHVWR2hsYm1GaWJHVW9jSEp2YldselpTd2dkR2hsYm1GaWJHVXBJSHRjYmlBZ2FXWWdLSFJvWlc1aFlteGxMbDl6ZEdGMFpTQTlQVDBnUmxWTVJrbE1URVZFS1NCN1hHNGdJQ0FnWm5Wc1ptbHNiQ2h3Y205dGFYTmxMQ0IwYUdWdVlXSnNaUzVmY21WemRXeDBLVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaDBhR1Z1WVdKc1pTNWZjM1JoZEdVZ1BUMDlJRkpGU2tWRFZFVkVLU0I3WEc0Z0lDQWdYM0psYW1WamRDaHdjbTl0YVhObExDQjBhR1Z1WVdKc1pTNWZjbVZ6ZFd4MEtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnpkV0p6WTNKcFltVW9kR2hsYm1GaWJHVXNJSFZ1WkdWbWFXNWxaQ3dnWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdYM0psYzI5c2RtVW9jSEp2YldselpTd2dkbUZzZFdVcE8xeHVJQ0FnSUgwc0lHWjFibU4wYVc5dUlDaHlaV0Z6YjI0cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCZmNtVnFaV04wS0hCeWIyMXBjMlVzSUhKbFlYTnZiaWs3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2FHRnVaR3hsVFdGNVltVlVhR1Z1WVdKc1pTaHdjbTl0YVhObExDQnRZWGxpWlZSb1pXNWhZbXhsTENCMGFHVnVKQ1FwSUh0Y2JpQWdhV1lnS0cxaGVXSmxWR2hsYm1GaWJHVXVZMjl1YzNSeWRXTjBiM0lnUFQwOUlIQnliMjFwYzJVdVkyOXVjM1J5ZFdOMGIzSWdKaVlnZEdobGJpUWtJRDA5UFNCMGFHVnVJQ1ltSUcxaGVXSmxWR2hsYm1GaWJHVXVZMjl1YzNSeWRXTjBiM0l1Y21WemIyeDJaU0E5UFQwZ2NtVnpiMngyWlNrZ2UxeHVJQ0FnSUdoaGJtUnNaVTkzYmxSb1pXNWhZbXhsS0hCeWIyMXBjMlVzSUcxaGVXSmxWR2hsYm1GaWJHVXBPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR2xtSUNoMGFHVnVKQ1FnUFQwOUlFZEZWRjlVU0VWT1gwVlNVazlTS1NCN1hHNGdJQ0FnSUNCZmNtVnFaV04wS0hCeWIyMXBjMlVzSUVkRlZGOVVTRVZPWDBWU1VrOVNMbVZ5Y205eUtUdGNiaUFnSUNBZ0lFZEZWRjlVU0VWT1gwVlNVazlTTG1WeWNtOXlJRDBnYm5Wc2JEdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUm9aVzRrSkNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0JtZFd4bWFXeHNLSEJ5YjIxcGMyVXNJRzFoZVdKbFZHaGxibUZpYkdVcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTkdkVzVqZEdsdmJpaDBhR1Z1SkNRcEtTQjdYRzRnSUNBZ0lDQm9ZVzVrYkdWR2IzSmxhV2R1VkdobGJtRmliR1VvY0hKdmJXbHpaU3dnYldGNVltVlVhR1Z1WVdKc1pTd2dkR2hsYmlRa0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWm5Wc1ptbHNiQ2h3Y205dGFYTmxMQ0J0WVhsaVpWUm9aVzVoWW14bEtUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdYM0psYzI5c2RtVW9jSEp2YldselpTd2dkbUZzZFdVcElIdGNiaUFnYVdZZ0tIQnliMjFwYzJVZ1BUMDlJSFpoYkhWbEtTQjdYRzRnSUNBZ1gzSmxhbVZqZENod2NtOXRhWE5sTENCelpXeG1SblZzWm1sc2JHMWxiblFvS1NrN1hHNGdJSDBnWld4elpTQnBaaUFvYjJKcVpXTjBUM0pHZFc1amRHbHZiaWgyWVd4MVpTa3BJSHRjYmlBZ0lDQm9ZVzVrYkdWTllYbGlaVlJvWlc1aFlteGxLSEJ5YjIxcGMyVXNJSFpoYkhWbExDQm5aWFJVYUdWdUtIWmhiSFZsS1NrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ1puVnNabWxzYkNod2NtOXRhWE5sTENCMllXeDFaU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2NIVmliR2x6YUZKbGFtVmpkR2x2Ymlod2NtOXRhWE5sS1NCN1hHNGdJR2xtSUNod2NtOXRhWE5sTGw5dmJtVnljbTl5S1NCN1hHNGdJQ0FnY0hKdmJXbHpaUzVmYjI1bGNuSnZjaWh3Y205dGFYTmxMbDl5WlhOMWJIUXBPMXh1SUNCOVhHNWNiaUFnY0hWaWJHbHphQ2h3Y205dGFYTmxLVHRjYm4xY2JseHVablZ1WTNScGIyNGdablZzWm1sc2JDaHdjbTl0YVhObExDQjJZV3gxWlNrZ2UxeHVJQ0JwWmlBb2NISnZiV2x6WlM1ZmMzUmhkR1VnSVQwOUlGQkZUa1JKVGtjcElIdGNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNibHh1SUNCd2NtOXRhWE5sTGw5eVpYTjFiSFFnUFNCMllXeDFaVHRjYmlBZ2NISnZiV2x6WlM1ZmMzUmhkR1VnUFNCR1ZVeEdTVXhNUlVRN1hHNWNiaUFnYVdZZ0tIQnliMjFwYzJVdVgzTjFZbk5qY21saVpYSnpMbXhsYm1kMGFDQWhQVDBnTUNrZ2UxeHVJQ0FnSUdGellYQW9jSFZpYkdsemFDd2djSEp2YldselpTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWDNKbGFtVmpkQ2h3Y205dGFYTmxMQ0J5WldGemIyNHBJSHRjYmlBZ2FXWWdLSEJ5YjIxcGMyVXVYM04wWVhSbElDRTlQU0JRUlU1RVNVNUhLU0I3WEc0Z0lDQWdjbVYwZFhKdU8xeHVJQ0I5WEc0Z0lIQnliMjFwYzJVdVgzTjBZWFJsSUQwZ1VrVktSVU5VUlVRN1hHNGdJSEJ5YjIxcGMyVXVYM0psYzNWc2RDQTlJSEpsWVhOdmJqdGNibHh1SUNCaGMyRndLSEIxWW14cGMyaFNaV3BsWTNScGIyNHNJSEJ5YjIxcGMyVXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpkV0p6WTNKcFltVW9jR0Z5Wlc1MExDQmphR2xzWkN3Z2IyNUdkV3htYVd4c2JXVnVkQ3dnYjI1U1pXcGxZM1JwYjI0cElIdGNiaUFnZG1GeUlGOXpkV0p6WTNKcFltVnljeUE5SUhCaGNtVnVkQzVmYzNWaWMyTnlhV0psY25NN1hHNGdJSFpoY2lCc1pXNW5kR2dnUFNCZmMzVmljMk55YVdKbGNuTXViR1Z1WjNSb08xeHVYRzRnSUhCaGNtVnVkQzVmYjI1bGNuSnZjaUE5SUc1MWJHdzdYRzVjYmlBZ1gzTjFZbk5qY21saVpYSnpXMnhsYm1kMGFGMGdQU0JqYUdsc1pEdGNiaUFnWDNOMVluTmpjbWxpWlhKelcyeGxibWQwYUNBcklFWlZURVpKVEV4RlJGMGdQU0J2YmtaMWJHWnBiR3h0Wlc1ME8xeHVJQ0JmYzNWaWMyTnlhV0psY25OYmJHVnVaM1JvSUNzZ1VrVktSVU5VUlVSZElEMGdiMjVTWldwbFkzUnBiMjQ3WEc1Y2JpQWdhV1lnS0d4bGJtZDBhQ0E5UFQwZ01DQW1KaUJ3WVhKbGJuUXVYM04wWVhSbEtTQjdYRzRnSUNBZ1lYTmhjQ2h3ZFdKc2FYTm9MQ0J3WVhKbGJuUXBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhCMVlteHBjMmdvY0hKdmJXbHpaU2tnZTF4dUlDQjJZWElnYzNWaWMyTnlhV0psY25NZ1BTQndjbTl0YVhObExsOXpkV0p6WTNKcFltVnljenRjYmlBZ2RtRnlJSE5sZEhSc1pXUWdQU0J3Y205dGFYTmxMbDl6ZEdGMFpUdGNibHh1SUNCcFppQW9jM1ZpYzJOeWFXSmxjbk11YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzVjYmlBZ2RtRnlJR05vYVd4a0lEMGdkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdZMkZzYkdKaFkyc2dQU0IxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0JrWlhSaGFXd2dQU0J3Y205dGFYTmxMbDl5WlhOMWJIUTdYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnpkV0p6WTNKcFltVnljeTVzWlc1bmRHZzdJR2tnS3owZ015a2dlMXh1SUNBZ0lHTm9hV3hrSUQwZ2MzVmljMk55YVdKbGNuTmJhVjA3WEc0Z0lDQWdZMkZzYkdKaFkyc2dQU0J6ZFdKelkzSnBZbVZ5YzF0cElDc2djMlYwZEd4bFpGMDdYRzVjYmlBZ0lDQnBaaUFvWTJocGJHUXBJSHRjYmlBZ0lDQWdJR2x1ZG05clpVTmhiR3hpWVdOcktITmxkSFJzWldRc0lHTm9hV3hrTENCallXeHNZbUZqYXl3Z1pHVjBZV2xzS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdZMkZzYkdKaFkyc29aR1YwWVdsc0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQndjbTl0YVhObExsOXpkV0p6WTNKcFltVnljeTVzWlc1bmRHZ2dQU0F3TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJGY25KdmNrOWlhbVZqZENncElIdGNiaUFnZEdocGN5NWxjbkp2Y2lBOUlHNTFiR3c3WEc1OVhHNWNiblpoY2lCVVVsbGZRMEZVUTBoZlJWSlNUMUlnUFNCdVpYY2dSWEp5YjNKUFltcGxZM1FvS1R0Y2JseHVablZ1WTNScGIyNGdkSEo1UTJGMFkyZ29ZMkZzYkdKaFkyc3NJR1JsZEdGcGJDa2dlMXh1SUNCMGNua2dlMXh1SUNBZ0lISmxkSFZ5YmlCallXeHNZbUZqYXloa1pYUmhhV3dwTzF4dUlDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdWRkpaWDBOQlZFTklYMFZTVWs5U0xtVnljbTl5SUQwZ1pUdGNiaUFnSUNCeVpYUjFjbTRnVkZKWlgwTkJWRU5JWDBWU1VrOVNPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdsdWRtOXJaVU5oYkd4aVlXTnJLSE5sZEhSc1pXUXNJSEJ5YjIxcGMyVXNJR05oYkd4aVlXTnJMQ0JrWlhSaGFXd3BJSHRjYmlBZ2RtRnlJR2hoYzBOaGJHeGlZV05ySUQwZ2FYTkdkVzVqZEdsdmJpaGpZV3hzWW1GamF5a3NYRzRnSUNBZ0lDQjJZV3gxWlNBOUlIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lHVnljbTl5SUQwZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUNBZ2MzVmpZMlZsWkdWa0lEMGdkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdabUZwYkdWa0lEMGdkVzVrWldacGJtVmtPMXh1WEc0Z0lHbG1JQ2hvWVhORFlXeHNZbUZqYXlrZ2UxeHVJQ0FnSUhaaGJIVmxJRDBnZEhKNVEyRjBZMmdvWTJGc2JHSmhZMnNzSUdSbGRHRnBiQ2s3WEc1Y2JpQWdJQ0JwWmlBb2RtRnNkV1VnUFQwOUlGUlNXVjlEUVZSRFNGOUZVbEpQVWlrZ2UxeHVJQ0FnSUNBZ1ptRnBiR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJR1Z5Y205eUlEMGdkbUZzZFdVdVpYSnliM0k3WEc0Z0lDQWdJQ0IyWVd4MVpTNWxjbkp2Y2lBOUlHNTFiR3c3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lITjFZMk5sWldSbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIQnliMjFwYzJVZ1BUMDlJSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQmZjbVZxWldOMEtIQnliMjFwYzJVc0lHTmhibTV2ZEZKbGRIVnliazkzYmlncEtUdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZG1Gc2RXVWdQU0JrWlhSaGFXdzdYRzRnSUNBZ2MzVmpZMlZsWkdWa0lEMGdkSEoxWlR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2h3Y205dGFYTmxMbDl6ZEdGMFpTQWhQVDBnVUVWT1JFbE9SeWtnZTF4dUlDQWdJQzh2SUc1dmIzQmNiaUFnZlNCbGJITmxJR2xtSUNob1lYTkRZV3hzWW1GamF5QW1KaUJ6ZFdOalpXVmtaV1FwSUh0Y2JpQWdJQ0FnSUY5eVpYTnZiSFpsS0hCeWIyMXBjMlVzSUhaaGJIVmxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1poYVd4bFpDa2dlMXh1SUNBZ0lDQWdYM0psYW1WamRDaHdjbTl0YVhObExDQmxjbkp2Y2lrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoelpYUjBiR1ZrSUQwOVBTQkdWVXhHU1V4TVJVUXBJSHRjYmlBZ0lDQWdJR1oxYkdacGJHd29jSEp2YldselpTd2dkbUZzZFdVcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2MyVjBkR3hsWkNBOVBUMGdVa1ZLUlVOVVJVUXBJSHRjYmlBZ0lDQWdJRjl5WldwbFkzUW9jSEp2YldselpTd2dkbUZzZFdVcE8xeHVJQ0FnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYVc1cGRHbGhiR2w2WlZCeWIyMXBjMlVvY0hKdmJXbHpaU3dnY21WemIyeDJaWElwSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0J5WlhOdmJIWmxjaWhtZFc1amRHbHZiaUJ5WlhOdmJIWmxVSEp2YldselpTaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ1gzSmxjMjlzZG1Vb2NISnZiV2x6WlN3Z2RtRnNkV1VwTzF4dUlDQWdJSDBzSUdaMWJtTjBhVzl1SUhKbGFtVmpkRkJ5YjIxcGMyVW9jbVZoYzI5dUtTQjdYRzRnSUNBZ0lDQmZjbVZxWldOMEtIQnliMjFwYzJVc0lISmxZWE52YmlrN1hHNGdJQ0FnZlNrN1hHNGdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0JmY21WcVpXTjBLSEJ5YjIxcGMyVXNJR1VwTzF4dUlDQjlYRzU5WEc1Y2JuWmhjaUJwWkNBOUlEQTdYRzVtZFc1amRHbHZiaUJ1WlhoMFNXUW9LU0I3WEc0Z0lISmxkSFZ5YmlCcFpDc3JPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnRZV3RsVUhKdmJXbHpaU2h3Y205dGFYTmxLU0I3WEc0Z0lIQnliMjFwYzJWYlVGSlBUVWxUUlY5SlJGMGdQU0JwWkNzck8xeHVJQ0J3Y205dGFYTmxMbDl6ZEdGMFpTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ2NISnZiV2x6WlM1ZmNtVnpkV3gwSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0J3Y205dGFYTmxMbDl6ZFdKelkzSnBZbVZ5Y3lBOUlGdGRPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQkZiblZ0WlhKaGRHOXlLRU52Ym5OMGNuVmpkRzl5TENCcGJuQjFkQ2tnZTF4dUlDQjBhR2x6TGw5cGJuTjBZVzVqWlVOdmJuTjBjblZqZEc5eUlEMGdRMjl1YzNSeWRXTjBiM0k3WEc0Z0lIUm9hWE11Y0hKdmJXbHpaU0E5SUc1bGR5QkRiMjV6ZEhKMVkzUnZjaWh1YjI5d0tUdGNibHh1SUNCcFppQW9JWFJvYVhNdWNISnZiV2x6WlZ0UVVrOU5TVk5GWDBsRVhTa2dlMXh1SUNBZ0lHMWhhMlZRY205dGFYTmxLSFJvYVhNdWNISnZiV2x6WlNrN1hHNGdJSDFjYmx4dUlDQnBaaUFvYVhOQmNuSmhlU2hwYm5CMWRDa3BJSHRjYmlBZ0lDQjBhR2x6TGw5cGJuQjFkQ0E5SUdsdWNIVjBPMXh1SUNBZ0lIUm9hWE11YkdWdVozUm9JRDBnYVc1d2RYUXViR1Z1WjNSb08xeHVJQ0FnSUhSb2FYTXVYM0psYldGcGJtbHVaeUE5SUdsdWNIVjBMbXhsYm1kMGFEdGNibHh1SUNBZ0lIUm9hWE11WDNKbGMzVnNkQ0E5SUc1bGR5QkJjbkpoZVNoMGFHbHpMbXhsYm1kMGFDazdYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUdaMWJHWnBiR3dvZEdocGN5NXdjbTl0YVhObExDQjBhR2x6TGw5eVpYTjFiSFFwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhR2x6TG14bGJtZDBhQ0E5SUhSb2FYTXViR1Z1WjNSb0lIeDhJREE3WEc0Z0lDQWdJQ0IwYUdsekxsOWxiblZ0WlhKaGRHVW9LVHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbDl5WlcxaGFXNXBibWNnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnWm5Wc1ptbHNiQ2gwYUdsekxuQnliMjFwYzJVc0lIUm9hWE11WDNKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRjl5WldwbFkzUW9kR2hwY3k1d2NtOXRhWE5sTENCMllXeHBaR0YwYVc5dVJYSnliM0lvS1NrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdkbUZzYVdSaGRHbHZia1Z5Y205eUtDa2dlMXh1SUNCeVpYUjFjbTRnYm1WM0lFVnljbTl5S0NkQmNuSmhlU0JOWlhSb2IyUnpJRzExYzNRZ1ltVWdjSEp2ZG1sa1pXUWdZVzRnUVhKeVlYa25LVHRjYm4wN1hHNWNia1Z1ZFcxbGNtRjBiM0l1Y0hKdmRHOTBlWEJsTGw5bGJuVnRaWEpoZEdVZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJzWlc1bmRHZ2dQU0IwYUdsekxteGxibWQwYUR0Y2JpQWdkbUZ5SUY5cGJuQjFkQ0E5SUhSb2FYTXVYMmx1Y0hWME8xeHVYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUIwYUdsekxsOXpkR0YwWlNBOVBUMGdVRVZPUkVsT1J5QW1KaUJwSUR3Z2JHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQjBhR2x6TGw5bFlXTm9SVzUwY25rb1gybHVjSFYwVzJsZExDQnBLVHRjYmlBZ2ZWeHVmVHRjYmx4dVJXNTFiV1Z5WVhSdmNpNXdjbTkwYjNSNWNHVXVYMlZoWTJoRmJuUnllU0E5SUdaMWJtTjBhVzl1SUNobGJuUnllU3dnYVNrZ2UxeHVJQ0IyWVhJZ1l5QTlJSFJvYVhNdVgybHVjM1JoYm1ObFEyOXVjM1J5ZFdOMGIzSTdYRzRnSUhaaGNpQnlaWE52YkhabEpDUWdQU0JqTG5KbGMyOXNkbVU3WEc1Y2JpQWdhV1lnS0hKbGMyOXNkbVVrSkNBOVBUMGdjbVZ6YjJ4MlpTa2dlMXh1SUNBZ0lIWmhjaUJmZEdobGJpQTlJR2RsZEZSb1pXNG9aVzUwY25rcE8xeHVYRzRnSUNBZ2FXWWdLRjkwYUdWdUlEMDlQU0IwYUdWdUlDWW1JR1Z1ZEhKNUxsOXpkR0YwWlNBaFBUMGdVRVZPUkVsT1J5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZmMyVjBkR3hsWkVGMEtHVnVkSEo1TGw5emRHRjBaU3dnYVN3Z1pXNTBjbmt1WDNKbGMzVnNkQ2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdYM1JvWlc0Z0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYM0psYldGcGJtbHVaeTB0TzF4dUlDQWdJQ0FnZEdocGN5NWZjbVZ6ZFd4MFcybGRJRDBnWlc1MGNuazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGpJRDA5UFNCUWNtOXRhWE5sS1NCN1hHNGdJQ0FnSUNCMllYSWdjSEp2YldselpTQTlJRzVsZHlCaktHNXZiM0FwTzF4dUlDQWdJQ0FnYUdGdVpHeGxUV0Y1WW1WVWFHVnVZV0pzWlNod2NtOXRhWE5sTENCbGJuUnllU3dnWDNSb1pXNHBPMXh1SUNBZ0lDQWdkR2hwY3k1ZmQybHNiRk5sZEhSc1pVRjBLSEJ5YjIxcGMyVXNJR2twTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5M2FXeHNVMlYwZEd4bFFYUW9ibVYzSUdNb1puVnVZM1JwYjI0Z0tISmxjMjlzZG1Va0pDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6YjJ4MlpTUWtLR1Z1ZEhKNUtUdGNiaUFnSUNBZ0lIMHBMQ0JwS1R0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdocGN5NWZkMmxzYkZObGRIUnNaVUYwS0hKbGMyOXNkbVVrSkNobGJuUnllU2tzSUdrcE8xeHVJQ0I5WEc1OU8xeHVYRzVGYm5WdFpYSmhkRzl5TG5CeWIzUnZkSGx3WlM1ZmMyVjBkR3hsWkVGMElEMGdablZ1WTNScGIyNGdLSE4wWVhSbExDQnBMQ0IyWVd4MVpTa2dlMXh1SUNCMllYSWdjSEp2YldselpTQTlJSFJvYVhNdWNISnZiV2x6WlR0Y2JseHVJQ0JwWmlBb2NISnZiV2x6WlM1ZmMzUmhkR1VnUFQwOUlGQkZUa1JKVGtjcElIdGNiaUFnSUNCMGFHbHpMbDl5WlcxaGFXNXBibWN0TFR0Y2JseHVJQ0FnSUdsbUlDaHpkR0YwWlNBOVBUMGdVa1ZLUlVOVVJVUXBJSHRjYmlBZ0lDQWdJRjl5WldwbFkzUW9jSEp2YldselpTd2dkbUZzZFdVcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOXlaWE4xYkhSYmFWMGdQU0IyWVd4MVpUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnBaaUFvZEdocGN5NWZjbVZ0WVdsdWFXNW5JRDA5UFNBd0tTQjdYRzRnSUNBZ1puVnNabWxzYkNod2NtOXRhWE5sTENCMGFHbHpMbDl5WlhOMWJIUXBPMXh1SUNCOVhHNTlPMXh1WEc1RmJuVnRaWEpoZEc5eUxuQnliM1J2ZEhsd1pTNWZkMmxzYkZObGRIUnNaVUYwSUQwZ1puVnVZM1JwYjI0Z0tIQnliMjFwYzJVc0lHa3BJSHRjYmlBZ2RtRnlJR1Z1ZFcxbGNtRjBiM0lnUFNCMGFHbHpPMXh1WEc0Z0lITjFZbk5qY21saVpTaHdjbTl0YVhObExDQjFibVJsWm1sdVpXUXNJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGJuVnRaWEpoZEc5eUxsOXpaWFIwYkdWa1FYUW9SbFZNUmtsTVRFVkVMQ0JwTENCMllXeDFaU2s3WEc0Z0lIMHNJR1oxYm1OMGFXOXVJQ2h5WldGemIyNHBJSHRjYmlBZ0lDQnlaWFIxY200Z1pXNTFiV1Z5WVhSdmNpNWZjMlYwZEd4bFpFRjBLRkpGU2tWRFZFVkVMQ0JwTENCeVpXRnpiMjRwTzF4dUlDQjlLVHRjYm4wN1hHNWNiaThxS2x4dUlDQmdVSEp2YldselpTNWhiR3hnSUdGalkyVndkSE1nWVc0Z1lYSnlZWGtnYjJZZ2NISnZiV2x6WlhNc0lHRnVaQ0J5WlhSMWNtNXpJR0VnYm1WM0lIQnliMjFwYzJVZ2QyaHBZMmhjYmlBZ2FYTWdablZzWm1sc2JHVmtJSGRwZEdnZ1lXNGdZWEp5WVhrZ2IyWWdablZzWm1sc2JHMWxiblFnZG1Gc2RXVnpJR1p2Y2lCMGFHVWdjR0Z6YzJWa0lIQnliMjFwYzJWekxDQnZjbHh1SUNCeVpXcGxZM1JsWkNCM2FYUm9JSFJvWlNCeVpXRnpiMjRnYjJZZ2RHaGxJR1pwY25OMElIQmhjM05sWkNCd2NtOXRhWE5sSUhSdklHSmxJSEpsYW1WamRHVmtMaUJKZENCallYTjBjeUJoYkd4Y2JpQWdaV3hsYldWdWRITWdiMllnZEdobElIQmhjM05sWkNCcGRHVnlZV0pzWlNCMGJ5QndjbTl0YVhObGN5QmhjeUJwZENCeWRXNXpJSFJvYVhNZ1lXeG5iM0pwZEdodExseHVYRzRnSUVWNFlXMXdiR1U2WEc1Y2JpQWdZR0JnYW1GMllYTmpjbWx3ZEZ4dUlDQnNaWFFnY0hKdmJXbHpaVEVnUFNCeVpYTnZiSFpsS0RFcE8xeHVJQ0JzWlhRZ2NISnZiV2x6WlRJZ1BTQnlaWE52YkhabEtESXBPMXh1SUNCc1pYUWdjSEp2YldselpUTWdQU0J5WlhOdmJIWmxLRE1wTzF4dUlDQnNaWFFnY0hKdmJXbHpaWE1nUFNCYklIQnliMjFwYzJVeExDQndjbTl0YVhObE1pd2djSEp2YldselpUTWdYVHRjYmx4dUlDQlFjbTl0YVhObExtRnNiQ2h3Y205dGFYTmxjeWt1ZEdobGJpaG1kVzVqZEdsdmJpaGhjbkpoZVNsN1hHNGdJQ0FnTHk4Z1ZHaGxJR0Z5Y21GNUlHaGxjbVVnZDI5MWJHUWdZbVVnV3lBeExDQXlMQ0F6SUYwN1hHNGdJSDBwTzF4dUlDQmdZR0JjYmx4dUlDQkpaaUJoYm5rZ2IyWWdkR2hsSUdCd2NtOXRhWE5sYzJBZ1oybDJaVzRnZEc4Z1lHRnNiR0FnWVhKbElISmxhbVZqZEdWa0xDQjBhR1VnWm1seWMzUWdjSEp2YldselpWeHVJQ0IwYUdGMElHbHpJSEpsYW1WamRHVmtJSGRwYkd3Z1ltVWdaMmwyWlc0Z1lYTWdZVzRnWVhKbmRXMWxiblFnZEc4Z2RHaGxJSEpsZEhWeWJtVmtJSEJ5YjIxcGMyVnpKM05jYmlBZ2NtVnFaV04wYVc5dUlHaGhibVJzWlhJdUlFWnZjaUJsZUdGdGNHeGxPbHh1WEc0Z0lFVjRZVzF3YkdVNlhHNWNiaUFnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0JzWlhRZ2NISnZiV2x6WlRFZ1BTQnlaWE52YkhabEtERXBPMXh1SUNCc1pYUWdjSEp2YldselpUSWdQU0J5WldwbFkzUW9ibVYzSUVWeWNtOXlLRndpTWx3aUtTazdYRzRnSUd4bGRDQndjbTl0YVhObE15QTlJSEpsYW1WamRDaHVaWGNnUlhKeWIzSW9YQ0l6WENJcEtUdGNiaUFnYkdWMElIQnliMjFwYzJWeklEMGdXeUJ3Y205dGFYTmxNU3dnY0hKdmJXbHpaVElzSUhCeWIyMXBjMlV6SUYwN1hHNWNiaUFnVUhKdmJXbHpaUzVoYkd3b2NISnZiV2x6WlhNcExuUm9aVzRvWm5WdVkzUnBiMjRvWVhKeVlYa3BlMXh1SUNBZ0lDOHZJRU52WkdVZ2FHVnlaU0J1WlhabGNpQnlkVzV6SUdKbFkyRjFjMlVnZEdobGNtVWdZWEpsSUhKbGFtVmpkR1ZrSUhCeWIyMXBjMlZ6SVZ4dUlDQjlMQ0JtZFc1amRHbHZiaWhsY25KdmNpa2dlMXh1SUNBZ0lDOHZJR1Z5Y205eUxtMWxjM05oWjJVZ1BUMDlJRndpTWx3aVhHNGdJSDBwTzF4dUlDQmdZR0JjYmx4dUlDQkFiV1YwYUc5a0lHRnNiRnh1SUNCQWMzUmhkR2xqWEc0Z0lFQndZWEpoYlNCN1FYSnlZWGw5SUdWdWRISnBaWE1nWVhKeVlYa2diMllnY0hKdmJXbHpaWE5jYmlBZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUd4aFltVnNJRzl3ZEdsdmJtRnNJSE4wY21sdVp5Qm1iM0lnYkdGaVpXeHBibWNnZEdobElIQnliMjFwYzJVdVhHNGdJRlZ6WldaMWJDQm1iM0lnZEc5dmJHbHVaeTVjYmlBZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ2NISnZiV2x6WlNCMGFHRjBJR2x6SUdaMWJHWnBiR3hsWkNCM2FHVnVJR0ZzYkNCZ2NISnZiV2x6WlhOZ0lHaGhkbVVnWW1WbGJseHVJQ0JtZFd4bWFXeHNaV1FzSUc5eUlISmxhbVZqZEdWa0lHbG1JR0Z1ZVNCdlppQjBhR1Z0SUdKbFkyOXRaU0J5WldwbFkzUmxaQzVjYmlBZ1FITjBZWFJwWTF4dUtpOWNibVoxYm1OMGFXOXVJR0ZzYkNobGJuUnlhV1Z6S1NCN1hHNGdJSEpsZEhWeWJpQnVaWGNnUlc1MWJXVnlZWFJ2Y2loMGFHbHpMQ0JsYm5SeWFXVnpLUzV3Y205dGFYTmxPMXh1ZlZ4dVhHNHZLaXBjYmlBZ1lGQnliMjFwYzJVdWNtRmpaV0FnY21WMGRYSnVjeUJoSUc1bGR5QndjbTl0YVhObElIZG9hV05vSUdseklITmxkSFJzWldRZ2FXNGdkR2hsSUhOaGJXVWdkMkY1SUdGeklIUm9aVnh1SUNCbWFYSnpkQ0J3WVhOelpXUWdjSEp2YldselpTQjBieUJ6WlhSMGJHVXVYRzVjYmlBZ1JYaGhiWEJzWlRwY2JseHVJQ0JnWUdCcVlYWmhjMk55YVhCMFhHNGdJR3hsZENCd2NtOXRhWE5sTVNBOUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDbDdYRzRnSUNBZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdjbVZ6YjJ4MlpTZ25jSEp2YldselpTQXhKeWs3WEc0Z0lDQWdmU3dnTWpBd0tUdGNiaUFnZlNrN1hHNWNiaUFnYkdWMElIQnliMjFwYzJVeUlEMGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLWHRjYmlBZ0lDQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0J5WlhOdmJIWmxLQ2R3Y205dGFYTmxJREluS1R0Y2JpQWdJQ0I5TENBeE1EQXBPMXh1SUNCOUtUdGNibHh1SUNCUWNtOXRhWE5sTG5KaFkyVW9XM0J5YjIxcGMyVXhMQ0J3Y205dGFYTmxNbDBwTG5Sb1pXNG9ablZ1WTNScGIyNG9jbVZ6ZFd4MEtYdGNiaUFnSUNBdkx5QnlaWE4xYkhRZ1BUMDlJQ2R3Y205dGFYTmxJREluSUdKbFkyRjFjMlVnYVhRZ2QyRnpJSEpsYzI5c2RtVmtJR0psWm05eVpTQndjbTl0YVhObE1WeHVJQ0FnSUM4dklIZGhjeUJ5WlhOdmJIWmxaQzVjYmlBZ2ZTazdYRzRnSUdCZ1lGeHVYRzRnSUdCUWNtOXRhWE5sTG5KaFkyVmdJR2x6SUdSbGRHVnliV2x1YVhOMGFXTWdhVzRnZEdoaGRDQnZibXg1SUhSb1pTQnpkR0YwWlNCdlppQjBhR1VnWm1seWMzUmNiaUFnYzJWMGRHeGxaQ0J3Y205dGFYTmxJRzFoZEhSbGNuTXVJRVp2Y2lCbGVHRnRjR3hsTENCbGRtVnVJR2xtSUc5MGFHVnlJSEJ5YjIxcGMyVnpJR2RwZG1WdUlIUnZJSFJvWlZ4dUlDQmdjSEp2YldselpYTmdJR0Z5Y21GNUlHRnlaM1Z0Wlc1MElHRnlaU0J5WlhOdmJIWmxaQ3dnWW5WMElIUm9aU0JtYVhKemRDQnpaWFIwYkdWa0lIQnliMjFwYzJVZ2FHRnpYRzRnSUdKbFkyOXRaU0J5WldwbFkzUmxaQ0JpWldadmNtVWdkR2hsSUc5MGFHVnlJSEJ5YjIxcGMyVnpJR0psWTJGdFpTQm1kV3htYVd4c1pXUXNJSFJvWlNCeVpYUjFjbTVsWkZ4dUlDQndjbTl0YVhObElIZHBiR3dnWW1WamIyMWxJSEpsYW1WamRHVmtPbHh1WEc0Z0lHQmdZR3BoZG1GelkzSnBjSFJjYmlBZ2JHVjBJSEJ5YjIxcGMyVXhJRDBnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1h0Y2JpQWdJQ0J6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNCeVpYTnZiSFpsS0Nkd2NtOXRhWE5sSURFbktUdGNiaUFnSUNCOUxDQXlNREFwTzF4dUlDQjlLVHRjYmx4dUlDQnNaWFFnY0hKdmJXbHpaVElnUFNCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcGUxeHVJQ0FnSUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lISmxhbVZqZENodVpYY2dSWEp5YjNJb0ozQnliMjFwYzJVZ01pY3BLVHRjYmlBZ0lDQjlMQ0F4TURBcE8xeHVJQ0I5S1R0Y2JseHVJQ0JRY205dGFYTmxMbkpoWTJVb1czQnliMjFwYzJVeExDQndjbTl0YVhObE1sMHBMblJvWlc0b1puVnVZM1JwYjI0b2NtVnpkV3gwS1h0Y2JpQWdJQ0F2THlCRGIyUmxJR2hsY21VZ2JtVjJaWElnY25WdWMxeHVJQ0I5TENCbWRXNWpkR2x2YmloeVpXRnpiMjRwZTF4dUlDQWdJQzh2SUhKbFlYTnZiaTV0WlhOellXZGxJRDA5UFNBbmNISnZiV2x6WlNBeUp5QmlaV05oZFhObElIQnliMjFwYzJVZ01pQmlaV05oYldVZ2NtVnFaV04wWldRZ1ltVm1iM0psWEc0Z0lDQWdMeThnY0hKdmJXbHpaU0F4SUdKbFkyRnRaU0JtZFd4bWFXeHNaV1JjYmlBZ2ZTazdYRzRnSUdCZ1lGeHVYRzRnSUVGdUlHVjRZVzF3YkdVZ2NtVmhiQzEzYjNKc1pDQjFjMlVnWTJGelpTQnBjeUJwYlhCc1pXMWxiblJwYm1jZ2RHbHRaVzkxZEhNNlhHNWNiaUFnWUdCZ2FtRjJZWE5qY21sd2RGeHVJQ0JRY205dGFYTmxMbkpoWTJVb1cyRnFZWGdvSjJadmJ5NXFjMjl1Snlrc0lIUnBiV1Z2ZFhRb05UQXdNQ2xkS1Z4dUlDQmdZR0JjYmx4dUlDQkFiV1YwYUc5a0lISmhZMlZjYmlBZ1FITjBZWFJwWTF4dUlDQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCd2NtOXRhWE5sY3lCaGNuSmhlU0J2WmlCd2NtOXRhWE5sY3lCMGJ5QnZZbk5sY25abFhHNGdJRlZ6WldaMWJDQm1iM0lnZEc5dmJHbHVaeTVjYmlBZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ1lTQndjbTl0YVhObElIZG9hV05vSUhObGRIUnNaWE1nYVc0Z2RHaGxJSE5oYldVZ2QyRjVJR0Z6SUhSb1pTQm1hWEp6ZENCd1lYTnpaV1JjYmlBZ2NISnZiV2x6WlNCMGJ5QnpaWFIwYkdVdVhHNHFMMXh1Wm5WdVkzUnBiMjRnY21GalpTaGxiblJ5YVdWektTQjdYRzRnSUM4cWFuTm9hVzUwSUhaaGJHbGtkR2hwY3pwMGNuVmxJQ292WEc0Z0lIWmhjaUJEYjI1emRISjFZM1J2Y2lBOUlIUm9hWE03WEc1Y2JpQWdhV1lnS0NGcGMwRnljbUY1S0dWdWRISnBaWE1wS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCRGIyNXpkSEoxWTNSdmNpaG1kVzVqZEdsdmJpQW9YeXdnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZxWldOMEtHNWxkeUJVZVhCbFJYSnliM0lvSjFsdmRTQnRkWE4wSUhCaGMzTWdZVzRnWVhKeVlYa2dkRzhnY21GalpTNG5LU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCRGIyNXpkSEoxWTNSdmNpaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQjJZWElnYkdWdVozUm9JRDBnWlc1MGNtbGxjeTVzWlc1bmRHZzdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lFTnZibk4wY25WamRHOXlMbkpsYzI5c2RtVW9aVzUwY21sbGMxdHBYU2t1ZEdobGJpaHlaWE52YkhabExDQnlaV3BsWTNRcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDQmdVSEp2YldselpTNXlaV3BsWTNSZ0lISmxkSFZ5Ym5NZ1lTQndjbTl0YVhObElISmxhbVZqZEdWa0lIZHBkR2dnZEdobElIQmhjM05sWkNCZ2NtVmhjMjl1WUM1Y2JpQWdTWFFnYVhNZ2MyaHZjblJvWVc1a0lHWnZjaUIwYUdVZ1ptOXNiRzkzYVc1bk9seHVYRzRnSUdCZ1lHcGhkbUZ6WTNKcGNIUmNiaUFnYkdWMElIQnliMjFwYzJVZ1BTQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBlMXh1SUNBZ0lISmxhbVZqZENodVpYY2dSWEp5YjNJb0oxZElUMDlRVXljcEtUdGNiaUFnZlNrN1hHNWNiaUFnY0hKdmJXbHpaUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsS1h0Y2JpQWdJQ0F2THlCRGIyUmxJR2hsY21VZ1pHOWxjMjRuZENCeWRXNGdZbVZqWVhWelpTQjBhR1VnY0hKdmJXbHpaU0JwY3lCeVpXcGxZM1JsWkNGY2JpQWdmU3dnWm5WdVkzUnBiMjRvY21WaGMyOXVLWHRjYmlBZ0lDQXZMeUJ5WldGemIyNHViV1Z6YzJGblpTQTlQVDBnSjFkSVQwOVFVeWRjYmlBZ2ZTazdYRzRnSUdCZ1lGeHVYRzRnSUVsdWMzUmxZV1FnYjJZZ2QzSnBkR2x1WnlCMGFHVWdZV0p2ZG1Vc0lIbHZkWElnWTI5a1pTQnViM2NnYzJsdGNHeDVJR0psWTI5dFpYTWdkR2hsSUdadmJHeHZkMmx1WnpwY2JseHVJQ0JnWUdCcVlYWmhjMk55YVhCMFhHNGdJR3hsZENCd2NtOXRhWE5sSUQwZ1VISnZiV2x6WlM1eVpXcGxZM1FvYm1WM0lFVnljbTl5S0NkWFNFOVBVRk1uS1NrN1hHNWNiaUFnY0hKdmJXbHpaUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsS1h0Y2JpQWdJQ0F2THlCRGIyUmxJR2hsY21VZ1pHOWxjMjRuZENCeWRXNGdZbVZqWVhWelpTQjBhR1VnY0hKdmJXbHpaU0JwY3lCeVpXcGxZM1JsWkNGY2JpQWdmU3dnWm5WdVkzUnBiMjRvY21WaGMyOXVLWHRjYmlBZ0lDQXZMeUJ5WldGemIyNHViV1Z6YzJGblpTQTlQVDBnSjFkSVQwOVFVeWRjYmlBZ2ZTazdYRzRnSUdCZ1lGeHVYRzRnSUVCdFpYUm9iMlFnY21WcVpXTjBYRzRnSUVCemRHRjBhV05jYmlBZ1FIQmhjbUZ0SUh0QmJubDlJSEpsWVhOdmJpQjJZV3gxWlNCMGFHRjBJSFJvWlNCeVpYUjFjbTVsWkNCd2NtOXRhWE5sSUhkcGJHd2dZbVVnY21WcVpXTjBaV1FnZDJsMGFDNWNiaUFnVlhObFpuVnNJR1p2Y2lCMGIyOXNhVzVuTGx4dUlDQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQmhJSEJ5YjIxcGMyVWdjbVZxWldOMFpXUWdkMmwwYUNCMGFHVWdaMmwyWlc0Z1lISmxZWE52Ym1BdVhHNHFMMXh1Wm5WdVkzUnBiMjRnY21WcVpXTjBLSEpsWVhOdmJpa2dlMXh1SUNBdkttcHphR2x1ZENCMllXeHBaSFJvYVhNNmRISjFaU0FxTDF4dUlDQjJZWElnUTI5dWMzUnlkV04wYjNJZ1BTQjBhR2x6TzF4dUlDQjJZWElnY0hKdmJXbHpaU0E5SUc1bGR5QkRiMjV6ZEhKMVkzUnZjaWh1YjI5d0tUdGNiaUFnWDNKbGFtVmpkQ2h3Y205dGFYTmxMQ0J5WldGemIyNHBPMXh1SUNCeVpYUjFjbTRnY0hKdmJXbHpaVHRjYm4xY2JseHVablZ1WTNScGIyNGdibVZsWkhOU1pYTnZiSFpsY2lncElIdGNiaUFnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnbldXOTFJRzExYzNRZ2NHRnpjeUJoSUhKbGMyOXNkbVZ5SUdaMWJtTjBhVzl1SUdGeklIUm9aU0JtYVhKemRDQmhjbWQxYldWdWRDQjBieUIwYUdVZ2NISnZiV2x6WlNCamIyNXpkSEoxWTNSdmNpY3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnVaV1ZrYzA1bGR5Z3BJSHRjYmlBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa1poYVd4bFpDQjBieUJqYjI1emRISjFZM1FnSjFCeWIyMXBjMlVuT2lCUWJHVmhjMlVnZFhObElIUm9aU0FuYm1WM0p5QnZjR1Z5WVhSdmNpd2dkR2hwY3lCdlltcGxZM1FnWTI5dWMzUnlkV04wYjNJZ1kyRnVibTkwSUdKbElHTmhiR3hsWkNCaGN5QmhJR1oxYm1OMGFXOXVMbHdpS1R0Y2JuMWNibHh1THlvcVhHNGdJRkJ5YjIxcGMyVWdiMkpxWldOMGN5QnlaWEJ5WlhObGJuUWdkR2hsSUdWMlpXNTBkV0ZzSUhKbGMzVnNkQ0J2WmlCaGJpQmhjM2x1WTJoeWIyNXZkWE1nYjNCbGNtRjBhVzl1TGlCVWFHVmNiaUFnY0hKcGJXRnllU0IzWVhrZ2IyWWdhVzUwWlhKaFkzUnBibWNnZDJsMGFDQmhJSEJ5YjIxcGMyVWdhWE1nZEdoeWIzVm5hQ0JwZEhNZ1lIUm9aVzVnSUcxbGRHaHZaQ3dnZDJocFkyaGNiaUFnY21WbmFYTjBaWEp6SUdOaGJHeGlZV05yY3lCMGJ5QnlaV05sYVhabElHVnBkR2hsY2lCaElIQnliMjFwYzJVbmN5QmxkbVZ1ZEhWaGJDQjJZV3gxWlNCdmNpQjBhR1VnY21WaGMyOXVYRzRnSUhkb2VTQjBhR1VnY0hKdmJXbHpaU0JqWVc1dWIzUWdZbVVnWm5Wc1ptbHNiR1ZrTGx4dVhHNGdJRlJsY20xcGJtOXNiMmQ1WEc0Z0lDMHRMUzB0TFMwdExTMHRYRzVjYmlBZ0xTQmdjSEp2YldselpXQWdhWE1nWVc0Z2IySnFaV04wSUc5eUlHWjFibU4wYVc5dUlIZHBkR2dnWVNCZ2RHaGxibUFnYldWMGFHOWtJSGRvYjNObElHSmxhR0YyYVc5eUlHTnZibVp2Y20xeklIUnZJSFJvYVhNZ2MzQmxZMmxtYVdOaGRHbHZiaTVjYmlBZ0xTQmdkR2hsYm1GaWJHVmdJR2x6SUdGdUlHOWlhbVZqZENCdmNpQm1kVzVqZEdsdmJpQjBhR0YwSUdSbFptbHVaWE1nWVNCZ2RHaGxibUFnYldWMGFHOWtMbHh1SUNBdElHQjJZV3gxWldBZ2FYTWdZVzU1SUd4bFoyRnNJRXBoZG1GVFkzSnBjSFFnZG1Gc2RXVWdLR2x1WTJ4MVpHbHVaeUIxYm1SbFptbHVaV1FzSUdFZ2RHaGxibUZpYkdVc0lHOXlJR0VnY0hKdmJXbHpaU2t1WEc0Z0lDMGdZR1Y0WTJWd2RHbHZibUFnYVhNZ1lTQjJZV3gxWlNCMGFHRjBJR2x6SUhSb2NtOTNiaUIxYzJsdVp5QjBhR1VnZEdoeWIzY2djM1JoZEdWdFpXNTBMbHh1SUNBdElHQnlaV0Z6YjI1Z0lHbHpJR0VnZG1Gc2RXVWdkR2hoZENCcGJtUnBZMkYwWlhNZ2QyaDVJR0VnY0hKdmJXbHpaU0IzWVhNZ2NtVnFaV04wWldRdVhHNGdJQzBnWUhObGRIUnNaV1JnSUhSb1pTQm1hVzVoYkNCeVpYTjBhVzVuSUhOMFlYUmxJRzltSUdFZ2NISnZiV2x6WlN3Z1puVnNabWxzYkdWa0lHOXlJSEpsYW1WamRHVmtMbHh1WEc0Z0lFRWdjSEp2YldselpTQmpZVzRnWW1VZ2FXNGdiMjVsSUc5bUlIUm9jbVZsSUhOMFlYUmxjem9nY0dWdVpHbHVaeXdnWm5Wc1ptbHNiR1ZrTENCdmNpQnlaV3BsWTNSbFpDNWNibHh1SUNCUWNtOXRhWE5sY3lCMGFHRjBJR0Z5WlNCbWRXeG1hV3hzWldRZ2FHRjJaU0JoSUdaMWJHWnBiR3h0Wlc1MElIWmhiSFZsSUdGdVpDQmhjbVVnYVc0Z2RHaGxJR1oxYkdacGJHeGxaRnh1SUNCemRHRjBaUzRnSUZCeWIyMXBjMlZ6SUhSb1lYUWdZWEpsSUhKbGFtVmpkR1ZrSUdoaGRtVWdZU0J5WldwbFkzUnBiMjRnY21WaGMyOXVJR0Z1WkNCaGNtVWdhVzRnZEdobFhHNGdJSEpsYW1WamRHVmtJSE4wWVhSbExpQWdRU0JtZFd4bWFXeHNiV1Z1ZENCMllXeDFaU0JwY3lCdVpYWmxjaUJoSUhSb1pXNWhZbXhsTGx4dVhHNGdJRkJ5YjIxcGMyVnpJR05oYmlCaGJITnZJR0psSUhOaGFXUWdkRzhnS25KbGMyOXNkbVVxSUdFZ2RtRnNkV1V1SUNCSlppQjBhR2x6SUhaaGJIVmxJR2x6SUdGc2MyOGdZVnh1SUNCd2NtOXRhWE5sTENCMGFHVnVJSFJvWlNCdmNtbG5hVzVoYkNCd2NtOXRhWE5sSjNNZ2MyVjBkR3hsWkNCemRHRjBaU0IzYVd4c0lHMWhkR05vSUhSb1pTQjJZV3gxWlNkelhHNGdJSE5sZEhSc1pXUWdjM1JoZEdVdUlDQlRieUJoSUhCeWIyMXBjMlVnZEdoaGRDQXFjbVZ6YjJ4MlpYTXFJR0VnY0hKdmJXbHpaU0IwYUdGMElISmxhbVZqZEhNZ2QybHNiRnh1SUNCcGRITmxiR1lnY21WcVpXTjBMQ0JoYm1RZ1lTQndjbTl0YVhObElIUm9ZWFFnS25KbGMyOXNkbVZ6S2lCaElIQnliMjFwYzJVZ2RHaGhkQ0JtZFd4bWFXeHNjeUIzYVd4c1hHNGdJR2wwYzJWc1ppQm1kV3htYVd4c0xseHVYRzVjYmlBZ1FtRnphV01nVlhOaFoyVTZYRzRnSUMwdExTMHRMUzB0TFMwdExWeHVYRzRnSUdCZ1lHcHpYRzRnSUd4bGRDQndjbTl0YVhObElEMGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdMeThnYjI0Z2MzVmpZMlZ6YzF4dUlDQWdJSEpsYzI5c2RtVW9kbUZzZFdVcE8xeHVYRzRnSUNBZ0x5OGdiMjRnWm1GcGJIVnlaVnh1SUNBZ0lISmxhbVZqZENoeVpXRnpiMjRwTzF4dUlDQjlLVHRjYmx4dUlDQndjbTl0YVhObExuUm9aVzRvWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmlBZ0lDQXZMeUJ2YmlCbWRXeG1hV3hzYldWdWRGeHVJQ0I5TENCbWRXNWpkR2x2YmloeVpXRnpiMjRwSUh0Y2JpQWdJQ0F2THlCdmJpQnlaV3BsWTNScGIyNWNiaUFnZlNrN1hHNGdJR0JnWUZ4dVhHNGdJRUZrZG1GdVkyVmtJRlZ6WVdkbE9seHVJQ0F0TFMwdExTMHRMUzB0TFMwdExTMWNibHh1SUNCUWNtOXRhWE5sY3lCemFHbHVaU0IzYUdWdUlHRmljM1J5WVdOMGFXNW5JR0YzWVhrZ1lYTjVibU5vY205dWIzVnpJR2x1ZEdWeVlXTjBhVzl1Y3lCemRXTm9JR0Z6WEc0Z0lHQllUVXhJZEhSd1VtVnhkV1Z6ZEdCekxseHVYRzRnSUdCZ1lHcHpYRzRnSUdaMWJtTjBhVzl1SUdkbGRFcFRUMDRvZFhKc0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENsN1hHNGdJQ0FnSUNCc1pYUWdlR2h5SUQwZ2JtVjNJRmhOVEVoMGRIQlNaWEYxWlhOMEtDazdYRzVjYmlBZ0lDQWdJSGhvY2k1dmNHVnVLQ2RIUlZRbkxDQjFjbXdwTzF4dUlDQWdJQ0FnZUdoeUxtOXVjbVZoWkhsemRHRjBaV05vWVc1blpTQTlJR2hoYm1Sc1pYSTdYRzRnSUNBZ0lDQjRhSEl1Y21WemNHOXVjMlZVZVhCbElEMGdKMnB6YjI0bk8xeHVJQ0FnSUNBZ2VHaHlMbk5sZEZKbGNYVmxjM1JJWldGa1pYSW9KMEZqWTJWd2RDY3NJQ2RoY0hCc2FXTmhkR2x2Ymk5cWMyOXVKeWs3WEc0Z0lDQWdJQ0I0YUhJdWMyVnVaQ2dwTzF4dVhHNGdJQ0FnSUNCbWRXNWpkR2x2YmlCb1lXNWtiR1Z5S0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXlaV0ZrZVZOMFlYUmxJRDA5UFNCMGFHbHpMa1JQVGtVcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6ZEdGMGRYTWdQVDA5SURJd01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoMGFHbHpMbkpsYzNCdmJuTmxLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHNWxkeUJGY25KdmNpZ25aMlYwU2xOUFRqb2dZQ2NnS3lCMWNtd2dLeUFuWUNCbVlXbHNaV1FnZDJsMGFDQnpkR0YwZFhNNklGc25JQ3NnZEdocGN5NXpkR0YwZFhNZ0t5QW5YU2NwS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCblpYUktVMDlPS0NjdmNHOXpkSE11YW5OdmJpY3BMblJvWlc0b1puVnVZM1JwYjI0b2FuTnZiaWtnZTF4dUlDQWdJQzh2SUc5dUlHWjFiR1pwYkd4dFpXNTBYRzRnSUgwc0lHWjFibU4wYVc5dUtISmxZWE52YmlrZ2UxeHVJQ0FnSUM4dklHOXVJSEpsYW1WamRHbHZibHh1SUNCOUtUdGNiaUFnWUdCZ1hHNWNiaUFnVlc1c2FXdGxJR05oYkd4aVlXTnJjeXdnY0hKdmJXbHpaWE1nWVhKbElHZHlaV0YwSUdOdmJYQnZjMkZpYkdVZ2NISnBiV2wwYVhabGN5NWNibHh1SUNCZ1lHQnFjMXh1SUNCUWNtOXRhWE5sTG1Gc2JDaGJYRzRnSUNBZ1oyVjBTbE5QVGlnbkwzQnZjM1J6Snlrc1hHNGdJQ0FnWjJWMFNsTlBUaWduTDJOdmJXMWxiblJ6SnlsY2JpQWdYU2t1ZEdobGJpaG1kVzVqZEdsdmJpaDJZV3gxWlhNcGUxeHVJQ0FnSUhaaGJIVmxjMXN3WFNBdkx5QTlQaUJ3YjNOMGMwcFRUMDVjYmlBZ0lDQjJZV3gxWlhOYk1WMGdMeThnUFQ0Z1kyOXRiV1Z1ZEhOS1UwOU9YRzVjYmlBZ0lDQnlaWFIxY200Z2RtRnNkV1Z6TzF4dUlDQjlLVHRjYmlBZ1lHQmdYRzVjYmlBZ1FHTnNZWE56SUZCeWIyMXBjMlZjYmlBZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2Ym4wZ2NtVnpiMngyWlhKY2JpQWdWWE5sWm5Wc0lHWnZjaUIwYjI5c2FXNW5MbHh1SUNCQVkyOXVjM1J5ZFdOMGIzSmNiaW92WEc1bWRXNWpkR2x2YmlCUWNtOXRhWE5sS0hKbGMyOXNkbVZ5S1NCN1hHNGdJSFJvYVhOYlVGSlBUVWxUUlY5SlJGMGdQU0J1WlhoMFNXUW9LVHRjYmlBZ2RHaHBjeTVmY21WemRXeDBJRDBnZEdocGN5NWZjM1JoZEdVZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUhSb2FYTXVYM04xWW5OamNtbGlaWEp6SUQwZ1cxMDdYRzVjYmlBZ2FXWWdLRzV2YjNBZ0lUMDlJSEpsYzI5c2RtVnlLU0I3WEc0Z0lDQWdkSGx3Wlc5bUlISmxjMjlzZG1WeUlDRTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHNWxaV1J6VW1WemIyeDJaWElvS1R0Y2JpQWdJQ0IwYUdseklHbHVjM1JoYm1ObGIyWWdVSEp2YldselpTQS9JR2x1YVhScFlXeHBlbVZRY205dGFYTmxLSFJvYVhNc0lISmxjMjlzZG1WeUtTQTZJRzVsWldSelRtVjNLQ2s3WEc0Z0lIMWNibjFjYmx4dVVISnZiV2x6WlM1aGJHd2dQU0JoYkd3N1hHNVFjbTl0YVhObExuSmhZMlVnUFNCeVlXTmxPMXh1VUhKdmJXbHpaUzV5WlhOdmJIWmxJRDBnY21WemIyeDJaVHRjYmxCeWIyMXBjMlV1Y21WcVpXTjBJRDBnY21WcVpXTjBPMXh1VUhKdmJXbHpaUzVmYzJWMFUyTm9aV1IxYkdWeUlEMGdjMlYwVTJOb1pXUjFiR1Z5TzF4dVVISnZiV2x6WlM1ZmMyVjBRWE5oY0NBOUlITmxkRUZ6WVhBN1hHNVFjbTl0YVhObExsOWhjMkZ3SUQwZ1lYTmhjRHRjYmx4dVVISnZiV2x6WlM1d2NtOTBiM1I1Y0dVZ1BTQjdYRzRnSUdOdmJuTjBjblZqZEc5eU9pQlFjbTl0YVhObExGeHVYRzRnSUM4cUtseHVJQ0FnSUZSb1pTQndjbWx0WVhKNUlIZGhlU0J2WmlCcGJuUmxjbUZqZEdsdVp5QjNhWFJvSUdFZ2NISnZiV2x6WlNCcGN5QjBhSEp2ZFdkb0lHbDBjeUJnZEdobGJtQWdiV1YwYUc5a0xGeHVJQ0FnSUhkb2FXTm9JSEpsWjJsemRHVnljeUJqWVd4c1ltRmphM01nZEc4Z2NtVmpaV2wyWlNCbGFYUm9aWElnWVNCd2NtOXRhWE5sSjNNZ1pYWmxiblIxWVd3Z2RtRnNkV1VnYjNJZ2RHaGxYRzRnSUNBZ2NtVmhjMjl1SUhkb2VTQjBhR1VnY0hKdmJXbHpaU0JqWVc1dWIzUWdZbVVnWm5Wc1ptbHNiR1ZrTGx4dUlDQmNiaUFnSUNCZ1lHQnFjMXh1SUNBZ0lHWnBibVJWYzJWeUtDa3VkR2hsYmlobWRXNWpkR2x2YmloMWMyVnlLWHRjYmlBZ0lDQWdJQzh2SUhWelpYSWdhWE1nWVhaaGFXeGhZbXhsWEc0Z0lDQWdmU3dnWm5WdVkzUnBiMjRvY21WaGMyOXVLWHRjYmlBZ0lDQWdJQzh2SUhWelpYSWdhWE1nZFc1aGRtRnBiR0ZpYkdVc0lHRnVaQ0I1YjNVZ1lYSmxJR2RwZG1WdUlIUm9aU0J5WldGemIyNGdkMmg1WEc0Z0lDQWdmU2s3WEc0Z0lDQWdZR0JnWEc0Z0lGeHVJQ0FnSUVOb1lXbHVhVzVuWEc0Z0lDQWdMUzB0TFMwdExTMWNiaUFnWEc0Z0lDQWdWR2hsSUhKbGRIVnliaUIyWVd4MVpTQnZaaUJnZEdobGJtQWdhWE1nYVhSelpXeG1JR0VnY0hKdmJXbHpaUzRnSUZSb2FYTWdjMlZqYjI1a0xDQW5aRzkzYm5OMGNtVmhiU2RjYmlBZ0lDQndjbTl0YVhObElHbHpJSEpsYzI5c2RtVmtJSGRwZEdnZ2RHaGxJSEpsZEhWeWJpQjJZV3gxWlNCdlppQjBhR1VnWm1seWMzUWdjSEp2YldselpTZHpJR1oxYkdacGJHeHRaVzUwWEc0Z0lDQWdiM0lnY21WcVpXTjBhVzl1SUdoaGJtUnNaWElzSUc5eUlISmxhbVZqZEdWa0lHbG1JSFJvWlNCb1lXNWtiR1Z5SUhSb2NtOTNjeUJoYmlCbGVHTmxjSFJwYjI0dVhHNGdJRnh1SUNBZ0lHQmdZR3B6WEc0Z0lDQWdabWx1WkZWelpYSW9LUzUwYUdWdUtHWjFibU4wYVc5dUlDaDFjMlZ5S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFhObGNpNXVZVzFsTzF4dUlDQWdJSDBzSUdaMWJtTjBhVzl1SUNoeVpXRnpiMjRwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFuWkdWbVlYVnNkQ0J1WVcxbEp6dGNiaUFnSUNCOUtTNTBhR1Z1S0daMWJtTjBhVzl1SUNoMWMyVnlUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0x5OGdTV1lnWUdacGJtUlZjMlZ5WUNCbWRXeG1hV3hzWldRc0lHQjFjMlZ5VG1GdFpXQWdkMmxzYkNCaVpTQjBhR1VnZFhObGNpZHpJRzVoYldVc0lHOTBhR1Z5ZDJselpTQnBkRnh1SUNBZ0lDQWdMeThnZDJsc2JDQmlaU0JnSjJSbFptRjFiSFFnYm1GdFpTZGdYRzRnSUNBZ2ZTazdYRzRnSUZ4dUlDQWdJR1pwYm1SVmMyVnlLQ2t1ZEdobGJpaG1kVzVqZEdsdmJpQW9kWE5sY2lrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkR2IzVnVaQ0IxYzJWeUxDQmlkWFFnYzNScGJHd2dkVzVvWVhCd2VTY3BPMXh1SUNBZ0lIMHNJR1oxYm1OMGFXOXVJQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25ZR1pwYm1SVmMyVnlZQ0J5WldwbFkzUmxaQ0JoYm1RZ2QyVW5jbVVnZFc1b1lYQndlU2NwTzF4dUlDQWdJSDBwTG5Sb1pXNG9ablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQXZMeUJ1WlhabGNpQnlaV0ZqYUdWa1hHNGdJQ0FnZlN3Z1puVnVZM1JwYjI0Z0tISmxZWE52YmlrZ2UxeHVJQ0FnSUNBZ0x5OGdhV1lnWUdacGJtUlZjMlZ5WUNCbWRXeG1hV3hzWldRc0lHQnlaV0Z6YjI1Z0lIZHBiR3dnWW1VZ0owWnZkVzVrSUhWelpYSXNJR0oxZENCemRHbHNiQ0IxYm1oaGNIQjVKeTVjYmlBZ0lDQWdJQzh2SUVsbUlHQm1hVzVrVlhObGNtQWdjbVZxWldOMFpXUXNJR0J5WldGemIyNWdJSGRwYkd3Z1ltVWdKMkJtYVc1a1ZYTmxjbUFnY21WcVpXTjBaV1FnWVc1a0lIZGxKM0psSUhWdWFHRndjSGtuTGx4dUlDQWdJSDBwTzF4dUlDQWdJR0JnWUZ4dUlDQWdJRWxtSUhSb1pTQmtiM2R1YzNSeVpXRnRJSEJ5YjIxcGMyVWdaRzlsY3lCdWIzUWdjM0JsWTJsbWVTQmhJSEpsYW1WamRHbHZiaUJvWVc1a2JHVnlMQ0J5WldwbFkzUnBiMjRnY21WaGMyOXVjeUIzYVd4c0lHSmxJSEJ5YjNCaFoyRjBaV1FnWm5WeWRHaGxjaUJrYjNkdWMzUnlaV0Z0TGx4dUlDQmNiaUFnSUNCZ1lHQnFjMXh1SUNBZ0lHWnBibVJWYzJWeUtDa3VkR2hsYmlobWRXNWpkR2x2YmlBb2RYTmxjaWtnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZCbFpHRm5iMmRwWTJGc1JYaGpaWEIwYVc5dUtDZFZjSE4wY21WaGJTQmxjbkp2Y2ljcE8xeHVJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0F2THlCdVpYWmxjaUJ5WldGamFHVmtYRzRnSUNBZ2ZTa3VkR2hsYmlobWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUM4dklHNWxkbVZ5SUhKbFlXTm9aV1JjYmlBZ0lDQjlMQ0JtZFc1amRHbHZiaUFvY21WaGMyOXVLU0I3WEc0Z0lDQWdJQ0F2THlCVWFHVWdZRkJsWkdkaFoyOWphV0ZzUlhoalpYQjBhVzl1WUNCcGN5QndjbTl3WVdkaGRHVmtJR0ZzYkNCMGFHVWdkMkY1SUdSdmQyNGdkRzhnYUdWeVpWeHVJQ0FnSUgwcE8xeHVJQ0FnSUdCZ1lGeHVJQ0JjYmlBZ0lDQkJjM05wYldsc1lYUnBiMjVjYmlBZ0lDQXRMUzB0TFMwdExTMHRMUzFjYmlBZ1hHNGdJQ0FnVTI5dFpYUnBiV1Z6SUhSb1pTQjJZV3gxWlNCNWIzVWdkMkZ1ZENCMGJ5QndjbTl3WVdkaGRHVWdkRzhnWVNCa2IzZHVjM1J5WldGdElIQnliMjFwYzJVZ1kyRnVJRzl1YkhrZ1ltVmNiaUFnSUNCeVpYUnlhV1YyWldRZ1lYTjVibU5vY205dWIzVnpiSGt1SUZSb2FYTWdZMkZ1SUdKbElHRmphR2xsZG1Wa0lHSjVJSEpsZEhWeWJtbHVaeUJoSUhCeWIyMXBjMlVnYVc0Z2RHaGxYRzRnSUNBZ1puVnNabWxzYkcxbGJuUWdiM0lnY21WcVpXTjBhVzl1SUdoaGJtUnNaWEl1SUZSb1pTQmtiM2R1YzNSeVpXRnRJSEJ5YjIxcGMyVWdkMmxzYkNCMGFHVnVJR0psSUhCbGJtUnBibWRjYmlBZ0lDQjFiblJwYkNCMGFHVWdjbVYwZFhKdVpXUWdjSEp2YldselpTQnBjeUJ6WlhSMGJHVmtMaUJVYUdseklHbHpJR05oYkd4bFpDQXFZWE56YVcxcGJHRjBhVzl1S2k1Y2JpQWdYRzRnSUNBZ1lHQmdhbk5jYmlBZ0lDQm1hVzVrVlhObGNpZ3BMblJvWlc0b1puVnVZM1JwYjI0Z0tIVnpaWElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYVc1a1EyOXRiV1Z1ZEhOQ2VVRjFkR2h2Y2loMWMyVnlLVHRjYmlBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUlDaGpiMjF0Wlc1MGN5a2dlMXh1SUNBZ0lDQWdMeThnVkdobElIVnpaWEluY3lCamIyMXRaVzUwY3lCaGNtVWdibTkzSUdGMllXbHNZV0pzWlZ4dUlDQWdJSDBwTzF4dUlDQWdJR0JnWUZ4dUlDQmNiaUFnSUNCSlppQjBhR1VnWVhOemFXMXNhV0YwWldRZ2NISnZiV2x6WlNCeVpXcGxZM1J6TENCMGFHVnVJSFJvWlNCa2IzZHVjM1J5WldGdElIQnliMjFwYzJVZ2QybHNiQ0JoYkhOdklISmxhbVZqZEM1Y2JpQWdYRzRnSUNBZ1lHQmdhbk5jYmlBZ0lDQm1hVzVrVlhObGNpZ3BMblJvWlc0b1puVnVZM1JwYjI0Z0tIVnpaWElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYVc1a1EyOXRiV1Z1ZEhOQ2VVRjFkR2h2Y2loMWMyVnlLVHRjYmlBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUlDaGpiMjF0Wlc1MGN5a2dlMXh1SUNBZ0lDQWdMeThnU1dZZ1lHWnBibVJEYjIxdFpXNTBjMEo1UVhWMGFHOXlZQ0JtZFd4bWFXeHNjeXdnZDJVbmJHd2dhR0YyWlNCMGFHVWdkbUZzZFdVZ2FHVnlaVnh1SUNBZ0lIMHNJR1oxYm1OMGFXOXVJQ2h5WldGemIyNHBJSHRjYmlBZ0lDQWdJQzh2SUVsbUlHQm1hVzVrUTI5dGJXVnVkSE5DZVVGMWRHaHZjbUFnY21WcVpXTjBjeXdnZDJVbmJHd2dhR0YyWlNCMGFHVWdjbVZoYzI5dUlHaGxjbVZjYmlBZ0lDQjlLVHRjYmlBZ0lDQmdZR0JjYmlBZ1hHNGdJQ0FnVTJsdGNHeGxJRVY0WVcxd2JHVmNiaUFnSUNBdExTMHRMUzB0TFMwdExTMHRMVnh1SUNCY2JpQWdJQ0JUZVc1amFISnZibTkxY3lCRmVHRnRjR3hsWEc0Z0lGeHVJQ0FnSUdCZ1lHcGhkbUZ6WTNKcGNIUmNiaUFnSUNCc1pYUWdjbVZ6ZFd4ME8xeHVJQ0JjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnY21WemRXeDBJRDBnWm1sdVpGSmxjM1ZzZENncE8xeHVJQ0FnSUNBZ0x5OGdjM1ZqWTJWemMxeHVJQ0FnSUgwZ1kyRjBZMmdvY21WaGMyOXVLU0I3WEc0Z0lDQWdJQ0F2THlCbVlXbHNkWEpsWEc0Z0lDQWdmVnh1SUNBZ0lHQmdZRnh1SUNCY2JpQWdJQ0JGY25KaVlXTnJJRVY0WVcxd2JHVmNiaUFnWEc0Z0lDQWdZR0JnYW5OY2JpQWdJQ0JtYVc1a1VtVnpkV3gwS0daMWJtTjBhVzl1S0hKbGMzVnNkQ3dnWlhKeUtYdGNiaUFnSUNBZ0lHbG1JQ2hsY25JcElIdGNiaUFnSUNBZ0lDQWdMeThnWm1GcGJIVnlaVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdMeThnYzNWalkyVnpjMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNBZ0lHQmdZRnh1SUNCY2JpQWdJQ0JRY205dGFYTmxJRVY0WVcxd2JHVTdYRzRnSUZ4dUlDQWdJR0JnWUdwaGRtRnpZM0pwY0hSY2JpQWdJQ0JtYVc1a1VtVnpkV3gwS0NrdWRHaGxiaWhtZFc1amRHbHZiaWh5WlhOMWJIUXBlMXh1SUNBZ0lDQWdMeThnYzNWalkyVnpjMXh1SUNBZ0lIMHNJR1oxYm1OMGFXOXVLSEpsWVhOdmJpbDdYRzRnSUNBZ0lDQXZMeUJtWVdsc2RYSmxYRzRnSUNBZ2ZTazdYRzRnSUNBZ1lHQmdYRzRnSUZ4dUlDQWdJRUZrZG1GdVkyVmtJRVY0WVcxd2JHVmNiaUFnSUNBdExTMHRMUzB0TFMwdExTMHRMVnh1SUNCY2JpQWdJQ0JUZVc1amFISnZibTkxY3lCRmVHRnRjR3hsWEc0Z0lGeHVJQ0FnSUdCZ1lHcGhkbUZ6WTNKcGNIUmNiaUFnSUNCc1pYUWdZWFYwYUc5eUxDQmliMjlyY3p0Y2JpQWdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR0YxZEdodmNpQTlJR1pwYm1SQmRYUm9iM0lvS1R0Y2JpQWdJQ0FnSUdKdmIydHpJQ0E5SUdacGJtUkNiMjlyYzBKNVFYVjBhRzl5S0dGMWRHaHZjaWs3WEc0Z0lDQWdJQ0F2THlCemRXTmpaWE56WEc0Z0lDQWdmU0JqWVhSamFDaHlaV0Z6YjI0cElIdGNiaUFnSUNBZ0lDOHZJR1poYVd4MWNtVmNiaUFnSUNCOVhHNGdJQ0FnWUdCZ1hHNGdJRnh1SUNBZ0lFVnljbUpoWTJzZ1JYaGhiWEJzWlZ4dUlDQmNiaUFnSUNCZ1lHQnFjMXh1SUNCY2JpQWdJQ0JtZFc1amRHbHZiaUJtYjNWdVpFSnZiMnR6S0dKdmIydHpLU0I3WEc0Z0lGeHVJQ0FnSUgxY2JpQWdYRzRnSUNBZ1puVnVZM1JwYjI0Z1ptRnBiSFZ5WlNoeVpXRnpiMjRwSUh0Y2JpQWdYRzRnSUNBZ2ZWeHVJQ0JjYmlBZ0lDQm1hVzVrUVhWMGFHOXlLR1oxYm1OMGFXOXVLR0YxZEdodmNpd2daWEp5S1h0Y2JpQWdJQ0FnSUdsbUlDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ1ptRnBiSFZ5WlNobGNuSXBPMXh1SUNBZ0lDQWdJQ0F2THlCbVlXbHNkWEpsWEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJR1pwYm1SQ2IyOXZhM05DZVVGMWRHaHZjaWhoZFhSb2IzSXNJR1oxYm1OMGFXOXVLR0p2YjJ0ekxDQmxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdabUZwYkhWeVpTaGxjbklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNWdVpFSnZiMnR6S0dKdmIydHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDaHlaV0Z6YjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1ZV2xzZFhKbEtISmxZWE52YmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1poYVd4MWNtVW9aWEp5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJ6ZFdOalpYTnpYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUNBZ1lHQmdYRzRnSUZ4dUlDQWdJRkJ5YjIxcGMyVWdSWGhoYlhCc1pUdGNiaUFnWEc0Z0lDQWdZR0JnYW1GMllYTmpjbWx3ZEZ4dUlDQWdJR1pwYm1SQmRYUm9iM0lvS1M1Y2JpQWdJQ0FnSUhSb1pXNG9abWx1WkVKdmIydHpRbmxCZFhSb2IzSXBMbHh1SUNBZ0lDQWdkR2hsYmlobWRXNWpkR2x2YmloaWIyOXJjeWw3WEc0Z0lDQWdJQ0FnSUM4dklHWnZkVzVrSUdKdmIydHpYRzRnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b2NtVmhjMjl1S1h0Y2JpQWdJQ0FnSUM4dklITnZiV1YwYUdsdVp5QjNaVzUwSUhkeWIyNW5YRzRnSUNBZ2ZTazdYRzRnSUNBZ1lHQmdYRzRnSUZ4dUlDQWdJRUJ0WlhSb2IyUWdkR2hsYmx4dUlDQWdJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJRzl1Um5Wc1ptbHNiR1ZrWEc0Z0lDQWdRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdiMjVTWldwbFkzUmxaRnh1SUNBZ0lGVnpaV1oxYkNCbWIzSWdkRzl2YkdsdVp5NWNiaUFnSUNCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlZ4dUlDQXFMMXh1SUNCMGFHVnVPaUIwYUdWdUxGeHVYRzRnSUM4cUtseHVJQ0FnSUdCallYUmphR0FnYVhNZ2MybHRjR3g1SUhOMVoyRnlJR1p2Y2lCZ2RHaGxiaWgxYm1SbFptbHVaV1FzSUc5dVVtVnFaV04wYVc5dUtXQWdkMmhwWTJnZ2JXRnJaWE1nYVhRZ2RHaGxJSE5oYldWY2JpQWdJQ0JoY3lCMGFHVWdZMkYwWTJnZ1lteHZZMnNnYjJZZ1lTQjBjbmt2WTJGMFkyZ2djM1JoZEdWdFpXNTBMbHh1SUNCY2JpQWdJQ0JnWUdCcWMxeHVJQ0FnSUdaMWJtTjBhVzl1SUdacGJtUkJkWFJvYjNJb0tYdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblkyOTFiR1J1SjNRZ1ptbHVaQ0IwYUdGMElHRjFkR2h2Y2ljcE8xeHVJQ0FnSUgxY2JpQWdYRzRnSUNBZ0x5OGdjM2x1WTJoeWIyNXZkWE5jYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnWm1sdVpFRjFkR2h2Y2lncE8xeHVJQ0FnSUgwZ1kyRjBZMmdvY21WaGMyOXVLU0I3WEc0Z0lDQWdJQ0F2THlCemIyMWxkR2hwYm1jZ2QyVnVkQ0IzY205dVoxeHVJQ0FnSUgxY2JpQWdYRzRnSUNBZ0x5OGdZWE41Ym1NZ2QybDBhQ0J3Y205dGFYTmxjMXh1SUNBZ0lHWnBibVJCZFhSb2IzSW9LUzVqWVhSamFDaG1kVzVqZEdsdmJpaHlaV0Z6YjI0cGUxeHVJQ0FnSUNBZ0x5OGdjMjl0WlhSb2FXNW5JSGRsYm5RZ2QzSnZibWRjYmlBZ0lDQjlLVHRjYmlBZ0lDQmdZR0JjYmlBZ1hHNGdJQ0FnUUcxbGRHaHZaQ0JqWVhSamFGeHVJQ0FnSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUc5dVVtVnFaV04wYVc5dVhHNGdJQ0FnVlhObFpuVnNJR1p2Y2lCMGIyOXNhVzVuTGx4dUlDQWdJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlYRzRnSUNvdlhHNGdJQ2RqWVhSamFDYzZJR1oxYm1OMGFXOXVJRjlqWVhSamFDaHZibEpsYW1WamRHbHZiaWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5Sb1pXNG9iblZzYkN3Z2IyNVNaV3BsWTNScGIyNHBPMXh1SUNCOVhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCd2IyeDVabWxzYkNncElIdGNiaUFnSUNCMllYSWdiRzlqWVd3Z1BTQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR2RzYjJKaGJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdiRzlqWVd3Z1BTQm5iRzlpWVd3N1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnYzJWc1ppQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdiRzlqWVd3Z1BTQnpaV3htTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjJOaGJDQTlJRVoxYm1OMGFXOXVLQ2R5WlhSMWNtNGdkR2hwY3ljcEtDazdYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jRzlzZVdacGJHd2dabUZwYkdWa0lHSmxZMkYxYzJVZ1oyeHZZbUZzSUc5aWFtVmpkQ0JwY3lCMWJtRjJZV2xzWVdKc1pTQnBiaUIwYUdseklHVnVkbWx5YjI1dFpXNTBKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ1VDQTlJR3h2WTJGc0xsQnliMjFwYzJVN1hHNWNiaUFnSUNCcFppQW9VQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdjSEp2YldselpWUnZVM1J5YVc1bklEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnliMjFwYzJWVWIxTjBjbWx1WnlBOUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2hRTG5KbGMyOXNkbVVvS1NrN1hHNGdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5wYkdWdWRHeDVJR2xuYm05eVpXUmNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHdjbTl0YVhObFZHOVRkSEpwYm1jZ1BUMDlJQ2RiYjJKcVpXTjBJRkJ5YjIxcGMyVmRKeUFtSmlBaFVDNWpZWE4wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNiMk5oYkM1UWNtOXRhWE5sSUQwZ1VISnZiV2x6WlR0Y2JuMWNibHh1THk4Z1UzUnlZVzVuWlNCamIyMXdZWFF1TGx4dVVISnZiV2x6WlM1d2IyeDVabWxzYkNBOUlIQnZiSGxtYVd4c08xeHVVSEp2YldselpTNVFjbTl0YVhObElEMGdVSEp2YldselpUdGNibHh1Y21WMGRYSnVJRkJ5YjIxcGMyVTdYRzVjYm4wcEtTazdYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxbGN6WXRjSEp2YldselpTNXRZWEJjYmlJc0lpOHZJSFJvWlNCM2FHRjBkMmN0Wm1WMFkyZ2djRzlzZVdacGJHd2dhVzV6ZEdGc2JITWdkR2hsSUdabGRHTm9LQ2tnWm5WdVkzUnBiMjVjYmk4dklHOXVJSFJvWlNCbmJHOWlZV3dnYjJKcVpXTjBJQ2gzYVc1a2IzY2diM0lnYzJWc1ppbGNiaTh2WEc0dkx5QlNaWFIxY200Z2RHaGhkQ0JoY3lCMGFHVWdaWGh3YjNKMElHWnZjaUIxYzJVZ2FXNGdWMlZpY0dGamF5d2dRbkp2ZDNObGNtbG1lU0JsZEdNdVhHNXlaWEYxYVhKbEtDZDNhR0YwZDJjdFptVjBZMmduS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2MyVnNaaTVtWlhSamFDNWlhVzVrS0hObGJHWXBPMXh1SWl3aUx5OGdjMmhwYlNCbWIzSWdkWE5wYm1jZ2NISnZZMlZ6Y3lCcGJpQmljbTkzYzJWeVhHNTJZWElnY0hKdlkyVnpjeUE5SUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTMwN1hHNWNiaTh2SUdOaFkyaGxaQ0JtY205dElIZG9ZWFJsZG1WeUlHZHNiMkpoYkNCcGN5QndjbVZ6Wlc1MElITnZJSFJvWVhRZ2RHVnpkQ0J5ZFc1dVpYSnpJSFJvWVhRZ2MzUjFZaUJwZEZ4dUx5OGdaRzl1SjNRZ1luSmxZV3NnZEdocGJtZHpMaUFnUW5WMElIZGxJRzVsWldRZ2RHOGdkM0poY0NCcGRDQnBiaUJoSUhSeWVTQmpZWFJqYUNCcGJpQmpZWE5sSUdsMElHbHpYRzR2THlCM2NtRndjR1ZrSUdsdUlITjBjbWxqZENCdGIyUmxJR052WkdVZ2QyaHBZMmdnWkc5bGMyNG5kQ0JrWldacGJtVWdZVzU1SUdkc2IySmhiSE11SUNCSmRDZHpJR2x1YzJsa1pTQmhYRzR2THlCbWRXNWpkR2x2YmlCaVpXTmhkWE5sSUhSeWVTOWpZWFJqYUdWeklHUmxiM0IwYVcxcGVtVWdhVzRnWTJWeWRHRnBiaUJsYm1kcGJtVnpMbHh1WEc1MllYSWdZMkZqYUdWa1UyVjBWR2x0Wlc5MWREdGNiblpoY2lCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRN1hHNWNibVoxYm1OMGFXOXVJR1JsWm1GMWJIUlRaWFJVYVcxdmRYUW9LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHpaWFJVYVcxbGIzVjBJR2hoY3lCdWIzUWdZbVZsYmlCa1pXWnBibVZrSnlrN1hHNTlYRzVtZFc1amRHbHZiaUJrWldaaGRXeDBRMnhsWVhKVWFXMWxiM1YwSUNncElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJOc1pXRnlWR2x0Wlc5MWRDQm9ZWE1nYm05MElHSmxaVzRnWkdWbWFXNWxaQ2NwTzF4dWZWeHVLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSE5sZEZScGJXVnZkWFFnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BTQnpaWFJVYVcxbGIzVjBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOUlHUmxabUYxYkhSVFpYUlVhVzF2ZFhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJR05oWTJobFpGTmxkRlJwYldWdmRYUWdQU0JrWldaaGRXeDBVMlYwVkdsdGIzVjBPMXh1SUNBZ0lIMWNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdOc1pXRnlWR2x0Wlc5MWRDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSUQwZ1kyeGxZWEpVYVcxbGIzVjBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkRHRjYmlBZ0lDQjlYRzU5SUNncEtWeHVablZ1WTNScGIyNGdjblZ1VkdsdFpXOTFkQ2htZFc0cElIdGNiaUFnSUNCcFppQW9ZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlQVDBnYzJWMFZHbHRaVzkxZENrZ2UxeHVJQ0FnSUNBZ0lDQXZMMjV2Y20xaGJDQmxiblpwY205dFpXNTBjeUJwYmlCellXNWxJSE5wZEhWaGRHbHZibk5jYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sZEZScGJXVnZkWFFvWm5WdUxDQXdLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdhV1lnYzJWMFZHbHRaVzkxZENCM1lYTnVKM1FnWVhaaGFXeGhZbXhsSUdKMWRDQjNZWE1nYkdGMGRHVnlJR1JsWm1sdVpXUmNiaUFnSUNCcFppQW9LR05oWTJobFpGTmxkRlJwYldWdmRYUWdQVDA5SUdSbFptRjFiSFJUWlhSVWFXMXZkWFFnZkh3Z0lXTmhZMmhsWkZObGRGUnBiV1Z2ZFhRcElDWW1JSE5sZEZScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaWFJVYVcxbGIzVjBLR1oxYml3Z01DazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQzh2SUhkb1pXNGdkMmhsYmlCemIyMWxZbTlrZVNCb1lYTWdjMk55WlhkbFpDQjNhWFJvSUhObGRGUnBiV1Z2ZFhRZ1luVjBJRzV2SUVrdVJTNGdiV0ZrWkc1bGMzTmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRb1puVnVMQ0F3S1R0Y2JpQWdJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWMmhsYmlCM1pTQmhjbVVnYVc0Z1NTNUZMaUJpZFhRZ2RHaGxJSE5qY21sd2RDQm9ZWE1nWW1WbGJpQmxkbUZzWldRZ2MyOGdTUzVGTGlCa2IyVnpiaWQwSUhSeWRYTjBJSFJvWlNCbmJHOWlZV3dnYjJKcVpXTjBJSGRvWlc0Z1kyRnNiR1ZrSUc1dmNtMWhiR3g1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrVTJWMFZHbHRaVzkxZEM1allXeHNLRzUxYkd3c0lHWjFiaXdnTUNrN1hHNGdJQ0FnSUNBZ0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpZVzFsSUdGeklHRmliM1psSUdKMWRDQjNhR1Z1SUdsMEozTWdZU0IyWlhKemFXOXVJRzltSUVrdVJTNGdkR2hoZENCdGRYTjBJR2hoZG1VZ2RHaGxJR2RzYjJKaGJDQnZZbXBsWTNRZ1ptOXlJQ2QwYUdsekp5d2dhRzl3Wm5Wc2JIa2diM1Z5SUdOdmJuUmxlSFFnWTI5eWNtVmpkQ0J2ZEdobGNuZHBjMlVnYVhRZ2QybHNiQ0IwYUhKdmR5QmhJR2RzYjJKaGJDQmxjbkp2Y2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRdVkyRnNiQ2gwYUdsekxDQm1kVzRzSURBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzVjYm4xY2JtWjFibU4wYVc5dUlISjFia05zWldGeVZHbHRaVzkxZENodFlYSnJaWElwSUh0Y2JpQWdJQ0JwWmlBb1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMDlQU0JqYkdWaGNsUnBiV1Z2ZFhRcElIdGNiaUFnSUNBZ0lDQWdMeTl1YjNKdFlXd2daVzUyYVhKdmJXVnVkSE1nYVc0Z2MyRnVaU0J6YVhSMVlYUnBiMjV6WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqYkdWaGNsUnBiV1Z2ZFhRb2JXRnlhMlZ5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnYVdZZ1kyeGxZWEpVYVcxbGIzVjBJSGRoYzI0bmRDQmhkbUZwYkdGaWJHVWdZblYwSUhkaGN5QnNZWFIwWlhJZ1pHVm1hVzVsWkZ4dUlDQWdJR2xtSUNnb1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMDlQU0JrWldaaGRXeDBRMnhsWVhKVWFXMWxiM1YwSUh4OElDRmpZV05vWldSRGJHVmhjbFJwYldWdmRYUXBJQ1ltSUdOc1pXRnlWR2x0Wlc5MWRDa2dlMXh1SUNBZ0lDQWdJQ0JqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFnUFNCamJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiR1ZoY2xScGJXVnZkWFFvYldGeWEyVnlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2QyaGxiaUIzYUdWdUlITnZiV1ZpYjJSNUlHaGhjeUJ6WTNKbGQyVmtJSGRwZEdnZ2MyVjBWR2x0Wlc5MWRDQmlkWFFnYm04Z1NTNUZMaUJ0WVdSa2JtVnpjMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBLRzFoY210bGNpazdYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pTbDdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCWGFHVnVJSGRsSUdGeVpTQnBiaUJKTGtVdUlHSjFkQ0IwYUdVZ2MyTnlhWEIwSUdoaGN5QmlaV1Z1SUdWMllXeGxaQ0J6YnlCSkxrVXVJR1J2WlhOdUozUWdJSFJ5ZFhOMElIUm9aU0JuYkc5aVlXd2diMkpxWldOMElIZG9aVzRnWTJGc2JHVmtJRzV2Y20xaGJHeDVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwTG1OaGJHd29iblZzYkN3Z2JXRnlhMlZ5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpZVzFsSUdGeklHRmliM1psSUdKMWRDQjNhR1Z1SUdsMEozTWdZU0IyWlhKemFXOXVJRzltSUVrdVJTNGdkR2hoZENCdGRYTjBJR2hoZG1VZ2RHaGxJR2RzYjJKaGJDQnZZbXBsWTNRZ1ptOXlJQ2QwYUdsekp5d2dhRzl3Wm5Wc2JIa2diM1Z5SUdOdmJuUmxlSFFnWTI5eWNtVmpkQ0J2ZEdobGNuZHBjMlVnYVhRZ2QybHNiQ0IwYUhKdmR5QmhJR2RzYjJKaGJDQmxjbkp2Y2k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZOdmJXVWdkbVZ5YzJsdmJuTWdiMllnU1M1RkxpQm9ZWFpsSUdScFptWmxjbVZ1ZENCeWRXeGxjeUJtYjNJZ1kyeGxZWEpVYVcxbGIzVjBJSFp6SUhObGRGUnBiV1Z2ZFhSY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUXVZMkZzYkNoMGFHbHpMQ0J0WVhKclpYSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc1Y2JseHVmVnh1ZG1GeUlIRjFaWFZsSUQwZ1cxMDdYRzUyWVhJZ1pISmhhVzVwYm1jZ1BTQm1ZV3h6WlR0Y2JuWmhjaUJqZFhKeVpXNTBVWFZsZFdVN1hHNTJZWElnY1hWbGRXVkpibVJsZUNBOUlDMHhPMXh1WEc1bWRXNWpkR2x2YmlCamJHVmhibFZ3VG1WNGRGUnBZMnNvS1NCN1hHNGdJQ0FnYVdZZ0tDRmtjbUZwYm1sdVp5QjhmQ0FoWTNWeWNtVnVkRkYxWlhWbEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNGdJQ0FnWkhKaGFXNXBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQnBaaUFvWTNWeWNtVnVkRkYxWlhWbExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQnhkV1YxWlNBOUlHTjFjbkpsYm5SUmRXVjFaUzVqYjI1allYUW9jWFZsZFdVcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhGMVpYVmxTVzVrWlhnZ1BTQXRNVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSEYxWlhWbExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQmtjbUZwYmxGMVpYVmxLQ2s3WEc0Z0lDQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmtjbUZwYmxGMVpYVmxLQ2tnZTF4dUlDQWdJR2xtSUNoa2NtRnBibWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCMGFXMWxiM1YwSUQwZ2NuVnVWR2x0Wlc5MWRDaGpiR1ZoYmxWd1RtVjRkRlJwWTJzcE8xeHVJQ0FnSUdSeVlXbHVhVzVuSUQwZ2RISjFaVHRjYmx4dUlDQWdJSFpoY2lCc1pXNGdQU0J4ZFdWMVpTNXNaVzVuZEdnN1hHNGdJQ0FnZDJocGJHVW9iR1Z1S1NCN1hHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5SUmRXVjFaU0E5SUhGMVpYVmxPMXh1SUNBZ0lDQWdJQ0J4ZFdWMVpTQTlJRnRkTzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvS3l0eGRXVjFaVWx1WkdWNElEd2diR1Z1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kzVnljbVZ1ZEZGMVpYVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRkYxWlhWbFczRjFaWFZsU1c1a1pYaGRMbkoxYmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIRjFaWFZsU1c1a1pYZ2dQU0F0TVR0Y2JpQWdJQ0FnSUNBZ2JHVnVJRDBnY1hWbGRXVXViR1Z1WjNSb08xeHVJQ0FnSUgxY2JpQWdJQ0JqZFhKeVpXNTBVWFZsZFdVZ1BTQnVkV3hzTzF4dUlDQWdJR1J5WVdsdWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ2NuVnVRMnhsWVhKVWFXMWxiM1YwS0hScGJXVnZkWFFwTzF4dWZWeHVYRzV3Y205alpYTnpMbTVsZUhSVWFXTnJJRDBnWm5WdVkzUnBiMjRnS0daMWJpa2dlMXh1SUNBZ0lIWmhjaUJoY21keklEMGdibVYzSUVGeWNtRjVLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dMU0F4S1R0Y2JpQWdJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERXBJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlERTdJR2tnUENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnlaM05iYVNBdElERmRJRDBnWVhKbmRXMWxiblJ6VzJsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhGMVpYVmxMbkIxYzJnb2JtVjNJRWwwWlcwb1puVnVMQ0JoY21kektTazdYRzRnSUNBZ2FXWWdLSEYxWlhWbExteGxibWQwYUNBOVBUMGdNU0FtSmlBaFpISmhhVzVwYm1jcElIdGNiaUFnSUNBZ0lDQWdjblZ1VkdsdFpXOTFkQ2hrY21GcGJsRjFaWFZsS1R0Y2JpQWdJQ0I5WEc1OU8xeHVYRzR2THlCMk9DQnNhV3RsY3lCd2NtVmthV04wYVdKc1pTQnZZbXBsWTNSelhHNW1kVzVqZEdsdmJpQkpkR1Z0S0daMWJpd2dZWEp5WVhrcElIdGNiaUFnSUNCMGFHbHpMbVoxYmlBOUlHWjFianRjYmlBZ0lDQjBhR2x6TG1GeWNtRjVJRDBnWVhKeVlYazdYRzU5WEc1SmRHVnRMbkJ5YjNSdmRIbHdaUzV5ZFc0Z1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkR2hwY3k1bWRXNHVZWEJ3Ykhrb2JuVnNiQ3dnZEdocGN5NWhjbkpoZVNrN1hHNTlPMXh1Y0hKdlkyVnpjeTUwYVhSc1pTQTlJQ2RpY205M2MyVnlKenRjYm5CeWIyTmxjM011WW5KdmQzTmxjaUE5SUhSeWRXVTdYRzV3Y205alpYTnpMbVZ1ZGlBOUlIdDlPMXh1Y0hKdlkyVnpjeTVoY21kMklEMGdXMTA3WEc1d2NtOWpaWE56TG5abGNuTnBiMjRnUFNBbkp6c2dMeThnWlcxd2RIa2djM1J5YVc1bklIUnZJR0YyYjJsa0lISmxaMlY0Y0NCcGMzTjFaWE5jYm5CeWIyTmxjM011ZG1WeWMybHZibk1nUFNCN2ZUdGNibHh1Wm5WdVkzUnBiMjRnYm05dmNDZ3BJSHQ5WEc1Y2JuQnliMk5sYzNNdWIyNGdQU0J1YjI5d08xeHVjSEp2WTJWemN5NWhaR1JNYVhOMFpXNWxjaUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbTl1WTJVZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1dlptWWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXlaVzF2ZG1WTWFYTjBaVzVsY2lBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG5KbGJXOTJaVUZzYkV4cGMzUmxibVZ5Y3lBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG1WdGFYUWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXdjbVZ3Wlc1a1RHbHpkR1Z1WlhJZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1d2NtVndaVzVrVDI1alpVeHBjM1JsYm1WeUlEMGdibTl2Y0R0Y2JseHVjSEp2WTJWemN5NXNhWE4wWlc1bGNuTWdQU0JtZFc1amRHbHZiaUFvYm1GdFpTa2dleUJ5WlhSMWNtNGdXMTBnZlZ4dVhHNXdjbTlqWlhOekxtSnBibVJwYm1jZ1BTQm1kVzVqZEdsdmJpQW9ibUZ0WlNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduY0hKdlkyVnpjeTVpYVc1a2FXNW5JR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUW5LVHRjYm4wN1hHNWNibkJ5YjJObGMzTXVZM2RrSUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdKeThuSUgwN1hHNXdjbTlqWlhOekxtTm9aR2x5SUQwZ1puVnVZM1JwYjI0Z0tHUnBjaWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jSEp2WTJWemN5NWphR1JwY2lCcGN5QnViM1FnYzNWd2NHOXlkR1ZrSnlrN1hHNTlPMXh1Y0hKdlkyVnpjeTUxYldGemF5QTlJR1oxYm1OMGFXOXVLQ2tnZXlCeVpYUjFjbTRnTURzZ2ZUdGNiaUlzSWlobWRXNWpkR2x2YmloelpXeG1LU0I3WEc0Z0lDZDFjMlVnYzNSeWFXTjBKenRjYmx4dUlDQnBaaUFvYzJWc1ppNW1aWFJqYUNrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNWNiaUFnZG1GeUlITjFjSEJ2Y25RZ1BTQjdYRzRnSUNBZ2MyVmhjbU5vVUdGeVlXMXpPaUFuVlZKTVUyVmhjbU5vVUdGeVlXMXpKeUJwYmlCelpXeG1MRnh1SUNBZ0lHbDBaWEpoWW14bE9pQW5VM2x0WW05c0p5QnBiaUJ6Wld4bUlDWW1JQ2RwZEdWeVlYUnZjaWNnYVc0Z1UzbHRZbTlzTEZ4dUlDQWdJR0pzYjJJNklDZEdhV3hsVW1WaFpHVnlKeUJwYmlCelpXeG1JQ1ltSUNkQ2JHOWlKeUJwYmlCelpXeG1JQ1ltSUNobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUc1bGR5QkNiRzlpS0NsY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVmNiaUFnSUNBZ0lIMGdZMkYwWTJnb1pTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1NncExGeHVJQ0FnSUdadmNtMUVZWFJoT2lBblJtOXliVVJoZEdFbklHbHVJSE5sYkdZc1hHNGdJQ0FnWVhKeVlYbENkV1ptWlhJNklDZEJjbkpoZVVKMVptWmxjaWNnYVc0Z2MyVnNabHh1SUNCOVhHNWNiaUFnYVdZZ0tITjFjSEJ2Y25RdVlYSnlZWGxDZFdabVpYSXBJSHRjYmlBZ0lDQjJZWElnZG1sbGQwTnNZWE56WlhNZ1BTQmJYRzRnSUNBZ0lDQW5XMjlpYW1WamRDQkpiblE0UVhKeVlYbGRKeXhjYmlBZ0lDQWdJQ2RiYjJKcVpXTjBJRlZwYm5RNFFYSnlZWGxkSnl4Y2JpQWdJQ0FnSUNkYmIySnFaV04wSUZWcGJuUTRRMnhoYlhCbFpFRnljbUY1WFNjc1hHNGdJQ0FnSUNBblcyOWlhbVZqZENCSmJuUXhOa0Z5Y21GNVhTY3NYRzRnSUNBZ0lDQW5XMjlpYW1WamRDQlZhVzUwTVRaQmNuSmhlVjBuTEZ4dUlDQWdJQ0FnSjF0dlltcGxZM1FnU1c1ME16SkJjbkpoZVYwbkxGeHVJQ0FnSUNBZ0oxdHZZbXBsWTNRZ1ZXbHVkRE15UVhKeVlYbGRKeXhjYmlBZ0lDQWdJQ2RiYjJKcVpXTjBJRVpzYjJGME16SkJjbkpoZVYwbkxGeHVJQ0FnSUNBZ0oxdHZZbXBsWTNRZ1JteHZZWFEyTkVGeWNtRjVYU2RjYmlBZ0lDQmRYRzVjYmlBZ0lDQjJZWElnYVhORVlYUmhWbWxsZHlBOUlHWjFibU4wYVc5dUtHOWlhaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzlpYWlBbUppQkVZWFJoVm1sbGR5NXdjbTkwYjNSNWNHVXVhWE5RY205MGIzUjVjR1ZQWmlodlltb3BYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJR2x6UVhKeVlYbENkV1ptWlhKV2FXVjNJRDBnUVhKeVlYbENkV1ptWlhJdWFYTldhV1YzSUh4OElHWjFibU4wYVc5dUtHOWlhaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzlpYWlBbUppQjJhV1YzUTJ4aGMzTmxjeTVwYm1SbGVFOW1LRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY3VZMkZzYkNodlltb3BLU0ErSUMweFhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z2JtOXliV0ZzYVhwbFRtRnRaU2h1WVcxbEtTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnVZVzFsSUNFOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdibUZ0WlNBOUlGTjBjbWx1WnlodVlXMWxLVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9MMXRlWVMxNk1DMDVYRnd0SXlRbEppY3FLeTVjWEY1ZllIeCtYUzlwTG5SbGMzUW9ibUZ0WlNrcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMGx1ZG1Gc2FXUWdZMmhoY21GamRHVnlJR2x1SUdobFlXUmxjaUJtYVdWc1pDQnVZVzFsSnlsY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdibTl5YldGc2FYcGxWbUZzZFdVb2RtRnNkV1VwSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJQ0U5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ2RtRnNkV1VnUFNCVGRISnBibWNvZG1Gc2RXVXBYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIyWVd4MVpWeHVJQ0I5WEc1Y2JpQWdMeThnUW5WcGJHUWdZU0JrWlhOMGNuVmpkR2wyWlNCcGRHVnlZWFJ2Y2lCbWIzSWdkR2hsSUhaaGJIVmxJR3hwYzNSY2JpQWdablZ1WTNScGIyNGdhWFJsY21GMGIzSkdiM0lvYVhSbGJYTXBJSHRjYmlBZ0lDQjJZWElnYVhSbGNtRjBiM0lnUFNCN1hHNGdJQ0FnSUNCdVpYaDBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpoYkhWbElEMGdhWFJsYlhNdWMyaHBablFvS1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTJSdmJtVTZJSFpoYkhWbElEMDlQU0IxYm1SbFptbHVaV1FzSUhaaGJIVmxPaUIyWVd4MVpYMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jM1Z3Y0c5eWRDNXBkR1Z5WVdKc1pTa2dlMXh1SUNBZ0lDQWdhWFJsY21GMGIzSmJVM2x0WW05c0xtbDBaWEpoZEc5eVhTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYVhSbGNtRjBiM0pjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2FYUmxjbUYwYjNKY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlFaGxZV1JsY25Nb2FHVmhaR1Z5Y3lrZ2UxeHVJQ0FnSUhSb2FYTXViV0Z3SUQwZ2UzMWNibHh1SUNBZ0lHbG1JQ2hvWldGa1pYSnpJR2x1YzNSaGJtTmxiMllnU0dWaFpHVnljeWtnZTF4dUlDQWdJQ0FnYUdWaFpHVnljeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLSFpoYkhWbExDQnVZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVhCd1pXNWtLRzVoYldVc0lIWmhiSFZsS1Z4dUlDQWdJQ0FnZlN3Z2RHaHBjeWxjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2FHVmhaR1Z5Y3lrcElIdGNiaUFnSUNBZ0lHaGxZV1JsY25NdVptOXlSV0ZqYUNobWRXNWpkR2x2Ymlob1pXRmtaWElwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoY0hCbGJtUW9hR1ZoWkdWeVd6QmRMQ0JvWldGa1pYSmJNVjBwWEc0Z0lDQWdJQ0I5TENCMGFHbHpLVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9hR1ZoWkdWeWN5a2dlMXh1SUNBZ0lDQWdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9hR1ZoWkdWeWN5a3VabTl5UldGamFDaG1kVzVqZEdsdmJpaHVZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVhCd1pXNWtLRzVoYldVc0lHaGxZV1JsY25OYmJtRnRaVjBwWEc0Z0lDQWdJQ0I5TENCMGFHbHpLVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJRWhsWVdSbGNuTXVjSEp2ZEc5MGVYQmxMbUZ3Y0dWdVpDQTlJR1oxYm1OMGFXOXVLRzVoYldVc0lIWmhiSFZsS1NCN1hHNGdJQ0FnYm1GdFpTQTlJRzV2Y20xaGJHbDZaVTVoYldVb2JtRnRaU2xjYmlBZ0lDQjJZV3gxWlNBOUlHNXZjbTFoYkdsNlpWWmhiSFZsS0haaGJIVmxLVnh1SUNBZ0lIWmhjaUJ2YkdSV1lXeDFaU0E5SUhSb2FYTXViV0Z3VzI1aGJXVmRYRzRnSUNBZ2RHaHBjeTV0WVhCYmJtRnRaVjBnUFNCdmJHUldZV3gxWlNBL0lHOXNaRlpoYkhWbEt5Y3NKeXQyWVd4MVpTQTZJSFpoYkhWbFhHNGdJSDFjYmx4dUlDQklaV0ZrWlhKekxuQnliM1J2ZEhsd1pWc25aR1ZzWlhSbEoxMGdQU0JtZFc1amRHbHZiaWh1WVcxbEtTQjdYRzRnSUNBZ1pHVnNaWFJsSUhSb2FYTXViV0Z3VzI1dmNtMWhiR2w2WlU1aGJXVW9ibUZ0WlNsZFhHNGdJSDFjYmx4dUlDQklaV0ZrWlhKekxuQnliM1J2ZEhsd1pTNW5aWFFnUFNCbWRXNWpkR2x2YmlodVlXMWxLU0I3WEc0Z0lDQWdibUZ0WlNBOUlHNXZjbTFoYkdsNlpVNWhiV1VvYm1GdFpTbGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NW9ZWE1vYm1GdFpTa2dQeUIwYUdsekxtMWhjRnR1WVcxbFhTQTZJRzUxYkd4Y2JpQWdmVnh1WEc0Z0lFaGxZV1JsY25NdWNISnZkRzkwZVhCbExtaGhjeUE5SUdaMWJtTjBhVzl1S0c1aGJXVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV0WVhBdWFHRnpUM2R1VUhKdmNHVnlkSGtvYm05eWJXRnNhWHBsVG1GdFpTaHVZVzFsS1NsY2JpQWdmVnh1WEc0Z0lFaGxZV1JsY25NdWNISnZkRzkwZVhCbExuTmxkQ0E5SUdaMWJtTjBhVzl1S0c1aGJXVXNJSFpoYkhWbEtTQjdYRzRnSUNBZ2RHaHBjeTV0WVhCYmJtOXliV0ZzYVhwbFRtRnRaU2h1WVcxbEtWMGdQU0J1YjNKdFlXeHBlbVZXWVd4MVpTaDJZV3gxWlNsY2JpQWdmVnh1WEc0Z0lFaGxZV1JsY25NdWNISnZkRzkwZVhCbExtWnZja1ZoWTJnZ1BTQm1kVzVqZEdsdmJpaGpZV3hzWW1GamF5d2dkR2hwYzBGeVp5a2dlMXh1SUNBZ0lHWnZjaUFvZG1GeUlHNWhiV1VnYVc0Z2RHaHBjeTV0WVhBcElIdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtMWhjQzVvWVhOUGQyNVFjbTl3WlhKMGVTaHVZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQmpZV3hzWW1GamF5NWpZV3hzS0hSb2FYTkJjbWNzSUhSb2FYTXViV0Z3VzI1aGJXVmRMQ0J1WVcxbExDQjBhR2x6S1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUVobFlXUmxjbk11Y0hKdmRHOTBlWEJsTG10bGVYTWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ2FYUmxiWE1nUFNCYlhWeHVJQ0FnSUhSb2FYTXVabTl5UldGamFDaG1kVzVqZEdsdmJpaDJZV3gxWlN3Z2JtRnRaU2tnZXlCcGRHVnRjeTV3ZFhOb0tHNWhiV1VwSUgwcFhHNGdJQ0FnY21WMGRYSnVJR2wwWlhKaGRHOXlSbTl5S0dsMFpXMXpLVnh1SUNCOVhHNWNiaUFnU0dWaFpHVnljeTV3Y205MGIzUjVjR1V1ZG1Gc2RXVnpJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnZG1GeUlHbDBaVzF6SUQwZ1cxMWNiaUFnSUNCMGFHbHpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9kbUZzZFdVcElIc2dhWFJsYlhNdWNIVnphQ2gyWVd4MVpTa2dmU2xjYmlBZ0lDQnlaWFIxY200Z2FYUmxjbUYwYjNKR2IzSW9hWFJsYlhNcFhHNGdJSDFjYmx4dUlDQklaV0ZrWlhKekxuQnliM1J2ZEhsd1pTNWxiblJ5YVdWeklEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdkbUZ5SUdsMFpXMXpJRDBnVzExY2JpQWdJQ0IwYUdsekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RtRnNkV1VzSUc1aGJXVXBJSHNnYVhSbGJYTXVjSFZ6YUNoYmJtRnRaU3dnZG1Gc2RXVmRLU0I5S1Z4dUlDQWdJSEpsZEhWeWJpQnBkR1Z5WVhSdmNrWnZjaWhwZEdWdGN5bGNiaUFnZlZ4dVhHNGdJR2xtSUNoemRYQndiM0owTG1sMFpYSmhZbXhsS1NCN1hHNGdJQ0FnU0dWaFpHVnljeTV3Y205MGIzUjVjR1ZiVTNsdFltOXNMbWwwWlhKaGRHOXlYU0E5SUVobFlXUmxjbk11Y0hKdmRHOTBlWEJsTG1WdWRISnBaWE5jYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdOdmJuTjFiV1ZrS0dKdlpIa3BJSHRjYmlBZ0lDQnBaaUFvWW05a2VTNWliMlI1VlhObFpDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnFaV04wS0c1bGR5QlVlWEJsUlhKeWIzSW9KMEZzY21WaFpIa2djbVZoWkNjcEtWeHVJQ0FnSUgxY2JpQWdJQ0JpYjJSNUxtSnZaSGxWYzJWa0lEMGdkSEoxWlZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z1ptbHNaVkpsWVdSbGNsSmxZV1I1S0hKbFlXUmxjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJSEpsWVdSbGNpNXZibXh2WVdRZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2h5WldGa1pYSXVjbVZ6ZFd4MEtWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVmhaR1Z5TG05dVpYSnliM0lnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtISmxZV1JsY2k1bGNuSnZjaWxjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnY21WaFpFSnNiMkpCYzBGeWNtRjVRblZtWm1WeUtHSnNiMklwSUh0Y2JpQWdJQ0IyWVhJZ2NtVmhaR1Z5SUQwZ2JtVjNJRVpwYkdWU1pXRmtaWElvS1Z4dUlDQWdJSFpoY2lCd2NtOXRhWE5sSUQwZ1ptbHNaVkpsWVdSbGNsSmxZV1I1S0hKbFlXUmxjaWxjYmlBZ0lDQnlaV0ZrWlhJdWNtVmhaRUZ6UVhKeVlYbENkV1ptWlhJb1lteHZZaWxjYmlBZ0lDQnlaWFIxY200Z2NISnZiV2x6WlZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z2NtVmhaRUpzYjJKQmMxUmxlSFFvWW14dllpa2dlMXh1SUNBZ0lIWmhjaUJ5WldGa1pYSWdQU0J1WlhjZ1JtbHNaVkpsWVdSbGNpZ3BYRzRnSUNBZ2RtRnlJSEJ5YjIxcGMyVWdQU0JtYVd4bFVtVmhaR1Z5VW1WaFpIa29jbVZoWkdWeUtWeHVJQ0FnSUhKbFlXUmxjaTV5WldGa1FYTlVaWGgwS0dKc2IySXBYRzRnSUNBZ2NtVjBkWEp1SUhCeWIyMXBjMlZjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUhKbFlXUkJjbkpoZVVKMVptWmxja0Z6VkdWNGRDaGlkV1lwSUh0Y2JpQWdJQ0IyWVhJZ2RtbGxkeUE5SUc1bGR5QlZhVzUwT0VGeWNtRjVLR0oxWmlsY2JpQWdJQ0IyWVhJZ1kyaGhjbk1nUFNCdVpYY2dRWEp5WVhrb2RtbGxkeTVzWlc1bmRHZ3BYRzVjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFpwWlhjdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR05vWVhKelcybGRJRDBnVTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNoMmFXVjNXMmxkS1Z4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1kyaGhjbk11YW05cGJpZ25KeWxjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdKMVptWmxja05zYjI1bEtHSjFaaWtnZTF4dUlDQWdJR2xtSUNoaWRXWXVjMnhwWTJVcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaWRXWXVjMnhwWTJVb01DbGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZG1GeUlIWnBaWGNnUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2hpZFdZdVlubDBaVXhsYm1kMGFDbGNiaUFnSUNBZ0lIWnBaWGN1YzJWMEtHNWxkeUJWYVc1ME9FRnljbUY1S0dKMVppa3BYRzRnSUNBZ0lDQnlaWFIxY200Z2RtbGxkeTVpZFdabVpYSmNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQkNiMlI1S0NrZ2UxeHVJQ0FnSUhSb2FYTXVZbTlrZVZWelpXUWdQU0JtWVd4elpWeHVYRzRnSUNBZ2RHaHBjeTVmYVc1cGRFSnZaSGtnUFNCbWRXNWpkR2x2YmloaWIyUjVLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWliMlI1U1c1cGRDQTlJR0p2WkhsY2JpQWdJQ0FnSUdsbUlDZ2hZbTlrZVNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aWIyUjVWR1Y0ZENBOUlDY25YRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQmliMlI1SUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWliMlI1VkdWNGRDQTlJR0p2WkhsY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2MzVndjRzl5ZEM1aWJHOWlJQ1ltSUVKc2IySXVjSEp2ZEc5MGVYQmxMbWx6VUhKdmRHOTBlWEJsVDJZb1ltOWtlU2twSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWW05a2VVSnNiMklnUFNCaWIyUjVYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE4xY0hCdmNuUXVabTl5YlVSaGRHRWdKaVlnUm05eWJVUmhkR0V1Y0hKdmRHOTBlWEJsTG1selVISnZkRzkwZVhCbFQyWW9ZbTlrZVNrcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlltOWtlVVp2Y20xRVlYUmhJRDBnWW05a2VWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpkWEJ3YjNKMExuTmxZWEpqYUZCaGNtRnRjeUFtSmlCVlVreFRaV0Z5WTJoUVlYSmhiWE11Y0hKdmRHOTBlWEJsTG1selVISnZkRzkwZVhCbFQyWW9ZbTlrZVNrcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlltOWtlVlJsZUhRZ1BTQmliMlI1TG5SdlUzUnlhVzVuS0NsY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2MzVndjRzl5ZEM1aGNuSmhlVUoxWm1abGNpQW1KaUJ6ZFhCd2IzSjBMbUpzYjJJZ0ppWWdhWE5FWVhSaFZtbGxkeWhpYjJSNUtTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWliMlI1UVhKeVlYbENkV1ptWlhJZ1BTQmlkV1ptWlhKRGJHOXVaU2hpYjJSNUxtSjFabVpsY2lsY2JpQWdJQ0FnSUNBZ0x5OGdTVVVnTVRBdE1URWdZMkZ1SjNRZ2FHRnVaR3hsSUdFZ1JHRjBZVlpwWlhjZ1ltOWtlUzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZbTlrZVVsdWFYUWdQU0J1WlhjZ1FteHZZaWhiZEdocGN5NWZZbTlrZVVGeWNtRjVRblZtWm1WeVhTbGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jM1Z3Y0c5eWRDNWhjbkpoZVVKMVptWmxjaUFtSmlBb1FYSnlZWGxDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbWx6VUhKdmRHOTBlWEJsVDJZb1ltOWtlU2tnZkh3Z2FYTkJjbkpoZVVKMVptWmxjbFpwWlhjb1ltOWtlU2twS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJKdlpIbEJjbkpoZVVKMVptWmxjaUE5SUdKMVptWmxja05zYjI1bEtHSnZaSGtwWEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM1Z1YzNWd2NHOXlkR1ZrSUVKdlpIbEpibWwwSUhSNWNHVW5LVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb0lYUm9hWE11YUdWaFpHVnljeTVuWlhRb0oyTnZiblJsYm5RdGRIbHdaU2NwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdZbTlrZVNBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhsWVdSbGNuTXVjMlYwS0NkamIyNTBaVzUwTFhSNWNHVW5MQ0FuZEdWNGRDOXdiR0ZwYmp0amFHRnljMlYwUFZWVVJpMDRKeWxjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMGFHbHpMbDlpYjJSNVFteHZZaUFtSmlCMGFHbHpMbDlpYjJSNVFteHZZaTUwZVhCbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NW9aV0ZrWlhKekxuTmxkQ2duWTI5dWRHVnVkQzEwZVhCbEp5d2dkR2hwY3k1ZlltOWtlVUpzYjJJdWRIbHdaU2xjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoemRYQndiM0owTG5ObFlYSmphRkJoY21GdGN5QW1KaUJWVWt4VFpXRnlZMmhRWVhKaGJYTXVjSEp2ZEc5MGVYQmxMbWx6VUhKdmRHOTBlWEJsVDJZb1ltOWtlU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1obFlXUmxjbk11YzJWMEtDZGpiMjUwWlc1MExYUjVjR1VuTENBbllYQndiR2xqWVhScGIyNHZlQzEzZDNjdFptOXliUzExY214bGJtTnZaR1ZrTzJOb1lYSnpaWFE5VlZSR0xUZ25LVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hOMWNIQnZjblF1WW14dllpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1aWJHOWlJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5WldwbFkzUmxaQ0E5SUdOdmJuTjFiV1ZrS0hSb2FYTXBYRzRnSUNBZ0lDQWdJR2xtSUNoeVpXcGxZM1JsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaV3BsWTNSbFpGeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJKdlpIbENiRzlpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnpiMngyWlNoMGFHbHpMbDlpYjJSNVFteHZZaWxjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMGFHbHpMbDlpYjJSNVFYSnlZWGxDZFdabVpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLRzVsZHlCQ2JHOWlLRnQwYUdsekxsOWliMlI1UVhKeVlYbENkV1ptWlhKZEtTbGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwYUdsekxsOWliMlI1Um05eWJVUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyTnZkV3hrSUc1dmRDQnlaV0ZrSUVadmNtMUVZWFJoSUdKdlpIa2dZWE1nWW14dllpY3BYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTaHVaWGNnUW14dllpaGJkR2hwY3k1ZlltOWtlVlJsZUhSZEtTbGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IwYUdsekxtRnljbUY1UW5WbVptVnlJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOWliMlI1UVhKeVlYbENkV1ptWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1YzNWdFpXUW9kR2hwY3lrZ2ZId2dVSEp2YldselpTNXlaWE52YkhabEtIUm9hWE11WDJKdlpIbEJjbkpoZVVKMVptWmxjaWxjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWliRzlpS0NrdWRHaGxiaWh5WldGa1FteHZZa0Z6UVhKeVlYbENkV1ptWlhJcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMblJsZUhRZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCeVpXcGxZM1JsWkNBOUlHTnZibk4xYldWa0tIUm9hWE1wWEc0Z0lDQWdJQ0JwWmlBb2NtVnFaV04wWldRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxhbVZqZEdWa1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOWliMlI1UW14dllpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZoWkVKc2IySkJjMVJsZUhRb2RHaHBjeTVmWW05a2VVSnNiMklwWEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVYMkp2WkhsQmNuSmhlVUoxWm1abGNpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaWE52YkhabEtISmxZV1JCY25KaGVVSjFabVpsY2tGelZHVjRkQ2gwYUdsekxsOWliMlI1UVhKeVlYbENkV1ptWlhJcEtWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TGw5aWIyUjVSbTl5YlVSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RqYjNWc1pDQnViM1FnY21WaFpDQkdiM0p0UkdGMFlTQmliMlI1SUdGeklIUmxlSFFuS1Z4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTaDBhR2x6TGw5aWIyUjVWR1Y0ZENsY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2MzVndjRzl5ZEM1bWIzSnRSR0YwWVNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVtYjNKdFJHRjBZU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUwWlhoMEtDa3VkR2hsYmloa1pXTnZaR1VwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1cWMyOXVJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTBaWGgwS0NrdWRHaGxiaWhLVTA5T0xuQmhjbk5sS1Z4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6WEc0Z0lIMWNibHh1SUNBdkx5QklWRlJRSUcxbGRHaHZaSE1nZDJodmMyVWdZMkZ3YVhSaGJHbDZZWFJwYjI0Z2MyaHZkV3hrSUdKbElHNXZjbTFoYkdsNlpXUmNiaUFnZG1GeUlHMWxkR2h2WkhNZ1BTQmJKMFJGVEVWVVJTY3NJQ2RIUlZRbkxDQW5TRVZCUkNjc0lDZFBVRlJKVDA1VEp5d2dKMUJQVTFRbkxDQW5VRlZVSjExY2JseHVJQ0JtZFc1amRHbHZiaUJ1YjNKdFlXeHBlbVZOWlhSb2IyUW9iV1YwYUc5a0tTQjdYRzRnSUNBZ2RtRnlJSFZ3WTJGelpXUWdQU0J0WlhSb2IyUXVkRzlWY0hCbGNrTmhjMlVvS1Z4dUlDQWdJSEpsZEhWeWJpQW9iV1YwYUc5a2N5NXBibVJsZUU5bUtIVndZMkZ6WldRcElENGdMVEVwSUQ4Z2RYQmpZWE5sWkNBNklHMWxkR2h2WkZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z1VtVnhkV1Z6ZENocGJuQjFkQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJRzl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpJSHg4SUh0OVhHNGdJQ0FnZG1GeUlHSnZaSGtnUFNCdmNIUnBiMjV6TG1KdlpIbGNibHh1SUNBZ0lHbG1JQ2hwYm5CMWRDQnBibk4wWVc1alpXOW1JRkpsY1hWbGMzUXBJSHRjYmlBZ0lDQWdJR2xtSUNocGJuQjFkQzVpYjJSNVZYTmxaQ2tnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZEJiSEpsWVdSNUlISmxZV1FuS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZEdocGN5NTFjbXdnUFNCcGJuQjFkQzUxY214Y2JpQWdJQ0FnSUhSb2FYTXVZM0psWkdWdWRHbGhiSE1nUFNCcGJuQjFkQzVqY21Wa1pXNTBhV0ZzYzF4dUlDQWdJQ0FnYVdZZ0tDRnZjSFJwYjI1ekxtaGxZV1JsY25NcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1b1pXRmtaWEp6SUQwZ2JtVjNJRWhsWVdSbGNuTW9hVzV3ZFhRdWFHVmhaR1Z5Y3lsY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhSb2FYTXViV1YwYUc5a0lEMGdhVzV3ZFhRdWJXVjBhRzlrWEc0Z0lDQWdJQ0IwYUdsekxtMXZaR1VnUFNCcGJuQjFkQzV0YjJSbFhHNGdJQ0FnSUNCcFppQW9JV0p2WkhrZ0ppWWdhVzV3ZFhRdVgySnZaSGxKYm1sMElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdZbTlrZVNBOUlHbHVjSFYwTGw5aWIyUjVTVzVwZEZ4dUlDQWdJQ0FnSUNCcGJuQjFkQzVpYjJSNVZYTmxaQ0E5SUhSeWRXVmNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NTFjbXdnUFNCVGRISnBibWNvYVc1d2RYUXBYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVqY21Wa1pXNTBhV0ZzY3lBOUlHOXdkR2x2Ym5NdVkzSmxaR1Z1ZEdsaGJITWdmSHdnZEdocGN5NWpjbVZrWlc1MGFXRnNjeUI4ZkNBbmIyMXBkQ2RjYmlBZ0lDQnBaaUFvYjNCMGFXOXVjeTVvWldGa1pYSnpJSHg4SUNGMGFHbHpMbWhsWVdSbGNuTXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWFHVmhaR1Z5Y3lBOUlHNWxkeUJJWldGa1pYSnpLRzl3ZEdsdmJuTXVhR1ZoWkdWeWN5bGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NXRaWFJvYjJRZ1BTQnViM0p0WVd4cGVtVk5aWFJvYjJRb2IzQjBhVzl1Y3k1dFpYUm9iMlFnZkh3Z2RHaHBjeTV0WlhSb2IyUWdmSHdnSjBkRlZDY3BYRzRnSUNBZ2RHaHBjeTV0YjJSbElEMGdiM0IwYVc5dWN5NXRiMlJsSUh4OElIUm9hWE11Ylc5a1pTQjhmQ0J1ZFd4c1hHNGdJQ0FnZEdocGN5NXlaV1psY25KbGNpQTlJRzUxYkd4Y2JseHVJQ0FnSUdsbUlDZ29kR2hwY3k1dFpYUm9iMlFnUFQwOUlDZEhSVlFuSUh4OElIUm9hWE11YldWMGFHOWtJRDA5UFNBblNFVkJSQ2NwSUNZbUlHSnZaSGtwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owSnZaSGtnYm05MElHRnNiRzkzWldRZ1ptOXlJRWRGVkNCdmNpQklSVUZFSUhKbGNYVmxjM1J6SnlsY2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1ZmFXNXBkRUp2Wkhrb1ltOWtlU2xjYmlBZ2ZWeHVYRzRnSUZKbGNYVmxjM1F1Y0hKdmRHOTBlWEJsTG1Oc2IyNWxJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCU1pYRjFaWE4wS0hSb2FYTXNJSHNnWW05a2VUb2dkR2hwY3k1ZlltOWtlVWx1YVhRZ2ZTbGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJR1JsWTI5a1pTaGliMlI1S1NCN1hHNGdJQ0FnZG1GeUlHWnZjbTBnUFNCdVpYY2dSbTl5YlVSaGRHRW9LVnh1SUNBZ0lHSnZaSGt1ZEhKcGJTZ3BMbk53YkdsMEtDY21KeWt1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhpZVhSbGN5a2dlMXh1SUNBZ0lDQWdhV1lnS0dKNWRHVnpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpjR3hwZENBOUlHSjVkR1Z6TG5Od2JHbDBLQ2M5SnlsY2JpQWdJQ0FnSUNBZ2RtRnlJRzVoYldVZ1BTQnpjR3hwZEM1emFHbG1kQ2dwTG5KbGNHeGhZMlVvTDF4Y0t5OW5MQ0FuSUNjcFhHNGdJQ0FnSUNBZ0lIWmhjaUIyWVd4MVpTQTlJSE53YkdsMExtcHZhVzRvSnowbktTNXlaWEJzWVdObEtDOWNYQ3N2Wnl3Z0p5QW5LVnh1SUNBZ0lDQWdJQ0JtYjNKdExtRndjR1Z1WkNoa1pXTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb2JtRnRaU2tzSUdSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENoMllXeDFaU2twWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2xjYmlBZ0lDQnlaWFIxY200Z1ptOXliVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnY0dGeWMyVklaV0ZrWlhKektISmhkMGhsWVdSbGNuTXBJSHRjYmlBZ0lDQjJZWElnYUdWaFpHVnljeUE5SUc1bGR5QklaV0ZrWlhKektDbGNiaUFnSUNCeVlYZElaV0ZrWlhKekxuTndiR2wwS0M5Y1hISS9YRnh1THlrdVptOXlSV0ZqYUNobWRXNWpkR2x2Ymloc2FXNWxLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2NHRnlkSE1nUFNCc2FXNWxMbk53YkdsMEtDYzZKeWxjYmlBZ0lDQWdJSFpoY2lCclpYa2dQU0J3WVhKMGN5NXphR2xtZENncExuUnlhVzBvS1Z4dUlDQWdJQ0FnYVdZZ0tHdGxlU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdkbUZzZFdVZ1BTQndZWEowY3k1cWIybHVLQ2M2SnlrdWRISnBiU2dwWEc0Z0lDQWdJQ0FnSUdobFlXUmxjbk11WVhCd1pXNWtLR3RsZVN3Z2RtRnNkV1VwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2xjYmlBZ0lDQnlaWFIxY200Z2FHVmhaR1Z5YzF4dUlDQjlYRzVjYmlBZ1FtOWtlUzVqWVd4c0tGSmxjWFZsYzNRdWNISnZkRzkwZVhCbEtWeHVYRzRnSUdaMWJtTjBhVzl1SUZKbGMzQnZibk5sS0dKdlpIbEpibWwwTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnYVdZZ0tDRnZjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1eklEMGdlMzFjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG5SNWNHVWdQU0FuWkdWbVlYVnNkQ2RjYmlBZ0lDQjBhR2x6TG5OMFlYUjFjeUE5SUNkemRHRjBkWE1uSUdsdUlHOXdkR2x2Ym5NZ1B5QnZjSFJwYjI1ekxuTjBZWFIxY3lBNklESXdNRnh1SUNBZ0lIUm9hWE11YjJzZ1BTQjBhR2x6TG5OMFlYUjFjeUErUFNBeU1EQWdKaVlnZEdocGN5NXpkR0YwZFhNZ1BDQXpNREJjYmlBZ0lDQjBhR2x6TG5OMFlYUjFjMVJsZUhRZ1BTQW5jM1JoZEhWelZHVjRkQ2NnYVc0Z2IzQjBhVzl1Y3lBL0lHOXdkR2x2Ym5NdWMzUmhkSFZ6VkdWNGRDQTZJQ2RQU3lkY2JpQWdJQ0IwYUdsekxtaGxZV1JsY25NZ1BTQnVaWGNnU0dWaFpHVnljeWh2Y0hScGIyNXpMbWhsWVdSbGNuTXBYRzRnSUNBZ2RHaHBjeTUxY213Z1BTQnZjSFJwYjI1ekxuVnliQ0I4ZkNBbkoxeHVJQ0FnSUhSb2FYTXVYMmx1YVhSQ2IyUjVLR0p2WkhsSmJtbDBLVnh1SUNCOVhHNWNiaUFnUW05a2VTNWpZV3hzS0ZKbGMzQnZibk5sTG5CeWIzUnZkSGx3WlNsY2JseHVJQ0JTWlhOd2IyNXpaUzV3Y205MGIzUjVjR1V1WTJ4dmJtVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZKbGMzQnZibk5sS0hSb2FYTXVYMkp2WkhsSmJtbDBMQ0I3WEc0Z0lDQWdJQ0J6ZEdGMGRYTTZJSFJvYVhNdWMzUmhkSFZ6TEZ4dUlDQWdJQ0FnYzNSaGRIVnpWR1Y0ZERvZ2RHaHBjeTV6ZEdGMGRYTlVaWGgwTEZ4dUlDQWdJQ0FnYUdWaFpHVnljem9nYm1WM0lFaGxZV1JsY25Nb2RHaHBjeTVvWldGa1pYSnpLU3hjYmlBZ0lDQWdJSFZ5YkRvZ2RHaHBjeTUxY214Y2JpQWdJQ0I5S1Z4dUlDQjlYRzVjYmlBZ1VtVnpjRzl1YzJVdVpYSnliM0lnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCMllYSWdjbVZ6Y0c5dWMyVWdQU0J1WlhjZ1VtVnpjRzl1YzJVb2JuVnNiQ3dnZTNOMFlYUjFjem9nTUN3Z2MzUmhkSFZ6VkdWNGREb2dKeWQ5S1Z4dUlDQWdJSEpsYzNCdmJuTmxMblI1Y0dVZ1BTQW5aWEp5YjNJblhHNGdJQ0FnY21WMGRYSnVJSEpsYzNCdmJuTmxYRzRnSUgxY2JseHVJQ0IyWVhJZ2NtVmthWEpsWTNSVGRHRjBkWE5sY3lBOUlGc3pNREVzSURNd01pd2dNekF6TENBek1EY3NJRE13T0YxY2JseHVJQ0JTWlhOd2IyNXpaUzV5WldScGNtVmpkQ0E5SUdaMWJtTjBhVzl1S0hWeWJDd2djM1JoZEhWektTQjdYRzRnSUNBZ2FXWWdLSEpsWkdseVpXTjBVM1JoZEhWelpYTXVhVzVrWlhoUFppaHpkR0YwZFhNcElEMDlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGSmhibWRsUlhKeWIzSW9KMGx1ZG1Gc2FXUWdjM1JoZEhWeklHTnZaR1VuS1Z4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVW1WemNHOXVjMlVvYm5Wc2JDd2dlM04wWVhSMWN6b2djM1JoZEhWekxDQm9aV0ZrWlhKek9pQjdiRzlqWVhScGIyNDZJSFZ5YkgxOUtWeHVJQ0I5WEc1Y2JpQWdjMlZzWmk1SVpXRmtaWEp6SUQwZ1NHVmhaR1Z5YzF4dUlDQnpaV3htTGxKbGNYVmxjM1FnUFNCU1pYRjFaWE4wWEc0Z0lITmxiR1l1VW1WemNHOXVjMlVnUFNCU1pYTndiMjV6WlZ4dVhHNGdJSE5sYkdZdVptVjBZMmdnUFNCbWRXNWpkR2x2YmlocGJuQjFkQ3dnYVc1cGRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lIWmhjaUJ5WlhGMVpYTjBJRDBnYm1WM0lGSmxjWFZsYzNRb2FXNXdkWFFzSUdsdWFYUXBYRzRnSUNBZ0lDQjJZWElnZUdoeUlEMGdibVYzSUZoTlRFaDBkSEJTWlhGMVpYTjBLQ2xjYmx4dUlDQWdJQ0FnZUdoeUxtOXViRzloWkNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2IzQjBhVzl1Y3lBOUlIdGNiaUFnSUNBZ0lDQWdJQ0J6ZEdGMGRYTTZJSGhvY2k1emRHRjBkWE1zWEc0Z0lDQWdJQ0FnSUNBZ2MzUmhkSFZ6VkdWNGREb2dlR2h5TG5OMFlYUjFjMVJsZUhRc1hHNGdJQ0FnSUNBZ0lDQWdhR1ZoWkdWeWN6b2djR0Z5YzJWSVpXRmtaWEp6S0hob2NpNW5aWFJCYkd4U1pYTndiMjV6WlVobFlXUmxjbk1vS1NCOGZDQW5KeWxjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6TG5WeWJDQTlJQ2R5WlhOd2IyNXpaVlZTVENjZ2FXNGdlR2h5SUQ4Z2VHaHlMbkpsYzNCdmJuTmxWVkpNSURvZ2IzQjBhVzl1Y3k1b1pXRmtaWEp6TG1kbGRDZ25XQzFTWlhGMVpYTjBMVlZTVENjcFhHNGdJQ0FnSUNBZ0lIWmhjaUJpYjJSNUlEMGdKM0psYzNCdmJuTmxKeUJwYmlCNGFISWdQeUI0YUhJdWNtVnpjRzl1YzJVZ09pQjRhSEl1Y21WemNHOXVjMlZVWlhoMFhHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JtVjNJRkpsYzNCdmJuTmxLR0p2Wkhrc0lHOXdkR2x2Ym5NcEtWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjRhSEl1YjI1bGNuSnZjaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb2JtVjNJRlI1Y0dWRmNuSnZjaWduVG1WMGQyOXlheUJ5WlhGMVpYTjBJR1poYVd4bFpDY3BLVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0I0YUhJdWIyNTBhVzFsYjNWMElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2h1WlhjZ1ZIbHdaVVZ5Y205eUtDZE9aWFIzYjNKcklISmxjWFZsYzNRZ1ptRnBiR1ZrSnlrcFhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIaG9jaTV2Y0dWdUtISmxjWFZsYzNRdWJXVjBhRzlrTENCeVpYRjFaWE4wTG5WeWJDd2dkSEoxWlNsY2JseHVJQ0FnSUNBZ2FXWWdLSEpsY1hWbGMzUXVZM0psWkdWdWRHbGhiSE1nUFQwOUlDZHBibU5zZFdSbEp5a2dlMXh1SUNBZ0lDQWdJQ0I0YUhJdWQybDBhRU55WldSbGJuUnBZV3h6SUQwZ2RISjFaVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb0ozSmxjM0J2Ym5ObFZIbHdaU2NnYVc0Z2VHaHlJQ1ltSUhOMWNIQnZjblF1WW14dllpa2dlMXh1SUNBZ0lDQWdJQ0I0YUhJdWNtVnpjRzl1YzJWVWVYQmxJRDBnSjJKc2IySW5YRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsY1hWbGMzUXVhR1ZoWkdWeWN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUtIWmhiSFZsTENCdVlXMWxLU0I3WEc0Z0lDQWdJQ0FnSUhob2NpNXpaWFJTWlhGMVpYTjBTR1ZoWkdWeUtHNWhiV1VzSUhaaGJIVmxLVnh1SUNBZ0lDQWdmU2xjYmx4dUlDQWdJQ0FnZUdoeUxuTmxibVFvZEhsd1pXOW1JSEpsY1hWbGMzUXVYMkp2WkhsSmJtbDBJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JRzUxYkd3Z09pQnlaWEYxWlhOMExsOWliMlI1U1c1cGRDbGNiaUFnSUNCOUtWeHVJQ0I5WEc0Z0lITmxiR1l1Wm1WMFkyZ3VjRzlzZVdacGJHd2dQU0IwY25WbFhHNTlLU2gwZVhCbGIyWWdjMlZzWmlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCelpXeG1JRG9nZEdocGN5azdYRzRpWFgwPVxuIl19
